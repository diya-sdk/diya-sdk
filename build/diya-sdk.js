!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.d1=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */
;(function(root) {

	// Detect free variables `exports`.
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`.
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code, and use
	// it as `root`.
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var InvalidCharacterError = function(message) {
		this.message = message;
	};
	InvalidCharacterError.prototype = new Error;
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	var error = function(message) {
		// Note: the error messages used throughout this file match those used by
		// the native `atob`/`btoa` implementation in Chromium.
		throw new InvalidCharacterError(message);
	};

	var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	// http://whatwg.org/html/common-microsyntaxes.html#space-character
	var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

	// `decode` is designed to be fully compatible with `atob` as described in the
	// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
	// The optimized base64-decoding algorithm used is based on @atk’s excellent
	// implementation. https://gist.github.com/atk/1020396
	var decode = function(input) {
		input = String(input)
			.replace(REGEX_SPACE_CHARACTERS, '');
		var length = input.length;
		if (length % 4 == 0) {
			input = input.replace(/==?$/, '');
			length = input.length;
		}
		if (
			length % 4 == 1 ||
			// http://whatwg.org/C#alphanumeric-ascii-characters
			/[^+a-zA-Z0-9/]/.test(input)
		) {
			error(
				'Invalid character: the string to be decoded is not correctly encoded.'
			);
		}
		var bitCounter = 0;
		var bitStorage;
		var buffer;
		var output = '';
		var position = -1;
		while (++position < length) {
			buffer = TABLE.indexOf(input.charAt(position));
			bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
			// Unless this is the first of a group of 4 characters…
			if (bitCounter++ % 4) {
				// …convert the first 8 bits to a single ASCII character.
				output += String.fromCharCode(
					0xFF & bitStorage >> (-2 * bitCounter & 6)
				);
			}
		}
		return output;
	};

	// `encode` is designed to be fully compatible with `btoa` as described in the
	// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
	var encode = function(input) {
		input = String(input);
		if (/[^\0-\xFF]/.test(input)) {
			// Note: no need to special-case astral symbols here, as surrogates are
			// matched, and the input is supposed to only contain ASCII anyway.
			error(
				'The string to be encoded contains characters outside of the ' +
				'Latin1 range.'
			);
		}
		var padding = input.length % 3;
		var output = '';
		var position = -1;
		var a;
		var b;
		var c;
		var d;
		var buffer;
		// Make sure any padding is handled outside of the loop.
		var length = input.length - padding;

		while (++position < length) {
			// Read three bytes, i.e. 24 bits.
			a = input.charCodeAt(position) << 16;
			b = input.charCodeAt(++position) << 8;
			c = input.charCodeAt(++position);
			buffer = a + b + c;
			// Turn the 24 bits into four chunks of 6 bits each, and append the
			// matching character for each of them to the output.
			output += (
				TABLE.charAt(buffer >> 18 & 0x3F) +
				TABLE.charAt(buffer >> 12 & 0x3F) +
				TABLE.charAt(buffer >> 6 & 0x3F) +
				TABLE.charAt(buffer & 0x3F)
			);
		}

		if (padding == 2) {
			a = input.charCodeAt(position) << 8;
			b = input.charCodeAt(++position);
			buffer = a + b;
			output += (
				TABLE.charAt(buffer >> 10) +
				TABLE.charAt((buffer >> 4) & 0x3F) +
				TABLE.charAt((buffer << 2) & 0x3F) +
				'='
			);
		} else if (padding == 1) {
			buffer = input.charCodeAt(position);
			output += (
				TABLE.charAt(buffer >> 2) +
				TABLE.charAt((buffer << 4) & 0x3F) +
				'=='
			);
		}

		return output;
	};

	var base64 = {
		'encode': encode,
		'decode': decode,
		'version': '0.1.0'
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return base64;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = base64;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (var key in base64) {
				base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.base64 = base64;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
module.exports=require(2)
},{"/home/sylvmahe/workspace/Apps/diya-sdk/node_modules/browser-resolve/empty.js":2}],4:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],5:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length, unitSize) {
  if (unitSize) length -= length % unitSize;
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":4,"ieee754":8,"is-array":10}],6:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIl19
},{"../../is-buffer/index.js":11}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],8:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],9:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],10:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],11:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],12:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],13:[function(require,module,exports){
/**
 * Utility functions
 */

var util = {};

util.isObject = function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

util.isNumber = function isNumber(arg) {
  return typeof arg === 'number';
}

util.isUndefined = function isUndefined(arg) {
  return arg === void 0;
}

util.isFunction = function isFunction(arg){
  return typeof arg === 'function';
}


/**
 * EventEmitter class
 */

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!util.isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error' && !this._events.error) {
    er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      throw Error('Uncaught, unspecified "error" event.');
    }
    return false;
  }

  handler = this._events[type];

  if (util.isUndefined(handler))
    return false;

  if (util.isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (util.isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              util.isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (util.isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (util.isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!util.isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;

      if (util.isFunction(console.error)) {
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
      }
      if (util.isFunction(console.trace))
        console.trace();
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (util.isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (util.isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (util.isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (Array.isArray(listeners)) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (util.isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (util.isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

},{}],14:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],15:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":16}],16:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbmZvckVhY2gob2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pXG4gICAgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59KTtcblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpXG4gICAgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSlcbiAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpXG4gICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpXG4gICAgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHByb2Nlc3MubmV4dFRpY2sodGhpcy5lbmQuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cbiJdfQ==
},{"./_stream_readable":18,"./_stream_writable":20,"_process":14,"core-util-is":6,"inherits":9}],17:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":19,"core-util-is":6,"inherits":9}],18:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./_stream_duplex":16,"_process":14,"buffer":5,"core-util-is":6,"events":7,"inherits":9,"isarray":12,"stream":25,"string_decoder/":26,"util":2}],19:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":16,"core-util-is":6,"inherits":9}],20:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./_stream_duplex":16,"_process":14,"buffer":5,"core-util-is":6,"inherits":9,"stream":25}],21:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":17}],22:[function(require,module,exports){
(function (process){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
if (!process.browser && process.env.READABLE_STREAM === 'disable') {
  module.exports = require('stream');
}

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbn1cbiJdfQ==
},{"./lib/_stream_duplex.js":16,"./lib/_stream_passthrough.js":17,"./lib/_stream_readable.js":18,"./lib/_stream_transform.js":19,"./lib/_stream_writable.js":20,"_process":14,"stream":25}],23:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":19}],24:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":20}],25:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":7,"inherits":9,"readable-stream/duplex.js":15,"readable-stream/passthrough.js":21,"readable-stream/readable.js":22,"readable-stream/transform.js":23,"readable-stream/writable.js":24}],26:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":5}],27:[function(require,module,exports){
module.exports=require(9)
},{"/home/sylvmahe/workspace/Apps/diya-sdk/node_modules/inherits/inherits_browser.js":9}],28:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],29:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./support/isBuffer":28,"_process":14,"inherits":27}],30:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

// Shimming starts here.
(function() {
  // Utils.
  var logging = require('./utils').log;
  var browserDetails = require('./utils').browserDetails;
  // Export to the adapter global object visible in the browser.
  module.exports.browserDetails = browserDetails;
  module.exports.extractVersion = require('./utils').extractVersion;
  module.exports.disableLog = require('./utils').disableLog;

  // Comment out the line below if you want logging to occur, including logging
  // for the switch statement below. Can also be turned on in the browser via
  // adapter.disableLog(false), but then logging from the switch statement below
  // will not appear.
  require('./utils').disableLog(true);

  // Browser shims.
  var chromeShim = require('./chrome/chrome_shim') || null;
  var edgeShim = require('./edge/edge_shim') || null;
  var firefoxShim = require('./firefox/firefox_shim') || null;
  var safariShim = require('./safari/safari_shim') || null;

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'opera': // fallthrough as it uses chrome shims
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection) {
        logging('Chrome shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = chromeShim;

      chromeShim.shimGetUserMedia();
      chromeShim.shimSourceObject();
      chromeShim.shimPeerConnection();
      chromeShim.shimOnTrack();
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection) {
        logging('Firefox shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = firefoxShim;

      firefoxShim.shimGetUserMedia();
      firefoxShim.shimSourceObject();
      firefoxShim.shimPeerConnection();
      firefoxShim.shimOnTrack();
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection) {
        logging('MS edge shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = edgeShim;

      edgeShim.shimPeerConnection();
      break;
    case 'safari':
      if (!safariShim) {
        logging('Safari shim is not included in this adapter release.');
        return;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      module.exports.browserShim = safariShim;

      safariShim.shimGetUserMedia();
      break;
    default:
      logging('Unsupported browser!');
  }
})();

},{"./chrome/chrome_shim":31,"./edge/edge_shim":34,"./firefox/firefox_shim":35,"./safari/safari_shim":37,"./utils":38}],31:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var logging = require('../utils.js').log;
var browserDetails = require('../utils.js').browserDetails;

var chromeShim = {
  shimOnTrack: function() {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          var self = this;
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', function(te) {
              var event = new Event('track');
              event.track = te.track;
              event.receiver = {track: te.track};
              event.streams = [e.stream];
              self.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        }
      });
    }
  },

  shimSourceObject: function() {
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this._srcObject;
          },
          set: function(stream) {
            var self = this;
            // Use _srcObject as a private property for this shim
            this._srcObject = stream;
            if (this.src) {
              URL.revokeObjectURL(this.src);
            }

            if (!stream) {
              this.src = '';
              return;
            }
            this.src = URL.createObjectURL(stream);
            // We need to recreate the blob url when a track is added or
            // removed. Doing it manually since we want to avoid a recursion.
            stream.addEventListener('addtrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
            stream.addEventListener('removetrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
          }
        });
      }
    }
  },

  shimPeerConnection: function() {
    // The RTCPeerConnection object.
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      // Translate iceTransportPolicy to iceTransports,
      // see https://code.google.com/p/webrtc/issues/detail?id=4869
      logging('PeerConnection');
      if (pcConfig && pcConfig.iceTransportPolicy) {
        pcConfig.iceTransports = pcConfig.iceTransportPolicy;
      }

      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);
      var origGetStats = pc.getStats.bind(pc);
      pc.getStats = function(selector, successCallback, errorCallback) {
        var self = this;
        var args = arguments;

        // If selector is a function then we are in the old style stats so just
        // pass back the original getStats format to avoid breaking old users.
        if (arguments.length > 0 && typeof selector === 'function') {
          return origGetStats(selector, successCallback);
        }

        var fixChromeStats_ = function(response) {
          var standardReport = {};
          var reports = response.result();
          reports.forEach(function(report) {
            var standardStats = {
              id: report.id,
              timestamp: report.timestamp,
              type: report.type
            };
            report.names().forEach(function(name) {
              standardStats[name] = report.stat(name);
            });
            standardReport[standardStats.id] = standardStats;
          });

          return standardReport;
        };

        if (arguments.length >= 2) {
          var successCallbackWrapper_ = function(response) {
            args[1](fixChromeStats_(response));
          };

          return origGetStats.apply(this, [successCallbackWrapper_,
              arguments[0]]);
        }

        // promise-support
        return new Promise(function(resolve, reject) {
          if (args.length === 1 && typeof selector === 'object') {
            origGetStats.apply(self,
                [function(response) {
                  resolve.apply(null, [fixChromeStats_(response)]);
                }, reject]);
          } else {
            origGetStats.apply(self, [resolve, reject]);
          }
        });
      };

      return pc;
    };
    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;

    // wrap static methods. Currently just generateCertificate.
    if (webkitRTCPeerConnection.generateCertificate) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return webkitRTCPeerConnection.generateCertificate;
        }
      });
    }

    // add promise support
    ['createOffer', 'createAnswer'].forEach(function(method) {
      var nativeMethod = webkitRTCPeerConnection.prototype[method];
      webkitRTCPeerConnection.prototype[method] = function() {
        var self = this;
        if (arguments.length < 1 || (arguments.length === 1 &&
            typeof(arguments[0]) === 'object')) {
          var opts = arguments.length === 1 ? arguments[0] : undefined;
          return new Promise(function(resolve, reject) {
            nativeMethod.apply(self, [resolve, reject, opts]);
          });
        }
        return nativeMethod.apply(this, arguments);
      };
    });

    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = webkitRTCPeerConnection.prototype[method];
          webkitRTCPeerConnection.prototype[method] = function() {
            var args = arguments;
            var self = this;
            args[0] = new ((method === 'addIceCandidate')?
                RTCIceCandidate : RTCSessionDescription)(args[0]);
            return new Promise(function(resolve, reject) {
              nativeMethod.apply(self, [args[0],
                  function() {
                    resolve();
                    if (args.length >= 2) {
                      args[1].apply(null, []);
                    }
                  },
                  function(err) {
                    reject(err);
                    if (args.length >= 3) {
                      args[2].apply(null, [err]);
                    }
                  }]
                );
            });
          };
        });
  },

  // Attach a media stream to an element.
  attachMediaStream: function(element, stream) {
    logging('DEPRECATED, attachMediaStream will soon be removed.');
    if (browserDetails.version >= 43) {
      element.srcObject = stream;
    } else if (typeof element.src !== 'undefined') {
      element.src = URL.createObjectURL(stream);
    } else {
      logging('Error attaching stream to element.');
    }
  },

  reattachMediaStream: function(to, from) {
    logging('DEPRECATED, reattachMediaStream will soon be removed.');
    if (browserDetails.version >= 43) {
      to.srcObject = from.srcObject;
    } else {
      to.src = from.src;
    }
  }
};


// Expose public methods.
module.exports = {
  shimOnTrack: chromeShim.shimOnTrack,
  shimSourceObject: chromeShim.shimSourceObject,
  shimPeerConnection: chromeShim.shimPeerConnection,
  shimGetUserMedia: require('./getusermedia'),
  attachMediaStream: chromeShim.attachMediaStream,
  reattachMediaStream: chromeShim.reattachMediaStream
};

},{"../utils.js":38,"./getusermedia":32}],32:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var logging = require('../utils.js').log;

// Expose public methods.
module.exports = function() {
  var constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var getUserMedia_ = function(constraints, onSuccess, onError) {
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints.audio) {
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints.video) {
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return navigator.webkitGetUserMedia(constraints, onSuccess, onError);
  };
  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {
      getUserMedia: getUserMediaPromise_,
      enumerateDevices: function() {
        return new Promise(function(resolve) {
          var kinds = {audio: 'audioinput', video: 'videoinput'};
          return MediaStreamTrack.getSources(function(devices) {
            resolve(devices.map(function(device) {
              return {label: device.label,
                      kind: kinds[device.kind],
                      deviceId: device.id,
                      groupId: ''};
            }));
          });
        });
      }
    };
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return getUserMediaPromise_(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (c) {
        logging('spec:   ' + JSON.stringify(c)); // whitespace for alignment
        c.audio = constraintsToChrome_(c.audio);
        c.video = constraintsToChrome_(c.video);
        logging('chrome: ' + JSON.stringify(c));
      }
      return origGetUserMedia(c);
    }.bind(this);
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      logging('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      logging('Dummy mediaDevices.removeEventListener called.');
    };
  }
};

},{"../utils.js":38}],33:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      default: // Unknown extensions are silently ignored.
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress); // was: relAddr
    sdp.push('rport');
    sdp.push(candidate.relatedPort); // was: relPort
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  // was: channels
  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
       ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      params.push(param + '=' + codec.parameters[param]);
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + ' ' + fb.parameter +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.splitLines(mediaSection);
  // Search in session part, too.
  lines = lines.concat(SDPUtils.splitLines(sessionpart));
  var fpLine = lines.filter(function(line) {
    return line.indexOf('a=fingerprint:') === 0;
  })[0].substr(14);
  // Note: a=setup line is ignored since we use the 'auto' role.
  var dtlsParameters = {
    role: 'auto',
    fingerprints: [{
      algorithm: fpLine.split(' ')[0],
      value: fpLine.split(' ')[1]
    }]
  };
  return dtlsParameters;
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};
// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.splitLines(mediaSection);
  // Search in session part, too.
  lines = lines.concat(SDPUtils.splitLines(sessionpart));
  var iceParameters = {
    usernameFragment: lines.filter(function(line) {
      return line.indexOf('a=ice-ufrag:') === 0;
    })[0].substr(12),
    password: lines.filter(function(line) {
      return line.indexOf('a=ice-pwd:') === 0;
    })[0].substr(10)
  };
  return iceParameters;
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
          mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
          mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  // FIXME: add headerExtensions, fecMechanismş and rtcp.
  sdp += 'a=rtcp-mux\r\n';
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
  .map(function(line) {
    return SDPUtils.parseSsrcMedia(line);
  })
  .filter(function(parts) {
    return parts.attribute === 'cname';
  });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
  .map(function(line) {
    var parts = line.split(' ');
    parts.shift();
    return parts.map(function(part) {
      return parseInt(part, 10);
    });
  });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
        rtx: {
          ssrc: secondarySsrc
        }
      };
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: secondarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(5), 10);
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

SDPUtils.writeSessionBoilerplate = function() {
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.
  if (transceiver.rtpSender) {
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

// Expose public methods.
module.exports = SDPUtils;

},{}],34:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('./edge_sdp');
var logging = require('../utils').log;

var edgeShim = {
  shimPeerConnection: function() {
    if (window.RTCIceGatherer) {
      // ORTC defines an RTCIceCandidate object but no constructor.
      // Not implemented in Edge.
      if (!window.RTCIceCandidate) {
        window.RTCIceCandidate = function(args) {
          return args;
        };
      }
      // ORTC does not have a session description object but
      // other browsers (i.e. Chrome) that will support both PC and ORTC
      // in the future might have this defined already.
      if (!window.RTCSessionDescription) {
        window.RTCSessionDescription = function(args) {
          return args;
        };
      }
    }

    window.RTCPeerConnection = function(config) {
      var self = this;

      var _eventTarget = document.createDocumentFragment();
      ['addEventListener', 'removeEventListener', 'dispatchEvent']
          .forEach(function(method) {
            self[method] = _eventTarget[method].bind(_eventTarget);
          });

      this.onicecandidate = null;
      this.onaddstream = null;
      this.ontrack = null;
      this.onremovestream = null;
      this.onsignalingstatechange = null;
      this.oniceconnectionstatechange = null;
      this.onnegotiationneeded = null;
      this.ondatachannel = null;

      this.localStreams = [];
      this.remoteStreams = [];
      this.getLocalStreams = function() {
        return self.localStreams;
      };
      this.getRemoteStreams = function() {
        return self.remoteStreams;
      };

      this.localDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.remoteDescription = new RTCSessionDescription({
        type: '',
        sdp: ''
      });
      this.signalingState = 'stable';
      this.iceConnectionState = 'new';
      this.iceGatheringState = 'new';

      this.iceOptions = {
        gatherPolicy: 'all',
        iceServers: []
      };
      if (config && config.iceTransportPolicy) {
        switch (config.iceTransportPolicy) {
          case 'all':
          case 'relay':
            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
            break;
          case 'none':
            // FIXME: remove once implementation and spec have added this.
            throw new TypeError('iceTransportPolicy "none" not supported');
          default:
            // don't set iceTransportPolicy.
            break;
        }
      }
      if (config && config.iceServers) {
        // Edge does not like
        // 1) stun:
        // 2) turn: that does not have all of turn:host:port?transport=udp
        this.iceOptions.iceServers = config.iceServers.filter(function(server) {
          if (server && server.urls) {
            server.urls = server.urls.filter(function(url) {
              return url.indexOf('turn:') === 0 &&
                  url.indexOf('transport=udp') !== -1;
            })[0];
            return !!server.urls;
          }
          return false;
        });
      }

      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
      // everything that is needed to describe a SDP m-line.
      this.transceivers = [];

      // since the iceGatherer is currently created in createOffer but we
      // must not emit candidates until after setLocalDescription we buffer
      // them in this array.
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
      var self = this;
      var sections = SDPUtils.splitSections(self.localDescription.sdp);
      // FIXME: need to apply ice candidates in a way which is async but
      // in-order
      this._localIceCandidatesBuffer.forEach(function(event) {
        var end = !event.candidate || Object.keys(event.candidate).length === 0;
        if (end) {
          for (var j = 1; j < sections.length; j++) {
            if (sections[j].indexOf('\r\na=end-of-candidates\r\n') === -1) {
              sections[j] += 'a=end-of-candidates\r\n';
            }
          }
        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')
            === -1) {
          sections[event.candidate.sdpMLineIndex + 1] +=
              'a=' + event.candidate.candidate + '\r\n';
        }
        self.localDescription.sdp = sections.join('');
        self.dispatchEvent(event);
        if (self.onicecandidate !== null) {
          self.onicecandidate(event);
        }
        if (!event.candidate && self.iceGatheringState !== 'complete') {
          var complete = self.transceivers.every(function(transceiver) {
            return transceiver.iceGatherer &&
                transceiver.iceGatherer.state === 'completed';
          });
          if (complete) {
            self.iceGatheringState = 'complete';
          }
        }
      });
      this._localIceCandidatesBuffer = [];
    };

    window.RTCPeerConnection.prototype.addStream = function(stream) {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      this.localStreams.push(stream.clone());
      this._maybeFireNegotiationNeeded();
    };

    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var idx = this.localStreams.indexOf(stream);
      if (idx > -1) {
        this.localStreams.splice(idx, 1);
        this._maybeFireNegotiationNeeded();
      }
    };

    // Determines the intersection of local and remote capabilities.
    window.RTCPeerConnection.prototype._getCommonCapabilities =
        function(localCapabilities, remoteCapabilities) {
          var commonCapabilities = {
            codecs: [],
            headerExtensions: [],
            fecMechanisms: []
          };
          localCapabilities.codecs.forEach(function(lCodec) {
            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
              var rCodec = remoteCapabilities.codecs[i];
              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
                  lCodec.clockRate === rCodec.clockRate &&
                  lCodec.numChannels === rCodec.numChannels) {
                // push rCodec so we reply with offerer payload type
                commonCapabilities.codecs.push(rCodec);

                // FIXME: also need to determine intersection between
                // .rtcpFeedback and .parameters
                break;
              }
            }
          });

          localCapabilities.headerExtensions
              .forEach(function(lHeaderExtension) {
                for (var i = 0; i < remoteCapabilities.headerExtensions.length;
                     i++) {
                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];
                  if (lHeaderExtension.uri === rHeaderExtension.uri) {
                    commonCapabilities.headerExtensions.push(rHeaderExtension);
                    break;
                  }
                }
              });

          // FIXME: fecMechanisms
          return commonCapabilities;
        };

    // Create ICE gatherer, ICE transport and DTLS transport.
    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
        function(mid, sdpMLineIndex) {
          var self = this;
          var iceGatherer = new RTCIceGatherer(self.iceOptions);
          var iceTransport = new RTCIceTransport(iceGatherer);
          iceGatherer.onlocalcandidate = function(evt) {
            var event = new Event('icecandidate');
            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

            var cand = evt.candidate;
            var end = !cand || Object.keys(cand).length === 0;
            // Edge emits an empty object for RTCIceCandidateComplete‥
            if (end) {
              // polyfill since RTCIceGatherer.state is not implemented in
              // Edge 10547 yet.
              if (iceGatherer.state === undefined) {
                iceGatherer.state = 'completed';
              }

              // Emit a candidate with type endOfCandidates to make the samples
              // work. Edge requires addIceCandidate with this empty candidate
              // to start checking. The real solution is to signal
              // end-of-candidates to the other side when getting the null
              // candidate but some apps (like the samples) don't do that.
              event.candidate.candidate =
                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
            } else {
              // RTCIceCandidate doesn't have a component, needs to be added
              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
              event.candidate.candidate = SDPUtils.writeCandidate(cand);
            }

            var complete = self.transceivers.every(function(transceiver) {
              return transceiver.iceGatherer &&
                  transceiver.iceGatherer.state === 'completed';
            });

            // Emit candidate if localDescription is set.
            // Also emits null candidate when all gatherers are complete.
            switch (self.iceGatheringState) {
              case 'new':
                self._localIceCandidatesBuffer.push(event);
                if (end && complete) {
                  self._localIceCandidatesBuffer.push(
                      new Event('icecandidate'));
                }
                break;
              case 'gathering':
                self._emitBufferedCandidates();
                self.dispatchEvent(event);
                if (self.onicecandidate !== null) {
                  self.onicecandidate(event);
                }
                if (complete) {
                  self.dispatchEvent(new Event('icecandidate'));
                  if (self.onicecandidate !== null) {
                    self.onicecandidate(new Event('icecandidate'));
                  }
                  self.iceGatheringState = 'complete';
                }
                break;
              case 'complete':
                // should not happen... currently!
                break;
              default: // no-op.
                break;
            }
          };
          iceTransport.onicestatechange = function() {
            self._updateConnectionState();
          };

          var dtlsTransport = new RTCDtlsTransport(iceTransport);
          dtlsTransport.ondtlsstatechange = function() {
            self._updateConnectionState();
          };
          dtlsTransport.onerror = function() {
            // onerror does not set state to failed by itself.
            dtlsTransport.state = 'failed';
            self._updateConnectionState();
          };

          return {
            iceGatherer: iceGatherer,
            iceTransport: iceTransport,
            dtlsTransport: dtlsTransport
          };
        };

    // Start the RTP Sender and Receiver for a transceiver.
    window.RTCPeerConnection.prototype._transceive = function(transceiver,
        send, recv) {
      var params = this._getCommonCapabilities(transceiver.localCapabilities,
          transceiver.remoteCapabilities);
      if (send && transceiver.rtpSender) {
        params.encodings = transceiver.sendEncodingParameters;
        params.rtcp = {
          cname: SDPUtils.localCName
        };
        if (transceiver.recvEncodingParameters.length) {
          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
        }
        transceiver.rtpSender.send(params);
      }
      if (recv && transceiver.rtpReceiver) {
        params.encodings = transceiver.recvEncodingParameters;
        params.rtcp = {
          cname: transceiver.cname
        };
        if (transceiver.sendEncodingParameters.length) {
          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
        }
        transceiver.rtpReceiver.receive(params);
      }
    };

    window.RTCPeerConnection.prototype.setLocalDescription =
        function(description) {
          var self = this;
          var sections;
          var sessionpart;
          if (description.type === 'offer') {
            // FIXME: What was the purpose of this empty if statement?
            // if (!this._pendingOffer) {
            // } else {
            if (this._pendingOffer) {
              // VERY limited support for SDP munging. Limited to:
              // * changing the order of codecs
              sections = SDPUtils.splitSections(description.sdp);
              sessionpart = sections.shift();
              sections.forEach(function(mediaSection, sdpMLineIndex) {
                var caps = SDPUtils.parseRtpParameters(mediaSection);
                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;
              });
              this.transceivers = this._pendingOffer;
              delete this._pendingOffer;
            }
          } else if (description.type === 'answer') {
            sections = SDPUtils.splitSections(self.remoteDescription.sdp);
            sessionpart = sections.shift();
            sections.forEach(function(mediaSection, sdpMLineIndex) {
              var transceiver = self.transceivers[sdpMLineIndex];
              var iceGatherer = transceiver.iceGatherer;
              var iceTransport = transceiver.iceTransport;
              var dtlsTransport = transceiver.dtlsTransport;
              var localCapabilities = transceiver.localCapabilities;
              var remoteCapabilities = transceiver.remoteCapabilities;
              var rejected = mediaSection.split('\n', 1)[0]
                  .split(' ', 2)[1] === '0';

              if (!rejected) {
                var remoteIceParameters = SDPUtils.getIceParameters(
                    mediaSection, sessionpart);
                iceTransport.start(iceGatherer, remoteIceParameters,
                    'controlled');

                var remoteDtlsParameters = SDPUtils.getDtlsParameters(
                    mediaSection, sessionpart);
                dtlsTransport.start(remoteDtlsParameters);

                // Calculate intersection of capabilities.
                var params = self._getCommonCapabilities(localCapabilities,
                    remoteCapabilities);

                // Start the RTCRtpSender. The RTCRtpReceiver for this
                // transceiver has already been started in setRemoteDescription.
                self._transceive(transceiver,
                    params.codecs.length > 0,
                    false);
              }
            });
          }

          this.localDescription = {
            type: description.type,
            sdp: description.sdp
          };
          switch (description.type) {
            case 'offer':
              this._updateSignalingState('have-local-offer');
              break;
            case 'answer':
              this._updateSignalingState('stable');
              break;
            default:
              throw new TypeError('unsupported type "' + description.type +
                  '"');
          }

          // If a success callback was provided, emit ICE candidates after it
          // has been executed. Otherwise, emit callback after the Promise is
          // resolved.
          var hasCallback = arguments.length > 1 &&
            typeof arguments[1] === 'function';
          if (hasCallback) {
            var cb = arguments[1];
            window.setTimeout(function() {
              cb();
              if (self.iceGatheringState === 'new') {
                self.iceGatheringState = 'gathering';
              }
              self._emitBufferedCandidates();
            }, 0);
          }
          var p = Promise.resolve();
          p.then(function() {
            if (!hasCallback) {
              if (self.iceGatheringState === 'new') {
                self.iceGatheringState = 'gathering';
              }
              // Usually candidates will be emitted earlier.
              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);
            }
          });
          return p;
        };

    window.RTCPeerConnection.prototype.setRemoteDescription =
        function(description) {
          var self = this;
          var stream = new MediaStream();
          var receiverList = [];
          var sections = SDPUtils.splitSections(description.sdp);
          var sessionpart = sections.shift();
          sections.forEach(function(mediaSection, sdpMLineIndex) {
            var lines = SDPUtils.splitLines(mediaSection);
            var mline = lines[0].substr(2).split(' ');
            var kind = mline[0];
            var rejected = mline[1] === '0';
            var direction = SDPUtils.getDirection(mediaSection, sessionpart);

            var transceiver;
            var iceGatherer;
            var iceTransport;
            var dtlsTransport;
            var rtpSender;
            var rtpReceiver;
            var sendEncodingParameters;
            var recvEncodingParameters;
            var localCapabilities;

            var track;
            // FIXME: ensure the mediaSection has rtcp-mux set.
            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
            var remoteIceParameters;
            var remoteDtlsParameters;
            if (!rejected) {
              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
                  sessionpart);
              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
                  sessionpart);
            }
            recvEncodingParameters =
                SDPUtils.parseRtpEncodingParameters(mediaSection);

            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');
            if (mid.length) {
              mid = mid[0].substr(6);
            } else {
              mid = SDPUtils.generateIdentifier();
            }

            var cname;
            // Gets the first SSRC. Note that with RTX there might be multiple
            // SSRCs.
            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
                .map(function(line) {
                  return SDPUtils.parseSsrcMedia(line);
                })
                .filter(function(obj) {
                  return obj.attribute === 'cname';
                })[0];
            if (remoteSsrc) {
              cname = remoteSsrc.value;
            }

            var isComplete = SDPUtils.matchPrefix(mediaSection,
                'a=end-of-candidates').length > 0;
            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
                .map(function(cand) {
                  return SDPUtils.parseCandidate(cand);
                })
                .filter(function(cand) {
                  return cand.component === '1';
                });
            if (description.type === 'offer' && !rejected) {
              var transports = self._createIceAndDtlsTransports(mid,
                  sdpMLineIndex);
              if (isComplete) {
                transports.iceTransport.setRemoteCandidates(cands);
              }

              localCapabilities = RTCRtpReceiver.getCapabilities(kind);
              sendEncodingParameters = [{
                ssrc: (2 * sdpMLineIndex + 2) * 1001
              }];

              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);

              track = rtpReceiver.track;
              receiverList.push([track, rtpReceiver]);
              // FIXME: not correct when there are multiple streams but that is
              // not currently supported in this shim.
              stream.addTrack(track);

              // FIXME: look at direction.
              if (self.localStreams.length > 0 &&
                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {
                // FIXME: actually more complicated, needs to match types etc
                var localtrack = self.localStreams[0]
                    .getTracks()[sdpMLineIndex];
                rtpSender = new RTCRtpSender(localtrack,
                    transports.dtlsTransport);
              }

              self.transceivers[sdpMLineIndex] = {
                iceGatherer: transports.iceGatherer,
                iceTransport: transports.iceTransport,
                dtlsTransport: transports.dtlsTransport,
                localCapabilities: localCapabilities,
                remoteCapabilities: remoteCapabilities,
                rtpSender: rtpSender,
                rtpReceiver: rtpReceiver,
                kind: kind,
                mid: mid,
                cname: cname,
                sendEncodingParameters: sendEncodingParameters,
                recvEncodingParameters: recvEncodingParameters
              };
              // Start the RTCRtpReceiver now. The RTPSender is started in
              // setLocalDescription.
              self._transceive(self.transceivers[sdpMLineIndex],
                  false,
                  direction === 'sendrecv' || direction === 'sendonly');
            } else if (description.type === 'answer' && !rejected) {
              transceiver = self.transceivers[sdpMLineIndex];
              iceGatherer = transceiver.iceGatherer;
              iceTransport = transceiver.iceTransport;
              dtlsTransport = transceiver.dtlsTransport;
              rtpSender = transceiver.rtpSender;
              rtpReceiver = transceiver.rtpReceiver;
              sendEncodingParameters = transceiver.sendEncodingParameters;
              localCapabilities = transceiver.localCapabilities;

              self.transceivers[sdpMLineIndex].recvEncodingParameters =
                  recvEncodingParameters;
              self.transceivers[sdpMLineIndex].remoteCapabilities =
                  remoteCapabilities;
              self.transceivers[sdpMLineIndex].cname = cname;

              if (isComplete) {
                iceTransport.setRemoteCandidates(cands);
              }
              iceTransport.start(iceGatherer, remoteIceParameters,
                  'controlling');
              dtlsTransport.start(remoteDtlsParameters);

              self._transceive(transceiver,
                  direction === 'sendrecv' || direction === 'recvonly',
                  direction === 'sendrecv' || direction === 'sendonly');

              if (rtpReceiver &&
                  (direction === 'sendrecv' || direction === 'sendonly')) {
                track = rtpReceiver.track;
                receiverList.push([track, rtpReceiver]);
                stream.addTrack(track);
              } else {
                // FIXME: actually the receiver should be created later.
                delete transceiver.rtpReceiver;
              }
            }
          });

          this.remoteDescription = {
            type: description.type,
            sdp: description.sdp
          };
          switch (description.type) {
            case 'offer':
              this._updateSignalingState('have-remote-offer');
              break;
            case 'answer':
              this._updateSignalingState('stable');
              break;
            default:
              throw new TypeError('unsupported type "' + description.type +
                  '"');
          }
          if (stream.getTracks().length) {
            self.remoteStreams.push(stream);
            window.setTimeout(function() {
              var event = new Event('addstream');
              event.stream = stream;
              self.dispatchEvent(event);
              if (self.onaddstream !== null) {
                window.setTimeout(function() {
                  self.onaddstream(event);
                }, 0);
              }

              receiverList.forEach(function(item) {
                var track = item[0];
                var receiver = item[1];
                var trackEvent = new Event('track');
                trackEvent.track = track;
                trackEvent.receiver = receiver;
                trackEvent.streams = [stream];
                self.dispatchEvent(event);
                if (self.ontrack !== null) {
                  window.setTimeout(function() {
                    self.ontrack(trackEvent);
                  }, 0);
                }
              });
            }, 0);
          }
          if (arguments.length > 1 && typeof arguments[1] === 'function') {
            window.setTimeout(arguments[1], 0);
          }
          return Promise.resolve();
        };

    window.RTCPeerConnection.prototype.close = function() {
      this.transceivers.forEach(function(transceiver) {
        /* not yet
        if (transceiver.iceGatherer) {
          transceiver.iceGatherer.close();
        }
        */
        if (transceiver.iceTransport) {
          transceiver.iceTransport.stop();
        }
        if (transceiver.dtlsTransport) {
          transceiver.dtlsTransport.stop();
        }
        if (transceiver.rtpSender) {
          transceiver.rtpSender.stop();
        }
        if (transceiver.rtpReceiver) {
          transceiver.rtpReceiver.stop();
        }
      });
      // FIXME: clean up tracks, local streams, remote streams, etc
      this._updateSignalingState('closed');
    };

    // Update the signaling state.
    window.RTCPeerConnection.prototype._updateSignalingState =
        function(newState) {
          this.signalingState = newState;
          var event = new Event('signalingstatechange');
          this.dispatchEvent(event);
          if (this.onsignalingstatechange !== null) {
            this.onsignalingstatechange(event);
          }
        };

    // Determine whether to fire the negotiationneeded event.
    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
        function() {
          // Fire away (for now).
          var event = new Event('negotiationneeded');
          this.dispatchEvent(event);
          if (this.onnegotiationneeded !== null) {
            this.onnegotiationneeded(event);
          }
        };

    // Update the connection state.
    window.RTCPeerConnection.prototype._updateConnectionState = function() {
      var self = this;
      var newState;
      var states = {
        'new': 0,
        closed: 0,
        connecting: 0,
        checking: 0,
        connected: 0,
        completed: 0,
        failed: 0
      };
      this.transceivers.forEach(function(transceiver) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      });
      // ICETransport.completed and connected are the same for this purpose.
      states.connected += states.completed;

      newState = 'new';
      if (states.failed > 0) {
        newState = 'failed';
      } else if (states.connecting > 0 || states.checking > 0) {
        newState = 'connecting';
      } else if (states.disconnected > 0) {
        newState = 'disconnected';
      } else if (states.new > 0) {
        newState = 'new';
      } else if (states.connected > 0 || states.completed > 0) {
        newState = 'connected';
      }

      if (newState !== self.iceConnectionState) {
        self.iceConnectionState = newState;
        var event = new Event('iceconnectionstatechange');
        this.dispatchEvent(event);
        if (this.oniceconnectionstatechange !== null) {
          this.oniceconnectionstatechange(event);
        }
      }
    };

    window.RTCPeerConnection.prototype.createOffer = function() {
      var self = this;
      if (this._pendingOffer) {
        throw new Error('createOffer called while there is a pending offer.');
      }
      var offerOptions;
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        offerOptions = arguments[0];
      } else if (arguments.length === 3) {
        offerOptions = arguments[2];
      }

      var tracks = [];
      var numAudioTracks = 0;
      var numVideoTracks = 0;
      // Default to sendrecv.
      if (this.localStreams.length) {
        numAudioTracks = this.localStreams[0].getAudioTracks().length;
        numVideoTracks = this.localStreams[0].getVideoTracks().length;
      }
      // Determine number of audio and video tracks we need to send/recv.
      if (offerOptions) {
        // Reject Chrome legacy constraints.
        if (offerOptions.mandatory || offerOptions.optional) {
          throw new TypeError(
              'Legacy mandatory/optional constraints not supported.');
        }
        if (offerOptions.offerToReceiveAudio !== undefined) {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
        if (offerOptions.offerToReceiveVideo !== undefined) {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
      if (this.localStreams.length) {
        // Push local streams.
        this.localStreams[0].getTracks().forEach(function(track) {
          tracks.push({
            kind: track.kind,
            track: track,
            wantReceive: track.kind === 'audio' ?
                numAudioTracks > 0 : numVideoTracks > 0
          });
          if (track.kind === 'audio') {
            numAudioTracks--;
          } else if (track.kind === 'video') {
            numVideoTracks--;
          }
        });
      }
      // Create M-lines for recvonly streams.
      while (numAudioTracks > 0 || numVideoTracks > 0) {
        if (numAudioTracks > 0) {
          tracks.push({
            kind: 'audio',
            wantReceive: true
          });
          numAudioTracks--;
        }
        if (numVideoTracks > 0) {
          tracks.push({
            kind: 'video',
            wantReceive: true
          });
          numVideoTracks--;
        }
      }

      var sdp = SDPUtils.writeSessionBoilerplate();
      var transceivers = [];
      tracks.forEach(function(mline, sdpMLineIndex) {
        // For each track, create an ice gatherer, ice transport,
        // dtls transport, potentially rtpsender and rtpreceiver.
        var track = mline.track;
        var kind = mline.kind;
        var mid = SDPUtils.generateIdentifier();

        var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);

        var localCapabilities = RTCRtpSender.getCapabilities(kind);
        var rtpSender;
        var rtpReceiver;

        // generate an ssrc now, to be used later in rtpSender.send
        var sendEncodingParameters = [{
          ssrc: (2 * sdpMLineIndex + 1) * 1001
        }];
        if (track) {
          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
        }

        if (mline.wantReceive) {
          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
        }

        transceivers[sdpMLineIndex] = {
          iceGatherer: transports.iceGatherer,
          iceTransport: transports.iceTransport,
          dtlsTransport: transports.dtlsTransport,
          localCapabilities: localCapabilities,
          remoteCapabilities: null,
          rtpSender: rtpSender,
          rtpReceiver: rtpReceiver,
          kind: kind,
          mid: mid,
          sendEncodingParameters: sendEncodingParameters,
          recvEncodingParameters: null
        };
        var transceiver = transceivers[sdpMLineIndex];
        sdp += SDPUtils.writeMediaSection(transceiver,
            transceiver.localCapabilities, 'offer', self.localStreams[0]);
      });

      this._pendingOffer = transceivers;
      var desc = new RTCSessionDescription({
        type: 'offer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.createAnswer = function() {
      var self = this;

      var sdp = SDPUtils.writeSessionBoilerplate();
      this.transceivers.forEach(function(transceiver) {
        // Calculate intersection of capabilities.
        var commonCapabilities = self._getCommonCapabilities(
            transceiver.localCapabilities,
            transceiver.remoteCapabilities);

        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
            'answer', self.localStreams[0]);
      });

      var desc = new RTCSessionDescription({
        type: 'answer',
        sdp: sdp
      });
      if (arguments.length && typeof arguments[0] === 'function') {
        window.setTimeout(arguments[0], 0, desc);
      }
      return Promise.resolve(desc);
    };

    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
      var mLineIndex = candidate.sdpMLineIndex;
      if (candidate.sdpMid) {
        for (var i = 0; i < this.transceivers.length; i++) {
          if (this.transceivers[i].mid === candidate.sdpMid) {
            mLineIndex = i;
            break;
          }
        }
      }
      var transceiver = this.transceivers[mLineIndex];
      if (transceiver) {
        var cand = Object.keys(candidate.candidate).length > 0 ?
            SDPUtils.parseCandidate(candidate.candidate) : {};
        // Ignore Chrome's invalid candidates since Edge does not like them.
        if (cand.protocol === 'tcp' && cand.port === 0) {
          return;
        }
        // Ignore RTCP candidates, we assume RTCP-MUX.
        if (cand.component !== '1') {
          return;
        }
        // A dirty hack to make samples work.
        if (cand.type === 'endOfCandidates') {
          cand = {};
        }
        transceiver.iceTransport.addRemoteCandidate(cand);

        // update the remoteDescription.
        var sections = SDPUtils.splitSections(this.remoteDescription.sdp);
        sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()
            : 'a=end-of-candidates') + '\r\n';
        this.remoteDescription.sdp = sections.join('');
      }
      if (arguments.length > 1 && typeof arguments[1] === 'function') {
        window.setTimeout(arguments[1], 0);
      }
      return Promise.resolve();
    };

    window.RTCPeerConnection.prototype.getStats = function() {
      var promises = [];
      this.transceivers.forEach(function(transceiver) {
        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
            'dtlsTransport'].forEach(function(method) {
              if (transceiver[method]) {
                promises.push(transceiver[method].getStats());
              }
            });
      });
      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
          arguments[1];
      return new Promise(function(resolve) {
        var results = {};
        Promise.all(promises).then(function(res) {
          res.forEach(function(result) {
            Object.keys(result).forEach(function(id) {
              results[id] = result[id];
            });
          });
          if (cb) {
            window.setTimeout(cb, 0, results);
          }
          resolve(results);
        });
      });
    };
  },

  // Attach a media stream to an element.
  attachMediaStream: function(element, stream) {
    logging('DEPRECATED, attachMediaStream will soon be removed.');
    element.srcObject = stream;
  },

  reattachMediaStream: function(to, from) {
    logging('DEPRECATED, reattachMediaStream will soon be removed.');
    to.srcObject = from.srcObject;
  }
};

// Expose public methods.
module.exports = {
  shimPeerConnection: edgeShim.shimPeerConnection,
  attachMediaStream: edgeShim.attachMediaStream,
  reattachMediaStream: edgeShim.reattachMediaStream
};

},{"../utils":38,"./edge_sdp":33}],35:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logging = require('../utils').log;
var browserDetails = require('../utils').browserDetails;

var firefoxShim = {
  shimOnTrack: function() {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        }
      });
    }
  },

  shimSourceObject: function() {
    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this.mozSrcObject;
          },
          set: function(stream) {
            this.mozSrcObject = stream;
          }
        });
      }
    }
  },

  shimPeerConnection: function() {
    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (browserDetails.version < 38) {
          // .urls is not supported in FF < 38.
          // create RTCIceServers with a single url.
          if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for (var i = 0; i < pcConfig.iceServers.length; i++) {
              var server = pcConfig.iceServers[i];
              if (server.hasOwnProperty('urls')) {
                for (var j = 0; j < server.urls.length; j++) {
                  var newServer = {
                    url: server.urls[j]
                  };
                  if (server.urls[j].indexOf('turn') === 0) {
                    newServer.username = server.username;
                    newServer.credential = server.credential;
                  }
                  newIceServers.push(newServer);
                }
              } else {
                newIceServers.push(pcConfig.iceServers[i]);
              }
            }
            pcConfig.iceServers = newIceServers;
          }
        }
        return new mozRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;

      // wrap static methods. Currently just generateCertificate.
      if (mozRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return mozRTCPeerConnection.generateCertificate;
          }
        });
      }

      window.RTCSessionDescription = mozRTCSessionDescription;
      window.RTCIceCandidate = mozRTCIceCandidate;
    }

    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = RTCPeerConnection.prototype[method];
          RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate')?
                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });
  },

  shimGetUserMedia: function() {
    // getUserMedia constraints shim.
    var getUserMedia_ = function(constraints, onSuccess, onError) {
      var constraintsToFF37_ = function(c) {
        if (typeof c !== 'object' || c.require) {
          return c;
        }
        var require = [];
        Object.keys(c).forEach(function(key) {
          if (key === 'require' || key === 'advanced' ||
              key === 'mediaSource') {
            return;
          }
          var r = c[key] = (typeof c[key] === 'object') ?
              c[key] : {ideal: c[key]};
          if (r.min !== undefined ||
              r.max !== undefined || r.exact !== undefined) {
            require.push(key);
          }
          if (r.exact !== undefined) {
            if (typeof r.exact === 'number') {
              r. min = r.max = r.exact;
            } else {
              c[key] = r.exact;
            }
            delete r.exact;
          }
          if (r.ideal !== undefined) {
            c.advanced = c.advanced || [];
            var oc = {};
            if (typeof r.ideal === 'number') {
              oc[key] = {min: r.ideal, max: r.ideal};
            } else {
              oc[key] = r.ideal;
            }
            c.advanced.push(oc);
            delete r.ideal;
            if (!Object.keys(r).length) {
              delete c[key];
            }
          }
        });
        if (require.length) {
          c.require = require;
        }
        return c;
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      if (browserDetails.version < 38) {
        logging('spec: ' + JSON.stringify(constraints));
        if (constraints.audio) {
          constraints.audio = constraintsToFF37_(constraints.audio);
        }
        if (constraints.video) {
          constraints.video = constraintsToFF37_(constraints.video);
        }
        logging('ff37: ' + JSON.stringify(constraints));
      }
      return navigator.mozGetUserMedia(constraints, onSuccess, onError);
    };

    navigator.getUserMedia = getUserMedia_;

    // Returns the result of getUserMedia as a Promise.
    var getUserMediaPromise_ = function(constraints) {
      return new Promise(function(resolve, reject) {
        navigator.getUserMedia(constraints, resolve, reject);
      });
    };

    // Shim for mediaDevices on older versions.
    if (!navigator.mediaDevices) {
      navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
        addEventListener: function() { },
        removeEventListener: function() { }
      };
    }
    navigator.mediaDevices.enumerateDevices =
        navigator.mediaDevices.enumerateDevices || function() {
          return new Promise(function(resolve) {
            var infos = [
              {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
              {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
            ];
            resolve(infos);
          });
        };

    if (browserDetails.version < 41) {
      // Work around http://bugzil.la/1169665
      var orgEnumerateDevices =
          navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
      navigator.mediaDevices.enumerateDevices = function() {
        return orgEnumerateDevices().then(undefined, function(e) {
          if (e.name === 'NotFoundError') {
            return [];
          }
          throw e;
        });
      };
    }
  },

  // Attach a media stream to an element.
  attachMediaStream: function(element, stream) {
    logging('DEPRECATED, attachMediaStream will soon be removed.');
    element.srcObject = stream;
  },

  reattachMediaStream: function(to, from) {
    logging('DEPRECATED, reattachMediaStream will soon be removed.');
    to.srcObject = from.srcObject;
  }
};

// Expose public methods.
module.exports = {
  shimOnTrack: firefoxShim.shimOnTrack,
  shimSourceObject: firefoxShim.shimSourceObject,
  shimPeerConnection: firefoxShim.shimPeerConnection,
  shimGetUserMedia: require('./getusermedia'),
  attachMediaStream: firefoxShim.attachMediaStream,
  reattachMediaStream: firefoxShim.reattachMediaStream
};

},{"../utils":38,"./getusermedia":36}],36:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logging = require('../utils').log;
var browserDetails = require('../utils').browserDetails;

// Expose public methods.
module.exports = function() {
  // getUserMedia constraints shim.
  var getUserMedia_ = function(constraints, onSuccess, onError) {
    var constraintsToFF37_ = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r. min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    constraints = JSON.parse(JSON.stringify(constraints));
    if (browserDetails.version < 38) {
      logging('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37_(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37_(constraints.video);
      }
      logging('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, onError);
  };

  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
        return new Promise(function(resolve) {
          var infos = [
            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
          ];
          resolve(infos);
        });
      };

  if (browserDetails.version < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
};

},{"../utils":38}],37:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';
var safariShim = {
  // TODO: DrAlex, should be here, double check against LayoutTests
  // shimOnTrack: function() { },

  // TODO: DrAlex
  // attachMediaStream: function(element, stream) { },
  // reattachMediaStream: function(to, from) { },

  // TODO: once the back-end for the mac port is done, add.
  // TODO: check for webkitGTK+
  // shimPeerConnection: function() { },

  shimGetUserMedia: function() {
    navigator.getUserMedia = navigator.webkitGetUserMedia;
  }
};

// Expose public methods.
module.exports = {
  shimGetUserMedia: safariShim.shimGetUserMedia
  // TODO
  // shimOnTrack: safariShim.shimOnTrack,
  // shimPeerConnection: safariShim.shimPeerConnection,
  // attachMediaStream: safariShim.attachMediaStream,
  // reattachMediaStream: safariShim.reattachMediaStream
};

},{}],38:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logDisabled_ = false;

// Utility methods.
var utils = {
  disableLog: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return (bool) ? 'adapter.js logging disabled' :
        'adapter.js logging enabled';
  },

  log: function() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  },

  /**
   * Extract browser version out of the provided user agent string.
   *
   * @param {!string} uastring userAgent string.
   * @param {!string} expr Regular expression used as match criteria.
   * @param {!number} pos position in the version string to be returned.
   * @return {!number} browser version.
   */
  extractVersion: function(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
  },

  /**
   * Browser detector.
   *
   * @return {object} result containing browser, version and minVersion
   *     properties.
   */
  detectBrowser: function() {
    // Returned result object.
    var result = {};
    result.browser = null;
    result.version = null;
    result.minVersion = null;

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }

    // Firefox.
    if (navigator.mozGetUserMedia) {
      result.browser = 'firefox';
      result.version = this.extractVersion(navigator.userAgent,
          /Firefox\/([0-9]+)\./, 1);
      result.minVersion = 31;

    // all webkit-based browsers
    } else if (navigator.webkitGetUserMedia) {
      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now
      if (window.webkitRTCPeerConnection) {
        result.browser = 'chrome';
        result.version = this.extractVersion(navigator.userAgent,
          /Chrom(e|ium)\/([0-9]+)\./, 2);
        result.minVersion = 38;

      // Safari or unknown webkit-based
      // for the time being Safari has support for MediaStreams but not webRTC
      } else {
        // Safari UA substrings of interest for reference:
        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)
        // - safari UI version:        Version/9.0.3 (unique to Safari)
        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)
        //
        // if the webkit version and safari UI webkit versions are equals,
        // ... this is a stable version.
        //
        // only the internal webkit version is important today to know if
        // media streams are supported
        //
        if (navigator.userAgent.match(/Version\/(\d+).(\d+)/)) {
          result.browser = 'safari';
          result.version = this.extractVersion(navigator.userAgent,
            /AppleWebKit\/([0-9]+)\./, 1);
          result.minVersion = 602;

        // unknown webkit-based browser
        } else {
          result.browser = 'Unsupported webkit-based browser ' +
              'with GUM support but no WebRTC support.';
          return result;
        }
      }

    // Edge.
    } else if (navigator.mediaDevices &&
        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
      result.browser = 'edge';
      result.version = this.extractVersion(navigator.userAgent,
          /Edge\/(\d+).(\d+)$/, 2);
      result.minVersion = 10547;

    // Default fallthrough: not supported.
    } else {
      result.browser = 'Not a supported browser.';
      return result;
    }

    // Warn if version is less than minVersion.
    if (result.version < result.minVersion) {
      utils.log('Browser: ' + result.browser + ' Version: ' + result.version +
          ' < minimum supported version: ' + result.minVersion +
          '\n some things might not work!');
    }

    return result;
  }
};

// Export.
module.exports = {
  log: utils.log,
  disableLog: utils.disableLog,
  browserDetails: utils.detectBrowser(),
  extractVersion: utils.extractVersion
};

},{}],39:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('node-event-emitter');
var DiyaSelector = require('./DiyaSelector.js').DiyaSelector;

DiyaSelector.prototype.dbusObject = function (service, path, partialObject, signals) {
	var _this = this;

	var objects = [];

	this.each(function (peerId) {
		var store = _this._connection.store.get(peerId);
		if (store.get('dbus') == null) {
			store.set('dbus', new Map());
		}
		var dbus = store.get('dbus');

		if (dbus.get(service) == null) {
			dbus.set(service, new Map());
		}
		var dbusService = dbus.get(service);

		if (dbusService.get(path) == null) {
			dbusService.set(path, new DBusObjectHandler(_this._connection._d1inst, peerId, service, path, signals));
		}
		var object = dbusService.get(path);

		object.importPartialObject(partialObject);
		object.importSignals(signals);

		objects.push(object);
	});

	return objects;
};

var DBusObjectHandler = function (_EventEmitter) {
	_inherits(DBusObjectHandler, _EventEmitter);

	function DBusObjectHandler(d1inst, peerId, service, path, signals) {
		_classCallCheck(this, DBusObjectHandler);

		var _this2 = _possibleConstructorReturn(this, (DBusObjectHandler.__proto__ || Object.getPrototypeOf(DBusObjectHandler)).call(this));

		_this2.objPath = path;
		_this2.service = service;
		_this2._signals = signals;
		_this2._d1inst = d1inst;
		_this2._peerId = peerId;

		_this2._getAllDone = {};
		return _this2;
	}

	_createClass(DBusObjectHandler, [{
		key: 'close',
		value: function close() {
			if (this._subProperties != null) {
				this._subProperties.close();
				this._subProperties = null;
			}
		}
	}, {
		key: 'importPartialObject',
		value: function importPartialObject(partialObject) {
			if (partialObject == null) {
				return;
			}

			for (var iface in partialObject) {
				this._onPropertiesChanged([iface, partialObject[iface], []]);
			}
		}
	}, {
		key: 'importSignals',
		value: function importSignals(signals) {
			if (signals == null) {
				return;
			}
			this._signals = signals;
			this.subscribeToSignals();
		}
	}, {
		key: 'call',
		value: function call(method, args, callback) {
			var iface = method.split('.');
			method = iface[iface.length - 1];
			iface.pop();
			iface = iface.join('.');

			this._d1inst(this._peerId).request({
				service: this.service,
				func: method,
				obj: {
					path: this.objPath,
					interface: iface
				},
				data: args
			}, callback);
		}
	}, {
		key: 'get',
		value: function get(iface, propName) {
			var _this3 = this;

			this._d1inst(this._peerId).request({
				service: this.service,
				func: 'Get',
				obj: {
					interface: 'org.freedesktop.DBus.Properties',
					path: this.objPath
				},
				data: {
					interface: iface, //systemd devs are fucktard that don't follow their own fucking standard !
					interface_name: iface,
					property: propName
				}
			}, function (peerId, err, data) {
				if (err) {
					//TODO : handle error
					console.error(err);
				} else {
					var res = {};
					res[propName] = data;
					_this3._onGetAll(iface, res);
				}
			});
		}
	}, {
		key: 'getAll',
		value: function getAll(iface, force) {
			var _this4 = this;

			//by default, prevent one to run get all more than once (that shouldn't be useful if PropertiesChanged does its job
			if (!force && this._getAllDone[iface]) {
				return;
			}
			this._getAllDone[iface] = true;

			this._d1inst(this._peerId).request({
				service: this.service,
				func: 'GetAll',
				obj: {
					interface: 'org.freedesktop.DBus.Properties',
					path: this.objPath
				},
				data: {
					interface: iface, //systemd devs are fucktard that don't follow their own fucking standard !
					interface_name: iface
				}
			}, function (peerId, err, data) {
				if (err) {
					//TODO : handle error
					console.error(err);
				} else {
					_this4._onGetAll(iface, data);
				}
			});
		}
	}, {
		key: '_onGetAll',
		value: function _onGetAll(iface, data) {
			if (data == null) {
				return;
			}

			this._onPropertiesChanged([iface, data, []]);
		}
	}, {
		key: 'initPropertiesChangedSignal',
		value: function initPropertiesChangedSignal() {
			var _this5 = this;

			if (this._subProperties != null) return;
			this._subProperties = this._d1inst(this._peerId).subscribe({
				service: this.service,
				func: 'PropertiesChanged',
				obj: {
					interface: 'org.freedesktop.DBus.Properties',
					path: this.objPath
				}
			}, function (peerId, err, data) {
				if (err) {
					//TODO : handle error
				} else {
					_this5._onPropertiesChanged(data);
				}
			});
		}
	}, {
		key: '_onPropertiesChanged',
		value: function _onPropertiesChanged(data) {
			var _this6 = this;

			if (!Array.isArray(data) || data.length !== 3) {
				return;
			}

			var iface = data[0];
			var changedProperties = data[1];
			var invalidatedProperties = data[2];

			var simpleIface = iface.split('.');
			simpleIface = simpleIface[simpleIface.length - 1];

			if (this[simpleIface] == null) {
				this[simpleIface] = {};
			}

			for (var propName in changedProperties) {
				this[simpleIface][propName] = changedProperties[propName];
			}

			invalidatedProperties.forEach(function (propName) {
				_this6[simpleIface][propName] = null;
			});

			this.emit('properties-changed', simpleIface, changedProperties, invalidatedProperties);
		}
	}, {
		key: 'subscribeToSignals',
		value: function subscribeToSignals() {
			var _this7 = this;

			if (this._signals == null) return;
			if (this._subscriptions == null) this._subscriptions = new Map();
			this._signals.forEach(function (obj) {
				if (_this7._subscriptions.get(obj.id) != null) {
					// console.warn(`Already subscribed, signal ${obj.id}`)
					return;
				} // refuse duplicate subscriptions
				var subscription = _this7._d1inst(_this7._peerId).subscribe({
					service: _this7.service,
					func: obj.name,
					obj: {
						interface: obj.iface,
						path: obj.objectPath
					}
				}, function (peerId, err, data) {
					if (err) {
						console.error('subscribeToSignals', obj, err);
						return;
					}
					_this7.emit(obj.id, Array.isArray(data) ? data[0] : data); // event 'id' is emitted instead of 'name' because signal's names may be duplicate
				});
				_this7._subscriptions.set(obj.id, subscription);
			});
		}
	}]);

	return DBusObjectHandler;
}(EventEmitter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./DiyaSelector.js":41,"node-event-emitter":13}],40:[function(require,module,exports){
(function (Buffer){
'use strict';

var isBrowser = !(typeof window === 'undefined');
var UNIXSocketHandler = void 0;
if (!isBrowser) {
	var Q = require('q');
	UNIXSocketHandler = require('./UNIXSocketHandler');
} else {
	var Q = window.Q;
}

var EventEmitter = require('node-event-emitter');
var inherits = require('inherits');
var DiyaSocket = require('./DiyaSocket');

//////////////////////////////////////////////////////////////
/////////////////// Logging utility methods //////////////////
//////////////////////////////////////////////////////////////

var DEBUG = false;
var Logger = {
	log: function log(message) {
		if (DEBUG) console.log(message);
	},

	error: function error(message) {
		if (DEBUG) console.error(message);
	}
};

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


function DiyaNode() {
	EventEmitter.call(this);

	this._user = null;
	this._authenticated = null;
	this._pass = null;

	this._status = 'closed';
	this._addr = null;
	this._socket = null;
	this._nextId = 0;
	this._connectionDeferred = null;
	this._disconnectionDeferred = null;
	this._pendingMessages = [];
	this._peers = [];
	this._reconnectTimeout = 1000;
	this._connectTimeout = 5000;
	this.store = new Map();
	this._diyaSocket = new Map();
}
inherits(DiyaNode, EventEmitter);

////////////////////////////////////////////////////
////////////////// Public API //////////////////////
////////////////////////////////////////////////////

DiyaNode.prototype.user = function (user) {
	if (user) this._user = user;else return this._user;
};
DiyaNode.prototype.authenticated = function (authenticated) {
	if (authenticated !== undefined) this._authenticated = authenticated;else return this._authenticated;
};
DiyaNode.prototype.pass = function (pass) {
	if (pass !== undefined) this._pass = pass;else return this._pass;
};
DiyaNode.prototype.addr = function () {
	return this._addr;
};
DiyaNode.prototype.peers = function () {
	return this._peers;
};
DiyaNode.prototype.self = function () {
	return this._self;
};
DiyaNode.prototype.setSecured = function (bSecured) {
	this._secured = bSecured !== false;
};
DiyaNode.prototype.setWSocket = function (WSocket) {
	this._WSocket = WSocket;
};

/** @return {Promise<String>} the connected peer name */
DiyaNode.prototype.connect = function (addr, WSocket) {
	var _this = this;

	this.bDontReconnect = false;

	// Handle local clients on UNIX sockets
	if (addr.startsWith('unix://')) {
		// If we've trying to connect to the same address we're already connected to
		if (this._addr === addr) {
			console.log('[SDK/DiyaNode] Address is identical to our address...');
			if (this._status === 'opened') {
				console.log('[SDK/DiyaNode] ... and the connection is still openened, returning it.');
				return Q(this.self());
			} else if (this._connectionDeferred && this._connectionDeferred.promise && this._connectionDeferred.promise.isPending()) {
				console.log('[SDK/DiyaNode]... and the connection is pending, so returning the pending connection.');
				return this._connectionDeferred.promise;
			}
		}

		return this.close().then(function (_) {
			_this._addr = addr;
			_this._connectionDeferred = Q.defer();
			Logger.log('d1: connect to ' + _this._addr);
			var sock = new UNIXSocketHandler(_this._addr.substr('unix://'.length), _this._connectTimeout);

			if (!_this._socketHandler) _this._socketHandler = sock;

			_this._onopening();

			sock.on('open', function (_) {
				if (_this._socketHandler !== sock) {
					console.log('[SDK/DiyaNode] Socket responded but already connected to a different one');
					return;
				}
				_this._status = 'opened';
				_this._setupPingResponse();
			});

			sock.on('closing', function (_) {
				if (_this._socketHandler !== sock) return;
				_this._onclosing();
			});

			sock.on('close', function (_) {
				if (_this._socketHandler !== sock) return;
				_this._socketHandler = null;
				_this._status = 'closed';
				_this._stopPingResponse();
				_this._onclose();

				if (_this._connectionDeferred) {
					_this._connectionDeferred.reject("closed");
					_this._connectionDeferred = null;
				}
			});

			sock.on('error', function (error) {
				if (_this._socketHandler !== sock) return;
				_this._onerror(error);
			});

			sock.on('timeout', function (_) {
				if (_this._socketHandler !== sock) return;
				_this._socketHandler = null;
				_this._status = 'closed';
				if (_this._connectionDeferred) {
					_this._connectionDeferred.reject("closed");
					_this._connectionDeferred = null;
				}
			});

			sock.on('message', _this._onmessage.bind(_this));

			return _this._connectionDeferred.promise;
		});
	}

	if (WSocket !== undefined) this._WSocket = WSocket;else if (this._WSocket === undefined) this._WSocket = window.WebSocket;

	WSocket = this._WSocket;

	// Check and Format URI (FQDN)
	if (addr.startsWith("ws://") && this._secured) return Q.reject("Please use a secured connection (" + addr + ")");

	if (addr.startsWith("wss://") && this._secured === false) return Q.reject("Please use a non-secured connection (" + addr + ")");

	if (!addr.startsWith("ws://") && !addr.startsWith("wss://")) {
		if (this._secured) addr = "wss://" + addr;else addr = "ws://" + addr;
	}

	if (this._addr === addr) {
		if (this._status === 'opened') return Q(this.self());else if (this._connectionDeferred && this._connectionDeferred.promise && this._connectionDeferred.promise.isPending()) return this._connectionDeferred.promise;
	}

	return this.close().then(function (_) {
		_this._addr = addr;
		_this._connectionDeferred = Q.defer();
		Logger.log('d1: connect to ' + _this._addr);
		var sock = new SocketHandler(WSocket, _this._addr, _this._connectTimeout);

		if (!_this._socketHandler) _this._socketHandler = sock;

		_this._onopening();

		sock.on('open', function (_) {
			if (_this._socketHandler !== sock) {
				console.log("[d1] Websocket responded but already connected to a different one");
				return;
			}
			_this._socketHandler = sock;
			_this._status = 'opened';
			_this._setupPingResponse();
		});

		sock.on('closing', function (_) {
			if (_this._socketHandler !== sock) return;
			_this._onclosing();
		});

		sock.on('close', function (_) {
			if (_this._socketHandler !== sock) return;
			_this._socketHandler = null;
			_this._status = 'closed';
			_this._stopPingResponse();
			_this._onclose();

			if (_this._connectionDeferred) {
				_this._connectionDeferred.reject("closed");
				_this._connectionDeferred = null;
			}
		});

		sock.on('error', function (error) {
			if (_this._socketHandler !== sock) return;
			_this._onerror(error);
		});

		sock.on('timeout', function (_) {
			if (_this._socketHandler !== sock) return;
			_this._socketHandler = null;
			_this._status = 'closed';
			if (_this._connectionDeferred) {
				_this._connectionDeferred.reject("closed");
				_this._connectionDeferred = null;
			}
		});

		sock.on('message', _this._onmessage.bind(_this));

		return _this._connectionDeferred.promise;
	});
};

DiyaNode.prototype.disconnect = function () {
	this.bDontReconnect = true;
	return this.close();
};

DiyaNode.prototype.close = function () {
	this._stopPingResponse();
	if (this._socketHandler) return this._socketHandler.close();else return Q();
};

DiyaNode.prototype.isConnected = function () {
	return this._socketHandler && this._socketHandler.isConnected();
};

DiyaNode.prototype.request = function (params, callback, timeout, options) {
	var that = this;
	if (!options) options = {};

	if (params.constructor === String) {
		var _params = params.split(".");
		if (_params.length != 2) throw 'MalformedRequest';
		params = { service: _params[0], func: _params[1] };
	}

	if (!params.service) {
		Logger.error('No service defined for request !');
		return false;
	}

	var message = this._createMessage(params, "Request");
	this._appendMessage(message, callback);
	if (typeof options.callback_partial === 'function') this._pendingMessages[message.id].callback_partial = options.callback_partial;
	message.options = options;

	if (!isNaN(timeout) && timeout > 0) {
		setTimeout(function () {
			var handler = that._removeMessage(message.id);
			if (handler) that._notifyListener(handler, 'Timeout exceeded (' + timeout + 'ms) !');
		}, timeout);
	}

	if (!this._send(message)) {
		this._removeMessage(message.id);
		console.error('Cannot send request !');
		return false;
	}

	return true;
};

DiyaNode.prototype.subscribe = function (params, callback) {
	if (params.constructor === String) {
		var _params = params.split(".");
		if (_params.length != 2) throw 'MalformedRequest';
		params = { service: _params[0], func: _params[1] };
	}

	if (!params.service) {
		Logger.error('No service defined for subscription !');
		return -1;
	}

	var message = this._createMessage(params, "Subscription");
	this._appendMessage(message, callback);

	if (!this._send(message)) {
		this._removeMessage(message.id);
		Logger.error('Cannot send subscription !');
		return -1;
	}

	return message.id;
};

DiyaNode.prototype.openSocket = function (d1inst, params, callback) {
	this._diyaSocket.set(params.socketId, new DiyaSocket(d1inst, params));
	this._diyaSocket.get(params.socketId).subscribeSocketClosed(params.socketId);
	if (typeof callback === 'function') callback(this._diyaSocket.get(params.socketId));
};

DiyaNode.prototype.onSocketClosed = function (socketId) {
	if (this._diyaSocket.has(socketId)) {
		this._diyaSocket.get(socketId).emit('close');
		this._diyaSocket.delete(socketId);
	}
};

DiyaNode.prototype.sendSocketData = function (params) {
	var message = this._createMessage(params, "SocketClientData");
	if (!this._send(message)) {
		throw new Error('Cannot send socket!');
	}
	return message.id;
};

DiyaNode.prototype.unsubscribe = function (subId) {
	if (this._pendingMessages[subId] && this._pendingMessages[subId].type === "Subscription") {
		var subscription = this._removeMessage(subId);

		var message = this._createMessage({
			target: subscription.target,
			data: {
				subId: subId
			}
		}, "Unsubscribe");

		if (!this._send(message)) {
			Logger.error('Cannot send unsubscribe !');
			return false;
		}

		return true;
	}
	return false;
};

///////////////////////////////////////////////////////////
//////////////////// Internal methods /////////////////////
///////////////////////////////////////////////////////////

DiyaNode.prototype._appendMessage = function (message, callback) {
	this._pendingMessages[message.id] = {
		callback: callback,
		type: message.type,
		target: message.target
	};
};

DiyaNode.prototype._removeMessage = function (messageId) {
	var handler = this._pendingMessages[messageId];
	if (handler) {
		delete this._pendingMessages[messageId];
		return handler;
	} else {
		return null;
	}
};

DiyaNode.prototype._clearMessages = function (err, data) {
	for (var messageId in this._pendingMessages) {
		var handler = this._removeMessage(messageId);
		this._notifyListener(handler, err, data);
	}
};

DiyaNode.prototype._clearPeers = function () {
	while (this._peers.length) {
		var peer = this._peers.pop();
		this.store.delete(peer);
		this.emit('peer-disconnected', peer);
	}
};

DiyaNode.prototype._getMessageHandler = function (messageId) {
	var handler = this._pendingMessages[messageId];
	return handler ? handler : null;
};

DiyaNode.prototype._notifyListener = function (handler, error, data) {
	if (handler && typeof handler.callback === 'function') {
		error = error ? error : null;
		data = data ? data : null;
		try {
			handler.callback(error, data);
		} catch (e) {
			console.log('[Error in Request callback] ' + e.stack ? e.stack : e);
		}
	}
};

DiyaNode.prototype._send = function (message) {
	return this._socketHandler && this._socketHandler.send(message);
};

DiyaNode.prototype._setupPingResponse = function () {
	var that = this;

	this._pingTimeout = 15000;
	this._lastPing = new Date().getTime();

	function checkPing() {
		var curTime = new Date().getTime();
		if (curTime - that._lastPing > that._pingTimeout) {
			that._forceClose();
			Logger.log("d1:  timed out!");
		} else {
			Logger.log("d1: last ping ok");
			that._pingSetTimeoutId = setTimeout(checkPing, Math.round(that._pingTimeout / 2.1));
		}
	}

	checkPing();
};

DiyaNode.prototype._stopPingResponse = function () {
	clearTimeout(this._pingSetTimeoutId);
};

DiyaNode.prototype._forceClose = function () {
	this._socketHandler.close();
	this._onclose();
};

///////////////////////////////////////////////////////////////
/////////////////// Socket event handlers /////////////////////
///////////////////////////////////////////////////////////////


DiyaNode.prototype._onmessage = function (message) {
	if (message.type === "SocketServerData") this._handleSocketServerData(message);
	if (isNaN(message.id)) return this._handleInternalMessage(message);
	var handler = this._getMessageHandler(message.id);
	if (!handler) return;
	switch (handler.type) {
		case "Request":
			this._handleRequest(handler, message);
			break;
		case "Subscription":
			this._handleSubscription(handler, message);
			break;
	}
};

DiyaNode.prototype._onopening = function () {
	this.emit('opening', this);
};

DiyaNode.prototype._onerror = function (error) {
	this.emit('error', new Error(error));
};

DiyaNode.prototype._onclosing = function () {
	this.emit('closing', this);
};

DiyaNode.prototype._onclose = function () {
	var that = this;

	this._clearMessages('PeerDisconnected');
	this._clearPeers();

	if (!this.bDontReconnect) {
		Logger.log('d1: connection lost, try reconnecting');
		setTimeout(function () {
			that.connect(that._addr, that._WSocket).catch(function (err) {});
		}, that._reconnectTimeout);
	}
	this.emit('close', this._addr);
};

/////////////////////////////////////////////////////////////
/////////////// Protocol event handlers /////////////////////
/////////////////////////////////////////////////////////////

DiyaNode.prototype._handleInternalMessage = function (message) {
	switch (message.type) {
		case "PeerConnected":
			this._handlePeerConnected(message);
			break;
		case "PeerDisconnected":
			this._handlePeerDisconnected(message);
			break;
		case "Handshake":
			this._handleHandshake(message);
			break;
		case "Ping":
			this._handlePing(message);
			break;
	}
};

DiyaNode.prototype._handlePing = function (message) {
	message.type = "Pong";
	this._lastPing = new Date().getTime();
	this._send(message);
};

DiyaNode.prototype._handleHandshake = function (message) {

	if (message.peers === undefined || typeof message.self !== 'string') {
		Logger.error("Missing arguments for Handshake message, dropping...");
		return;
	}

	this._self = message.self;

	for (var i = 0; i < message.peers.length; i++) {
		this._peers.push(message.peers[i]);
		this.store.set(message.peers[i], new Map());
		this.emit('peer-connected', message.peers[i]);
	}

	this._connectionDeferred.resolve(this.self());
	this.emit('open', this._addr);
	this._status = 'opened';
	this._connectionDeferred = null;
};

DiyaNode.prototype._handlePeerConnected = function (message) {
	if (message.peerId === undefined) {
		Logger.error("Missing arguments for PeerConnected message, dropping...");
		return;
	}

	//Add peer to the list of reachable peers
	this._peers.push(message.peerId);
	this.store.set(message.peerId, new Map());

	this.emit('peer-connected', message.peerId);
};

DiyaNode.prototype._handlePeerDisconnected = function (message) {
	if (message.peerId === undefined) {
		Logger.error("Missing arguments for PeerDisconnected Message, dropping...");
		return;
	}

	//Remove peer from list of reachable peers
	for (var i = this._peers.length - 1; i >= 0; i--) {
		if (this._peers[i] === message.peerId) {
			this._peers.splice(i, 1);
			break;
		}
	}
	//remove associated store
	this.store.delete(message.peerId);

	//Go through all pending messages and notify the ones that are targeted
	//at the disconnected peer that it disconnected and therefore the command
	//cannot be fulfilled
	for (var messageId in this._pendingMessages) {
		var handler = this._getMessageHandler(messageId);
		if (handler && handler.target === message.peerId) {
			this._removeMessage(messageId);
			this._notifyListener(handler, 'PeerDisconnected', null);
		}
	}

	this.emit('peer-disconnected', message.peerId);
};

DiyaNode.prototype._handleRequest = function (handler, message) {
	if (message.type === 'PartialAnswer') {
		if (typeof this._pendingMessages[message.id].callback_partial === 'function') {
			var error = message.error ? message.error : null;
			var data = message.data ? message.data : null;
			this._pendingMessages[message.id].callback_partial(error, data);
		}
	} else {

		this._removeMessage(message.id);
		this._notifyListener(handler, message.error, message.data);
	}
};

DiyaNode.prototype._handleSubscription = function (handler, message) {
	//remove subscription if it was closed from node
	if (message.result === "closed") {
		this._removeMessage(message.id);
		message.error = 'SubscriptionClosed';
	}
	this._notifyListener(handler, message.error, message.data ? message.data : null);
};

DiyaNode.prototype._handleSocketServerData = function (message) {
	this._diyaSocket.get(message.data.socketId).push(new Buffer(message.data.buffer, 'base64'));
};

///////////////////
// SocketHandler //
///////////////////

function SocketHandler(WSocket, addr, timeout) {
	var that = this;
	this.addr = addr;

	if (WSocket) this._WSocket = WSocket;else if (!this._WSocket) this._WSocket = window.WebSocket;
	WSocket = this._WSocket;

	this._status = 'opening';

	try {
		this._socket = addr.indexOf("wss://") === 0 ? new WSocket(addr, undefined, { rejectUnauthorized: false }) : new WSocket(addr);

		this._socketOpenCallback = this._onopen.bind(this);
		this._socketCloseCallback = this._onclose.bind(this);
		this._socketMessageCallback = this._onmessage.bind(this);
		this._socketErrorCallback = this._onerror.bind(this);

		this._socket.addEventListener('open', this._socketOpenCallback);
		this._socket.addEventListener('close', this._socketCloseCallback);
		this._socket.addEventListener('message', this._socketMessageCallback);
		this._socket.addEventListener('error', this._socketErrorCallback);

		this._socket.addEventListener('error', function (err) {
			Logger.error("[WS] error : " + err.toString());
			that._socket.close();
		});

		setTimeout(function () {
			if (that._status === 'opened') return;
			if (that._status !== 'closed') {
				Logger.log('d1: ' + that.addr + ' timed out while connecting');
				that.close();
				that.emit('timeout', that._socket);
			}
		}, timeout);
	} catch (e) {
		Logger.error(e.stack);
		that.close();
		throw e;
	}
};
inherits(SocketHandler, EventEmitter);

SocketHandler.prototype.close = function () {
	if (this._disconnectionDeferred && this._disconnectionDeferred.promise) return this._disconnectionDeferred.promise;
	this._disconnectionDeferred = Q.defer();
	this._status = 'closing';
	this.emit('closing', this._socket);
	if (this._socket) this._socket.close();
	return this._disconnectionDeferred.promise;
};

SocketHandler.prototype.send = function (message) {
	try {
		var data = JSON.stringify(message);
	} catch (err) {
		console.error('Cannot serialize message');
		return false;
	}

	try {
		this._socket.send(data);
	} catch (err) {
		console.error('Cannot send message');
		console.error(err);
		return false;
	}

	return true;
};

SocketHandler.prototype.isConnected = function () {
	return this._socket.readyState == this._WSocket.OPEN && this._status === 'opened';
};

SocketHandler.prototype._onopen = function () {
	this._status = 'opened';
	this.emit('open', this._socket);
};

SocketHandler.prototype._onclose = function (evt) {
	this._status = 'closed';
	this.unregisterCallbacks();
	this.emit('close', this._socket);
	if (this._disconnectionDeferred && this._disconnectionDeferred.promise) this._disconnectionDeferred.resolve();
};

SocketHandler.prototype._onmessage = function (evt) {
	try {
		var message = JSON.parse(evt.data);
		this.emit('message', message);
	} catch (err) {
		Logger.error("[WS] cannot parse message, dropping...");
		throw err;
	}
};

SocketHandler.prototype._onerror = function (evt) {
	this.emit('error', evt);
};

SocketHandler.prototype.unregisterCallbacks = function () {
	if (this._socket && typeof this._socket.removeEventListener === 'function') {
		this._socket.removeEventListener('open', this._socketOpenCallback);
		this._socket.removeEventListener('close', this._socketCloseCallback);
		this._socket.removeEventListener('message', this._socketMessageCallback);
	} else if (this._socket && typeof this._socket.removeAllListeners === 'function') {
		this._socket.removeAllListeners();
	}
};

///////////////////////////////////////////////////////////////
////////////////////// Utility methods ////////////////////////
///////////////////////////////////////////////////////////////

DiyaNode.prototype._createMessage = function (params, type) {
	if (!params || !type || type !== "Request" && type !== "Subscription" && type !== "Unsubscribe" && type !== "SocketClientData") {
		return null;
	}

	return {
		type: type,
		id: this._generateId(),
		service: params.service,
		target: params.target,
		func: params.func,
		obj: params.obj,
		data: params.data,
		bus: params.bus
	};
};

DiyaNode.prototype._generateId = function () {
	var id = this._nextId;
	this._nextId++;
	return id;
};

module.exports = DiyaNode;

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9EaXlhTm9kZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLFlBQVksRUFBRSxPQUFPLE1BQVAsS0FBa0IsV0FBcEIsQ0FBaEI7QUFDQSxJQUFJLDBCQUFKO0FBQ0EsSUFBRyxDQUFDLFNBQUosRUFBZTtBQUNkLEtBQUksSUFBSSxRQUFRLEdBQVIsQ0FBUjtBQUNBLHFCQUFvQixRQUFRLHFCQUFSLENBQXBCO0FBQ0EsQ0FIRCxNQUlLO0FBQUUsS0FBSSxJQUFJLE9BQU8sQ0FBZjtBQUFtQjs7QUFFMUIsSUFBSSxlQUFlLFFBQVEsb0JBQVIsQ0FBbkI7QUFDQSxJQUFJLFdBQVcsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJLGFBQWEsUUFBUSxjQUFSLENBQWpCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLFFBQVEsS0FBWjtBQUNBLElBQUksU0FBUztBQUNaLE1BQUssYUFBUyxPQUFULEVBQWlCO0FBQ3JCLE1BQUcsS0FBSCxFQUFVLFFBQVEsR0FBUixDQUFZLE9BQVo7QUFDVixFQUhXOztBQUtaLFFBQU8sZUFBUyxPQUFULEVBQWlCO0FBQ3ZCLE1BQUcsS0FBSCxFQUFVLFFBQVEsS0FBUixDQUFjLE9BQWQ7QUFDVjtBQVBXLENBQWI7O0FBVUE7QUFDQTtBQUNBOzs7QUFHQSxTQUFTLFFBQVQsR0FBbUI7QUFDbEIsY0FBYSxJQUFiLENBQWtCLElBQWxCOztBQUVBLE1BQUssS0FBTCxHQUFhLElBQWI7QUFDQSxNQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxNQUFLLEtBQUwsR0FBYSxJQUFiOztBQUVBLE1BQUssT0FBTCxHQUFlLFFBQWY7QUFDQSxNQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0EsTUFBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLE1BQUssT0FBTCxHQUFlLENBQWY7QUFDQSxNQUFLLG1CQUFMLEdBQTJCLElBQTNCO0FBQ0EsTUFBSyxzQkFBTCxHQUE4QixJQUE5QjtBQUNBLE1BQUssZ0JBQUwsR0FBd0IsRUFBeEI7QUFDQSxNQUFLLE1BQUwsR0FBYyxFQUFkO0FBQ0EsTUFBSyxpQkFBTCxHQUF5QixJQUF6QjtBQUNBLE1BQUssZUFBTCxHQUF1QixJQUF2QjtBQUNBLE1BQUssS0FBTCxHQUFhLElBQUksR0FBSixFQUFiO0FBQ0EsTUFBSyxXQUFMLEdBQW1CLElBQUksR0FBSixFQUFuQjtBQUNBO0FBQ0QsU0FBUyxRQUFULEVBQW1CLFlBQW5COztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFNBQVQsQ0FBbUIsSUFBbkIsR0FBMEIsVUFBUyxJQUFULEVBQWU7QUFDeEMsS0FBRyxJQUFILEVBQVMsS0FBSyxLQUFMLEdBQWEsSUFBYixDQUFULEtBQ0ssT0FBTyxLQUFLLEtBQVo7QUFDTCxDQUhEO0FBSUEsU0FBUyxTQUFULENBQW1CLGFBQW5CLEdBQW1DLFVBQVMsYUFBVCxFQUF3QjtBQUMxRCxLQUFHLGtCQUFrQixTQUFyQixFQUFnQyxLQUFLLGNBQUwsR0FBc0IsYUFBdEIsQ0FBaEMsS0FDSyxPQUFPLEtBQUssY0FBWjtBQUNMLENBSEQ7QUFJQSxTQUFTLFNBQVQsQ0FBbUIsSUFBbkIsR0FBMEIsVUFBUyxJQUFULEVBQWU7QUFDeEMsS0FBRyxTQUFTLFNBQVosRUFBdUIsS0FBSyxLQUFMLEdBQWEsSUFBYixDQUF2QixLQUNLLE9BQU8sS0FBSyxLQUFaO0FBQ0wsQ0FIRDtBQUlBLFNBQVMsU0FBVCxDQUFtQixJQUFuQixHQUEwQixZQUFXO0FBQUUsUUFBTyxLQUFLLEtBQVo7QUFBb0IsQ0FBM0Q7QUFDQSxTQUFTLFNBQVQsQ0FBbUIsS0FBbkIsR0FBMkIsWUFBVTtBQUFFLFFBQU8sS0FBSyxNQUFaO0FBQXFCLENBQTVEO0FBQ0EsU0FBUyxTQUFULENBQW1CLElBQW5CLEdBQTBCLFlBQVc7QUFBRSxRQUFPLEtBQUssS0FBWjtBQUFvQixDQUEzRDtBQUNBLFNBQVMsU0FBVCxDQUFtQixVQUFuQixHQUFnQyxVQUFTLFFBQVQsRUFBbUI7QUFBRSxNQUFLLFFBQUwsR0FBZ0IsYUFBYSxLQUE3QjtBQUFxQyxDQUExRjtBQUNBLFNBQVMsU0FBVCxDQUFtQixVQUFuQixHQUFnQyxVQUFTLE9BQVQsRUFBa0I7QUFBQyxNQUFLLFFBQUwsR0FBZ0IsT0FBaEI7QUFBeUIsQ0FBNUU7O0FBRUE7QUFDQSxTQUFTLFNBQVQsQ0FBbUIsT0FBbkIsR0FBNkIsVUFBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCO0FBQUE7O0FBQ3JELE1BQUssY0FBTCxHQUFzQixLQUF0Qjs7QUFFQTtBQUNBLEtBQUksS0FBSyxVQUFMLENBQWdCLFNBQWhCLENBQUosRUFBZ0M7QUFDL0I7QUFDQSxNQUFJLEtBQUssS0FBTCxLQUFlLElBQW5CLEVBQXlCO0FBQ3hCLFdBQVEsR0FBUjtBQUNBLE9BQUksS0FBSyxPQUFMLEtBQWlCLFFBQXJCLEVBQStCO0FBQzlCLFlBQVEsR0FBUjtBQUNBLFdBQU8sRUFBRSxLQUFLLElBQUwsRUFBRixDQUFQO0FBQ0EsSUFIRCxNQUlLLElBQUksS0FBSyxtQkFBTCxJQUE0QixLQUFLLG1CQUFMLENBQXlCLE9BQXJELElBQWdFLEtBQUssbUJBQUwsQ0FBeUIsT0FBekIsQ0FBaUMsU0FBakMsRUFBcEUsRUFBa0g7QUFDdEgsWUFBUSxHQUFSO0FBQ0EsV0FBTyxLQUFLLG1CQUFMLENBQXlCLE9BQWhDO0FBQ0E7QUFDRDs7QUFFRCxTQUFPLEtBQUssS0FBTCxHQUNOLElBRE0sQ0FDQSxhQUFLO0FBQ1gsU0FBSyxLQUFMLEdBQWEsSUFBYjtBQUNBLFNBQUssbUJBQUwsR0FBMkIsRUFBRSxLQUFGLEVBQTNCO0FBQ0EsVUFBTyxHQUFQLENBQVcsb0JBQW9CLE1BQUssS0FBcEM7QUFDQSxPQUFJLE9BQU8sSUFBSSxpQkFBSixDQUFzQixNQUFLLEtBQUwsQ0FBVyxNQUFYLENBQWtCLFVBQVUsTUFBNUIsQ0FBdEIsRUFBMkQsTUFBSyxlQUFoRSxDQUFYOztBQUVBLE9BQUksQ0FBQyxNQUFLLGNBQVYsRUFDQyxNQUFLLGNBQUwsR0FBc0IsSUFBdEI7O0FBRUQsU0FBSyxVQUFMOztBQUVBLFFBQUssRUFBTCxDQUFRLE1BQVIsRUFBZ0IsYUFBSztBQUNwQixRQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUFrQztBQUNqQyxhQUFRLEdBQVIsQ0FBWSwwRUFBWjtBQUNBO0FBQ0E7QUFDRCxVQUFLLE9BQUwsR0FBZSxRQUFmO0FBQ0EsVUFBSyxrQkFBTDtBQUNBLElBUEQ7O0FBU0EsUUFBSyxFQUFMLENBQVEsU0FBUixFQUFtQixhQUFLO0FBQ3ZCLFFBQUksTUFBSyxjQUFMLEtBQXdCLElBQTVCLEVBQ0M7QUFDRCxVQUFLLFVBQUw7QUFDQSxJQUpEOztBQU1BLFFBQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsYUFBSztBQUNyQixRQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUNDO0FBQ0QsVUFBSyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsVUFBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLFVBQUssaUJBQUw7QUFDQSxVQUFLLFFBQUw7O0FBRUEsUUFBSSxNQUFLLG1CQUFULEVBQThCO0FBQzdCLFdBQUssbUJBQUwsQ0FBeUIsTUFBekIsQ0FBZ0MsUUFBaEM7QUFDQSxXQUFLLG1CQUFMLEdBQTJCLElBQTNCO0FBQ0E7QUFDRCxJQVpEOztBQWNBLFFBQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsaUJBQVM7QUFDekIsUUFBSSxNQUFLLGNBQUwsS0FBd0IsSUFBNUIsRUFDQztBQUNELFVBQUssUUFBTCxDQUFjLEtBQWQ7QUFDQSxJQUpEOztBQU1BLFFBQUssRUFBTCxDQUFRLFNBQVIsRUFBbUIsYUFBSztBQUN2QixRQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUNDO0FBQ0QsVUFBSyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsVUFBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLFFBQUksTUFBSyxtQkFBVCxFQUE4QjtBQUM3QixXQUFLLG1CQUFMLENBQXlCLE1BQXpCLENBQWdDLFFBQWhDO0FBQ0EsV0FBSyxtQkFBTCxHQUEyQixJQUEzQjtBQUNBO0FBQ0QsSUFURDs7QUFXQSxRQUFLLEVBQUwsQ0FBUSxTQUFSLEVBQW1CLE1BQUssVUFBTCxDQUFnQixJQUFoQixPQUFuQjs7QUFFQSxVQUFPLE1BQUssbUJBQUwsQ0FBeUIsT0FBaEM7QUFDQSxHQTdETSxDQUFQO0FBOERBOztBQUVELEtBQUksWUFBWSxTQUFoQixFQUNDLEtBQUssUUFBTCxHQUFnQixPQUFoQixDQURELEtBRUssSUFBSSxLQUFLLFFBQUwsS0FBa0IsU0FBdEIsRUFDSixLQUFLLFFBQUwsR0FBZ0IsT0FBTyxTQUF2Qjs7QUFFRCxXQUFVLEtBQUssUUFBZjs7QUFFQTtBQUNBLEtBQUksS0FBSyxVQUFMLENBQWdCLE9BQWhCLEtBQTRCLEtBQUssUUFBckMsRUFDQyxPQUFPLEVBQUUsTUFBRixDQUFTLHNDQUFzQyxJQUF0QyxHQUE2QyxHQUF0RCxDQUFQOztBQUVELEtBQUksS0FBSyxVQUFMLENBQWdCLFFBQWhCLEtBQTZCLEtBQUssUUFBTCxLQUFrQixLQUFuRCxFQUNDLE9BQU8sRUFBRSxNQUFGLENBQVMsMENBQTBDLElBQTFDLEdBQWlELEdBQTFELENBQVA7O0FBRUQsS0FBSSxDQUFDLEtBQUssVUFBTCxDQUFnQixPQUFoQixDQUFELElBQTZCLENBQUMsS0FBSyxVQUFMLENBQWdCLFFBQWhCLENBQWxDLEVBQTZEO0FBQzVELE1BQUksS0FBSyxRQUFULEVBQ0MsT0FBTyxXQUFXLElBQWxCLENBREQsS0FHQyxPQUFPLFVBQVUsSUFBakI7QUFDRDs7QUFFRCxLQUFJLEtBQUssS0FBTCxLQUFlLElBQW5CLEVBQXlCO0FBQ3hCLE1BQUksS0FBSyxPQUFMLEtBQWlCLFFBQXJCLEVBQ0MsT0FBTyxFQUFFLEtBQUssSUFBTCxFQUFGLENBQVAsQ0FERCxLQUVLLElBQUksS0FBSyxtQkFBTCxJQUE0QixLQUFLLG1CQUFMLENBQXlCLE9BQXJELElBQWdFLEtBQUssbUJBQUwsQ0FBeUIsT0FBekIsQ0FBaUMsU0FBakMsRUFBcEUsRUFDSixPQUFPLEtBQUssbUJBQUwsQ0FBeUIsT0FBaEM7QUFDRDs7QUFFRCxRQUFPLEtBQUssS0FBTCxHQUNOLElBRE0sQ0FDQSxhQUFLO0FBQ1gsUUFBSyxLQUFMLEdBQWEsSUFBYjtBQUNBLFFBQUssbUJBQUwsR0FBMkIsRUFBRSxLQUFGLEVBQTNCO0FBQ0EsU0FBTyxHQUFQLENBQVcsb0JBQW9CLE1BQUssS0FBcEM7QUFDQSxNQUFJLE9BQU8sSUFBSSxhQUFKLENBQWtCLE9BQWxCLEVBQTJCLE1BQUssS0FBaEMsRUFBdUMsTUFBSyxlQUE1QyxDQUFYOztBQUVBLE1BQUksQ0FBQyxNQUFLLGNBQVYsRUFDQyxNQUFLLGNBQUwsR0FBc0IsSUFBdEI7O0FBRUQsUUFBSyxVQUFMOztBQUVBLE9BQUssRUFBTCxDQUFRLE1BQVIsRUFBZ0IsYUFBSztBQUNwQixPQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUFrQztBQUNqQyxZQUFRLEdBQVIsQ0FBWSxtRUFBWjtBQUNBO0FBQ0E7QUFDRCxTQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxTQUFLLE9BQUwsR0FBZSxRQUFmO0FBQ0EsU0FBSyxrQkFBTDtBQUNBLEdBUkQ7O0FBVUEsT0FBSyxFQUFMLENBQVEsU0FBUixFQUFtQixhQUFLO0FBQ3ZCLE9BQUksTUFBSyxjQUFMLEtBQXdCLElBQTVCLEVBQ0M7QUFDRCxTQUFLLFVBQUw7QUFDQSxHQUpEOztBQU1BLE9BQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsYUFBSztBQUNyQixPQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUNDO0FBQ0QsU0FBSyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLFNBQUssaUJBQUw7QUFDQSxTQUFLLFFBQUw7O0FBRUEsT0FBSSxNQUFLLG1CQUFULEVBQThCO0FBQzdCLFVBQUssbUJBQUwsQ0FBeUIsTUFBekIsQ0FBZ0MsUUFBaEM7QUFDQSxVQUFLLG1CQUFMLEdBQTJCLElBQTNCO0FBQ0E7QUFDRCxHQVpEOztBQWNBLE9BQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsaUJBQVM7QUFDekIsT0FBSSxNQUFLLGNBQUwsS0FBd0IsSUFBNUIsRUFDQztBQUNELFNBQUssUUFBTCxDQUFjLEtBQWQ7QUFDQSxHQUpEOztBQU1BLE9BQUssRUFBTCxDQUFRLFNBQVIsRUFBbUIsYUFBSztBQUN2QixPQUFJLE1BQUssY0FBTCxLQUF3QixJQUE1QixFQUNDO0FBQ0QsU0FBSyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLE9BQUksTUFBSyxtQkFBVCxFQUE4QjtBQUM3QixVQUFLLG1CQUFMLENBQXlCLE1BQXpCLENBQWdDLFFBQWhDO0FBQ0EsVUFBSyxtQkFBTCxHQUEyQixJQUEzQjtBQUNBO0FBQ0QsR0FURDs7QUFXQSxPQUFLLEVBQUwsQ0FBUSxTQUFSLEVBQW1CLE1BQUssVUFBTCxDQUFnQixJQUFoQixPQUFuQjs7QUFFQSxTQUFPLE1BQUssbUJBQUwsQ0FBeUIsT0FBaEM7QUFDQSxFQTlETSxDQUFQO0FBK0RBLENBN0tEOztBQStLQSxTQUFTLFNBQVQsQ0FBbUIsVUFBbkIsR0FBZ0MsWUFBVztBQUMxQyxNQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxRQUFPLEtBQUssS0FBTCxFQUFQO0FBQ0EsQ0FIRDs7QUFLQSxTQUFTLFNBQVQsQ0FBbUIsS0FBbkIsR0FBMkIsWUFBVTtBQUNwQyxNQUFLLGlCQUFMO0FBQ0EsS0FBRyxLQUFLLGNBQVIsRUFBd0IsT0FBTyxLQUFLLGNBQUwsQ0FBb0IsS0FBcEIsRUFBUCxDQUF4QixLQUNLLE9BQU8sR0FBUDtBQUNMLENBSkQ7O0FBTUEsU0FBUyxTQUFULENBQW1CLFdBQW5CLEdBQWlDLFlBQVU7QUFDMUMsUUFBUSxLQUFLLGNBQUwsSUFBdUIsS0FBSyxjQUFMLENBQW9CLFdBQXBCLEVBQS9CO0FBQ0EsQ0FGRDs7QUFJQSxTQUFTLFNBQVQsQ0FBbUIsT0FBbkIsR0FBNkIsVUFBUyxNQUFULEVBQWlCLFFBQWpCLEVBQTJCLE9BQTNCLEVBQW9DLE9BQXBDLEVBQTRDO0FBQ3hFLEtBQUksT0FBTyxJQUFYO0FBQ0EsS0FBRyxDQUFDLE9BQUosRUFBYSxVQUFVLEVBQVY7O0FBRWIsS0FBRyxPQUFPLFdBQVAsS0FBdUIsTUFBMUIsRUFBa0M7QUFDakMsTUFBSSxVQUFVLE9BQU8sS0FBUCxDQUFhLEdBQWIsQ0FBZDtBQUNBLE1BQUcsUUFBUSxNQUFSLElBQWdCLENBQW5CLEVBQXNCLE1BQU0sa0JBQU47QUFDdEIsV0FBUyxFQUFDLFNBQVEsUUFBUSxDQUFSLENBQVQsRUFBcUIsTUFBSyxRQUFRLENBQVIsQ0FBMUIsRUFBVDtBQUNBOztBQUVELEtBQUcsQ0FBQyxPQUFPLE9BQVgsRUFBb0I7QUFDbkIsU0FBTyxLQUFQLENBQWEsa0NBQWI7QUFDQSxTQUFPLEtBQVA7QUFDQTs7QUFFRCxLQUFJLFVBQVUsS0FBSyxjQUFMLENBQW9CLE1BQXBCLEVBQTRCLFNBQTVCLENBQWQ7QUFDQSxNQUFLLGNBQUwsQ0FBb0IsT0FBcEIsRUFBNkIsUUFBN0I7QUFDQSxLQUFHLE9BQU8sUUFBUSxnQkFBZixLQUFvQyxVQUF2QyxFQUFtRCxLQUFLLGdCQUFMLENBQXNCLFFBQVEsRUFBOUIsRUFBa0MsZ0JBQWxDLEdBQXFELFFBQVEsZ0JBQTdEO0FBQ25ELFNBQVEsT0FBUixHQUFrQixPQUFsQjs7QUFFQSxLQUFHLENBQUMsTUFBTSxPQUFOLENBQUQsSUFBbUIsVUFBVSxDQUFoQyxFQUFrQztBQUNqQyxhQUFXLFlBQVU7QUFDcEIsT0FBSSxVQUFVLEtBQUssY0FBTCxDQUFvQixRQUFRLEVBQTVCLENBQWQ7QUFDQSxPQUFHLE9BQUgsRUFBWSxLQUFLLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEIsdUJBQXFCLE9BQXJCLEdBQTZCLE9BQTNEO0FBQ1osR0FIRCxFQUdHLE9BSEg7QUFJQTs7QUFFRCxLQUFHLENBQUMsS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFKLEVBQXdCO0FBQ3ZCLE9BQUssY0FBTCxDQUFvQixRQUFRLEVBQTVCO0FBQ0EsVUFBUSxLQUFSLENBQWMsdUJBQWQ7QUFDQSxTQUFPLEtBQVA7QUFDQTs7QUFFRCxRQUFPLElBQVA7QUFDQSxDQWxDRDs7QUFvQ0EsU0FBUyxTQUFULENBQW1CLFNBQW5CLEdBQStCLFVBQVMsTUFBVCxFQUFpQixRQUFqQixFQUEwQjtBQUN4RCxLQUFHLE9BQU8sV0FBUCxLQUF1QixNQUExQixFQUFrQztBQUNqQyxNQUFJLFVBQVUsT0FBTyxLQUFQLENBQWEsR0FBYixDQUFkO0FBQ0EsTUFBRyxRQUFRLE1BQVIsSUFBZ0IsQ0FBbkIsRUFBc0IsTUFBTSxrQkFBTjtBQUN0QixXQUFTLEVBQUMsU0FBUSxRQUFRLENBQVIsQ0FBVCxFQUFxQixNQUFLLFFBQVEsQ0FBUixDQUExQixFQUFUO0FBQ0E7O0FBRUQsS0FBRyxDQUFDLE9BQU8sT0FBWCxFQUFtQjtBQUNsQixTQUFPLEtBQVAsQ0FBYSx1Q0FBYjtBQUNBLFNBQU8sQ0FBQyxDQUFSO0FBQ0E7O0FBRUQsS0FBSSxVQUFVLEtBQUssY0FBTCxDQUFvQixNQUFwQixFQUE0QixjQUE1QixDQUFkO0FBQ0EsTUFBSyxjQUFMLENBQW9CLE9BQXBCLEVBQTZCLFFBQTdCOztBQUVBLEtBQUcsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQUosRUFBd0I7QUFDdkIsT0FBSyxjQUFMLENBQW9CLFFBQVEsRUFBNUI7QUFDQSxTQUFPLEtBQVAsQ0FBYSw0QkFBYjtBQUNBLFNBQU8sQ0FBQyxDQUFSO0FBQ0E7O0FBRUQsUUFBTyxRQUFRLEVBQWY7QUFDQSxDQXRCRDs7QUF3QkEsU0FBUyxTQUFULENBQW1CLFVBQW5CLEdBQWdDLFVBQVMsTUFBVCxFQUFpQixNQUFqQixFQUF5QixRQUF6QixFQUFrQztBQUNqRSxNQUFLLFdBQUwsQ0FBaUIsR0FBakIsQ0FBcUIsT0FBTyxRQUE1QixFQUFzQyxJQUFJLFVBQUosQ0FBZSxNQUFmLEVBQXVCLE1BQXZCLENBQXRDO0FBQ0EsTUFBSyxXQUFMLENBQWlCLEdBQWpCLENBQXFCLE9BQU8sUUFBNUIsRUFBc0MscUJBQXRDLENBQTRELE9BQU8sUUFBbkU7QUFDQSxLQUFJLE9BQU8sUUFBUCxLQUFvQixVQUF4QixFQUFvQyxTQUFTLEtBQUssV0FBTCxDQUFpQixHQUFqQixDQUFxQixPQUFPLFFBQTVCLENBQVQ7QUFDcEMsQ0FKRDs7QUFNQSxTQUFTLFNBQVQsQ0FBbUIsY0FBbkIsR0FBb0MsVUFBUyxRQUFULEVBQWtCO0FBQ3JELEtBQUksS0FBSyxXQUFMLENBQWlCLEdBQWpCLENBQXFCLFFBQXJCLENBQUosRUFBbUM7QUFDbEMsT0FBSyxXQUFMLENBQWlCLEdBQWpCLENBQXFCLFFBQXJCLEVBQStCLElBQS9CLENBQW9DLE9BQXBDO0FBQ0EsT0FBSyxXQUFMLENBQWlCLE1BQWpCLENBQXdCLFFBQXhCO0FBQ0E7QUFDRCxDQUxEOztBQU9BLFNBQVMsU0FBVCxDQUFtQixjQUFuQixHQUFvQyxVQUFTLE1BQVQsRUFBZ0I7QUFDbkQsS0FBSSxVQUFVLEtBQUssY0FBTCxDQUFvQixNQUFwQixFQUE0QixrQkFBNUIsQ0FBZDtBQUNBLEtBQUcsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQUosRUFBd0I7QUFDdkIsUUFBTSxJQUFJLEtBQUosQ0FBVSxxQkFBVixDQUFOO0FBQ0E7QUFDRCxRQUFPLFFBQVEsRUFBZjtBQUNBLENBTkQ7O0FBUUEsU0FBUyxTQUFULENBQW1CLFdBQW5CLEdBQWlDLFVBQVMsS0FBVCxFQUFlO0FBQy9DLEtBQUcsS0FBSyxnQkFBTCxDQUFzQixLQUF0QixLQUFnQyxLQUFLLGdCQUFMLENBQXNCLEtBQXRCLEVBQTZCLElBQTdCLEtBQXNDLGNBQXpFLEVBQXdGO0FBQ3ZGLE1BQUksZUFBZSxLQUFLLGNBQUwsQ0FBb0IsS0FBcEIsQ0FBbkI7O0FBRUEsTUFBSSxVQUFVLEtBQUssY0FBTCxDQUFvQjtBQUNqQyxXQUFRLGFBQWEsTUFEWTtBQUVqQyxTQUFNO0FBQ0wsV0FBTztBQURGO0FBRjJCLEdBQXBCLEVBS1gsYUFMVyxDQUFkOztBQU9BLE1BQUcsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQUosRUFBd0I7QUFDdkIsVUFBTyxLQUFQLENBQWEsMkJBQWI7QUFDQSxVQUFPLEtBQVA7QUFDQTs7QUFFRCxTQUFPLElBQVA7QUFDQTtBQUNELFFBQU8sS0FBUDtBQUNBLENBbkJEOztBQXVCQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxTQUFULENBQW1CLGNBQW5CLEdBQW9DLFVBQVMsT0FBVCxFQUFrQixRQUFsQixFQUEyQjtBQUM5RCxNQUFLLGdCQUFMLENBQXNCLFFBQVEsRUFBOUIsSUFBb0M7QUFDbkMsWUFBVSxRQUR5QjtBQUVuQyxRQUFNLFFBQVEsSUFGcUI7QUFHbkMsVUFBUSxRQUFRO0FBSG1CLEVBQXBDO0FBS0EsQ0FORDs7QUFRQSxTQUFTLFNBQVQsQ0FBbUIsY0FBbkIsR0FBb0MsVUFBUyxTQUFULEVBQW1CO0FBQ3RELEtBQUksVUFBVSxLQUFLLGdCQUFMLENBQXNCLFNBQXRCLENBQWQ7QUFDQSxLQUFHLE9BQUgsRUFBVztBQUNWLFNBQU8sS0FBSyxnQkFBTCxDQUFzQixTQUF0QixDQUFQO0FBQ0EsU0FBTyxPQUFQO0FBQ0EsRUFIRCxNQUdLO0FBQ0osU0FBTyxJQUFQO0FBQ0E7QUFDRCxDQVJEOztBQVVBLFNBQVMsU0FBVCxDQUFtQixjQUFuQixHQUFvQyxVQUFTLEdBQVQsRUFBYyxJQUFkLEVBQW1CO0FBQ3RELE1BQUksSUFBSSxTQUFSLElBQXFCLEtBQUssZ0JBQTFCLEVBQTJDO0FBQzFDLE1BQUksVUFBVSxLQUFLLGNBQUwsQ0FBb0IsU0FBcEIsQ0FBZDtBQUNBLE9BQUssZUFBTCxDQUFxQixPQUFyQixFQUE4QixHQUE5QixFQUFtQyxJQUFuQztBQUNBO0FBQ0QsQ0FMRDs7QUFPQSxTQUFTLFNBQVQsQ0FBbUIsV0FBbkIsR0FBaUMsWUFBVztBQUMzQyxRQUFNLEtBQUssTUFBTCxDQUFZLE1BQWxCLEVBQTBCO0FBQ3pCLE1BQUksT0FBTyxLQUFLLE1BQUwsQ0FBWSxHQUFaLEVBQVg7QUFDQSxPQUFLLEtBQUwsQ0FBVyxNQUFYLENBQWtCLElBQWxCO0FBQ0EsT0FBSyxJQUFMLENBQVUsbUJBQVYsRUFBK0IsSUFBL0I7QUFDQTtBQUNELENBTkQ7O0FBUUEsU0FBUyxTQUFULENBQW1CLGtCQUFuQixHQUF3QyxVQUFTLFNBQVQsRUFBbUI7QUFDMUQsS0FBSSxVQUFVLEtBQUssZ0JBQUwsQ0FBc0IsU0FBdEIsQ0FBZDtBQUNBLFFBQU8sVUFBVSxPQUFWLEdBQW9CLElBQTNCO0FBQ0EsQ0FIRDs7QUFNQSxTQUFTLFNBQVQsQ0FBbUIsZUFBbkIsR0FBcUMsVUFBUyxPQUFULEVBQWtCLEtBQWxCLEVBQXlCLElBQXpCLEVBQThCO0FBQ2xFLEtBQUcsV0FBVyxPQUFPLFFBQVEsUUFBZixLQUE0QixVQUExQyxFQUFzRDtBQUNyRCxVQUFRLFFBQVEsS0FBUixHQUFnQixJQUF4QjtBQUNBLFNBQU8sT0FBTyxJQUFQLEdBQWMsSUFBckI7QUFDQSxNQUFJO0FBQ0gsV0FBUSxRQUFSLENBQWlCLEtBQWpCLEVBQXdCLElBQXhCO0FBQ0EsR0FGRCxDQUVFLE9BQU0sQ0FBTixFQUFTO0FBQUUsV0FBUSxHQUFSLENBQVksaUNBQWlDLEVBQUUsS0FBbkMsR0FBMkMsRUFBRSxLQUE3QyxHQUFxRCxDQUFqRTtBQUFxRTtBQUNsRjtBQUNELENBUkQ7O0FBVUEsU0FBUyxTQUFULENBQW1CLEtBQW5CLEdBQTJCLFVBQVUsT0FBVixFQUFtQjtBQUM3QyxRQUFPLEtBQUssY0FBTCxJQUF1QixLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBeUIsT0FBekIsQ0FBOUI7QUFDQSxDQUZEOztBQUlBLFNBQVMsU0FBVCxDQUFtQixrQkFBbkIsR0FBd0MsWUFBVTtBQUNqRCxLQUFJLE9BQU8sSUFBWDs7QUFFQSxNQUFLLFlBQUwsR0FBb0IsS0FBcEI7QUFDQSxNQUFLLFNBQUwsR0FBaUIsSUFBSSxJQUFKLEdBQVcsT0FBWCxFQUFqQjs7QUFFQSxVQUFTLFNBQVQsR0FBb0I7QUFDbkIsTUFBSSxVQUFVLElBQUksSUFBSixHQUFXLE9BQVgsRUFBZDtBQUNBLE1BQUcsVUFBVSxLQUFLLFNBQWYsR0FBMkIsS0FBSyxZQUFuQyxFQUFnRDtBQUMvQyxRQUFLLFdBQUw7QUFDQSxVQUFPLEdBQVAsQ0FBVyxpQkFBWDtBQUNBLEdBSEQsTUFHSztBQUNKLFVBQU8sR0FBUCxDQUFXLGtCQUFYO0FBQ0EsUUFBSyxpQkFBTCxHQUF5QixXQUFXLFNBQVgsRUFBc0IsS0FBSyxLQUFMLENBQVcsS0FBSyxZQUFMLEdBQW9CLEdBQS9CLENBQXRCLENBQXpCO0FBQ0E7QUFDRDs7QUFFRDtBQUNBLENBbEJEOztBQW9CQSxTQUFTLFNBQVQsQ0FBbUIsaUJBQW5CLEdBQXVDLFlBQVU7QUFDaEQsY0FBYSxLQUFLLGlCQUFsQjtBQUNBLENBRkQ7O0FBSUEsU0FBUyxTQUFULENBQW1CLFdBQW5CLEdBQWlDLFlBQVU7QUFDMUMsTUFBSyxjQUFMLENBQW9CLEtBQXBCO0FBQ0EsTUFBSyxRQUFMO0FBQ0EsQ0FIRDs7QUFLQTtBQUNBO0FBQ0E7OztBQUdBLFNBQVMsU0FBVCxDQUFtQixVQUFuQixHQUFnQyxVQUFTLE9BQVQsRUFBaUI7QUFDaEQsS0FBRyxRQUFRLElBQVIsS0FBaUIsa0JBQXBCLEVBQXdDLEtBQUssdUJBQUwsQ0FBNkIsT0FBN0I7QUFDeEMsS0FBRyxNQUFNLFFBQVEsRUFBZCxDQUFILEVBQXNCLE9BQU8sS0FBSyxzQkFBTCxDQUE0QixPQUE1QixDQUFQO0FBQ3RCLEtBQUksVUFBVSxLQUFLLGtCQUFMLENBQXdCLFFBQVEsRUFBaEMsQ0FBZDtBQUNBLEtBQUcsQ0FBQyxPQUFKLEVBQWE7QUFDYixTQUFPLFFBQVEsSUFBZjtBQUNDLE9BQUssU0FBTDtBQUNDLFFBQUssY0FBTCxDQUFvQixPQUFwQixFQUE2QixPQUE3QjtBQUNBO0FBQ0QsT0FBSyxjQUFMO0FBQ0MsUUFBSyxtQkFBTCxDQUF5QixPQUF6QixFQUFrQyxPQUFsQztBQUNBO0FBTkY7QUFRQSxDQWJEOztBQWVBLFNBQVMsU0FBVCxDQUFtQixVQUFuQixHQUFnQyxZQUFXO0FBQzFDLE1BQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsSUFBckI7QUFDQSxDQUZEOztBQUlBLFNBQVMsU0FBVCxDQUFtQixRQUFuQixHQUE4QixVQUFTLEtBQVQsRUFBZ0I7QUFDN0MsTUFBSyxJQUFMLENBQVUsT0FBVixFQUFtQixJQUFJLEtBQUosQ0FBVSxLQUFWLENBQW5CO0FBQ0EsQ0FGRDs7QUFJQSxTQUFTLFNBQVQsQ0FBbUIsVUFBbkIsR0FBZ0MsWUFBVztBQUMxQyxNQUFLLElBQUwsQ0FBVSxTQUFWLEVBQXFCLElBQXJCO0FBQ0EsQ0FGRDs7QUFJQSxTQUFTLFNBQVQsQ0FBbUIsUUFBbkIsR0FBOEIsWUFBVTtBQUN2QyxLQUFJLE9BQU8sSUFBWDs7QUFFQSxNQUFLLGNBQUwsQ0FBb0Isa0JBQXBCO0FBQ0EsTUFBSyxXQUFMOztBQUVBLEtBQUcsQ0FBQyxLQUFLLGNBQVQsRUFBeUI7QUFDeEIsU0FBTyxHQUFQLENBQVcsdUNBQVg7QUFDQSxhQUFXLFlBQVU7QUFDcEIsUUFBSyxPQUFMLENBQWEsS0FBSyxLQUFsQixFQUF5QixLQUFLLFFBQTlCLEVBQXdDLEtBQXhDLENBQThDLFVBQVMsR0FBVCxFQUFhLENBQUUsQ0FBN0Q7QUFDQSxHQUZELEVBRUcsS0FBSyxpQkFGUjtBQUdBO0FBQ0QsTUFBSyxJQUFMLENBQVUsT0FBVixFQUFtQixLQUFLLEtBQXhCO0FBQ0EsQ0FiRDs7QUFlQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxTQUFULENBQW1CLHNCQUFuQixHQUE0QyxVQUFTLE9BQVQsRUFBaUI7QUFDNUQsU0FBTyxRQUFRLElBQWY7QUFDQyxPQUFLLGVBQUw7QUFDQyxRQUFLLG9CQUFMLENBQTBCLE9BQTFCO0FBQ0E7QUFDRCxPQUFLLGtCQUFMO0FBQ0MsUUFBSyx1QkFBTCxDQUE2QixPQUE3QjtBQUNBO0FBQ0QsT0FBSyxXQUFMO0FBQ0MsUUFBSyxnQkFBTCxDQUFzQixPQUF0QjtBQUNBO0FBQ0QsT0FBSyxNQUFMO0FBQ0MsUUFBSyxXQUFMLENBQWlCLE9BQWpCO0FBQ0E7QUFaRjtBQWNBLENBZkQ7O0FBaUJBLFNBQVMsU0FBVCxDQUFtQixXQUFuQixHQUFpQyxVQUFVLE9BQVYsRUFBbUI7QUFDbkQsU0FBUSxJQUFSLEdBQWUsTUFBZjtBQUNBLE1BQUssU0FBTCxHQUFpQixJQUFJLElBQUosR0FBVyxPQUFYLEVBQWpCO0FBQ0EsTUFBSyxLQUFMLENBQVcsT0FBWDtBQUNBLENBSkQ7O0FBTUEsU0FBUyxTQUFULENBQW1CLGdCQUFuQixHQUFzQyxVQUFTLE9BQVQsRUFBaUI7O0FBRXRELEtBQUcsUUFBUSxLQUFSLEtBQWtCLFNBQWxCLElBQStCLE9BQU8sUUFBUSxJQUFmLEtBQXdCLFFBQTFELEVBQW1FO0FBQ2xFLFNBQU8sS0FBUCxDQUFhLHNEQUFiO0FBQ0E7QUFDQTs7QUFHRCxNQUFLLEtBQUwsR0FBYSxRQUFRLElBQXJCOztBQUVBLE1BQUksSUFBSSxJQUFFLENBQVYsRUFBWSxJQUFFLFFBQVEsS0FBUixDQUFjLE1BQTVCLEVBQW9DLEdBQXBDLEVBQXdDO0FBQ3ZDLE9BQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsUUFBUSxLQUFSLENBQWMsQ0FBZCxDQUFqQjtBQUNBLE9BQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxRQUFRLEtBQVIsQ0FBYyxDQUFkLENBQWYsRUFBaUMsSUFBSSxHQUFKLEVBQWpDO0FBQ0EsT0FBSyxJQUFMLENBQVUsZ0JBQVYsRUFBNEIsUUFBUSxLQUFSLENBQWMsQ0FBZCxDQUE1QjtBQUNBOztBQUVELE1BQUssbUJBQUwsQ0FBeUIsT0FBekIsQ0FBaUMsS0FBSyxJQUFMLEVBQWpDO0FBQ0EsTUFBSyxJQUFMLENBQVUsTUFBVixFQUFrQixLQUFLLEtBQXZCO0FBQ0EsTUFBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLE1BQUssbUJBQUwsR0FBMkIsSUFBM0I7QUFDQSxDQXBCRDs7QUFzQkEsU0FBUyxTQUFULENBQW1CLG9CQUFuQixHQUEwQyxVQUFTLE9BQVQsRUFBaUI7QUFDMUQsS0FBRyxRQUFRLE1BQVIsS0FBbUIsU0FBdEIsRUFBZ0M7QUFDL0IsU0FBTyxLQUFQLENBQWEsMERBQWI7QUFDQTtBQUNBOztBQUVEO0FBQ0EsTUFBSyxNQUFMLENBQVksSUFBWixDQUFpQixRQUFRLE1BQXpCO0FBQ0EsTUFBSyxLQUFMLENBQVcsR0FBWCxDQUFlLFFBQVEsTUFBdkIsRUFBK0IsSUFBSSxHQUFKLEVBQS9COztBQUVBLE1BQUssSUFBTCxDQUFVLGdCQUFWLEVBQTRCLFFBQVEsTUFBcEM7QUFDQSxDQVhEOztBQWFBLFNBQVMsU0FBVCxDQUFtQix1QkFBbkIsR0FBNkMsVUFBUyxPQUFULEVBQWlCO0FBQzdELEtBQUcsUUFBUSxNQUFSLEtBQW1CLFNBQXRCLEVBQWdDO0FBQy9CLFNBQU8sS0FBUCxDQUFhLDZEQUFiO0FBQ0E7QUFDQTs7QUFFRDtBQUNBLE1BQUksSUFBSSxJQUFFLEtBQUssTUFBTCxDQUFZLE1BQVosR0FBcUIsQ0FBL0IsRUFBa0MsS0FBSyxDQUF2QyxFQUEwQyxHQUExQyxFQUE4QztBQUM3QyxNQUFHLEtBQUssTUFBTCxDQUFZLENBQVosTUFBbUIsUUFBUSxNQUE5QixFQUFxQztBQUNwQyxRQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLENBQW5CLEVBQXNCLENBQXRCO0FBQ0E7QUFDQTtBQUNEO0FBQ0Q7QUFDQSxNQUFLLEtBQUwsQ0FBVyxNQUFYLENBQWtCLFFBQVEsTUFBMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBSSxJQUFJLFNBQVIsSUFBcUIsS0FBSyxnQkFBMUIsRUFBMkM7QUFDMUMsTUFBSSxVQUFVLEtBQUssa0JBQUwsQ0FBd0IsU0FBeEIsQ0FBZDtBQUNBLE1BQUcsV0FBVyxRQUFRLE1BQVIsS0FBbUIsUUFBUSxNQUF6QyxFQUFpRDtBQUNoRCxRQUFLLGNBQUwsQ0FBb0IsU0FBcEI7QUFDQSxRQUFLLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEIsa0JBQTlCLEVBQWtELElBQWxEO0FBQ0E7QUFDRDs7QUFFRCxNQUFLLElBQUwsQ0FBVSxtQkFBVixFQUErQixRQUFRLE1BQXZDO0FBQ0EsQ0E1QkQ7O0FBOEJBLFNBQVMsU0FBVCxDQUFtQixjQUFuQixHQUFvQyxVQUFTLE9BQVQsRUFBa0IsT0FBbEIsRUFBMEI7QUFDN0QsS0FBRyxRQUFRLElBQVIsS0FBaUIsZUFBcEIsRUFBcUM7QUFDcEMsTUFBRyxPQUFPLEtBQUssZ0JBQUwsQ0FBc0IsUUFBUSxFQUE5QixFQUFrQyxnQkFBekMsS0FBOEQsVUFBakUsRUFBNkU7QUFDNUUsT0FBSSxRQUFRLFFBQVEsS0FBUixHQUFnQixRQUFRLEtBQXhCLEdBQWdDLElBQTVDO0FBQ0EsT0FBSSxPQUFPLFFBQVEsSUFBUixHQUFlLFFBQVEsSUFBdkIsR0FBOEIsSUFBekM7QUFDQSxRQUFLLGdCQUFMLENBQXNCLFFBQVEsRUFBOUIsRUFBa0MsZ0JBQWxDLENBQW1ELEtBQW5ELEVBQTBELElBQTFEO0FBQ0E7QUFDRCxFQU5ELE1BTU87O0FBRU4sT0FBSyxjQUFMLENBQW9CLFFBQVEsRUFBNUI7QUFDQSxPQUFLLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEIsUUFBUSxLQUF0QyxFQUE2QyxRQUFRLElBQXJEO0FBQ0E7QUFDRCxDQVpEOztBQWNBLFNBQVMsU0FBVCxDQUFtQixtQkFBbkIsR0FBeUMsVUFBUyxPQUFULEVBQWtCLE9BQWxCLEVBQTBCO0FBQ2xFO0FBQ0EsS0FBRyxRQUFRLE1BQVIsS0FBbUIsUUFBdEIsRUFBZ0M7QUFDL0IsT0FBSyxjQUFMLENBQW9CLFFBQVEsRUFBNUI7QUFDQSxVQUFRLEtBQVIsR0FBZ0Isb0JBQWhCO0FBQ0E7QUFDRCxNQUFLLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEIsUUFBUSxLQUF0QyxFQUE2QyxRQUFRLElBQVIsR0FBZSxRQUFRLElBQXZCLEdBQThCLElBQTNFO0FBQ0EsQ0FQRDs7QUFTQSxTQUFTLFNBQVQsQ0FBbUIsdUJBQW5CLEdBQTZDLFVBQVMsT0FBVCxFQUFpQjtBQUM1RCxNQUFLLFdBQUwsQ0FBaUIsR0FBakIsQ0FBcUIsUUFBUSxJQUFSLENBQWEsUUFBbEMsRUFBNEMsSUFBNUMsQ0FBaUQsSUFBSSxNQUFKLENBQVcsUUFBUSxJQUFSLENBQWEsTUFBeEIsRUFBZ0MsUUFBaEMsQ0FBakQ7QUFDRCxDQUZEOztBQUlBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLGFBQVQsQ0FBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsRUFBc0MsT0FBdEMsRUFBK0M7QUFDOUMsS0FBSSxPQUFPLElBQVg7QUFDQSxNQUFLLElBQUwsR0FBWSxJQUFaOztBQUVBLEtBQUcsT0FBSCxFQUFZLEtBQUssUUFBTCxHQUFnQixPQUFoQixDQUFaLEtBQ0ssSUFBRyxDQUFDLEtBQUssUUFBVCxFQUFtQixLQUFLLFFBQUwsR0FBZ0IsT0FBTyxTQUF2QjtBQUN4QixXQUFVLEtBQUssUUFBZjs7QUFFQSxNQUFLLE9BQUwsR0FBZSxTQUFmOztBQUVBLEtBQUk7QUFDSCxPQUFLLE9BQUwsR0FBZSxLQUFLLE9BQUwsQ0FBYSxRQUFiLE1BQXlCLENBQXpCLEdBQTZCLElBQUksT0FBSixDQUFZLElBQVosRUFBa0IsU0FBbEIsRUFBNkIsRUFBQyxvQkFBbUIsS0FBcEIsRUFBN0IsQ0FBN0IsR0FBd0YsSUFBSSxPQUFKLENBQVksSUFBWixDQUF2Rzs7QUFFQSxPQUFLLG1CQUFMLEdBQTJCLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBM0I7QUFDQSxPQUFLLG9CQUFMLEdBQTRCLEtBQUssUUFBTCxDQUFjLElBQWQsQ0FBbUIsSUFBbkIsQ0FBNUI7QUFDQSxPQUFLLHNCQUFMLEdBQThCLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixJQUFyQixDQUE5QjtBQUNBLE9BQUssb0JBQUwsR0FBNEIsS0FBSyxRQUFMLENBQWMsSUFBZCxDQUFtQixJQUFuQixDQUE1Qjs7QUFFQSxPQUFLLE9BQUwsQ0FBYSxnQkFBYixDQUE4QixNQUE5QixFQUFzQyxLQUFLLG1CQUEzQztBQUNBLE9BQUssT0FBTCxDQUFhLGdCQUFiLENBQThCLE9BQTlCLEVBQXNDLEtBQUssb0JBQTNDO0FBQ0EsT0FBSyxPQUFMLENBQWEsZ0JBQWIsQ0FBOEIsU0FBOUIsRUFBeUMsS0FBSyxzQkFBOUM7QUFDQSxPQUFLLE9BQUwsQ0FBYSxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxLQUFLLG9CQUE1Qzs7QUFFQSxPQUFLLE9BQUwsQ0FBYSxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxVQUFTLEdBQVQsRUFBYTtBQUNuRCxVQUFPLEtBQVAsQ0FBYSxrQkFBa0IsSUFBSSxRQUFKLEVBQS9CO0FBQ0EsUUFBSyxPQUFMLENBQWEsS0FBYjtBQUNBLEdBSEQ7O0FBS0EsYUFBVyxZQUFVO0FBQ3BCLE9BQUcsS0FBSyxPQUFMLEtBQWlCLFFBQXBCLEVBQThCO0FBQzlCLE9BQUcsS0FBSyxPQUFMLEtBQWlCLFFBQXBCLEVBQTZCO0FBQzVCLFdBQU8sR0FBUCxDQUFXLFNBQVMsS0FBSyxJQUFkLEdBQXFCLDZCQUFoQztBQUNBLFNBQUssS0FBTDtBQUNBLFNBQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsS0FBSyxPQUExQjtBQUNBO0FBQ0QsR0FQRCxFQU9HLE9BUEg7QUFTQSxFQTNCRCxDQTJCRSxPQUFNLENBQU4sRUFBUztBQUNWLFNBQU8sS0FBUCxDQUFhLEVBQUUsS0FBZjtBQUNBLE9BQUssS0FBTDtBQUNBLFFBQU0sQ0FBTjtBQUNBO0FBQ0Q7QUFDRCxTQUFTLGFBQVQsRUFBd0IsWUFBeEI7O0FBRUEsY0FBYyxTQUFkLENBQXdCLEtBQXhCLEdBQWdDLFlBQVc7QUFDMUMsS0FBRyxLQUFLLHNCQUFMLElBQStCLEtBQUssc0JBQUwsQ0FBNEIsT0FBOUQsRUFBdUUsT0FBTyxLQUFLLHNCQUFMLENBQTRCLE9BQW5DO0FBQ3ZFLE1BQUssc0JBQUwsR0FBOEIsRUFBRSxLQUFGLEVBQTlCO0FBQ0EsTUFBSyxPQUFMLEdBQWUsU0FBZjtBQUNBLE1BQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsS0FBSyxPQUExQjtBQUNBLEtBQUcsS0FBSyxPQUFSLEVBQWlCLEtBQUssT0FBTCxDQUFhLEtBQWI7QUFDakIsUUFBTyxLQUFLLHNCQUFMLENBQTRCLE9BQW5DO0FBQ0EsQ0FQRDs7QUFTQSxjQUFjLFNBQWQsQ0FBd0IsSUFBeEIsR0FBK0IsVUFBUyxPQUFULEVBQWtCO0FBQ2hELEtBQUk7QUFDSCxNQUFJLE9BQU8sS0FBSyxTQUFMLENBQWUsT0FBZixDQUFYO0FBQ0EsRUFGRCxDQUVFLE9BQU0sR0FBTixFQUFXO0FBQ1osVUFBUSxLQUFSLENBQWMsMEJBQWQ7QUFDQSxTQUFPLEtBQVA7QUFDQTs7QUFFRCxLQUFJO0FBQ0gsT0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQixJQUFsQjtBQUNBLEVBRkQsQ0FFRSxPQUFNLEdBQU4sRUFBVTtBQUNYLFVBQVEsS0FBUixDQUFjLHFCQUFkO0FBQ0EsVUFBUSxLQUFSLENBQWMsR0FBZDtBQUNBLFNBQU8sS0FBUDtBQUNBOztBQUVELFFBQU8sSUFBUDtBQUNBLENBakJEOztBQW1CQSxjQUFjLFNBQWQsQ0FBd0IsV0FBeEIsR0FBc0MsWUFBVztBQUNoRCxRQUFPLEtBQUssT0FBTCxDQUFhLFVBQWIsSUFBMkIsS0FBSyxRQUFMLENBQWMsSUFBekMsSUFBaUQsS0FBSyxPQUFMLEtBQWlCLFFBQXpFO0FBQ0EsQ0FGRDs7QUFJQSxjQUFjLFNBQWQsQ0FBd0IsT0FBeEIsR0FBa0MsWUFBVztBQUM1QyxNQUFLLE9BQUwsR0FBZSxRQUFmO0FBQ0EsTUFBSyxJQUFMLENBQVUsTUFBVixFQUFrQixLQUFLLE9BQXZCO0FBQ0EsQ0FIRDs7QUFLQSxjQUFjLFNBQWQsQ0FBd0IsUUFBeEIsR0FBbUMsVUFBUyxHQUFULEVBQWM7QUFDaEQsTUFBSyxPQUFMLEdBQWUsUUFBZjtBQUNBLE1BQUssbUJBQUw7QUFDQSxNQUFLLElBQUwsQ0FBVSxPQUFWLEVBQW1CLEtBQUssT0FBeEI7QUFDQSxLQUFHLEtBQUssc0JBQUwsSUFBK0IsS0FBSyxzQkFBTCxDQUE0QixPQUE5RCxFQUF1RSxLQUFLLHNCQUFMLENBQTRCLE9BQTVCO0FBQ3ZFLENBTEQ7O0FBT0EsY0FBYyxTQUFkLENBQXdCLFVBQXhCLEdBQXFDLFVBQVMsR0FBVCxFQUFjO0FBQ2xELEtBQUk7QUFDSCxNQUFJLFVBQVUsS0FBSyxLQUFMLENBQVcsSUFBSSxJQUFmLENBQWQ7QUFDQSxPQUFLLElBQUwsQ0FBVSxTQUFWLEVBQXFCLE9BQXJCO0FBQ0EsRUFIRCxDQUdFLE9BQU0sR0FBTixFQUFVO0FBQ1gsU0FBTyxLQUFQLENBQWEsd0NBQWI7QUFDQSxRQUFNLEdBQU47QUFDQTtBQUNELENBUkQ7O0FBVUEsY0FBYyxTQUFkLENBQXdCLFFBQXhCLEdBQW1DLFVBQVMsR0FBVCxFQUFjO0FBQ2hELE1BQUssSUFBTCxDQUFVLE9BQVYsRUFBbUIsR0FBbkI7QUFDQSxDQUZEOztBQUlBLGNBQWMsU0FBZCxDQUF3QixtQkFBeEIsR0FBOEMsWUFBVztBQUN4RCxLQUFHLEtBQUssT0FBTCxJQUFpQixPQUFPLEtBQUssT0FBTCxDQUFhLG1CQUFwQixLQUE0QyxVQUFoRSxFQUE0RTtBQUMzRSxPQUFLLE9BQUwsQ0FBYSxtQkFBYixDQUFpQyxNQUFqQyxFQUF5QyxLQUFLLG1CQUE5QztBQUNBLE9BQUssT0FBTCxDQUFhLG1CQUFiLENBQWlDLE9BQWpDLEVBQTBDLEtBQUssb0JBQS9DO0FBQ0EsT0FBSyxPQUFMLENBQWEsbUJBQWIsQ0FBaUMsU0FBakMsRUFBNEMsS0FBSyxzQkFBakQ7QUFDQSxFQUpELE1BSU8sSUFBRyxLQUFLLE9BQUwsSUFBaUIsT0FBTyxLQUFLLE9BQUwsQ0FBYSxrQkFBcEIsS0FBMkMsVUFBL0QsRUFBMkU7QUFDakYsT0FBSyxPQUFMLENBQWEsa0JBQWI7QUFDQTtBQUNELENBUkQ7O0FBVUE7QUFDQTtBQUNBOztBQUVBLFNBQVMsU0FBVCxDQUFtQixjQUFuQixHQUFvQyxVQUFTLE1BQVQsRUFBaUIsSUFBakIsRUFBc0I7QUFDekQsS0FBRyxDQUFDLE1BQUQsSUFBVyxDQUFDLElBQVosSUFBcUIsU0FBUyxTQUFULElBQXNCLFNBQVMsY0FBL0IsSUFBaUQsU0FBUyxhQUExRCxJQUEyRSxTQUFTLGtCQUE1RyxFQUFnSTtBQUMvSCxTQUFPLElBQVA7QUFDQTs7QUFFRCxRQUFPO0FBQ04sUUFBTSxJQURBO0FBRU4sTUFBSSxLQUFLLFdBQUwsRUFGRTtBQUdOLFdBQVMsT0FBTyxPQUhWO0FBSU4sVUFBUSxPQUFPLE1BSlQ7QUFLTixRQUFNLE9BQU8sSUFMUDtBQU1OLE9BQUssT0FBTyxHQU5OO0FBT04sUUFBTSxPQUFPLElBUFA7QUFRTixPQUFLLE9BQU87QUFSTixFQUFQO0FBVUEsQ0FmRDs7QUFpQkEsU0FBUyxTQUFULENBQW1CLFdBQW5CLEdBQWlDLFlBQVU7QUFDMUMsS0FBSSxLQUFLLEtBQUssT0FBZDtBQUNBLE1BQUssT0FBTDtBQUNBLFFBQU8sRUFBUDtBQUNBLENBSkQ7O0FBUUEsT0FBTyxPQUFQLEdBQWlCLFFBQWpCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNCcm93c2VyID0gISh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyk7XG5sZXQgVU5JWFNvY2tldEhhbmRsZXJcbmlmKCFpc0Jyb3dzZXIpIHtcblx0dmFyIFEgPSByZXF1aXJlKCdxJyk7XG5cdFVOSVhTb2NrZXRIYW5kbGVyID0gcmVxdWlyZSgnLi9VTklYU29ja2V0SGFuZGxlcicpXG59XG5lbHNlIHsgdmFyIFEgPSB3aW5kb3cuUTsgfVxuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnbm9kZS1ldmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIERpeWFTb2NrZXQgPSByZXF1aXJlKCcuL0RpeWFTb2NrZXQnKVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLyBMb2dnaW5nIHV0aWxpdHkgbWV0aG9kcyAvLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnZhciBERUJVRyA9IGZhbHNlO1xudmFyIExvZ2dlciA9IHtcblx0bG9nOiBmdW5jdGlvbihtZXNzYWdlKXtcblx0XHRpZihERUJVRykgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cdH0sXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuXHRcdGlmKERFQlVHKSBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuXHR9XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuZnVuY3Rpb24gRGl5YU5vZGUoKXtcblx0RXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cblx0dGhpcy5fdXNlciA9IG51bGw7XG5cdHRoaXMuX2F1dGhlbnRpY2F0ZWQgPSBudWxsO1xuXHR0aGlzLl9wYXNzID0gbnVsbDtcblxuXHR0aGlzLl9zdGF0dXMgPSAnY2xvc2VkJztcblx0dGhpcy5fYWRkciA9IG51bGw7XG5cdHRoaXMuX3NvY2tldCA9IG51bGw7XG5cdHRoaXMuX25leHRJZCA9IDA7XG5cdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGw7XG5cdHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGw7XG5cdHRoaXMuX3BlbmRpbmdNZXNzYWdlcyA9IFtdO1xuXHR0aGlzLl9wZWVycyA9IFtdO1xuXHR0aGlzLl9yZWNvbm5lY3RUaW1lb3V0ID0gMTAwMDtcblx0dGhpcy5fY29ubmVjdFRpbWVvdXQgPSA1MDAwO1xuXHR0aGlzLnN0b3JlID0gbmV3IE1hcCgpXG5cdHRoaXMuX2RpeWFTb2NrZXQgPSBuZXcgTWFwKCk7XG59XG5pbmhlcml0cyhEaXlhTm9kZSwgRXZlbnRFbWl0dGVyKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vIFB1YmxpYyBBUEkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5EaXlhTm9kZS5wcm90b3R5cGUudXNlciA9IGZ1bmN0aW9uKHVzZXIpIHtcblx0aWYodXNlcikgdGhpcy5fdXNlciA9IHVzZXI7XG5cdGVsc2UgcmV0dXJuIHRoaXMuX3VzZXI7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLmF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbihhdXRoZW50aWNhdGVkKSB7XG5cdGlmKGF1dGhlbnRpY2F0ZWQgIT09IHVuZGVmaW5lZCkgdGhpcy5fYXV0aGVudGljYXRlZCA9IGF1dGhlbnRpY2F0ZWQ7XG5cdGVsc2UgcmV0dXJuIHRoaXMuX2F1dGhlbnRpY2F0ZWQ7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLnBhc3MgPSBmdW5jdGlvbihwYXNzKSB7XG5cdGlmKHBhc3MgIT09IHVuZGVmaW5lZCkgdGhpcy5fcGFzcyA9IHBhc3M7XG5cdGVsc2UgcmV0dXJuIHRoaXMuX3Bhc3M7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLmFkZHIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2FkZHI7IH07XG5EaXlhTm9kZS5wcm90b3R5cGUucGVlcnMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5fcGVlcnM7IH07XG5EaXlhTm9kZS5wcm90b3R5cGUuc2VsZiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fc2VsZjsgfTtcbkRpeWFOb2RlLnByb3RvdHlwZS5zZXRTZWN1cmVkID0gZnVuY3Rpb24oYlNlY3VyZWQpIHsgdGhpcy5fc2VjdXJlZCA9IGJTZWN1cmVkICE9PSBmYWxzZTsgfTtcbkRpeWFOb2RlLnByb3RvdHlwZS5zZXRXU29ja2V0ID0gZnVuY3Rpb24oV1NvY2tldCkge3RoaXMuX1dTb2NrZXQgPSBXU29ja2V0O31cblxuLyoqIEByZXR1cm4ge1Byb21pc2U8U3RyaW5nPn0gdGhlIGNvbm5lY3RlZCBwZWVyIG5hbWUgKi9cbkRpeWFOb2RlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGFkZHIsIFdTb2NrZXQpIHtcblx0dGhpcy5iRG9udFJlY29ubmVjdCA9IGZhbHNlXG5cblx0Ly8gSGFuZGxlIGxvY2FsIGNsaWVudHMgb24gVU5JWCBzb2NrZXRzXG5cdGlmIChhZGRyLnN0YXJ0c1dpdGgoJ3VuaXg6Ly8nKSkge1xuXHRcdC8vIElmIHdlJ3ZlIHRyeWluZyB0byBjb25uZWN0IHRvIHRoZSBzYW1lIGFkZHJlc3Mgd2UncmUgYWxyZWFkeSBjb25uZWN0ZWQgdG9cblx0XHRpZiAodGhpcy5fYWRkciA9PT0gYWRkcikge1xuXHRcdFx0Y29uc29sZS5sb2coYFtTREsvRGl5YU5vZGVdIEFkZHJlc3MgaXMgaWRlbnRpY2FsIHRvIG91ciBhZGRyZXNzLi4uYClcblx0XHRcdGlmICh0aGlzLl9zdGF0dXMgPT09ICdvcGVuZWQnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBbU0RLL0RpeWFOb2RlXSAuLi4gYW5kIHRoZSBjb25uZWN0aW9uIGlzIHN0aWxsIG9wZW5lbmVkLCByZXR1cm5pbmcgaXQuYClcblx0XHRcdFx0cmV0dXJuIFEodGhpcy5zZWxmKCkpXG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgJiYgdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UgJiYgdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UuaXNQZW5kaW5nKCkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coYFtTREsvRGl5YU5vZGVdLi4uIGFuZCB0aGUgY29ubmVjdGlvbiBpcyBwZW5kaW5nLCBzbyByZXR1cm5pbmcgdGhlIHBlbmRpbmcgY29ubmVjdGlvbi5gKVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2Vcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jbG9zZSgpXG5cdFx0LnRoZW4oIF8gPT4ge1xuXHRcdFx0dGhpcy5fYWRkciA9IGFkZHJcblx0XHRcdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IFEuZGVmZXIoKVxuXHRcdFx0TG9nZ2VyLmxvZygnZDE6IGNvbm5lY3QgdG8gJyArIHRoaXMuX2FkZHIpXG5cdFx0XHRsZXQgc29jayA9IG5ldyBVTklYU29ja2V0SGFuZGxlcih0aGlzLl9hZGRyLnN1YnN0cigndW5peDovLycubGVuZ3RoKSwgdGhpcy5fY29ubmVjdFRpbWVvdXQpXG5cblx0XHRcdGlmICghdGhpcy5fc29ja2V0SGFuZGxlcilcblx0XHRcdFx0dGhpcy5fc29ja2V0SGFuZGxlciA9IHNvY2tcblxuXHRcdFx0dGhpcy5fb25vcGVuaW5nKClcblxuXHRcdFx0c29jay5vbignb3BlbicsIF8gPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdbU0RLL0RpeWFOb2RlXSBTb2NrZXQgcmVzcG9uZGVkIGJ1dCBhbHJlYWR5IGNvbm5lY3RlZCB0byBhIGRpZmZlcmVudCBvbmUnKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3N0YXR1cyA9ICdvcGVuZWQnXG5cdFx0XHRcdHRoaXMuX3NldHVwUGluZ1Jlc3BvbnNlKClcblx0XHRcdH0pXG5cblx0XHRcdHNvY2sub24oJ2Nsb3NpbmcnLCBfID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdHRoaXMuX29uY2xvc2luZygpXG5cdFx0XHR9KVxuXG5cdFx0XHRzb2NrLm9uKCdjbG9zZScsIF8gPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaylcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0dGhpcy5fc29ja2V0SGFuZGxlciA9IG51bGxcblx0XHRcdFx0dGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCdcblx0XHRcdFx0dGhpcy5fc3RvcFBpbmdSZXNwb25zZSgpXG5cdFx0XHRcdHRoaXMuX29uY2xvc2UoKVxuXG5cdFx0XHRcdGlmICh0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQpIHtcblx0XHRcdFx0XHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucmVqZWN0KFwiY2xvc2VkXCIpXG5cdFx0XHRcdFx0dGhpcy5fY29ubmVjdGlvbkRlZmVycmVkID0gbnVsbFxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdFx0XHRzb2NrLm9uKCdlcnJvcicsIGVycm9yID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdHRoaXMuX29uZXJyb3IoZXJyb3IpXG5cdFx0XHR9KVxuXG5cdFx0XHRzb2NrLm9uKCd0aW1lb3V0JywgXyA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHR0aGlzLl9zb2NrZXRIYW5kbGVyID0gbnVsbFxuXHRcdFx0XHR0aGlzLl9zdGF0dXMgPSAnY2xvc2VkJ1xuXHRcdFx0XHRpZiAodGhpcy5fY29ubmVjdGlvbkRlZmVycmVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnJlamVjdChcImNsb3NlZFwiKVxuXHRcdFx0XHRcdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGxcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHRcdFx0c29jay5vbignbWVzc2FnZScsIHRoaXMuX29ubWVzc2FnZS5iaW5kKHRoaXMpKVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2Vcblx0XHR9KVxuXHR9XG5cblx0aWYgKFdTb2NrZXQgIT09IHVuZGVmaW5lZClcblx0XHR0aGlzLl9XU29ja2V0ID0gV1NvY2tldFxuXHRlbHNlIGlmICh0aGlzLl9XU29ja2V0ID09PSB1bmRlZmluZWQpXG5cdFx0dGhpcy5fV1NvY2tldCA9IHdpbmRvdy5XZWJTb2NrZXRcblxuXHRXU29ja2V0ID0gdGhpcy5fV1NvY2tldFxuXG5cdC8vIENoZWNrIGFuZCBGb3JtYXQgVVJJIChGUUROKVxuXHRpZiAoYWRkci5zdGFydHNXaXRoKFwid3M6Ly9cIikgJiYgdGhpcy5fc2VjdXJlZClcblx0XHRyZXR1cm4gUS5yZWplY3QoXCJQbGVhc2UgdXNlIGEgc2VjdXJlZCBjb25uZWN0aW9uIChcIiArIGFkZHIgKyBcIilcIilcblxuXHRpZiAoYWRkci5zdGFydHNXaXRoKFwid3NzOi8vXCIpICYmIHRoaXMuX3NlY3VyZWQgPT09IGZhbHNlKVxuXHRcdHJldHVybiBRLnJlamVjdChcIlBsZWFzZSB1c2UgYSBub24tc2VjdXJlZCBjb25uZWN0aW9uIChcIiArIGFkZHIgKyBcIilcIilcblxuXHRpZiAoIWFkZHIuc3RhcnRzV2l0aChcIndzOi8vXCIpICYmICFhZGRyLnN0YXJ0c1dpdGgoXCJ3c3M6Ly9cIikpIHtcblx0XHRpZiAodGhpcy5fc2VjdXJlZClcblx0XHRcdGFkZHIgPSBcIndzczovL1wiICsgYWRkclxuXHRcdGVsc2Vcblx0XHRcdGFkZHIgPSBcIndzOi8vXCIgKyBhZGRyXG5cdH1cblxuXHRpZiAodGhpcy5fYWRkciA9PT0gYWRkcikge1xuXHRcdGlmICh0aGlzLl9zdGF0dXMgPT09ICdvcGVuZWQnKVxuXHRcdFx0cmV0dXJuIFEodGhpcy5zZWxmKCkpXG5cdFx0ZWxzZSBpZiAodGhpcy5fY29ubmVjdGlvbkRlZmVycmVkICYmIHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlICYmIHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlLmlzUGVuZGluZygpKVxuXHRcdFx0cmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlXG5cdH1cblxuXHRyZXR1cm4gdGhpcy5jbG9zZSgpXG5cdC50aGVuKCBfID0+IHtcblx0XHR0aGlzLl9hZGRyID0gYWRkclxuXHRcdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IFEuZGVmZXIoKVxuXHRcdExvZ2dlci5sb2coJ2QxOiBjb25uZWN0IHRvICcgKyB0aGlzLl9hZGRyKVxuXHRcdHZhciBzb2NrID0gbmV3IFNvY2tldEhhbmRsZXIoV1NvY2tldCwgdGhpcy5fYWRkciwgdGhpcy5fY29ubmVjdFRpbWVvdXQpXG5cblx0XHRpZiAoIXRoaXMuX3NvY2tldEhhbmRsZXIpXG5cdFx0XHR0aGlzLl9zb2NrZXRIYW5kbGVyID0gc29ja1xuXG5cdFx0dGhpcy5fb25vcGVuaW5nKClcblxuXHRcdHNvY2sub24oJ29wZW4nLCBfID0+IHtcblx0XHRcdGlmICh0aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiW2QxXSBXZWJzb2NrZXQgcmVzcG9uZGVkIGJ1dCBhbHJlYWR5IGNvbm5lY3RlZCB0byBhIGRpZmZlcmVudCBvbmVcIilcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zb2NrZXRIYW5kbGVyID0gc29ja1xuXHRcdFx0dGhpcy5fc3RhdHVzID0gJ29wZW5lZCdcblx0XHRcdHRoaXMuX3NldHVwUGluZ1Jlc3BvbnNlKClcblx0XHR9KVxuXG5cdFx0c29jay5vbignY2xvc2luZycsIF8gPT4ge1xuXHRcdFx0aWYgKHRoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0dGhpcy5fb25jbG9zaW5nKClcblx0XHR9KVxuXG5cdFx0c29jay5vbignY2xvc2UnLCBfID0+IHtcblx0XHRcdGlmICh0aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdHRoaXMuX3NvY2tldEhhbmRsZXIgPSBudWxsXG5cdFx0XHR0aGlzLl9zdGF0dXMgPSAnY2xvc2VkJ1xuXHRcdFx0dGhpcy5fc3RvcFBpbmdSZXNwb25zZSgpXG5cdFx0XHR0aGlzLl9vbmNsb3NlKClcblxuXHRcdFx0aWYgKHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCkge1xuXHRcdFx0XHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucmVqZWN0KFwiY2xvc2VkXCIpXG5cdFx0XHRcdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGxcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0c29jay5vbignZXJyb3InLCBlcnJvciA9PiB7XG5cdFx0XHRpZiAodGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaylcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR0aGlzLl9vbmVycm9yKGVycm9yKVxuXHRcdH0pXG5cblx0XHRzb2NrLm9uKCd0aW1lb3V0JywgXyA9PiB7XG5cdFx0XHRpZiAodGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaylcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR0aGlzLl9zb2NrZXRIYW5kbGVyID0gbnVsbFxuXHRcdFx0dGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCdcblx0XHRcdGlmICh0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQpIHtcblx0XHRcdFx0dGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnJlamVjdChcImNsb3NlZFwiKVxuXHRcdFx0XHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsXG5cdFx0XHR9XG5cdFx0fSlcblxuXHRcdHNvY2sub24oJ21lc3NhZ2UnLCB0aGlzLl9vbm1lc3NhZ2UuYmluZCh0aGlzKSlcblxuXHRcdHJldHVybiB0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZVxuXHR9KVxufVxuXG5EaXlhTm9kZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuXHR0aGlzLmJEb250UmVjb25uZWN0ID0gdHJ1ZVxuXHRyZXR1cm4gdGhpcy5jbG9zZSgpXG59XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuX3N0b3BQaW5nUmVzcG9uc2UoKTtcblx0aWYodGhpcy5fc29ja2V0SGFuZGxlcikgcmV0dXJuIHRoaXMuX3NvY2tldEhhbmRsZXIuY2xvc2UoKTtcblx0ZWxzZSByZXR1cm4gUSgpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKXtcblx0cmV0dXJuICh0aGlzLl9zb2NrZXRIYW5kbGVyICYmIHRoaXMuX3NvY2tldEhhbmRsZXIuaXNDb25uZWN0ZWQoKSk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uKHBhcmFtcywgY2FsbGJhY2ssIHRpbWVvdXQsIG9wdGlvbnMpe1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cdGlmKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cblx0aWYocGFyYW1zLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcblx0XHR2YXIgX3BhcmFtcyA9IHBhcmFtcy5zcGxpdChcIi5cIik7XG5cdFx0aWYoX3BhcmFtcy5sZW5ndGghPTIpIHRocm93ICdNYWxmb3JtZWRSZXF1ZXN0Jztcblx0XHRwYXJhbXMgPSB7c2VydmljZTpfcGFyYW1zWzBdLCBmdW5jOl9wYXJhbXNbMV19O1xuXHR9XG5cblx0aWYoIXBhcmFtcy5zZXJ2aWNlKSB7XG5cdFx0TG9nZ2VyLmVycm9yKCdObyBzZXJ2aWNlIGRlZmluZWQgZm9yIHJlcXVlc3QgIScpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBtZXNzYWdlID0gdGhpcy5fY3JlYXRlTWVzc2FnZShwYXJhbXMsIFwiUmVxdWVzdFwiKTtcblx0dGhpcy5fYXBwZW5kTWVzc2FnZShtZXNzYWdlLCBjYWxsYmFjayk7XG5cdGlmKHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrX3BhcnRpYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX3BlbmRpbmdNZXNzYWdlc1ttZXNzYWdlLmlkXS5jYWxsYmFja19wYXJ0aWFsID0gb3B0aW9ucy5jYWxsYmFja19wYXJ0aWFsO1xuXHRtZXNzYWdlLm9wdGlvbnMgPSBvcHRpb25zO1xuXG5cdGlmKCFpc05hTih0aW1lb3V0KSAmJiB0aW1lb3V0ID4gMCl7XG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGhhbmRsZXIgPSB0aGF0Ll9yZW1vdmVNZXNzYWdlKG1lc3NhZ2UuaWQpO1xuXHRcdFx0aWYoaGFuZGxlcikgdGhhdC5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgJ1RpbWVvdXQgZXhjZWVkZWQgKCcrdGltZW91dCsnbXMpICEnKTtcblx0XHR9LCB0aW1lb3V0KTtcblx0fVxuXG5cdGlmKCF0aGlzLl9zZW5kKG1lc3NhZ2UpKXtcblx0XHR0aGlzLl9yZW1vdmVNZXNzYWdlKG1lc3NhZ2UuaWQpO1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBzZW5kIHJlcXVlc3QgIScpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKHBhcmFtcywgY2FsbGJhY2spe1xuXHRpZihwYXJhbXMuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuXHRcdHZhciBfcGFyYW1zID0gcGFyYW1zLnNwbGl0KFwiLlwiKTtcblx0XHRpZihfcGFyYW1zLmxlbmd0aCE9MikgdGhyb3cgJ01hbGZvcm1lZFJlcXVlc3QnO1xuXHRcdHBhcmFtcyA9IHtzZXJ2aWNlOl9wYXJhbXNbMF0sIGZ1bmM6X3BhcmFtc1sxXX07XG5cdH1cblxuXHRpZighcGFyYW1zLnNlcnZpY2Upe1xuXHRcdExvZ2dlci5lcnJvcignTm8gc2VydmljZSBkZWZpbmVkIGZvciBzdWJzY3JpcHRpb24gIScpO1xuXHRcdHJldHVybiAtMTtcblx0fVxuXG5cdHZhciBtZXNzYWdlID0gdGhpcy5fY3JlYXRlTWVzc2FnZShwYXJhbXMsIFwiU3Vic2NyaXB0aW9uXCIpO1xuXHR0aGlzLl9hcHBlbmRNZXNzYWdlKG1lc3NhZ2UsIGNhbGxiYWNrKTtcblxuXHRpZighdGhpcy5fc2VuZChtZXNzYWdlKSl7XG5cdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlLmlkKTtcblx0XHRMb2dnZXIuZXJyb3IoJ0Nhbm5vdCBzZW5kIHN1YnNjcmlwdGlvbiAhJyk7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2UuaWQ7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUub3BlblNvY2tldCA9IGZ1bmN0aW9uKGQxaW5zdCwgcGFyYW1zLCBjYWxsYmFjayl7XG5cdHRoaXMuX2RpeWFTb2NrZXQuc2V0KHBhcmFtcy5zb2NrZXRJZCwgbmV3IERpeWFTb2NrZXQoZDFpbnN0LCBwYXJhbXMpKTtcblx0dGhpcy5fZGl5YVNvY2tldC5nZXQocGFyYW1zLnNvY2tldElkKS5zdWJzY3JpYmVTb2NrZXRDbG9zZWQocGFyYW1zLnNvY2tldElkKTtcblx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sodGhpcy5fZGl5YVNvY2tldC5nZXQocGFyYW1zLnNvY2tldElkKSk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUub25Tb2NrZXRDbG9zZWQgPSBmdW5jdGlvbihzb2NrZXRJZCl7XG5cdGlmICh0aGlzLl9kaXlhU29ja2V0Lmhhcyhzb2NrZXRJZCkpe1xuXHRcdHRoaXMuX2RpeWFTb2NrZXQuZ2V0KHNvY2tldElkKS5lbWl0KCdjbG9zZScpXG5cdFx0dGhpcy5fZGl5YVNvY2tldC5kZWxldGUoc29ja2V0SWQpO1xuXHR9XG59XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5zZW5kU29ja2V0RGF0YSA9IGZ1bmN0aW9uKHBhcmFtcyl7XG5cdGxldCBtZXNzYWdlID0gdGhpcy5fY3JlYXRlTWVzc2FnZShwYXJhbXMsIFwiU29ja2V0Q2xpZW50RGF0YVwiKTtcblx0aWYoIXRoaXMuX3NlbmQobWVzc2FnZSkpe1xuXHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNlbmQgc29ja2V0IScpO1xuXHR9XG5cdHJldHVybiBtZXNzYWdlLmlkO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oc3ViSWQpe1xuXHRpZih0aGlzLl9wZW5kaW5nTWVzc2FnZXNbc3ViSWRdICYmIHRoaXMuX3BlbmRpbmdNZXNzYWdlc1tzdWJJZF0udHlwZSA9PT0gXCJTdWJzY3JpcHRpb25cIil7XG5cdFx0dmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3JlbW92ZU1lc3NhZ2Uoc3ViSWQpO1xuXG5cdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLl9jcmVhdGVNZXNzYWdlKHtcblx0XHRcdHRhcmdldDogc3Vic2NyaXB0aW9uLnRhcmdldCxcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0c3ViSWQ6IHN1YklkXG5cdFx0XHR9XG5cdFx0fSwgXCJVbnN1YnNjcmliZVwiKTtcblxuXHRcdGlmKCF0aGlzLl9zZW5kKG1lc3NhZ2UpKXtcblx0XHRcdExvZ2dlci5lcnJvcignQ2Fubm90IHNlbmQgdW5zdWJzY3JpYmUgIScpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8gSW50ZXJuYWwgbWV0aG9kcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fYXBwZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKXtcblx0dGhpcy5fcGVuZGluZ01lc3NhZ2VzW21lc3NhZ2UuaWRdID0ge1xuXHRcdGNhbGxiYWNrOiBjYWxsYmFjayxcblx0XHR0eXBlOiBtZXNzYWdlLnR5cGUsXG5cdFx0dGFyZ2V0OiBtZXNzYWdlLnRhcmdldFxuXHR9O1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9yZW1vdmVNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZUlkKXtcblx0dmFyIGhhbmRsZXIgPSB0aGlzLl9wZW5kaW5nTWVzc2FnZXNbbWVzc2FnZUlkXTtcblx0aWYoaGFuZGxlcil7XG5cdFx0ZGVsZXRlIHRoaXMuX3BlbmRpbmdNZXNzYWdlc1ttZXNzYWdlSWRdO1xuXHRcdHJldHVybiBoYW5kbGVyO1xuXHR9ZWxzZXtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9jbGVhck1lc3NhZ2VzID0gZnVuY3Rpb24oZXJyLCBkYXRhKXtcblx0Zm9yKHZhciBtZXNzYWdlSWQgaW4gdGhpcy5fcGVuZGluZ01lc3NhZ2VzKXtcblx0XHR2YXIgaGFuZGxlciA9IHRoaXMuX3JlbW92ZU1lc3NhZ2UobWVzc2FnZUlkKTtcblx0XHR0aGlzLl9ub3RpZnlMaXN0ZW5lcihoYW5kbGVyLCBlcnIsIGRhdGEpO1xuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2NsZWFyUGVlcnMgPSBmdW5jdGlvbigpIHtcblx0d2hpbGUodGhpcy5fcGVlcnMubGVuZ3RoKSB7XG5cdFx0bGV0IHBlZXIgPSB0aGlzLl9wZWVycy5wb3AoKVxuXHRcdHRoaXMuc3RvcmUuZGVsZXRlKHBlZXIpXG5cdFx0dGhpcy5lbWl0KCdwZWVyLWRpc2Nvbm5lY3RlZCcsIHBlZXIpO1xuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2dldE1lc3NhZ2VIYW5kbGVyID0gZnVuY3Rpb24obWVzc2FnZUlkKXtcblx0dmFyIGhhbmRsZXIgPSB0aGlzLl9wZW5kaW5nTWVzc2FnZXNbbWVzc2FnZUlkXTtcblx0cmV0dXJuIGhhbmRsZXIgPyBoYW5kbGVyIDogbnVsbDtcbn07XG5cblxuRGl5YU5vZGUucHJvdG90eXBlLl9ub3RpZnlMaXN0ZW5lciA9IGZ1bmN0aW9uKGhhbmRsZXIsIGVycm9yLCBkYXRhKXtcblx0aWYoaGFuZGxlciAmJiB0eXBlb2YgaGFuZGxlci5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGVycm9yID0gZXJyb3IgPyBlcnJvciA6IG51bGw7XG5cdFx0ZGF0YSA9IGRhdGEgPyBkYXRhIDogbnVsbDtcblx0XHR0cnkge1xuXHRcdFx0aGFuZGxlci5jYWxsYmFjayhlcnJvciwgZGF0YSk7XG5cdFx0fSBjYXRjaChlKSB7IGNvbnNvbGUubG9nKCdbRXJyb3IgaW4gUmVxdWVzdCBjYWxsYmFja10gJyArIGUuc3RhY2sgPyBlLnN0YWNrIDogZSk7fVxuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX3NlbmQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRyZXR1cm4gdGhpcy5fc29ja2V0SGFuZGxlciAmJiB0aGlzLl9zb2NrZXRIYW5kbGVyLnNlbmQobWVzc2FnZSlcbn1cblxuRGl5YU5vZGUucHJvdG90eXBlLl9zZXR1cFBpbmdSZXNwb25zZSA9IGZ1bmN0aW9uKCl7XG5cdHZhciB0aGF0ID0gdGhpcztcblxuXHR0aGlzLl9waW5nVGltZW91dCA9IDE1MDAwO1xuXHR0aGlzLl9sYXN0UGluZyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5cdGZ1bmN0aW9uIGNoZWNrUGluZygpe1xuXHRcdHZhciBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0aWYoY3VyVGltZSAtIHRoYXQuX2xhc3RQaW5nID4gdGhhdC5fcGluZ1RpbWVvdXQpe1xuXHRcdFx0dGhhdC5fZm9yY2VDbG9zZSgpO1xuXHRcdFx0TG9nZ2VyLmxvZyhcImQxOiAgdGltZWQgb3V0IVwiKTtcblx0XHR9ZWxzZXtcblx0XHRcdExvZ2dlci5sb2coXCJkMTogbGFzdCBwaW5nIG9rXCIpO1xuXHRcdFx0dGhhdC5fcGluZ1NldFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoY2hlY2tQaW5nLCBNYXRoLnJvdW5kKHRoYXQuX3BpbmdUaW1lb3V0IC8gMi4xKSk7XG5cdFx0fVxuXHR9XG5cblx0Y2hlY2tQaW5nKCk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX3N0b3BQaW5nUmVzcG9uc2UgPSBmdW5jdGlvbigpe1xuXHRjbGVhclRpbWVvdXQodGhpcy5fcGluZ1NldFRpbWVvdXRJZCk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2ZvcmNlQ2xvc2UgPSBmdW5jdGlvbigpe1xuXHR0aGlzLl9zb2NrZXRIYW5kbGVyLmNsb3NlKCk7XG5cdHRoaXMuX29uY2xvc2UoKTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLyBTb2NrZXQgZXZlbnQgaGFuZGxlcnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5EaXlhTm9kZS5wcm90b3R5cGUuX29ubWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuXHRpZihtZXNzYWdlLnR5cGUgPT09IFwiU29ja2V0U2VydmVyRGF0YVwiKSB0aGlzLl9oYW5kbGVTb2NrZXRTZXJ2ZXJEYXRhKG1lc3NhZ2UpO1xuXHRpZihpc05hTihtZXNzYWdlLmlkKSkgcmV0dXJuIHRoaXMuX2hhbmRsZUludGVybmFsTWVzc2FnZShtZXNzYWdlKTtcblx0dmFyIGhhbmRsZXIgPSB0aGlzLl9nZXRNZXNzYWdlSGFuZGxlcihtZXNzYWdlLmlkKTtcblx0aWYoIWhhbmRsZXIpIHJldHVybjtcblx0c3dpdGNoKGhhbmRsZXIudHlwZSl7XG5cdFx0Y2FzZSBcIlJlcXVlc3RcIjpcblx0XHRcdHRoaXMuX2hhbmRsZVJlcXVlc3QoaGFuZGxlciwgbWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiU3Vic2NyaXB0aW9uXCI6XG5cdFx0XHR0aGlzLl9oYW5kbGVTdWJzY3JpcHRpb24oaGFuZGxlciwgbWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9vbm9wZW5pbmcgPSBmdW5jdGlvbigpIHtcblx0dGhpcy5lbWl0KCdvcGVuaW5nJywgdGhpcyk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX29uZXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuXHR0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKGVycm9yKSk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX29uY2xvc2luZyA9IGZ1bmN0aW9uKCkge1xuXHR0aGlzLmVtaXQoJ2Nsb3NpbmcnLCB0aGlzKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fb25jbG9zZSA9IGZ1bmN0aW9uKCl7XG5cdHZhciB0aGF0ID0gdGhpcztcblxuXHR0aGlzLl9jbGVhck1lc3NhZ2VzKCdQZWVyRGlzY29ubmVjdGVkJyk7XG5cdHRoaXMuX2NsZWFyUGVlcnMoKTtcblxuXHRpZighdGhpcy5iRG9udFJlY29ubmVjdCkge1xuXHRcdExvZ2dlci5sb2coJ2QxOiBjb25uZWN0aW9uIGxvc3QsIHRyeSByZWNvbm5lY3RpbmcnKTtcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGF0LmNvbm5lY3QodGhhdC5fYWRkciwgdGhhdC5fV1NvY2tldCkuY2F0Y2goZnVuY3Rpb24oZXJyKXt9KTtcblx0XHR9LCB0aGF0Ll9yZWNvbm5lY3RUaW1lb3V0KTtcblx0fVxuXHR0aGlzLmVtaXQoJ2Nsb3NlJywgdGhpcy5fYWRkcik7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8gUHJvdG9jb2wgZXZlbnQgaGFuZGxlcnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFOb2RlLnByb3RvdHlwZS5faGFuZGxlSW50ZXJuYWxNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSl7XG5cdHN3aXRjaChtZXNzYWdlLnR5cGUpe1xuXHRcdGNhc2UgXCJQZWVyQ29ubmVjdGVkXCI6XG5cdFx0XHR0aGlzLl9oYW5kbGVQZWVyQ29ubmVjdGVkKG1lc3NhZ2UpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIlBlZXJEaXNjb25uZWN0ZWRcIjpcblx0XHRcdHRoaXMuX2hhbmRsZVBlZXJEaXNjb25uZWN0ZWQobWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiSGFuZHNoYWtlXCI6XG5cdFx0XHR0aGlzLl9oYW5kbGVIYW5kc2hha2UobWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiUGluZ1wiOlxuXHRcdFx0dGhpcy5faGFuZGxlUGluZyhtZXNzYWdlKTtcblx0XHRcdGJyZWFrO1xuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2hhbmRsZVBpbmcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRtZXNzYWdlLnR5cGUgPSBcIlBvbmdcIlxuXHR0aGlzLl9sYXN0UGluZyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG5cdHRoaXMuX3NlbmQobWVzc2FnZSlcbn1cblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVIYW5kc2hha2UgPSBmdW5jdGlvbihtZXNzYWdlKXtcblxuXHRpZihtZXNzYWdlLnBlZXJzID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1lc3NhZ2Uuc2VsZiAhPT0gJ3N0cmluZycpe1xuXHRcdExvZ2dlci5lcnJvcihcIk1pc3NpbmcgYXJndW1lbnRzIGZvciBIYW5kc2hha2UgbWVzc2FnZSwgZHJvcHBpbmcuLi5cIik7XG5cdFx0cmV0dXJuIDtcblx0fVxuXG5cblx0dGhpcy5fc2VsZiA9IG1lc3NhZ2Uuc2VsZjtcblxuXHRmb3IodmFyIGk9MDtpPG1lc3NhZ2UucGVlcnMubGVuZ3RoOyBpKyspe1xuXHRcdHRoaXMuX3BlZXJzLnB1c2gobWVzc2FnZS5wZWVyc1tpXSk7XG5cdFx0dGhpcy5zdG9yZS5zZXQobWVzc2FnZS5wZWVyc1tpXSwgbmV3IE1hcCgpKVxuXHRcdHRoaXMuZW1pdCgncGVlci1jb25uZWN0ZWQnLCBtZXNzYWdlLnBlZXJzW2ldKTtcblx0fVxuXG5cdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5yZXNvbHZlKHRoaXMuc2VsZigpKTtcblx0dGhpcy5lbWl0KCdvcGVuJywgdGhpcy5fYWRkcik7XG5cdHRoaXMuX3N0YXR1cyA9ICdvcGVuZWQnO1xuXHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVQZWVyQ29ubmVjdGVkID0gZnVuY3Rpb24obWVzc2FnZSl7XG5cdGlmKG1lc3NhZ2UucGVlcklkID09PSB1bmRlZmluZWQpe1xuXHRcdExvZ2dlci5lcnJvcihcIk1pc3NpbmcgYXJndW1lbnRzIGZvciBQZWVyQ29ubmVjdGVkIG1lc3NhZ2UsIGRyb3BwaW5nLi4uXCIpO1xuXHRcdHJldHVybiA7XG5cdH1cblxuXHQvL0FkZCBwZWVyIHRvIHRoZSBsaXN0IG9mIHJlYWNoYWJsZSBwZWVyc1xuXHR0aGlzLl9wZWVycy5wdXNoKG1lc3NhZ2UucGVlcklkKTtcblx0dGhpcy5zdG9yZS5zZXQobWVzc2FnZS5wZWVySWQsIG5ldyBNYXAoKSlcblxuXHR0aGlzLmVtaXQoJ3BlZXItY29ubmVjdGVkJywgbWVzc2FnZS5wZWVySWQpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVQZWVyRGlzY29ubmVjdGVkID0gZnVuY3Rpb24obWVzc2FnZSl7XG5cdGlmKG1lc3NhZ2UucGVlcklkID09PSB1bmRlZmluZWQpe1xuXHRcdExvZ2dlci5lcnJvcihcIk1pc3NpbmcgYXJndW1lbnRzIGZvciBQZWVyRGlzY29ubmVjdGVkIE1lc3NhZ2UsIGRyb3BwaW5nLi4uXCIpO1xuXHRcdHJldHVybiA7XG5cdH1cblx0XG5cdC8vUmVtb3ZlIHBlZXIgZnJvbSBsaXN0IG9mIHJlYWNoYWJsZSBwZWVyc1xuXHRmb3IodmFyIGk9dGhpcy5fcGVlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuXHRcdGlmKHRoaXMuX3BlZXJzW2ldID09PSBtZXNzYWdlLnBlZXJJZCl7XG5cdFx0XHR0aGlzLl9wZWVycy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblx0Ly9yZW1vdmUgYXNzb2NpYXRlZCBzdG9yZVxuXHR0aGlzLnN0b3JlLmRlbGV0ZShtZXNzYWdlLnBlZXJJZClcblxuXHQvL0dvIHRocm91Z2ggYWxsIHBlbmRpbmcgbWVzc2FnZXMgYW5kIG5vdGlmeSB0aGUgb25lcyB0aGF0IGFyZSB0YXJnZXRlZFxuXHQvL2F0IHRoZSBkaXNjb25uZWN0ZWQgcGVlciB0aGF0IGl0IGRpc2Nvbm5lY3RlZCBhbmQgdGhlcmVmb3JlIHRoZSBjb21tYW5kXG5cdC8vY2Fubm90IGJlIGZ1bGZpbGxlZFxuXHRmb3IodmFyIG1lc3NhZ2VJZCBpbiB0aGlzLl9wZW5kaW5nTWVzc2FnZXMpe1xuXHRcdHZhciBoYW5kbGVyID0gdGhpcy5fZ2V0TWVzc2FnZUhhbmRsZXIobWVzc2FnZUlkKTtcblx0XHRpZihoYW5kbGVyICYmIGhhbmRsZXIudGFyZ2V0ID09PSBtZXNzYWdlLnBlZXJJZCkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlSWQpO1xuXHRcdFx0dGhpcy5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgJ1BlZXJEaXNjb25uZWN0ZWQnLCBudWxsKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzLmVtaXQoJ3BlZXItZGlzY29ubmVjdGVkJywgbWVzc2FnZS5wZWVySWQpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVSZXF1ZXN0ID0gZnVuY3Rpb24oaGFuZGxlciwgbWVzc2FnZSl7XG5cdGlmKG1lc3NhZ2UudHlwZSA9PT0gJ1BhcnRpYWxBbnN3ZXInKSB7XG5cdFx0aWYodHlwZW9mIHRoaXMuX3BlbmRpbmdNZXNzYWdlc1ttZXNzYWdlLmlkXS5jYWxsYmFja19wYXJ0aWFsID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBtZXNzYWdlLmVycm9yID8gbWVzc2FnZS5lcnJvciA6IG51bGw7XG5cdFx0XHR2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YSA/IG1lc3NhZ2UuZGF0YSA6IG51bGw7XG5cdFx0XHR0aGlzLl9wZW5kaW5nTWVzc2FnZXNbbWVzc2FnZS5pZF0uY2FsbGJhY2tfcGFydGlhbChlcnJvciwgZGF0YSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlLmlkKTtcblx0XHR0aGlzLl9ub3RpZnlMaXN0ZW5lcihoYW5kbGVyLCBtZXNzYWdlLmVycm9yLCBtZXNzYWdlLmRhdGEpO1xuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2hhbmRsZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKGhhbmRsZXIsIG1lc3NhZ2Upe1xuXHQvL3JlbW92ZSBzdWJzY3JpcHRpb24gaWYgaXQgd2FzIGNsb3NlZCBmcm9tIG5vZGVcblx0aWYobWVzc2FnZS5yZXN1bHQgPT09IFwiY2xvc2VkXCIpIHtcblx0XHR0aGlzLl9yZW1vdmVNZXNzYWdlKG1lc3NhZ2UuaWQpO1xuXHRcdG1lc3NhZ2UuZXJyb3IgPSAnU3Vic2NyaXB0aW9uQ2xvc2VkJztcblx0fVxuXHR0aGlzLl9ub3RpZnlMaXN0ZW5lcihoYW5kbGVyLCBtZXNzYWdlLmVycm9yLCBtZXNzYWdlLmRhdGEgPyBtZXNzYWdlLmRhdGEgOiBudWxsKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5faGFuZGxlU29ja2V0U2VydmVyRGF0YSA9IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuXHRcdHRoaXMuX2RpeWFTb2NrZXQuZ2V0KG1lc3NhZ2UuZGF0YS5zb2NrZXRJZCkucHVzaChuZXcgQnVmZmVyKG1lc3NhZ2UuZGF0YS5idWZmZXIsICdiYXNlNjQnKSk7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBTb2NrZXRIYW5kbGVyIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIFNvY2tldEhhbmRsZXIoV1NvY2tldCwgYWRkciwgdGltZW91dCkge1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cdHRoaXMuYWRkciA9IGFkZHI7XG5cblx0aWYoV1NvY2tldCkgdGhpcy5fV1NvY2tldCA9IFdTb2NrZXQ7XG5cdGVsc2UgaWYoIXRoaXMuX1dTb2NrZXQpIHRoaXMuX1dTb2NrZXQgPSB3aW5kb3cuV2ViU29ja2V0O1xuXHRXU29ja2V0ID0gdGhpcy5fV1NvY2tldDtcblxuXHR0aGlzLl9zdGF0dXMgPSAnb3BlbmluZyc7XG5cblx0dHJ5IHtcblx0XHR0aGlzLl9zb2NrZXQgPSBhZGRyLmluZGV4T2YoXCJ3c3M6Ly9cIik9PT0wID8gbmV3IFdTb2NrZXQoYWRkciwgdW5kZWZpbmVkLCB7cmVqZWN0VW5hdXRob3JpemVkOmZhbHNlfSkgOiBuZXcgV1NvY2tldChhZGRyKTtcblxuXHRcdHRoaXMuX3NvY2tldE9wZW5DYWxsYmFjayA9IHRoaXMuX29ub3Blbi5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuX3NvY2tldENsb3NlQ2FsbGJhY2sgPSB0aGlzLl9vbmNsb3NlLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5fc29ja2V0TWVzc2FnZUNhbGxiYWNrID0gdGhpcy5fb25tZXNzYWdlLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5fc29ja2V0RXJyb3JDYWxsYmFjayA9IHRoaXMuX29uZXJyb3IuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuX3NvY2tldC5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgdGhpcy5fc29ja2V0T3BlbkNhbGxiYWNrKTtcblx0XHR0aGlzLl9zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLHRoaXMuX3NvY2tldENsb3NlQ2FsbGJhY2spO1xuXHRcdHRoaXMuX3NvY2tldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5fc29ja2V0TWVzc2FnZUNhbGxiYWNrKTtcblx0XHR0aGlzLl9zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9zb2NrZXRFcnJvckNhbGxiYWNrKTtcblxuXHRcdHRoaXMuX3NvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uKGVycil7XG5cdFx0XHRMb2dnZXIuZXJyb3IoXCJbV1NdIGVycm9yIDogXCIgKyBlcnIudG9TdHJpbmcoKSk7XG5cdFx0XHR0aGF0Ll9zb2NrZXQuY2xvc2UoKTtcblx0XHR9KTtcblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdGlmKHRoYXQuX3N0YXR1cyA9PT0gJ29wZW5lZCcpIHJldHVybjtcblx0XHRcdGlmKHRoYXQuX3N0YXR1cyAhPT0gJ2Nsb3NlZCcpe1xuXHRcdFx0XHRMb2dnZXIubG9nKCdkMTogJyArIHRoYXQuYWRkciArICcgdGltZWQgb3V0IHdoaWxlIGNvbm5lY3RpbmcnKTtcblx0XHRcdFx0dGhhdC5jbG9zZSgpO1xuXHRcdFx0XHR0aGF0LmVtaXQoJ3RpbWVvdXQnLCB0aGF0Ll9zb2NrZXQpO1xuXHRcdFx0fVxuXHRcdH0sIHRpbWVvdXQpO1xuXG5cdH0gY2F0Y2goZSkge1xuXHRcdExvZ2dlci5lcnJvcihlLnN0YWNrKTtcblx0XHR0aGF0LmNsb3NlKCk7XG5cdFx0dGhyb3cgZTtcblx0fVxufTtcbmluaGVyaXRzKFNvY2tldEhhbmRsZXIsIEV2ZW50RW1pdHRlcik7XG5cblNvY2tldEhhbmRsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdGlmKHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZCAmJiB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZSkgcmV0dXJuIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlO1xuXHR0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cdHRoaXMuX3N0YXR1cyA9ICdjbG9zaW5nJztcblx0dGhpcy5lbWl0KCdjbG9zaW5nJywgdGhpcy5fc29ja2V0KTtcblx0aWYodGhpcy5fc29ja2V0KSB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcblx0cmV0dXJuIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblx0dHJ5IHtcblx0XHR2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xuXHR9IGNhdGNoKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBzZXJpYWxpemUgbWVzc2FnZScpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0dGhpcy5fc29ja2V0LnNlbmQoZGF0YSk7XG5cdH0gY2F0Y2goZXJyKXtcblx0XHRjb25zb2xlLmVycm9yKCdDYW5ub3Qgc2VuZCBtZXNzYWdlJyk7XG5cdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufVxuXG5Tb2NrZXRIYW5kbGVyLnByb3RvdHlwZS5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5fc29ja2V0LnJlYWR5U3RhdGUgPT0gdGhpcy5fV1NvY2tldC5PUEVOICYmIHRoaXMuX3N0YXR1cyA9PT0gJ29wZW5lZCc7XG59O1xuXG5Tb2NrZXRIYW5kbGVyLnByb3RvdHlwZS5fb25vcGVuID0gZnVuY3Rpb24oKSB7XG5cdHRoaXMuX3N0YXR1cyA9ICdvcGVuZWQnO1xuXHR0aGlzLmVtaXQoJ29wZW4nLCB0aGlzLl9zb2NrZXQpO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuX29uY2xvc2UgPSBmdW5jdGlvbihldnQpIHtcblx0dGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCc7XG5cdHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcygpO1xuXHR0aGlzLmVtaXQoJ2Nsb3NlJywgdGhpcy5fc29ja2V0KTtcblx0aWYodGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkICYmIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlKSB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucmVzb2x2ZSgpO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuX29ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2dCkge1xuXHR0cnkge1xuXHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSk7XG5cdFx0dGhpcy5lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG5cdH0gY2F0Y2goZXJyKXtcblx0XHRMb2dnZXIuZXJyb3IoXCJbV1NdIGNhbm5vdCBwYXJzZSBtZXNzYWdlLCBkcm9wcGluZy4uLlwiKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn07XG5cblNvY2tldEhhbmRsZXIucHJvdG90eXBlLl9vbmVycm9yID0gZnVuY3Rpb24oZXZ0KSB7XG5cdHRoaXMuZW1pdCgnZXJyb3InLCBldnQpO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUudW5yZWdpc3RlckNhbGxiYWNrcyA9IGZ1bmN0aW9uKCkge1xuXHRpZih0aGlzLl9zb2NrZXQgJiYgKHR5cGVvZiB0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykpe1xuXHRcdHRoaXMuX3NvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdvcGVuJywgdGhpcy5fc29ja2V0T3BlbkNhbGxiYWNrKTtcblx0XHR0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xvc2UnLCB0aGlzLl9zb2NrZXRDbG9zZUNhbGxiYWNrKTtcblx0XHR0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX3NvY2tldE1lc3NhZ2VDYWxsYmFjayk7XG5cdH0gZWxzZSBpZih0aGlzLl9zb2NrZXQgJiYgKHR5cGVvZiB0aGlzLl9zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSl7XG5cdFx0dGhpcy5fc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHR9XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gVXRpbGl0eSBtZXRob2RzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fY3JlYXRlTWVzc2FnZSA9IGZ1bmN0aW9uKHBhcmFtcywgdHlwZSl7XG5cdGlmKCFwYXJhbXMgfHwgIXR5cGUgfHwgKHR5cGUgIT09IFwiUmVxdWVzdFwiICYmIHR5cGUgIT09IFwiU3Vic2NyaXB0aW9uXCIgJiYgdHlwZSAhPT0gXCJVbnN1YnNjcmliZVwiICYmIHR5cGUgIT09IFwiU29ja2V0Q2xpZW50RGF0YVwiKSl7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHR5cGUsXG5cdFx0aWQ6IHRoaXMuX2dlbmVyYXRlSWQoKSxcblx0XHRzZXJ2aWNlOiBwYXJhbXMuc2VydmljZSxcblx0XHR0YXJnZXQ6IHBhcmFtcy50YXJnZXQsXG5cdFx0ZnVuYzogcGFyYW1zLmZ1bmMsXG5cdFx0b2JqOiBwYXJhbXMub2JqLFxuXHRcdGRhdGE6IHBhcmFtcy5kYXRhLFxuXHRcdGJ1czogcGFyYW1zLmJ1cyxcblx0fTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uKCl7XG5cdHZhciBpZCA9IHRoaXMuX25leHRJZDtcblx0dGhpcy5fbmV4dElkKys7XG5cdHJldHVybiBpZDtcbn07XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IERpeWFOb2RlO1xuIl19
},{"./DiyaSocket":42,"./UNIXSocketHandler":43,"buffer":5,"inherits":9,"node-event-emitter":13,"q":undefined}],41:[function(require,module,exports){
'use strict';

var isBrowser = !(typeof window === 'undefined');
if (!isBrowser) {
	var Q = require('q');
} else {
	var Q = window.Q;
}
var EventEmitter = require('node-event-emitter');
var inherits = require('inherits');

var DiyaNode = require('./DiyaNode');

var IP_REGEX = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;

//////////////
//  D1 API  //
//////////////


function newInstance() {

	var connection = new DiyaNode();

	var d1inst = function d1inst(selector) {
		return new DiyaSelector(selector, connection);
	};

	connection._d1inst = d1inst;

	d1inst.DiyaNode = DiyaNode;
	d1inst.DiyaSelector = DiyaSelector;

	d1inst.connect = function (addr, WSocket) {
		return connection.connect(addr, WSocket);
	};

	d1inst.disconnect = function () {
		return connection.disconnect();
	};

	d1inst.isConnected = function () {
		return connection.isConnected();
	};
	d1inst.peers = function () {
		return connection.peers();
	};
	d1inst.self = function () {
		return connection.self();
	};
	d1inst.addr = function () {
		return connection.addr();
	};
	d1inst.user = function () {
		return connection.user();
	};
	d1inst.pass = function () {
		return connection.pass();
	};
	d1inst.isAuthenticated = function () {
		return connection.authenticated();
	};

	d1inst.parsePeer = function (addrStr) {
		var peer = {};

		// <nothing> -> wss://localhost/api
		if (!addrStr || addrStr === "") {
			peer.addr = "wss://localhost/api";
			peer.addrNet = "wss://localhost/net";
		}
		// 1234 -> ws://localhost:1234
		else if (/^[0-9]*$/.test(addrStr)) {
				peer.addr = "ws://localhost:" + addrStr;
			}
			// 'localhost' alone -> UNIX socket /var/run/diya/diya-node.sock
			else if (addrStr === 'localhost') {
					peer.addr = 'unix:///var/run/diya/diya-node.sock';
				}
				// 10.42.0.1 -> wss://10.42.0.1/api
				//          -> wss://10.24.0.1/net
				else if (IP_REGEX.test(addrStr)) {
						peer.addr = "wss://" + addrStr + "/api";
						peer.addrNet = "wss://" + addrStr + "/net";
					}
					// 10.42.0.1:1234 -> ws://10.42.0.1:1234
					else if (IP_REGEX.test(addrStr.split(':')[0]) && /^[0-9]*$/.test(addrStr.split(':')[1])) {
							peer.addr = "ws://" + addrStr;
						}
						// wss://someaddress.com/stuff -> wss://someaddress.com/stuff
						// ws://someaddress.com/stuff -> ws://someaddress.com/stuff
						else if (addrStr.indexOf("wss://") === 0 || addrStr.indexOf("ws://") === 0) {
								peer.addr = addrStr;
							}
							// somedomain/somesite -> "wss://somedomain/somesite/api
							//                     -> "wss://somedomain/somesite/net
							//                     -> somesite
							else if (addrStr.split('/').length === 2) {
									peer.addr = "wss://" + addrStr + '/api';
									peer.addrNet = "wss://" + addrStr + '/net';
									peer.name = addrStr.split('/')[1];
								}
								// somedomain/somesite/api -> "wss://somedomain/somesite/api"
								//                         -> "wss://somedomain/somesite/net"
								//                         -> somesite
								else if (addrStr.split('/').length === 3 && addrStr.split('/')[2] === "api") {
										peer.addr = "wss://" + addrStr;
										peer.addrNet = "wss://" + addrStr.substr(0, addrStr.length - 4);
										peer.name = addrStr.split('/')[1];
									}
									// somesite -> "wss://partnering-cloud.com/somesite/api"
									//          -> "wss://partnering-cloud.com/somesite/net"
									//          -> somesite
									else {
											peer.addr = "wss://partnering-cloud.com/" + addrStr + "/api";
											peer.addrNet = "wss://partnering-cloud.com/" + addrStr + "/net";
											peer.name = addrStr;
										}

		return peer;
	};

	/** Try to connect to the given servers list in the list order, until finding an available one */
	d1inst.tryConnect = function (servers, WSocket) {
		var deferred = Q.defer();
		function tc(i) {
			d1inst.connect(servers[i], WSocket).then(function (e) {
				return deferred.resolve(servers[i]);
			}).catch(function (e) {
				d1inst.disconnect().then(function () {
					i++;
					if (i < servers.length) setTimeout(function () {
						tc(i);
					}, 100);else return deferred.reject("Timeout");
				});
			});
		}
		tc(0);
		return deferred.promise;
	};

	d1inst.currentServer = function () {
		return connection._addr;
	};

	d1inst.on = function (event, callback) {
		connection.on(event, callback);
		return d1inst;
	};

	d1inst.removeListener = function (event, callback) {
		connection.removeListener(event, callback);
		return d1inst;
	};

	/** Shorthand function to connect and login with the given (user,password) */
	d1inst.connectAsUser = function (ip, user, password, WSocket) {
		return d1inst.connect(ip, WSocket).then(function () {
			return d1inst("#self").auth(user, password);
		});
	};

	d1inst.deauthenticate = function () {
		connection.authenticated(false);connection.user(null);connection.pass(null);
	};
	d1inst.setSecured = function (bSecured) {
		connection.setSecured(bSecured);
	};
	d1inst.isSecured = function () {
		return connection._secured;
	};
	d1inst.setWSocket = function (WSocket) {
		connection.setWSocket(WSocket);
	};

	return d1inst;
}

var d1 = newInstance();
d1.newInstance = newInstance;

//////////////////
// DiyaSelector //
//////////////////

function DiyaSelector(selector, connection) {
	EventEmitter.call(this);

	this._connection = connection;
	this._selector = selector;
	this._listenerCount = 0;
	this._listenCallback = null;
	this._callbackAttached = false;
}
inherits(DiyaSelector, EventEmitter);

//////////////////////////////////////////////////////////
////////////////////// Public API ////////////////////////
//////////////////////////////////////////////////////////

DiyaSelector.prototype.select = function () {
	return this._select();
};

/**
 * Apply callback cb to each selected peer. Peers are selected
 * according to the rule 'selector' given to constructor. Selector can
 * be a peerId, a regEx for peerIds of an array of peerIds.
 * @params 	cb		callback to be applied
 * @return 	this 	<DiyaSelector>
 */
DiyaSelector.prototype.each = function (cb) {
	var peers = this._select();
	for (var i = 0; i < peers.length; i++) {
		cb.bind(this)(peers[i]);
	}return this;
};

/**
 * Send request to selected peers ( see each() ) through the current connection (DiyaNode).
 * @param {String | Object} params : can be service.function or {service:service, func:function, ...}
 */
DiyaSelector.prototype.request = function (params, callback, timeout, options) {
	if (!this._connection) return this;
	if (!options) options = {};
	if (params.constructor === String) {
		var _params = params.split(".");
		if (_params.length != 2) throw 'MalformedRequest';
		params = { service: _params[0], func: _params[1] };
	}

	var nbAnswers = 0;
	var nbExpected = this._select().length;
	return this.each(function (peerId) {
		params.target = peerId;

		var opts = {};
		for (var i in options) {
			opts[i] = options[i];
		}if (typeof opts.callback_partial === 'function') opts.callback_partial = function (err, data) {
			options.callback_partial(peerId, err, data);
		};

		this._connection.request(params, function (err, data) {
			if (typeof callback === 'function') callback(peerId, err, data);
			nbAnswers++;
			if (nbAnswers == nbExpected && options.bNotifyWhenFinished) callback(null, err, "##END##"); // TODO : Find a better way to notify request END !!
		}, timeout, opts);
	});
};

// IMPORTANT !!! By 30/11/15, this method doesn't return 'this' anymore, but a Subscription object instead
/* @param {String | Object} params : can be 'service.function' or {service:service, func:function, ...} */
DiyaSelector.prototype.subscribe = function (params, callback, options) {
	if (params.constructor === String) {
		var _params = params.split(".");
		if (_params.length != 2) throw 'MalformedSubscription';
		params = { service: _params[0], func: _params[1] };
	}

	return new Subscription(this, params, callback, options);
};

// IMPORTANT !!! BY 30/11/15, this method doesn't take subIds as input anymore.
// Please provide a subscription instead !
DiyaSelector.prototype.unsubscribe = function (subscription) {
	if (Array.isArray(subscription) || !subscription.close) return this.__old_deprecated_unsubscribe(subscription);
	return subscription.close();
};

DiyaSelector.prototype.auth = function (user, password, callback, timeout) {
	var that = this;
	if (typeof callback === 'function') callback = callback.bind(this);

	var deferred = Q.defer();

	this.request({
		service: 'auth',
		func: 'Authenticate',
		data: {
			user: user, // DEPRECATED, kept for now for backward compatiblity (will be dropped)
			username: user, // New syntax since switching to DBus
			password: password
		}
	}, function (peerId, err, data) {

		if (err === 'ServiceNotFound') {
			if (typeof callback === 'function') callback(peerId, true);else deferred.reject(err);
			return;
		}

		// data.authenticated is DEPRECATED, kept for backward compatibility
		if (!err && data && (data === true || data.authenticated === true)) {
			that._connection.authenticated(true);
			that._connection.user(user);
			that._connection.pass(password);
			if (typeof callback === 'function') callback(peerId, true);else deferred.resolve();
		} else {
			that._connection.authenticated(false);
			if (typeof callback === 'function') callback(peerId, false);else deferred.reject('AccessDenied');
		}
	}, timeout);

	return deferred.promise;
};

DiyaSelector.prototype.openSocket = function (params, callback) {
	var that = this;

	if (typeof callback === 'function') callback = callback.bind(this);

	var socketName = params;

	this.request({
		service: 'socketHandler',
		func: 'OpenSocket',
		data: {
			socket_name: socketName
		}
	}, function (peerId, err, data) {
		if (err == null && data.socket_id != null) {
			params = {
				err: err,
				socketId: data.socket_id,
				socketName: socketName,
				target: peerId
			};
			that._connection.openSocket(that, params, function (diyaSocket) {
				if (typeof callback === 'function') callback(peerId, null, diyaSocket);
			});
		} else {
			if (typeof callback === 'function') callback(peerId, err, null);
		}
	});
};

DiyaSelector.prototype.sendSocketData = function (params) {
	return this.each(function (peerId) {
		params.target = peerId;
		this._connection.sendSocketData(params);
	});
};

DiyaSelector.prototype.onSocketClosed = function (socketId) {
	this._connection.onSocketClosed(socketId);
};

// Privates

DiyaSelector.prototype._select = function (selectorFunction) {
	var that = this;

	if (!this._connection) return [];
	return this._connection.peers().filter(function (peerId) {
		return that._match(that._selector, peerId);
	});
};

DiyaSelector.prototype._match = function (selector, str) {
	if (!selector) return false;
	if (selector === "#self") {
		return this._connection && str === this._connection.self();
	} else if (selector.not) return !this._match(selector.not, str);else if (selector.constructor.name === 'String') {
		return matchString(selector, str);
	} else if (selector.constructor.name === 'RegExp') {
		return matchRegExp(selector, str);
	} else if (Array.isArray(selector)) {
		return matchArray(selector, str);
	}
	return false;
};

function matchString(selector, str) {
	return selector === str;
}

function matchRegExp(selector, str) {
	return str.match(selector);
}

function matchArray(selector, str) {
	for (var i = 0; i < selector.length; i++) {
		if (selector[i] === str) return true;
	}
	return false;
}

// Overrides EventEmitter's behavior to proxy and filter events from the connection
DiyaSelector.prototype._on = DiyaSelector.prototype.on;
DiyaSelector.prototype.on = function (type, callback) {
	var that = this;
	callback.___DiyaSelector_hidden_wrapper = function (peerId) {
		if (that._match(that._selector, peerId)) that.emit(type, peerId);
	};
	this._connection.on(type, callback.___DiyaSelector_hidden_wrapper);
	var ret = this._on(type, callback);

	// Handle the specific case of "peer-connected" events, i.e., notify of already connected peers
	if (type === 'peer-connected' && this._connection.isConnected()) {
		var peers = this._connection.peers();
		for (var i = 0; i < peers.length; i++) {
			if (this._match(this._selector, peers[i])) callback(peers[i]);
		}
	}
	return ret;
};

// Overrides EventEmitter's behavior to proxy and filter events from the connection
DiyaSelector.prototype._removeListener = DiyaSelector.prototype.removeListener;
DiyaSelector.prototype.removeListener = function (type, callback) {
	if (callback.___DiyaSelector_hidden_wrapper) this._connection.removeListener(type, callback.___DiyaSelector_hidden_wrapper);
	this._removeListener(type, callback);
};

//////////////////
// SUBSCRIPTION //
//////////////////


/**
* Handles a subscription to some DiyaNode service for multiple nodes
* according to the given selector
*/
function Subscription(selector, params, callback, options) {
	var that = this;
	this.selector = selector;
	this.params = params;
	this.callback = callback;
	this.options = options;
	this.subIds = [];

	this.doSubscribe = function (peerId) {
		that.subIds.push(that._addSubscription(peerId));
		that.state = "open";
	};

	if (this.options && this.options.auto) {
		this.selector.on('peer-connected', this.doSubscribe);
	} else {
		this.selector.each(this.doSubscribe);
	}

	return this;
};

Subscription.prototype.close = function () {
	for (var i = 0; i < this.subIds.length; i++) {
		this.selector._connection.unsubscribe(this.subIds[i]);
	}
	this.subIds = [];
	this.selector.removeListener('peer-connected', this.doSubscribe);
	this.state = "closed";
};

Subscription.prototype._addSubscription = function (peerId) {
	var that = this;
	var params = {};
	for (var k in this.params) {
		params[k] = this.params[k];
	}params.target = peerId;
	var subId = this.selector._connection.subscribe(params, function (err, data) {
		that.callback(peerId, err, data);
	});
	if (this.options && Array.isArray(this.options.subIds)) this.options.subIds[peerId] = subId;
	return subId;
};

// Legacy --------------------------------------------


/** @deprecated  */
DiyaSelector.prototype.listen = function () {};

DiyaSelector.prototype.__old_deprecated_unsubscribe = function (subIds) {
	this.each(function (peerId) {
		var subId = subIds[peerId];
		if (subId) this._connection.unsubscribe(subId);
	});
	return this;
};

// -------------------------------------


module.exports = d1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRpeWFTZWxlY3Rvci5qcyJdLCJuYW1lcyI6WyJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJRIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsImluaGVyaXRzIiwiRGl5YU5vZGUiLCJJUF9SRUdFWCIsIm5ld0luc3RhbmNlIiwiY29ubmVjdGlvbiIsImQxaW5zdCIsInNlbGVjdG9yIiwiRGl5YVNlbGVjdG9yIiwiX2QxaW5zdCIsImNvbm5lY3QiLCJhZGRyIiwiV1NvY2tldCIsImRpc2Nvbm5lY3QiLCJpc0Nvbm5lY3RlZCIsInBlZXJzIiwic2VsZiIsInVzZXIiLCJwYXNzIiwiaXNBdXRoZW50aWNhdGVkIiwiYXV0aGVudGljYXRlZCIsInBhcnNlUGVlciIsImFkZHJTdHIiLCJwZWVyIiwiYWRkck5ldCIsInRlc3QiLCJzcGxpdCIsImluZGV4T2YiLCJsZW5ndGgiLCJuYW1lIiwic3Vic3RyIiwidHJ5Q29ubmVjdCIsInNlcnZlcnMiLCJkZWZlcnJlZCIsImRlZmVyIiwidGMiLCJpIiwidGhlbiIsImUiLCJyZXNvbHZlIiwiY2F0Y2giLCJzZXRUaW1lb3V0IiwicmVqZWN0IiwicHJvbWlzZSIsImN1cnJlbnRTZXJ2ZXIiLCJfYWRkciIsIm9uIiwiZXZlbnQiLCJjYWxsYmFjayIsInJlbW92ZUxpc3RlbmVyIiwiY29ubmVjdEFzVXNlciIsImlwIiwicGFzc3dvcmQiLCJhdXRoIiwiZGVhdXRoZW50aWNhdGUiLCJzZXRTZWN1cmVkIiwiYlNlY3VyZWQiLCJpc1NlY3VyZWQiLCJfc2VjdXJlZCIsInNldFdTb2NrZXQiLCJkMSIsImNhbGwiLCJfY29ubmVjdGlvbiIsIl9zZWxlY3RvciIsIl9saXN0ZW5lckNvdW50IiwiX2xpc3RlbkNhbGxiYWNrIiwiX2NhbGxiYWNrQXR0YWNoZWQiLCJwcm90b3R5cGUiLCJzZWxlY3QiLCJfc2VsZWN0IiwiZWFjaCIsImNiIiwiYmluZCIsInJlcXVlc3QiLCJwYXJhbXMiLCJ0aW1lb3V0Iiwib3B0aW9ucyIsImNvbnN0cnVjdG9yIiwiU3RyaW5nIiwiX3BhcmFtcyIsInNlcnZpY2UiLCJmdW5jIiwibmJBbnN3ZXJzIiwibmJFeHBlY3RlZCIsInBlZXJJZCIsInRhcmdldCIsIm9wdHMiLCJjYWxsYmFja19wYXJ0aWFsIiwiZXJyIiwiZGF0YSIsImJOb3RpZnlXaGVuRmluaXNoZWQiLCJzdWJzY3JpYmUiLCJTdWJzY3JpcHRpb24iLCJ1bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImNsb3NlIiwiX19vbGRfZGVwcmVjYXRlZF91bnN1YnNjcmliZSIsInRoYXQiLCJ1c2VybmFtZSIsIm9wZW5Tb2NrZXQiLCJzb2NrZXROYW1lIiwic29ja2V0X25hbWUiLCJzb2NrZXRfaWQiLCJzb2NrZXRJZCIsImRpeWFTb2NrZXQiLCJzZW5kU29ja2V0RGF0YSIsIm9uU29ja2V0Q2xvc2VkIiwic2VsZWN0b3JGdW5jdGlvbiIsImZpbHRlciIsIl9tYXRjaCIsInN0ciIsIm5vdCIsIm1hdGNoU3RyaW5nIiwibWF0Y2hSZWdFeHAiLCJtYXRjaEFycmF5IiwibWF0Y2giLCJfb24iLCJ0eXBlIiwiX19fRGl5YVNlbGVjdG9yX2hpZGRlbl93cmFwcGVyIiwiZW1pdCIsInJldCIsIl9yZW1vdmVMaXN0ZW5lciIsInN1YklkcyIsImRvU3Vic2NyaWJlIiwicHVzaCIsIl9hZGRTdWJzY3JpcHRpb24iLCJzdGF0ZSIsImF1dG8iLCJrIiwic3ViSWQiLCJsaXN0ZW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFlBQVksRUFBRSxPQUFPQyxNQUFQLEtBQWtCLFdBQXBCLENBQWhCO0FBQ0EsSUFBRyxDQUFDRCxTQUFKLEVBQWU7QUFBRSxLQUFJRSxJQUFJQyxRQUFRLEdBQVIsQ0FBUjtBQUF1QixDQUF4QyxNQUNLO0FBQUUsS0FBSUQsSUFBSUQsT0FBT0MsQ0FBZjtBQUFtQjtBQUMxQixJQUFJRSxlQUFlRCxRQUFRLG9CQUFSLENBQW5CO0FBQ0EsSUFBSUUsV0FBV0YsUUFBUSxVQUFSLENBQWY7O0FBRUEsSUFBSUcsV0FBV0gsUUFBUSxZQUFSLENBQWY7O0FBRUEsSUFBSUksV0FBVyxrS0FBZjs7QUFFQTtBQUNBO0FBQ0E7OztBQUlBLFNBQVNDLFdBQVQsR0FBd0I7O0FBRXZCLEtBQUlDLGFBQWEsSUFBSUgsUUFBSixFQUFqQjs7QUFFQSxLQUFJSSxTQUFTLFNBQVRBLE1BQVMsQ0FBVUMsUUFBVixFQUFvQjtBQUNoQyxTQUFPLElBQUlDLFlBQUosQ0FBaUJELFFBQWpCLEVBQTJCRixVQUEzQixDQUFQO0FBQ0EsRUFGRDs7QUFJQUEsWUFBV0ksT0FBWCxHQUFxQkgsTUFBckI7O0FBRUFBLFFBQU9KLFFBQVAsR0FBa0JBLFFBQWxCO0FBQ0FJLFFBQU9FLFlBQVAsR0FBc0JBLFlBQXRCOztBQUVBRixRQUFPSSxPQUFQLEdBQWlCLFVBQVNDLElBQVQsRUFBZUMsT0FBZixFQUF1QjtBQUN2QyxTQUFPUCxXQUFXSyxPQUFYLENBQW1CQyxJQUFuQixFQUF5QkMsT0FBekIsQ0FBUDtBQUNBLEVBRkQ7O0FBSUFOLFFBQU9PLFVBQVAsR0FBb0IsWUFBVTtBQUM3QixTQUFPUixXQUFXUSxVQUFYLEVBQVA7QUFDQSxFQUZEOztBQUlBUCxRQUFPUSxXQUFQLEdBQXFCLFlBQVc7QUFBRSxTQUFPVCxXQUFXUyxXQUFYLEVBQVA7QUFBaUMsRUFBbkU7QUFDQVIsUUFBT1MsS0FBUCxHQUFlLFlBQVc7QUFBRSxTQUFPVixXQUFXVSxLQUFYLEVBQVA7QUFBMkIsRUFBdkQ7QUFDQVQsUUFBT1UsSUFBUCxHQUFjLFlBQVc7QUFBRSxTQUFPWCxXQUFXVyxJQUFYLEVBQVA7QUFBMkIsRUFBdEQ7QUFDQVYsUUFBT0ssSUFBUCxHQUFjLFlBQVc7QUFBRSxTQUFPTixXQUFXTSxJQUFYLEVBQVA7QUFBMkIsRUFBdEQ7QUFDQUwsUUFBT1csSUFBUCxHQUFjLFlBQVc7QUFBRSxTQUFPWixXQUFXWSxJQUFYLEVBQVA7QUFBMkIsRUFBdEQ7QUFDQVgsUUFBT1ksSUFBUCxHQUFjLFlBQVc7QUFBRSxTQUFPYixXQUFXYSxJQUFYLEVBQVA7QUFBMkIsRUFBdEQ7QUFDQVosUUFBT2EsZUFBUCxHQUF5QixZQUFXO0FBQUUsU0FBT2QsV0FBV2UsYUFBWCxFQUFQO0FBQW9DLEVBQTFFOztBQUVBZCxRQUFPZSxTQUFQLEdBQW1CLFVBQVNDLE9BQVQsRUFBa0I7QUFDcEMsTUFBSUMsT0FBTyxFQUFYOztBQUVBO0FBQ0EsTUFBRyxDQUFDRCxPQUFELElBQVlBLFlBQVksRUFBM0IsRUFBK0I7QUFDOUJDLFFBQUtaLElBQUwsR0FBWSxxQkFBWjtBQUNBWSxRQUFLQyxPQUFMLEdBQWUscUJBQWY7QUFDQTtBQUNEO0FBSkEsT0FLSyxJQUFHLFdBQVdDLElBQVgsQ0FBZ0JILE9BQWhCLENBQUgsRUFBNkI7QUFDakNDLFNBQUtaLElBQUwsR0FBWSxvQkFBa0JXLE9BQTlCO0FBQ0E7QUFDRDtBQUhLLFFBSUEsSUFBSUEsWUFBWSxXQUFoQixFQUE2QjtBQUNqQ0MsVUFBS1osSUFBTCxHQUFZLHFDQUFaO0FBQ0E7QUFDRDtBQUNBO0FBSkssU0FLQSxJQUFJUixTQUFTc0IsSUFBVCxDQUFjSCxPQUFkLENBQUosRUFBNEI7QUFDaENDLFdBQUtaLElBQUwsR0FBWSxXQUFTVyxPQUFULEdBQWlCLE1BQTdCO0FBQ0FDLFdBQUtDLE9BQUwsR0FBZSxXQUFTRixPQUFULEdBQWlCLE1BQWhDO0FBQ0E7QUFDRDtBQUpLLFVBS08sSUFBSW5CLFNBQVNzQixJQUFULENBQWNILFFBQVFJLEtBQVIsQ0FBYyxHQUFkLEVBQW1CLENBQW5CLENBQWQsS0FBd0MsV0FBV0QsSUFBWCxDQUFnQkgsUUFBUUksS0FBUixDQUFjLEdBQWQsRUFBbUIsQ0FBbkIsQ0FBaEIsQ0FBNUMsRUFBb0Y7QUFDL0ZILFlBQUtaLElBQUwsR0FBWSxVQUFRVyxPQUFwQjtBQUNBO0FBQ0Q7QUFDQTtBQUpZLFdBS1AsSUFBSUEsUUFBUUssT0FBUixDQUFnQixRQUFoQixNQUE4QixDQUE5QixJQUFtQ0wsUUFBUUssT0FBUixDQUFnQixPQUFoQixNQUE2QixDQUFwRSxFQUF1RTtBQUMzRUosYUFBS1osSUFBTCxHQUFZVyxPQUFaO0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFMSyxZQU1BLElBQUdBLFFBQVFJLEtBQVIsQ0FBYyxHQUFkLEVBQW1CRSxNQUFuQixLQUE4QixDQUFqQyxFQUFvQztBQUN4Q0wsY0FBS1osSUFBTCxHQUFZLFdBQVdXLE9BQVgsR0FBcUIsTUFBakM7QUFDQUMsY0FBS0MsT0FBTCxHQUFlLFdBQVdGLE9BQVgsR0FBcUIsTUFBcEM7QUFDQUMsY0FBS00sSUFBTCxHQUFZUCxRQUFRSSxLQUFSLENBQWMsR0FBZCxFQUFtQixDQUFuQixDQUFaO0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFQSyxhQVFBLElBQUdKLFFBQVFJLEtBQVIsQ0FBYyxHQUFkLEVBQW1CRSxNQUFuQixLQUE4QixDQUE5QixJQUFtQ04sUUFBUUksS0FBUixDQUFjLEdBQWQsRUFBbUIsQ0FBbkIsTUFBMEIsS0FBaEUsRUFBdUU7QUFDM0VILGVBQUtaLElBQUwsR0FBWSxXQUFTVyxPQUFyQjtBQUNBQyxlQUFLQyxPQUFMLEdBQWUsV0FBU0YsUUFBUVEsTUFBUixDQUFlLENBQWYsRUFBa0JSLFFBQVFNLE1BQVIsR0FBaUIsQ0FBbkMsQ0FBeEI7QUFDQUwsZUFBS00sSUFBTCxHQUFZUCxRQUFRSSxLQUFSLENBQWMsR0FBZCxFQUFtQixDQUFuQixDQUFaO0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFQSyxjQVFBO0FBQ0pILGdCQUFLWixJQUFMLEdBQVksZ0NBQThCVyxPQUE5QixHQUFzQyxNQUFsRDtBQUNBQyxnQkFBS0MsT0FBTCxHQUFlLGdDQUE4QkYsT0FBOUIsR0FBc0MsTUFBckQ7QUFDQUMsZ0JBQUtNLElBQUwsR0FBWVAsT0FBWjtBQUNBOztBQUVELFNBQU9DLElBQVA7QUFDQSxFQXpERDs7QUE0REE7QUFDQWpCLFFBQU95QixVQUFQLEdBQW9CLFVBQVNDLE9BQVQsRUFBa0JwQixPQUFsQixFQUEwQjtBQUM3QyxNQUFJcUIsV0FBV25DLEVBQUVvQyxLQUFGLEVBQWY7QUFDQSxXQUFTQyxFQUFULENBQVlDLENBQVosRUFBZTtBQUNkOUIsVUFBT0ksT0FBUCxDQUFlc0IsUUFBUUksQ0FBUixDQUFmLEVBQTJCeEIsT0FBM0IsRUFBb0N5QixJQUFwQyxDQUF5QyxVQUFTQyxDQUFULEVBQVc7QUFDbkQsV0FBT0wsU0FBU00sT0FBVCxDQUFpQlAsUUFBUUksQ0FBUixDQUFqQixDQUFQO0FBQ0EsSUFGRCxFQUVHSSxLQUZILENBRVMsVUFBU0YsQ0FBVCxFQUFXO0FBQ25CaEMsV0FBT08sVUFBUCxHQUFvQndCLElBQXBCLENBQXlCLFlBQVc7QUFDbkNEO0FBQ0EsU0FBR0EsSUFBRUosUUFBUUosTUFBYixFQUFxQmEsV0FBVyxZQUFXO0FBQUNOLFNBQUdDLENBQUg7QUFBTyxNQUE5QixFQUFnQyxHQUFoQyxFQUFyQixLQUNLLE9BQU9ILFNBQVNTLE1BQVQsQ0FBZ0IsU0FBaEIsQ0FBUDtBQUNMLEtBSkQ7QUFLQSxJQVJEO0FBU0E7QUFDRFAsS0FBRyxDQUFIO0FBQ0EsU0FBT0YsU0FBU1UsT0FBaEI7QUFDQSxFQWZEOztBQWlCQXJDLFFBQU9zQyxhQUFQLEdBQXVCLFlBQVU7QUFDaEMsU0FBT3ZDLFdBQVd3QyxLQUFsQjtBQUNBLEVBRkQ7O0FBSUF2QyxRQUFPd0MsRUFBUCxHQUFZLFVBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQXlCO0FBQ3BDM0MsYUFBV3lDLEVBQVgsQ0FBY0MsS0FBZCxFQUFxQkMsUUFBckI7QUFDQSxTQUFPMUMsTUFBUDtBQUNBLEVBSEQ7O0FBS0FBLFFBQU8yQyxjQUFQLEdBQXdCLFVBQVNGLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQXlCO0FBQ2hEM0MsYUFBVzRDLGNBQVgsQ0FBMEJGLEtBQTFCLEVBQWlDQyxRQUFqQztBQUNBLFNBQU8xQyxNQUFQO0FBQ0EsRUFIRDs7QUFLQTtBQUNBQSxRQUFPNEMsYUFBUCxHQUF1QixVQUFTQyxFQUFULEVBQWFsQyxJQUFiLEVBQW1CbUMsUUFBbkIsRUFBNkJ4QyxPQUE3QixFQUFzQztBQUM1RCxTQUFPTixPQUFPSSxPQUFQLENBQWV5QyxFQUFmLEVBQW1CdkMsT0FBbkIsRUFBNEJ5QixJQUE1QixDQUFpQyxZQUFVO0FBQ2pELFVBQU8vQixPQUFPLE9BQVAsRUFBZ0IrQyxJQUFoQixDQUFxQnBDLElBQXJCLEVBQTJCbUMsUUFBM0IsQ0FBUDtBQUNBLEdBRk0sQ0FBUDtBQUdBLEVBSkQ7O0FBTUE5QyxRQUFPZ0QsY0FBUCxHQUF3QixZQUFVO0FBQUVqRCxhQUFXZSxhQUFYLENBQXlCLEtBQXpCLEVBQWlDZixXQUFXWSxJQUFYLENBQWdCLElBQWhCLEVBQXVCWixXQUFXYSxJQUFYLENBQWdCLElBQWhCO0FBQXVCLEVBQW5IO0FBQ0FaLFFBQU9pRCxVQUFQLEdBQW9CLFVBQVNDLFFBQVQsRUFBbUI7QUFBRW5ELGFBQVdrRCxVQUFYLENBQXNCQyxRQUF0QjtBQUFrQyxFQUEzRTtBQUNBbEQsUUFBT21ELFNBQVAsR0FBbUIsWUFBVztBQUFDLFNBQU9wRCxXQUFXcUQsUUFBbEI7QUFBNkIsRUFBNUQ7QUFDQXBELFFBQU9xRCxVQUFQLEdBQW9CLFVBQVMvQyxPQUFULEVBQWtCO0FBQUVQLGFBQVdzRCxVQUFYLENBQXNCL0MsT0FBdEI7QUFBaUMsRUFBekU7O0FBRUEsUUFBT04sTUFBUDtBQUNBOztBQUVELElBQUlzRCxLQUFLeEQsYUFBVDtBQUNBd0QsR0FBR3hELFdBQUgsR0FBaUJBLFdBQWpCOztBQUlBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTSSxZQUFULENBQXNCRCxRQUF0QixFQUFnQ0YsVUFBaEMsRUFBMkM7QUFDMUNMLGNBQWE2RCxJQUFiLENBQWtCLElBQWxCOztBQUVBLE1BQUtDLFdBQUwsR0FBbUJ6RCxVQUFuQjtBQUNBLE1BQUswRCxTQUFMLEdBQWlCeEQsUUFBakI7QUFDQSxNQUFLeUQsY0FBTCxHQUFzQixDQUF0QjtBQUNBLE1BQUtDLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxNQUFLQyxpQkFBTCxHQUF5QixLQUF6QjtBQUNBO0FBQ0RqRSxTQUFTTyxZQUFULEVBQXVCUixZQUF2Qjs7QUFHQTtBQUNBO0FBQ0E7O0FBRUFRLGFBQWEyRCxTQUFiLENBQXVCQyxNQUF2QixHQUFnQyxZQUFXO0FBQUUsUUFBTyxLQUFLQyxPQUFMLEVBQVA7QUFBd0IsQ0FBckU7O0FBSUE7Ozs7Ozs7QUFPQTdELGFBQWEyRCxTQUFiLENBQXVCRyxJQUF2QixHQUE4QixVQUFTQyxFQUFULEVBQVk7QUFDekMsS0FBSXhELFFBQVEsS0FBS3NELE9BQUwsRUFBWjtBQUNBLE1BQUksSUFBSWpDLElBQUUsQ0FBVixFQUFhQSxJQUFFckIsTUFBTWEsTUFBckIsRUFBNkJRLEdBQTdCO0FBQWtDbUMsS0FBR0MsSUFBSCxDQUFRLElBQVIsRUFBY3pELE1BQU1xQixDQUFOLENBQWQ7QUFBbEMsRUFDQSxPQUFPLElBQVA7QUFDQSxDQUpEOztBQU1BOzs7O0FBSUE1QixhQUFhMkQsU0FBYixDQUF1Qk0sT0FBdkIsR0FBaUMsVUFBU0MsTUFBVCxFQUFpQjFCLFFBQWpCLEVBQTJCMkIsT0FBM0IsRUFBb0NDLE9BQXBDLEVBQTRDO0FBQzVFLEtBQUcsQ0FBQyxLQUFLZCxXQUFULEVBQXNCLE9BQU8sSUFBUDtBQUN0QixLQUFHLENBQUNjLE9BQUosRUFBYUEsVUFBVSxFQUFWO0FBQ2IsS0FBR0YsT0FBT0csV0FBUCxLQUF1QkMsTUFBMUIsRUFBa0M7QUFDakMsTUFBSUMsVUFBVUwsT0FBT2hELEtBQVAsQ0FBYSxHQUFiLENBQWQ7QUFDQSxNQUFHcUQsUUFBUW5ELE1BQVIsSUFBZ0IsQ0FBbkIsRUFBc0IsTUFBTSxrQkFBTjtBQUN0QjhDLFdBQVMsRUFBQ00sU0FBUUQsUUFBUSxDQUFSLENBQVQsRUFBcUJFLE1BQUtGLFFBQVEsQ0FBUixDQUExQixFQUFUO0FBQ0E7O0FBRUQsS0FBSUcsWUFBWSxDQUFoQjtBQUNBLEtBQUlDLGFBQWEsS0FBS2QsT0FBTCxHQUFlekMsTUFBaEM7QUFDQSxRQUFPLEtBQUswQyxJQUFMLENBQVUsVUFBU2MsTUFBVCxFQUFnQjtBQUNoQ1YsU0FBT1csTUFBUCxHQUFnQkQsTUFBaEI7O0FBRUEsTUFBSUUsT0FBTyxFQUFYO0FBQ0EsT0FBSSxJQUFJbEQsQ0FBUixJQUFhd0MsT0FBYjtBQUFzQlUsUUFBS2xELENBQUwsSUFBVXdDLFFBQVF4QyxDQUFSLENBQVY7QUFBdEIsR0FDQSxJQUFHLE9BQU9rRCxLQUFLQyxnQkFBWixLQUFpQyxVQUFwQyxFQUFnREQsS0FBS0MsZ0JBQUwsR0FBd0IsVUFBU0MsR0FBVCxFQUFjQyxJQUFkLEVBQW1CO0FBQUViLFdBQVFXLGdCQUFSLENBQXlCSCxNQUF6QixFQUFpQ0ksR0FBakMsRUFBc0NDLElBQXRDO0FBQTZDLEdBQTFGOztBQUVoRCxPQUFLM0IsV0FBTCxDQUFpQlcsT0FBakIsQ0FBeUJDLE1BQXpCLEVBQWlDLFVBQVNjLEdBQVQsRUFBY0MsSUFBZCxFQUFtQjtBQUNuRCxPQUFHLE9BQU96QyxRQUFQLEtBQW9CLFVBQXZCLEVBQW1DQSxTQUFTb0MsTUFBVCxFQUFpQkksR0FBakIsRUFBc0JDLElBQXRCO0FBQ25DUDtBQUNBLE9BQUdBLGFBQWFDLFVBQWIsSUFBMkJQLFFBQVFjLG1CQUF0QyxFQUEyRDFDLFNBQVMsSUFBVCxFQUFld0MsR0FBZixFQUFvQixTQUFwQixFQUhSLENBR3dDO0FBQzNGLEdBSkQsRUFJR2IsT0FKSCxFQUlZVyxJQUpaO0FBS0EsRUFaTSxDQUFQO0FBYUEsQ0F4QkQ7O0FBMkJBO0FBQ0E7QUFDQTlFLGFBQWEyRCxTQUFiLENBQXVCd0IsU0FBdkIsR0FBbUMsVUFBU2pCLE1BQVQsRUFBaUIxQixRQUFqQixFQUEyQjRCLE9BQTNCLEVBQW1DO0FBQ3JFLEtBQUdGLE9BQU9HLFdBQVAsS0FBdUJDLE1BQTFCLEVBQWtDO0FBQ2pDLE1BQUlDLFVBQVVMLE9BQU9oRCxLQUFQLENBQWEsR0FBYixDQUFkO0FBQ0EsTUFBR3FELFFBQVFuRCxNQUFSLElBQWdCLENBQW5CLEVBQXNCLE1BQU0sdUJBQU47QUFDdEI4QyxXQUFTLEVBQUNNLFNBQVFELFFBQVEsQ0FBUixDQUFULEVBQXFCRSxNQUFLRixRQUFRLENBQVIsQ0FBMUIsRUFBVDtBQUNBOztBQUVELFFBQU8sSUFBSWEsWUFBSixDQUFpQixJQUFqQixFQUF1QmxCLE1BQXZCLEVBQStCMUIsUUFBL0IsRUFBeUM0QixPQUF6QyxDQUFQO0FBQ0EsQ0FSRDs7QUFXQTtBQUNBO0FBQ0FwRSxhQUFhMkQsU0FBYixDQUF1QjBCLFdBQXZCLEdBQXFDLFVBQVNDLFlBQVQsRUFBc0I7QUFDMUQsS0FBR0MsTUFBTUMsT0FBTixDQUFjRixZQUFkLEtBQStCLENBQUNBLGFBQWFHLEtBQWhELEVBQXVELE9BQU8sS0FBS0MsNEJBQUwsQ0FBa0NKLFlBQWxDLENBQVA7QUFDdkQsUUFBT0EsYUFBYUcsS0FBYixFQUFQO0FBQ0EsQ0FIRDs7QUFLQXpGLGFBQWEyRCxTQUFiLENBQXVCZCxJQUF2QixHQUE4QixVQUFTcEMsSUFBVCxFQUFlbUMsUUFBZixFQUF5QkosUUFBekIsRUFBbUMyQixPQUFuQyxFQUEyQztBQUN4RSxLQUFJd0IsT0FBTyxJQUFYO0FBQ0EsS0FBRyxPQUFPbkQsUUFBUCxLQUFvQixVQUF2QixFQUFtQ0EsV0FBV0EsU0FBU3dCLElBQVQsQ0FBYyxJQUFkLENBQVg7O0FBRW5DLEtBQUl2QyxXQUFXbkMsRUFBRW9DLEtBQUYsRUFBZjs7QUFFQSxNQUFLdUMsT0FBTCxDQUFhO0FBQ1pPLFdBQVMsTUFERztBQUVaQyxRQUFNLGNBRk07QUFHWlEsUUFBTTtBQUNMeEUsU0FBTUEsSUFERCxFQUNPO0FBQ1ptRixhQUFVbkYsSUFGTCxFQUVXO0FBQ2hCbUMsYUFBVUE7QUFITDtBQUhNLEVBQWIsRUFRRyxVQUFTZ0MsTUFBVCxFQUFpQkksR0FBakIsRUFBc0JDLElBQXRCLEVBQTJCOztBQUU3QixNQUFHRCxRQUFRLGlCQUFYLEVBQTZCO0FBQzVCLE9BQUcsT0FBT3hDLFFBQVAsS0FBb0IsVUFBdkIsRUFBbUNBLFNBQVNvQyxNQUFULEVBQWlCLElBQWpCLEVBQW5DLEtBQ0tuRCxTQUFTUyxNQUFULENBQWdCOEMsR0FBaEI7QUFDTDtBQUNBOztBQUVEO0FBQ0EsTUFBRyxDQUFDQSxHQUFELElBQVFDLElBQVIsS0FBaUJBLFNBQVMsSUFBVCxJQUFpQkEsS0FBS3JFLGFBQUwsS0FBdUIsSUFBekQsQ0FBSCxFQUFrRTtBQUNqRStFLFFBQUtyQyxXQUFMLENBQWlCMUMsYUFBakIsQ0FBK0IsSUFBL0I7QUFDQStFLFFBQUtyQyxXQUFMLENBQWlCN0MsSUFBakIsQ0FBc0JBLElBQXRCO0FBQ0FrRixRQUFLckMsV0FBTCxDQUFpQjVDLElBQWpCLENBQXNCa0MsUUFBdEI7QUFDQSxPQUFHLE9BQU9KLFFBQVAsS0FBb0IsVUFBdkIsRUFBbUNBLFNBQVNvQyxNQUFULEVBQWlCLElBQWpCLEVBQW5DLEtBQ0tuRCxTQUFTTSxPQUFUO0FBQ0wsR0FORCxNQU1PO0FBQ040RCxRQUFLckMsV0FBTCxDQUFpQjFDLGFBQWpCLENBQStCLEtBQS9CO0FBQ0EsT0FBRyxPQUFPNEIsUUFBUCxLQUFvQixVQUF2QixFQUFtQ0EsU0FBU29DLE1BQVQsRUFBaUIsS0FBakIsRUFBbkMsS0FDS25ELFNBQVNTLE1BQVQsQ0FBZ0IsY0FBaEI7QUFDTDtBQUVELEVBN0JELEVBNkJHaUMsT0E3Qkg7O0FBK0JBLFFBQU8xQyxTQUFTVSxPQUFoQjtBQUNBLENBdENEOztBQXdDQW5DLGFBQWEyRCxTQUFiLENBQXVCa0MsVUFBdkIsR0FBb0MsVUFBVTNCLE1BQVYsRUFBa0IxQixRQUFsQixFQUE0QjtBQUMvRCxLQUFJbUQsT0FBTyxJQUFYOztBQUVBLEtBQUksT0FBT25ELFFBQVAsS0FBb0IsVUFBeEIsRUFBb0NBLFdBQVdBLFNBQVN3QixJQUFULENBQWMsSUFBZCxDQUFYOztBQUVwQyxLQUFJOEIsYUFBYTVCLE1BQWpCOztBQUVBLE1BQUtELE9BQUwsQ0FBYTtBQUNaTyxXQUFTLGVBREc7QUFFWkMsUUFBTSxZQUZNO0FBR1pRLFFBQU07QUFDTGMsZ0JBQWFEO0FBRFI7QUFITSxFQUFiLEVBTUcsVUFBVWxCLE1BQVYsRUFBa0JJLEdBQWxCLEVBQXVCQyxJQUF2QixFQUE2QjtBQUMvQixNQUFJRCxPQUFPLElBQVAsSUFBZUMsS0FBS2UsU0FBTCxJQUFrQixJQUFyQyxFQUEyQztBQUMxQzlCLFlBQVM7QUFDUmMsU0FBS0EsR0FERztBQUVSaUIsY0FBVWhCLEtBQUtlLFNBRlA7QUFHUkYsZ0JBQVlBLFVBSEo7QUFJUmpCLFlBQVFEO0FBSkEsSUFBVDtBQU1BZSxRQUFLckMsV0FBTCxDQUFpQnVDLFVBQWpCLENBQTRCRixJQUE1QixFQUFrQ3pCLE1BQWxDLEVBQTBDLFVBQUNnQyxVQUFELEVBQWdCO0FBQ3pELFFBQUksT0FBTzFELFFBQVAsS0FBb0IsVUFBeEIsRUFBb0NBLFNBQVNvQyxNQUFULEVBQWlCLElBQWpCLEVBQXVCc0IsVUFBdkI7QUFDcEMsSUFGRDtBQUlBLEdBWEQsTUFXTztBQUNOLE9BQUksT0FBTzFELFFBQVAsS0FBb0IsVUFBeEIsRUFBb0NBLFNBQVNvQyxNQUFULEVBQWlCSSxHQUFqQixFQUFzQixJQUF0QjtBQUNwQztBQUNELEVBckJEO0FBc0JBLENBN0JEOztBQStCQWhGLGFBQWEyRCxTQUFiLENBQXVCd0MsY0FBdkIsR0FBd0MsVUFBVWpDLE1BQVYsRUFBa0I7QUFDekQsUUFBTyxLQUFLSixJQUFMLENBQVUsVUFBVWMsTUFBVixFQUFrQjtBQUNsQ1YsU0FBT1csTUFBUCxHQUFnQkQsTUFBaEI7QUFDQSxPQUFLdEIsV0FBTCxDQUFpQjZDLGNBQWpCLENBQWdDakMsTUFBaEM7QUFDQSxFQUhNLENBQVA7QUFJQSxDQUxEOztBQU9BbEUsYUFBYTJELFNBQWIsQ0FBdUJ5QyxjQUF2QixHQUF3QyxVQUFTSCxRQUFULEVBQWtCO0FBQ3pELE1BQUszQyxXQUFMLENBQWlCOEMsY0FBakIsQ0FBZ0NILFFBQWhDO0FBQ0EsQ0FGRDs7QUFJQTs7QUFFQWpHLGFBQWEyRCxTQUFiLENBQXVCRSxPQUF2QixHQUFpQyxVQUFTd0MsZ0JBQVQsRUFBMEI7QUFDMUQsS0FBSVYsT0FBTyxJQUFYOztBQUVBLEtBQUcsQ0FBQyxLQUFLckMsV0FBVCxFQUFzQixPQUFPLEVBQVA7QUFDdEIsUUFBTyxLQUFLQSxXQUFMLENBQWlCL0MsS0FBakIsR0FBeUIrRixNQUF6QixDQUFnQyxVQUFTMUIsTUFBVCxFQUFnQjtBQUN0RCxTQUFPZSxLQUFLWSxNQUFMLENBQVlaLEtBQUtwQyxTQUFqQixFQUE0QnFCLE1BQTVCLENBQVA7QUFDQSxFQUZNLENBQVA7QUFHQSxDQVBEOztBQVNBNUUsYUFBYTJELFNBQWIsQ0FBdUI0QyxNQUF2QixHQUFnQyxVQUFTeEcsUUFBVCxFQUFtQnlHLEdBQW5CLEVBQXVCO0FBQ3RELEtBQUcsQ0FBQ3pHLFFBQUosRUFBYyxPQUFPLEtBQVA7QUFDZCxLQUFHQSxhQUFhLE9BQWhCLEVBQXlCO0FBQUUsU0FBTyxLQUFLdUQsV0FBTCxJQUFvQmtELFFBQVEsS0FBS2xELFdBQUwsQ0FBaUI5QyxJQUFqQixFQUFuQztBQUE2RCxFQUF4RixNQUNLLElBQUdULFNBQVMwRyxHQUFaLEVBQWlCLE9BQU8sQ0FBQyxLQUFLRixNQUFMLENBQVl4RyxTQUFTMEcsR0FBckIsRUFBMEJELEdBQTFCLENBQVIsQ0FBakIsS0FDQSxJQUFHekcsU0FBU3NFLFdBQVQsQ0FBcUJoRCxJQUFyQixLQUE4QixRQUFqQyxFQUEwQztBQUM5QyxTQUFPcUYsWUFBWTNHLFFBQVosRUFBc0J5RyxHQUF0QixDQUFQO0FBQ0EsRUFGSSxNQUVFLElBQUd6RyxTQUFTc0UsV0FBVCxDQUFxQmhELElBQXJCLEtBQThCLFFBQWpDLEVBQTBDO0FBQ2hELFNBQU9zRixZQUFZNUcsUUFBWixFQUFzQnlHLEdBQXRCLENBQVA7QUFDQSxFQUZNLE1BRUEsSUFBR2pCLE1BQU1DLE9BQU4sQ0FBY3pGLFFBQWQsQ0FBSCxFQUEyQjtBQUNqQyxTQUFPNkcsV0FBVzdHLFFBQVgsRUFBcUJ5RyxHQUFyQixDQUFQO0FBQ0E7QUFDRCxRQUFPLEtBQVA7QUFDQSxDQVpEOztBQWNBLFNBQVNFLFdBQVQsQ0FBcUIzRyxRQUFyQixFQUErQnlHLEdBQS9CLEVBQW1DO0FBQ2xDLFFBQU96RyxhQUFheUcsR0FBcEI7QUFDQTs7QUFFRCxTQUFTRyxXQUFULENBQXFCNUcsUUFBckIsRUFBK0J5RyxHQUEvQixFQUFtQztBQUNsQyxRQUFPQSxJQUFJSyxLQUFKLENBQVU5RyxRQUFWLENBQVA7QUFDQTs7QUFFRCxTQUFTNkcsVUFBVCxDQUFvQjdHLFFBQXBCLEVBQThCeUcsR0FBOUIsRUFBa0M7QUFDakMsTUFBSSxJQUFJNUUsSUFBRSxDQUFWLEVBQVlBLElBQUU3QixTQUFTcUIsTUFBdkIsRUFBK0JRLEdBQS9CLEVBQW1DO0FBQ2xDLE1BQUc3QixTQUFTNkIsQ0FBVCxNQUFnQjRFLEdBQW5CLEVBQXdCLE9BQU8sSUFBUDtBQUN4QjtBQUNELFFBQU8sS0FBUDtBQUNBOztBQUVEO0FBQ0F4RyxhQUFhMkQsU0FBYixDQUF1Qm1ELEdBQXZCLEdBQTZCOUcsYUFBYTJELFNBQWIsQ0FBdUJyQixFQUFwRDtBQUNBdEMsYUFBYTJELFNBQWIsQ0FBdUJyQixFQUF2QixHQUE0QixVQUFTeUUsSUFBVCxFQUFldkUsUUFBZixFQUF3QjtBQUNuRCxLQUFJbUQsT0FBTyxJQUFYO0FBQ0FuRCxVQUFTd0UsOEJBQVQsR0FBMEMsVUFBU3BDLE1BQVQsRUFBaUI7QUFDMUQsTUFBR2UsS0FBS1ksTUFBTCxDQUFZWixLQUFLcEMsU0FBakIsRUFBNEJxQixNQUE1QixDQUFILEVBQXdDZSxLQUFLc0IsSUFBTCxDQUFVRixJQUFWLEVBQWdCbkMsTUFBaEI7QUFDeEMsRUFGRDtBQUdBLE1BQUt0QixXQUFMLENBQWlCaEIsRUFBakIsQ0FBb0J5RSxJQUFwQixFQUEwQnZFLFNBQVN3RSw4QkFBbkM7QUFDQSxLQUFJRSxNQUFNLEtBQUtKLEdBQUwsQ0FBU0MsSUFBVCxFQUFldkUsUUFBZixDQUFWOztBQUVBO0FBQ0EsS0FBR3VFLFNBQVMsZ0JBQVQsSUFBNkIsS0FBS3pELFdBQUwsQ0FBaUJoRCxXQUFqQixFQUFoQyxFQUFnRTtBQUMvRCxNQUFJQyxRQUFRLEtBQUsrQyxXQUFMLENBQWlCL0MsS0FBakIsRUFBWjtBQUNBLE9BQUksSUFBSXFCLElBQUUsQ0FBVixFQUFZQSxJQUFFckIsTUFBTWEsTUFBcEIsRUFBNEJRLEdBQTVCLEVBQWlDO0FBQ2hDLE9BQUcsS0FBSzJFLE1BQUwsQ0FBWSxLQUFLaEQsU0FBakIsRUFBNEJoRCxNQUFNcUIsQ0FBTixDQUE1QixDQUFILEVBQTBDWSxTQUFTakMsTUFBTXFCLENBQU4sQ0FBVDtBQUMxQztBQUNEO0FBQ0QsUUFBT3NGLEdBQVA7QUFDQSxDQWhCRDs7QUFtQkE7QUFDQWxILGFBQWEyRCxTQUFiLENBQXVCd0QsZUFBdkIsR0FBeUNuSCxhQUFhMkQsU0FBYixDQUF1QmxCLGNBQWhFO0FBQ0F6QyxhQUFhMkQsU0FBYixDQUF1QmxCLGNBQXZCLEdBQXdDLFVBQVNzRSxJQUFULEVBQWV2RSxRQUFmLEVBQXlCO0FBQ2hFLEtBQUdBLFNBQVN3RSw4QkFBWixFQUE0QyxLQUFLMUQsV0FBTCxDQUFpQmIsY0FBakIsQ0FBZ0NzRSxJQUFoQyxFQUFzQ3ZFLFNBQVN3RSw4QkFBL0M7QUFDNUMsTUFBS0csZUFBTCxDQUFxQkosSUFBckIsRUFBMkJ2RSxRQUEzQjtBQUNBLENBSEQ7O0FBT0E7QUFDQTtBQUNBOzs7QUFHQTs7OztBQUlBLFNBQVM0QyxZQUFULENBQXNCckYsUUFBdEIsRUFBZ0NtRSxNQUFoQyxFQUF3QzFCLFFBQXhDLEVBQWtENEIsT0FBbEQsRUFBMkQ7QUFDekQsS0FBSXVCLE9BQU8sSUFBWDtBQUNBLE1BQUs1RixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLE1BQUttRSxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxNQUFLMUIsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxNQUFLNEIsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsTUFBS2dELE1BQUwsR0FBYyxFQUFkOztBQUVBLE1BQUtDLFdBQUwsR0FBbUIsVUFBU3pDLE1BQVQsRUFBaUI7QUFDbkNlLE9BQUt5QixNQUFMLENBQVlFLElBQVosQ0FBaUIzQixLQUFLNEIsZ0JBQUwsQ0FBc0IzQyxNQUF0QixDQUFqQjtBQUNBZSxPQUFLNkIsS0FBTCxHQUFhLE1BQWI7QUFDQSxFQUhEOztBQUtBLEtBQUcsS0FBS3BELE9BQUwsSUFBZ0IsS0FBS0EsT0FBTCxDQUFhcUQsSUFBaEMsRUFBc0M7QUFDckMsT0FBSzFILFFBQUwsQ0FBY3VDLEVBQWQsQ0FBaUIsZ0JBQWpCLEVBQW1DLEtBQUsrRSxXQUF4QztBQUNBLEVBRkQsTUFFTztBQUNOLE9BQUt0SCxRQUFMLENBQWMrRCxJQUFkLENBQW1CLEtBQUt1RCxXQUF4QjtBQUNBOztBQUVELFFBQU8sSUFBUDtBQUNEOztBQUVEakMsYUFBYXpCLFNBQWIsQ0FBdUI4QixLQUF2QixHQUErQixZQUFXO0FBQ3pDLE1BQUksSUFBSTdELElBQUksQ0FBWixFQUFlQSxJQUFFLEtBQUt3RixNQUFMLENBQVloRyxNQUE3QixFQUFxQ1EsR0FBckMsRUFBMEM7QUFDekMsT0FBSzdCLFFBQUwsQ0FBY3VELFdBQWQsQ0FBMEIrQixXQUExQixDQUFzQyxLQUFLK0IsTUFBTCxDQUFZeEYsQ0FBWixDQUF0QztBQUNBO0FBQ0QsTUFBS3dGLE1BQUwsR0FBYyxFQUFkO0FBQ0EsTUFBS3JILFFBQUwsQ0FBYzBDLGNBQWQsQ0FBNkIsZ0JBQTdCLEVBQStDLEtBQUs0RSxXQUFwRDtBQUNBLE1BQUtHLEtBQUwsR0FBYSxRQUFiO0FBQ0EsQ0FQRDs7QUFTQXBDLGFBQWF6QixTQUFiLENBQXVCNEQsZ0JBQXZCLEdBQTBDLFVBQVMzQyxNQUFULEVBQWlCO0FBQzFELEtBQUllLE9BQU8sSUFBWDtBQUNBLEtBQUl6QixTQUFTLEVBQWI7QUFDQSxNQUFJLElBQUl3RCxDQUFSLElBQWEsS0FBS3hELE1BQWxCO0FBQTBCQSxTQUFPd0QsQ0FBUCxJQUFZLEtBQUt4RCxNQUFMLENBQVl3RCxDQUFaLENBQVo7QUFBMUIsRUFDQXhELE9BQU9XLE1BQVAsR0FBZ0JELE1BQWhCO0FBQ0EsS0FBSStDLFFBQVEsS0FBSzVILFFBQUwsQ0FBY3VELFdBQWQsQ0FBMEI2QixTQUExQixDQUFvQ2pCLE1BQXBDLEVBQTRDLFVBQVNjLEdBQVQsRUFBY0MsSUFBZCxFQUFtQjtBQUMxRVUsT0FBS25ELFFBQUwsQ0FBY29DLE1BQWQsRUFBc0JJLEdBQXRCLEVBQTJCQyxJQUEzQjtBQUNBLEVBRlcsQ0FBWjtBQUdBLEtBQUcsS0FBS2IsT0FBTCxJQUFnQm1CLE1BQU1DLE9BQU4sQ0FBYyxLQUFLcEIsT0FBTCxDQUFhZ0QsTUFBM0IsQ0FBbkIsRUFDQyxLQUFLaEQsT0FBTCxDQUFhZ0QsTUFBYixDQUFvQnhDLE1BQXBCLElBQThCK0MsS0FBOUI7QUFDRCxRQUFPQSxLQUFQO0FBQ0EsQ0FYRDs7QUFpQkE7OztBQUdBO0FBQ0EzSCxhQUFhMkQsU0FBYixDQUF1QmlFLE1BQXZCLEdBQWdDLFlBQVUsQ0FBRSxDQUE1Qzs7QUFFQTVILGFBQWEyRCxTQUFiLENBQXVCK0IsNEJBQXZCLEdBQXNELFVBQVMwQixNQUFULEVBQWlCO0FBQ3RFLE1BQUt0RCxJQUFMLENBQVUsVUFBU2MsTUFBVCxFQUFnQjtBQUN6QixNQUFJK0MsUUFBUVAsT0FBT3hDLE1BQVAsQ0FBWjtBQUNBLE1BQUcrQyxLQUFILEVBQVUsS0FBS3JFLFdBQUwsQ0FBaUIrQixXQUFqQixDQUE2QnNDLEtBQTdCO0FBQ1YsRUFIRDtBQUlBLFFBQU8sSUFBUDtBQUNBLENBTkQ7O0FBVUE7OztBQUlBRSxPQUFPQyxPQUFQLEdBQWlCMUUsRUFBakIiLCJmaWxlIjoiRGl5YVNlbGVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQnJvd3NlciA9ICEodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpO1xuaWYoIWlzQnJvd3NlcikgeyB2YXIgUSA9IHJlcXVpcmUoJ3EnKTsgfVxuZWxzZSB7IHZhciBRID0gd2luZG93LlE7IH1cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlLWV2ZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBEaXlhTm9kZSA9IHJlcXVpcmUoJy4vRGl5YU5vZGUnKTtcblxudmFyIElQX1JFR0VYID0gL14oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvO1xuXG4vLy8vLy8vLy8vLy8vL1xuLy8gIEQxIEFQSSAgLy9cbi8vLy8vLy8vLy8vLy8vXG5cblxuXG5mdW5jdGlvbiBuZXdJbnN0YW5jZSAoKSB7XG5cblx0dmFyIGNvbm5lY3Rpb24gPSBuZXcgRGl5YU5vZGUoKTtcblxuXHR2YXIgZDFpbnN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0cmV0dXJuIG5ldyBEaXlhU2VsZWN0b3Ioc2VsZWN0b3IsIGNvbm5lY3Rpb24pO1xuXHR9XG5cblx0Y29ubmVjdGlvbi5fZDFpbnN0ID0gZDFpbnN0XG5cblx0ZDFpbnN0LkRpeWFOb2RlID0gRGl5YU5vZGU7XG5cdGQxaW5zdC5EaXlhU2VsZWN0b3IgPSBEaXlhU2VsZWN0b3I7XG5cblx0ZDFpbnN0LmNvbm5lY3QgPSBmdW5jdGlvbihhZGRyLCBXU29ja2V0KXtcblx0XHRyZXR1cm4gY29ubmVjdGlvbi5jb25uZWN0KGFkZHIsIFdTb2NrZXQpO1xuXHR9O1xuXG5cdGQxaW5zdC5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XG5cdH07XG5cblx0ZDFpbnN0LmlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XHRyZXR1cm4gY29ubmVjdGlvbi5pc0Nvbm5lY3RlZCgpO307XG5cdGQxaW5zdC5wZWVycyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29ubmVjdGlvbi5wZWVycygpO307XG5cdGQxaW5zdC5zZWxmID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb25uZWN0aW9uLnNlbGYoKTsgfTtcblx0ZDFpbnN0LmFkZHIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbm5lY3Rpb24uYWRkcigpOyB9O1xuXHRkMWluc3QudXNlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29ubmVjdGlvbi51c2VyKCk7IH07XG5cdGQxaW5zdC5wYXNzID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb25uZWN0aW9uLnBhc3MoKTsgfTtcblx0ZDFpbnN0LmlzQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29ubmVjdGlvbi5hdXRoZW50aWNhdGVkKCk7IH07XG5cblx0ZDFpbnN0LnBhcnNlUGVlciA9IGZ1bmN0aW9uKGFkZHJTdHIpIHtcblx0XHR2YXIgcGVlciA9IHt9O1xuXG5cdFx0Ly8gPG5vdGhpbmc+IC0+IHdzczovL2xvY2FsaG9zdC9hcGlcblx0XHRpZighYWRkclN0ciB8fCBhZGRyU3RyID09PSBcIlwiKSB7XG5cdFx0XHRwZWVyLmFkZHIgPSBcIndzczovL2xvY2FsaG9zdC9hcGlcIjtcblx0XHRcdHBlZXIuYWRkck5ldCA9IFwid3NzOi8vbG9jYWxob3N0L25ldFwiO1xuXHRcdH1cblx0XHQvLyAxMjM0IC0+IHdzOi8vbG9jYWxob3N0OjEyMzRcblx0XHRlbHNlIGlmKC9eWzAtOV0qJC8udGVzdChhZGRyU3RyKSkge1xuXHRcdFx0cGVlci5hZGRyID0gXCJ3czovL2xvY2FsaG9zdDpcIithZGRyU3RyO1xuXHRcdH1cblx0XHQvLyAnbG9jYWxob3N0JyBhbG9uZSAtPiBVTklYIHNvY2tldCAvdmFyL3J1bi9kaXlhL2RpeWEtbm9kZS5zb2NrXG5cdFx0ZWxzZSBpZiAoYWRkclN0ciA9PT0gJ2xvY2FsaG9zdCcpIHtcblx0XHRcdHBlZXIuYWRkciA9ICd1bml4Oi8vL3Zhci9ydW4vZGl5YS9kaXlhLW5vZGUuc29jaydcblx0XHR9XG5cdFx0Ly8gMTAuNDIuMC4xIC0+IHdzczovLzEwLjQyLjAuMS9hcGlcblx0XHQvLyAgICAgICAgICAtPiB3c3M6Ly8xMC4yNC4wLjEvbmV0XG5cdFx0ZWxzZSBpZiAoSVBfUkVHRVgudGVzdChhZGRyU3RyKSkge1xuXHRcdFx0cGVlci5hZGRyID0gXCJ3c3M6Ly9cIithZGRyU3RyK1wiL2FwaVwiO1xuXHRcdFx0cGVlci5hZGRyTmV0ID0gXCJ3c3M6Ly9cIithZGRyU3RyK1wiL25ldFwiO1xuXHRcdH1cblx0XHQvLyAxMC40Mi4wLjE6MTIzNCAtPiB3czovLzEwLjQyLjAuMToxMjM0XG5cdCAgICAgICBcdGVsc2UgaWYgKElQX1JFR0VYLnRlc3QoYWRkclN0ci5zcGxpdCgnOicpWzBdKSAmJiAvXlswLTldKiQvLnRlc3QoYWRkclN0ci5zcGxpdCgnOicpWzFdKSkge1xuXHRcdFx0cGVlci5hZGRyID0gXCJ3czovL1wiK2FkZHJTdHI7XG5cdFx0fVxuXHRcdC8vIHdzczovL3NvbWVhZGRyZXNzLmNvbS9zdHVmZiAtPiB3c3M6Ly9zb21lYWRkcmVzcy5jb20vc3R1ZmZcblx0XHQvLyB3czovL3NvbWVhZGRyZXNzLmNvbS9zdHVmZiAtPiB3czovL3NvbWVhZGRyZXNzLmNvbS9zdHVmZlxuXHRcdGVsc2UgaWYgKGFkZHJTdHIuaW5kZXhPZihcIndzczovL1wiKSA9PT0gMCB8fCBhZGRyU3RyLmluZGV4T2YoXCJ3czovL1wiKSA9PT0gMCkge1xuXHRcdFx0cGVlci5hZGRyID0gYWRkclN0cjtcblx0XHR9XG5cdFx0Ly8gc29tZWRvbWFpbi9zb21lc2l0ZSAtPiBcIndzczovL3NvbWVkb21haW4vc29tZXNpdGUvYXBpXG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAtPiBcIndzczovL3NvbWVkb21haW4vc29tZXNpdGUvbmV0XG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAtPiBzb21lc2l0ZVxuXHRcdGVsc2UgaWYoYWRkclN0ci5zcGxpdCgnLycpLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0cGVlci5hZGRyID0gXCJ3c3M6Ly9cIiArIGFkZHJTdHIgKyAnL2FwaSc7XG5cdFx0XHRwZWVyLmFkZHJOZXQgPSBcIndzczovL1wiICsgYWRkclN0ciArICcvbmV0Jztcblx0XHRcdHBlZXIubmFtZSA9IGFkZHJTdHIuc3BsaXQoJy8nKVsxXTtcblx0XHR9XG5cdFx0Ly8gc29tZWRvbWFpbi9zb21lc2l0ZS9hcGkgLT4gXCJ3c3M6Ly9zb21lZG9tYWluL3NvbWVzaXRlL2FwaVwiXG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgLT4gXCJ3c3M6Ly9zb21lZG9tYWluL3NvbWVzaXRlL25ldFwiXG5cdFx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgLT4gc29tZXNpdGVcblx0XHRlbHNlIGlmKGFkZHJTdHIuc3BsaXQoJy8nKS5sZW5ndGggPT09IDMgJiYgYWRkclN0ci5zcGxpdCgnLycpWzJdID09PSBcImFwaVwiKSB7XG5cdFx0XHRwZWVyLmFkZHIgPSBcIndzczovL1wiK2FkZHJTdHI7XG5cdFx0XHRwZWVyLmFkZHJOZXQgPSBcIndzczovL1wiK2FkZHJTdHIuc3Vic3RyKDAsIGFkZHJTdHIubGVuZ3RoIC0gNCk7XG5cdFx0XHRwZWVyLm5hbWUgPSBhZGRyU3RyLnNwbGl0KCcvJylbMV07XG5cdFx0fVxuXHRcdC8vIHNvbWVzaXRlIC0+IFwid3NzOi8vcGFydG5lcmluZy1jbG91ZC5jb20vc29tZXNpdGUvYXBpXCJcblx0XHQvLyAgICAgICAgICAtPiBcIndzczovL3BhcnRuZXJpbmctY2xvdWQuY29tL3NvbWVzaXRlL25ldFwiXG5cdFx0Ly8gICAgICAgICAgLT4gc29tZXNpdGVcblx0XHRlbHNlIHtcblx0XHRcdHBlZXIuYWRkciA9IFwid3NzOi8vcGFydG5lcmluZy1jbG91ZC5jb20vXCIrYWRkclN0citcIi9hcGlcIjtcblx0XHRcdHBlZXIuYWRkck5ldCA9IFwid3NzOi8vcGFydG5lcmluZy1jbG91ZC5jb20vXCIrYWRkclN0citcIi9uZXRcIjtcblx0XHRcdHBlZXIubmFtZSA9IGFkZHJTdHI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBlZXI7XG5cdH07XG5cblxuXHQvKiogVHJ5IHRvIGNvbm5lY3QgdG8gdGhlIGdpdmVuIHNlcnZlcnMgbGlzdCBpbiB0aGUgbGlzdCBvcmRlciwgdW50aWwgZmluZGluZyBhbiBhdmFpbGFibGUgb25lICovXG5cdGQxaW5zdC50cnlDb25uZWN0ID0gZnVuY3Rpb24oc2VydmVycywgV1NvY2tldCl7XG5cdFx0dmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXHRcdGZ1bmN0aW9uIHRjKGkpIHtcblx0XHRcdGQxaW5zdC5jb25uZWN0KHNlcnZlcnNbaV0sIFdTb2NrZXQpLnRoZW4oZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHJldHVybiBkZWZlcnJlZC5yZXNvbHZlKHNlcnZlcnNbaV0pO1xuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGQxaW5zdC5kaXNjb25uZWN0KCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdFx0aWYoaTxzZXJ2ZXJzLmxlbmd0aCkgc2V0VGltZW91dChmdW5jdGlvbigpIHt0YyhpKTt9LCAxMDApO1xuXHRcdFx0XHRcdGVsc2UgcmV0dXJuIGRlZmVycmVkLnJlamVjdChcIlRpbWVvdXRcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRjKDApO1xuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHR9XG5cblx0ZDFpbnN0LmN1cnJlbnRTZXJ2ZXIgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiBjb25uZWN0aW9uLl9hZGRyO1xuXHR9O1xuXG5cdGQxaW5zdC5vbiA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7XG5cdFx0Y29ubmVjdGlvbi5vbihldmVudCwgY2FsbGJhY2spO1xuXHRcdHJldHVybiBkMWluc3Q7XG5cdH07XG5cblx0ZDFpbnN0LnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKXtcblx0XHRjb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG5cdFx0cmV0dXJuIGQxaW5zdDtcblx0fTtcblxuXHQvKiogU2hvcnRoYW5kIGZ1bmN0aW9uIHRvIGNvbm5lY3QgYW5kIGxvZ2luIHdpdGggdGhlIGdpdmVuICh1c2VyLHBhc3N3b3JkKSAqL1xuXHRkMWluc3QuY29ubmVjdEFzVXNlciA9IGZ1bmN0aW9uKGlwLCB1c2VyLCBwYXNzd29yZCwgV1NvY2tldCkge1xuXHRcdHJldHVybiBkMWluc3QuY29ubmVjdChpcCwgV1NvY2tldCkudGhlbihmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIGQxaW5zdChcIiNzZWxmXCIpLmF1dGgodXNlciwgcGFzc3dvcmQpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGQxaW5zdC5kZWF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uKCl7IGNvbm5lY3Rpb24uYXV0aGVudGljYXRlZChmYWxzZSk7IGNvbm5lY3Rpb24udXNlcihudWxsKTsgY29ubmVjdGlvbi5wYXNzKG51bGwpO307XG5cdGQxaW5zdC5zZXRTZWN1cmVkID0gZnVuY3Rpb24oYlNlY3VyZWQpIHsgY29ubmVjdGlvbi5zZXRTZWN1cmVkKGJTZWN1cmVkKTsgfTtcblx0ZDFpbnN0LmlzU2VjdXJlZCA9IGZ1bmN0aW9uKCkge3JldHVybiBjb25uZWN0aW9uLl9zZWN1cmVkOyB9XG5cdGQxaW5zdC5zZXRXU29ja2V0ID0gZnVuY3Rpb24oV1NvY2tldCkgeyBjb25uZWN0aW9uLnNldFdTb2NrZXQoV1NvY2tldCk7IH1cblxuXHRyZXR1cm4gZDFpbnN0O1xufVxuXG52YXIgZDEgPSBuZXdJbnN0YW5jZSgpO1xuZDEubmV3SW5zdGFuY2UgPSBuZXdJbnN0YW5jZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRGl5YVNlbGVjdG9yIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gRGl5YVNlbGVjdG9yKHNlbGVjdG9yLCBjb25uZWN0aW9uKXtcblx0RXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cblx0dGhpcy5fY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG5cdHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdHRoaXMuX2xpc3RlbmVyQ291bnQgPSAwO1xuXHR0aGlzLl9saXN0ZW5DYWxsYmFjayA9IG51bGw7XG5cdHRoaXMuX2NhbGxiYWNrQXR0YWNoZWQgPSBmYWxzZTtcbn1cbmluaGVyaXRzKERpeWFTZWxlY3RvciwgRXZlbnRFbWl0dGVyKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFB1YmxpYyBBUEkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9zZWxlY3QoKTsgfTtcblxuXG5cbi8qKlxuICogQXBwbHkgY2FsbGJhY2sgY2IgdG8gZWFjaCBzZWxlY3RlZCBwZWVyLiBQZWVycyBhcmUgc2VsZWN0ZWRcbiAqIGFjY29yZGluZyB0byB0aGUgcnVsZSAnc2VsZWN0b3InIGdpdmVuIHRvIGNvbnN0cnVjdG9yLiBTZWxlY3RvciBjYW5cbiAqIGJlIGEgcGVlcklkLCBhIHJlZ0V4IGZvciBwZWVySWRzIG9mIGFuIGFycmF5IG9mIHBlZXJJZHMuXG4gKiBAcGFyYW1zIFx0Y2JcdFx0Y2FsbGJhY2sgdG8gYmUgYXBwbGllZFxuICogQHJldHVybiBcdHRoaXMgXHQ8RGl5YVNlbGVjdG9yPlxuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbihjYil7XG5cdHZhciBwZWVycyA9IHRoaXMuX3NlbGVjdCgpO1xuXHRmb3IodmFyIGk9MDsgaTxwZWVycy5sZW5ndGg7IGkrKykgY2IuYmluZCh0aGlzKShwZWVyc1tpXSk7XG5cdHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kIHJlcXVlc3QgdG8gc2VsZWN0ZWQgcGVlcnMgKCBzZWUgZWFjaCgpICkgdGhyb3VnaCB0aGUgY3VycmVudCBjb25uZWN0aW9uIChEaXlhTm9kZSkuXG4gKiBAcGFyYW0ge1N0cmluZyB8IE9iamVjdH0gcGFyYW1zIDogY2FuIGJlIHNlcnZpY2UuZnVuY3Rpb24gb3Ige3NlcnZpY2U6c2VydmljZSwgZnVuYzpmdW5jdGlvbiwgLi4ufVxuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbihwYXJhbXMsIGNhbGxiYWNrLCB0aW1lb3V0LCBvcHRpb25zKXtcblx0aWYoIXRoaXMuX2Nvbm5lY3Rpb24pIHJldHVybiB0aGlzO1xuXHRpZighb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXHRpZihwYXJhbXMuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuXHRcdHZhciBfcGFyYW1zID0gcGFyYW1zLnNwbGl0KFwiLlwiKTtcblx0XHRpZihfcGFyYW1zLmxlbmd0aCE9MikgdGhyb3cgJ01hbGZvcm1lZFJlcXVlc3QnO1xuXHRcdHBhcmFtcyA9IHtzZXJ2aWNlOl9wYXJhbXNbMF0sIGZ1bmM6X3BhcmFtc1sxXX07XG5cdH1cblxuXHR2YXIgbmJBbnN3ZXJzID0gMDtcblx0dmFyIG5iRXhwZWN0ZWQgPSB0aGlzLl9zZWxlY3QoKS5sZW5ndGg7XG5cdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24ocGVlcklkKXtcblx0XHRwYXJhbXMudGFyZ2V0ID0gcGVlcklkO1xuXG5cdFx0dmFyIG9wdHMgPSB7fTtcblx0XHRmb3IodmFyIGkgaW4gb3B0aW9ucykgb3B0c1tpXSA9IG9wdGlvbnNbaV07XG5cdFx0aWYodHlwZW9mIG9wdHMuY2FsbGJhY2tfcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJykgb3B0cy5jYWxsYmFja19wYXJ0aWFsID0gZnVuY3Rpb24oZXJyLCBkYXRhKXsgb3B0aW9ucy5jYWxsYmFja19wYXJ0aWFsKHBlZXJJZCwgZXJyLCBkYXRhKTt9XG5cblx0XHR0aGlzLl9jb25uZWN0aW9uLnJlcXVlc3QocGFyYW1zLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuXHRcdFx0aWYodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhwZWVySWQsIGVyciwgZGF0YSk7XG5cdFx0XHRuYkFuc3dlcnMrKztcblx0XHRcdGlmKG5iQW5zd2VycyA9PSBuYkV4cGVjdGVkICYmIG9wdGlvbnMuYk5vdGlmeVdoZW5GaW5pc2hlZCkgY2FsbGJhY2sobnVsbCwgZXJyLCBcIiMjRU5EIyNcIik7IC8vIFRPRE8gOiBGaW5kIGEgYmV0dGVyIHdheSB0byBub3RpZnkgcmVxdWVzdCBFTkQgISFcblx0XHR9LCB0aW1lb3V0LCBvcHRzKTtcblx0fSk7XG59O1xuXG5cbi8vIElNUE9SVEFOVCAhISEgQnkgMzAvMTEvMTUsIHRoaXMgbWV0aG9kIGRvZXNuJ3QgcmV0dXJuICd0aGlzJyBhbnltb3JlLCBidXQgYSBTdWJzY3JpcHRpb24gb2JqZWN0IGluc3RlYWRcbi8qIEBwYXJhbSB7U3RyaW5nIHwgT2JqZWN0fSBwYXJhbXMgOiBjYW4gYmUgJ3NlcnZpY2UuZnVuY3Rpb24nIG9yIHtzZXJ2aWNlOnNlcnZpY2UsIGZ1bmM6ZnVuY3Rpb24sIC4uLn0gKi9cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24ocGFyYW1zLCBjYWxsYmFjaywgb3B0aW9ucyl7XG5cdGlmKHBhcmFtcy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7XG5cdFx0dmFyIF9wYXJhbXMgPSBwYXJhbXMuc3BsaXQoXCIuXCIpO1xuXHRcdGlmKF9wYXJhbXMubGVuZ3RoIT0yKSB0aHJvdyAnTWFsZm9ybWVkU3Vic2NyaXB0aW9uJztcblx0XHRwYXJhbXMgPSB7c2VydmljZTpfcGFyYW1zWzBdLCBmdW5jOl9wYXJhbXNbMV19O1xuXHR9XG5cblx0cmV0dXJuIG5ldyBTdWJzY3JpcHRpb24odGhpcywgcGFyYW1zLCBjYWxsYmFjaywgb3B0aW9ucyk7XG59O1xuXG5cbi8vIElNUE9SVEFOVCAhISEgQlkgMzAvMTEvMTUsIHRoaXMgbWV0aG9kIGRvZXNuJ3QgdGFrZSBzdWJJZHMgYXMgaW5wdXQgYW55bW9yZS5cbi8vIFBsZWFzZSBwcm92aWRlIGEgc3Vic2NyaXB0aW9uIGluc3RlYWQgIVxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG5cdGlmKEFycmF5LmlzQXJyYXkoc3Vic2NyaXB0aW9uKSB8fCAhc3Vic2NyaXB0aW9uLmNsb3NlKSByZXR1cm4gdGhpcy5fX29sZF9kZXByZWNhdGVkX3Vuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG5cdHJldHVybiBzdWJzY3JpcHRpb24uY2xvc2UoKTtcbn07XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuYXV0aCA9IGZ1bmN0aW9uKHVzZXIsIHBhc3N3b3JkLCBjYWxsYmFjaywgdGltZW91dCl7XG5cdHZhciB0aGF0ID0gdGhpcztcblx0aWYodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQodGhpcyk7XG5cblx0dmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXG5cdHRoaXMucmVxdWVzdCh7XG5cdFx0c2VydmljZTogJ2F1dGgnLFxuXHRcdGZ1bmM6ICdBdXRoZW50aWNhdGUnLFxuXHRcdGRhdGE6IHtcblx0XHRcdHVzZXI6IHVzZXIsIC8vIERFUFJFQ0FURUQsIGtlcHQgZm9yIG5vdyBmb3IgYmFja3dhcmQgY29tcGF0aWJsaXR5ICh3aWxsIGJlIGRyb3BwZWQpXG5cdFx0XHR1c2VybmFtZTogdXNlciwgLy8gTmV3IHN5bnRheCBzaW5jZSBzd2l0Y2hpbmcgdG8gREJ1c1xuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fVxuXHR9LCBmdW5jdGlvbihwZWVySWQsIGVyciwgZGF0YSl7XG5cblx0XHRpZihlcnIgPT09ICdTZXJ2aWNlTm90Rm91bmQnKXtcblx0XHRcdGlmKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2socGVlcklkLCB0cnVlKTtcblx0XHRcdGVsc2UgZGVmZXJyZWQucmVqZWN0KGVycik7XG5cdFx0XHRyZXR1cm4gO1xuXHRcdH1cblxuXHRcdC8vIGRhdGEuYXV0aGVudGljYXRlZCBpcyBERVBSRUNBVEVELCBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0aWYoIWVyciAmJiBkYXRhICYmIChkYXRhID09PSB0cnVlIHx8IGRhdGEuYXV0aGVudGljYXRlZCA9PT0gdHJ1ZSkpe1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi5hdXRoZW50aWNhdGVkKHRydWUpO1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi51c2VyKHVzZXIpO1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi5wYXNzKHBhc3N3b3JkKTtcblx0XHRcdGlmKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2socGVlcklkLCB0cnVlKTtcblx0XHRcdGVsc2UgZGVmZXJyZWQucmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGF0Ll9jb25uZWN0aW9uLmF1dGhlbnRpY2F0ZWQoZmFsc2UpO1xuXHRcdFx0aWYodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhwZWVySWQsIGZhbHNlKTtcblx0XHRcdGVsc2UgZGVmZXJyZWQucmVqZWN0KCdBY2Nlc3NEZW5pZWQnKTtcblx0XHR9XG5cblx0fSwgdGltZW91dCk7XG5cblx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLm9wZW5Tb2NrZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sgPSBjYWxsYmFjay5iaW5kKHRoaXMpO1xuXG5cdHZhciBzb2NrZXROYW1lID0gcGFyYW1zO1xuXG5cdHRoaXMucmVxdWVzdCh7XG5cdFx0c2VydmljZTogJ3NvY2tldEhhbmRsZXInLFxuXHRcdGZ1bmM6ICdPcGVuU29ja2V0Jyxcblx0XHRkYXRhOiB7XG5cdFx0XHRzb2NrZXRfbmFtZTogc29ja2V0TmFtZSxcblx0XHR9XG5cdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdGlmIChlcnIgPT0gbnVsbCAmJiBkYXRhLnNvY2tldF9pZCAhPSBudWxsKSB7XG5cdFx0XHRwYXJhbXMgPSB7XG5cdFx0XHRcdGVycjogZXJyLFxuXHRcdFx0XHRzb2NrZXRJZDogZGF0YS5zb2NrZXRfaWQsXG5cdFx0XHRcdHNvY2tldE5hbWU6IHNvY2tldE5hbWUsXG5cdFx0XHRcdHRhcmdldDogcGVlcklkLFxuXHRcdFx0fVxuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi5vcGVuU29ja2V0KHRoYXQsIHBhcmFtcywgKGRpeWFTb2NrZXQpID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2socGVlcklkLCBudWxsLCBkaXlhU29ja2V0KTtcblx0XHRcdH0pO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKHBlZXJJZCwgZXJyLCBudWxsKTtcblx0XHR9XG5cdH0pO1xufTtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5zZW5kU29ja2V0RGF0YSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAocGVlcklkKSB7XG5cdFx0cGFyYW1zLnRhcmdldCA9IHBlZXJJZDtcblx0XHR0aGlzLl9jb25uZWN0aW9uLnNlbmRTb2NrZXREYXRhKHBhcmFtcyk7XG5cdH0pO1xufTtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5vblNvY2tldENsb3NlZCA9IGZ1bmN0aW9uKHNvY2tldElkKXtcblx0dGhpcy5fY29ubmVjdGlvbi5vblNvY2tldENsb3NlZChzb2NrZXRJZCk7XG59XG5cbi8vIFByaXZhdGVzXG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX3NlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdG9yRnVuY3Rpb24pe1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0aWYoIXRoaXMuX2Nvbm5lY3Rpb24pIHJldHVybiBbXTtcblx0cmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24ucGVlcnMoKS5maWx0ZXIoZnVuY3Rpb24ocGVlcklkKXtcblx0XHRyZXR1cm4gdGhhdC5fbWF0Y2godGhhdC5fc2VsZWN0b3IsIHBlZXJJZCk7XG5cdH0pO1xufTtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5fbWF0Y2ggPSBmdW5jdGlvbihzZWxlY3Rvciwgc3RyKXtcblx0aWYoIXNlbGVjdG9yKSByZXR1cm4gZmFsc2U7XG5cdGlmKHNlbGVjdG9yID09PSBcIiNzZWxmXCIpIHsgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24gJiYgc3RyID09PSB0aGlzLl9jb25uZWN0aW9uLnNlbGYoKTsgfVxuXHRlbHNlIGlmKHNlbGVjdG9yLm5vdCkgcmV0dXJuICF0aGlzLl9tYXRjaChzZWxlY3Rvci5ub3QsIHN0cik7XG5cdGVsc2UgaWYoc2VsZWN0b3IuY29uc3RydWN0b3IubmFtZSA9PT0gJ1N0cmluZycpe1xuXHRcdHJldHVybiBtYXRjaFN0cmluZyhzZWxlY3Rvciwgc3RyKTtcblx0fSBlbHNlIGlmKHNlbGVjdG9yLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdSZWdFeHAnKXtcblx0XHRyZXR1cm4gbWF0Y2hSZWdFeHAoc2VsZWN0b3IsIHN0cik7XG5cdH0gZWxzZSBpZihBcnJheS5pc0FycmF5KHNlbGVjdG9yKSl7XG5cdFx0cmV0dXJuIG1hdGNoQXJyYXkoc2VsZWN0b3IsIHN0cik7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtYXRjaFN0cmluZyhzZWxlY3Rvciwgc3RyKXtcblx0cmV0dXJuIHNlbGVjdG9yID09PSBzdHI7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUmVnRXhwKHNlbGVjdG9yLCBzdHIpe1xuXHRyZXR1cm4gc3RyLm1hdGNoKHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hBcnJheShzZWxlY3Rvciwgc3RyKXtcblx0Zm9yKHZhciBpPTA7aTxzZWxlY3Rvci5sZW5ndGg7IGkrKyl7XG5cdFx0aWYoc2VsZWN0b3JbaV0gPT09IHN0cikgcmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBPdmVycmlkZXMgRXZlbnRFbWl0dGVyJ3MgYmVoYXZpb3IgdG8gcHJveHkgYW5kIGZpbHRlciBldmVudHMgZnJvbSB0aGUgY29ubmVjdGlvblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5fb24gPSBEaXlhU2VsZWN0b3IucHJvdG90eXBlLm9uO1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrKXtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXHRjYWxsYmFjay5fX19EaXlhU2VsZWN0b3JfaGlkZGVuX3dyYXBwZXIgPSBmdW5jdGlvbihwZWVySWQpIHtcblx0XHRpZih0aGF0Ll9tYXRjaCh0aGF0Ll9zZWxlY3RvciwgcGVlcklkKSkgdGhhdC5lbWl0KHR5cGUsIHBlZXJJZCk7XG5cdH07XG5cdHRoaXMuX2Nvbm5lY3Rpb24ub24odHlwZSwgY2FsbGJhY2suX19fRGl5YVNlbGVjdG9yX2hpZGRlbl93cmFwcGVyKTtcblx0dmFyIHJldCA9IHRoaXMuX29uKHR5cGUsIGNhbGxiYWNrKTtcblxuXHQvLyBIYW5kbGUgdGhlIHNwZWNpZmljIGNhc2Ugb2YgXCJwZWVyLWNvbm5lY3RlZFwiIGV2ZW50cywgaS5lLiwgbm90aWZ5IG9mIGFscmVhZHkgY29ubmVjdGVkIHBlZXJzXG5cdGlmKHR5cGUgPT09ICdwZWVyLWNvbm5lY3RlZCcgJiYgdGhpcy5fY29ubmVjdGlvbi5pc0Nvbm5lY3RlZCgpKSB7XG5cdFx0dmFyIHBlZXJzID0gdGhpcy5fY29ubmVjdGlvbi5wZWVycygpO1xuXHRcdGZvcih2YXIgaT0wO2k8cGVlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmKHRoaXMuX21hdGNoKHRoaXMuX3NlbGVjdG9yLCBwZWVyc1tpXSkpIGNhbGxiYWNrKHBlZXJzW2ldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJldDtcbn07XG5cblxuLy8gT3ZlcnJpZGVzIEV2ZW50RW1pdHRlcidzIGJlaGF2aW9yIHRvIHByb3h5IGFuZCBmaWx0ZXIgZXZlbnRzIGZyb20gdGhlIGNvbm5lY3Rpb25cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX3JlbW92ZUxpc3RlbmVyID0gRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaykge1xuXHRpZihjYWxsYmFjay5fX19EaXlhU2VsZWN0b3JfaGlkZGVuX3dyYXBwZXIpIHRoaXMuX2Nvbm5lY3Rpb24ucmVtb3ZlTGlzdGVuZXIodHlwZSwgY2FsbGJhY2suX19fRGl5YVNlbGVjdG9yX2hpZGRlbl93cmFwcGVyKTtcblx0dGhpcy5fcmVtb3ZlTGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU1VCU0NSSVBUSU9OIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiogSGFuZGxlcyBhIHN1YnNjcmlwdGlvbiB0byBzb21lIERpeWFOb2RlIHNlcnZpY2UgZm9yIG11bHRpcGxlIG5vZGVzXG4qIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gc2VsZWN0b3JcbiovXG5mdW5jdGlvbiBTdWJzY3JpcHRpb24oc2VsZWN0b3IsIHBhcmFtcywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdHRoaXMucGFyYW1zID0gcGFyYW1zO1xuXHRcdHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3ViSWRzID0gW107XG5cblx0XHR0aGlzLmRvU3Vic2NyaWJlID0gZnVuY3Rpb24ocGVlcklkKSB7XG5cdFx0XHR0aGF0LnN1Yklkcy5wdXNoKHRoYXQuX2FkZFN1YnNjcmlwdGlvbihwZWVySWQpKTtcblx0XHRcdHRoYXQuc3RhdGUgPSBcIm9wZW5cIjtcblx0XHR9O1xuXG5cdFx0aWYodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5hdXRvKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yLm9uKCdwZWVyLWNvbm5lY3RlZCcsIHRoaXMuZG9TdWJzY3JpYmUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yLmVhY2godGhpcy5kb1N1YnNjcmliZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdGZvcih2YXIgaSA9IDA7IGk8dGhpcy5zdWJJZHMubGVuZ3RoOyBpKyspIHtcblx0XHR0aGlzLnNlbGVjdG9yLl9jb25uZWN0aW9uLnVuc3Vic2NyaWJlKHRoaXMuc3ViSWRzW2ldKTtcblx0fVxuXHR0aGlzLnN1YklkcyA9IFtdO1xuXHR0aGlzLnNlbGVjdG9yLnJlbW92ZUxpc3RlbmVyKCdwZWVyLWNvbm5lY3RlZCcsIHRoaXMuZG9TdWJzY3JpYmUpO1xuXHR0aGlzLnN0YXRlID0gXCJjbG9zZWRcIjtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHBlZXJJZCkge1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cdHZhciBwYXJhbXMgPSB7fTtcblx0Zm9yKHZhciBrIGluIHRoaXMucGFyYW1zKSBwYXJhbXNba10gPSB0aGlzLnBhcmFtc1trXTtcblx0cGFyYW1zLnRhcmdldCA9IHBlZXJJZDtcblx0dmFyIHN1YklkID0gdGhpcy5zZWxlY3Rvci5fY29ubmVjdGlvbi5zdWJzY3JpYmUocGFyYW1zLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuXHRcdHRoYXQuY2FsbGJhY2socGVlcklkLCBlcnIsIGRhdGEpO1xuXHR9KTtcblx0aWYodGhpcy5vcHRpb25zICYmIEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLnN1YklkcykpXG5cdFx0dGhpcy5vcHRpb25zLnN1Yklkc1twZWVySWRdID0gc3ViSWQ7XG5cdHJldHVybiBzdWJJZDtcbn07XG5cblxuXG5cblxuLy8gTGVnYWN5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuLyoqIEBkZXByZWNhdGVkICAqL1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbigpe307XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX19vbGRfZGVwcmVjYXRlZF91bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHN1Yklkcykge1xuXHR0aGlzLmVhY2goZnVuY3Rpb24ocGVlcklkKXtcblx0XHR2YXIgc3ViSWQgPSBzdWJJZHNbcGVlcklkXTtcblx0XHRpZihzdWJJZCkgdGhpcy5fY29ubmVjdGlvbi51bnN1YnNjcmliZShzdWJJZCk7XG5cdH0pO1xuXHRyZXR1cm4gdGhpcztcbn1cblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZDE7XG4iXX0=
},{"./DiyaNode":40,"inherits":9,"node-event-emitter":13,"q":undefined}],42:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Transform = require('stream').Transform;

var DiyaSocket = function (_Transform) {
	_inherits(DiyaSocket, _Transform);

	function DiyaSocket(d1inst, params, options) {
		_classCallCheck(this, DiyaSocket);

		var _this = _possibleConstructorReturn(this, (DiyaSocket.__proto__ || Object.getPrototypeOf(DiyaSocket)).call(this, options));

		_this.d1inst = d1inst;
		_this.socketName = params.socketName;
		_this.socketId = params.socketId;
		_this.peerId = params.target;
		_this.flagSocketIsDead = false;
		_this.subscriptionSocketClosed = null;
		return _this;
	}

	_createClass(DiyaSocket, [{
		key: '_write',
		value: function _write(chunk, encoding, callback) {
			if (this.flagSocketIsDead === false) {
				var params = {
					data: {
						socketId: this.socketId,
						socketBuffer: chunk.toString('base64')
					}, target: this.peerId
				};
				this.d1inst.sendSocketData(params);
			}
			callback();
		}
	}, {
		key: 'disconnect',
		value: function disconnect() {
			var _this2 = this;

			if (this.flagSocketIsDead === false) {
				this.end();
				this.d1inst.request({
					service: 'socketHandler',
					func: 'DisconnectClient',
					data: {
						socket_id: this.socketId
					}
				}, function (peerId, err, data) {
					_this2.flagSocketIsDead = true;
				});
			}
		}
	}, {
		key: 'subscribeSocketClosed',
		value: function subscribeSocketClosed(openedSocketId) {
			var _this3 = this;

			this.subscriptionSocketClosed = this.d1inst.subscribe({
				service: 'SocketHandler',
				func: 'SocketIsClosed'
			}, function (peerId, err, data) {
				if (err == null && data != null) {
					if (data[0] === openedSocketId) _this3.d1inst.onSocketClosed(data[0]);
				} else {
					_this3.disconnect();
				}
				_this3.subscriptionSocketClosed.close();
				_this3.subscriptionSocketClosed = null;
				_this3.d1inst = null;
				_this3.socketName = null;
				_this3.socketId = null;
				_this3.peerId = null;
				_this3.flagSocketIsDead = null;
			});
		}
	}]);

	return DiyaSocket;
}(Transform);

module.exports = DiyaSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRpeWFTb2NrZXQuanMiXSwibmFtZXMiOlsiVHJhbnNmb3JtIiwicmVxdWlyZSIsIkRpeWFTb2NrZXQiLCJkMWluc3QiLCJwYXJhbXMiLCJvcHRpb25zIiwic29ja2V0TmFtZSIsInNvY2tldElkIiwicGVlcklkIiwidGFyZ2V0IiwiZmxhZ1NvY2tldElzRGVhZCIsInN1YnNjcmlwdGlvblNvY2tldENsb3NlZCIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsImRhdGEiLCJzb2NrZXRCdWZmZXIiLCJ0b1N0cmluZyIsInNlbmRTb2NrZXREYXRhIiwiZW5kIiwicmVxdWVzdCIsInNlcnZpY2UiLCJmdW5jIiwic29ja2V0X2lkIiwiZXJyIiwib3BlbmVkU29ja2V0SWQiLCJzdWJzY3JpYmUiLCJvblNvY2tldENsb3NlZCIsImRpc2Nvbm5lY3QiLCJjbG9zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxZQUFZQyxRQUFRLFFBQVIsRUFBa0JELFNBQXBDOztJQUVNRSxVOzs7QUFDTCxxQkFBWUMsTUFBWixFQUFvQkMsTUFBcEIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQUE7O0FBQUEsc0hBQzlCQSxPQUQ4Qjs7QUFFcEMsUUFBS0YsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsUUFBS0csVUFBTCxHQUFrQkYsT0FBT0UsVUFBekI7QUFDQSxRQUFLQyxRQUFMLEdBQWdCSCxPQUFPRyxRQUF2QjtBQUNBLFFBQUtDLE1BQUwsR0FBY0osT0FBT0ssTUFBckI7QUFDQSxRQUFLQyxnQkFBTCxHQUF3QixLQUF4QjtBQUNBLFFBQUtDLHdCQUFMLEdBQWdDLElBQWhDO0FBUG9DO0FBUXBDOzs7O3lCQUVNQyxLLEVBQU9DLFEsRUFBVUMsUSxFQUFVO0FBQ2pDLE9BQUksS0FBS0osZ0JBQUwsS0FBMEIsS0FBOUIsRUFBcUM7QUFDcEMsUUFBSU4sU0FBUztBQUNaVyxXQUFNO0FBQ0xSLGdCQUFVLEtBQUtBLFFBRFY7QUFFTFMsb0JBQWNKLE1BQU1LLFFBQU4sQ0FBZSxRQUFmO0FBRlQsTUFETSxFQUlUUixRQUFRLEtBQUtEO0FBSkosS0FBYjtBQU1BLFNBQUtMLE1BQUwsQ0FBWWUsY0FBWixDQUEyQmQsTUFBM0I7QUFDQTtBQUNEVTtBQUNBOzs7K0JBRVk7QUFBQTs7QUFDWixPQUFJLEtBQUtKLGdCQUFMLEtBQTBCLEtBQTlCLEVBQXFDO0FBQ3BDLFNBQUtTLEdBQUw7QUFDQSxTQUFLaEIsTUFBTCxDQUFZaUIsT0FBWixDQUFvQjtBQUNuQkMsY0FBUyxlQURVO0FBRW5CQyxXQUFNLGtCQUZhO0FBR25CUCxXQUFNO0FBQ0xRLGlCQUFXLEtBQUtoQjtBQURYO0FBSGEsS0FBcEIsRUFNRyxVQUFDQyxNQUFELEVBQVNnQixHQUFULEVBQWNULElBQWQsRUFBdUI7QUFDekIsWUFBS0wsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxLQVJEO0FBU0E7QUFDRDs7O3dDQUVxQmUsYyxFQUFnQjtBQUFBOztBQUNyQyxRQUFLZCx3QkFBTCxHQUFnQyxLQUFLUixNQUFMLENBQVl1QixTQUFaLENBQXNCO0FBQ3JETCxhQUFTLGVBRDRDO0FBRXJEQyxVQUFNO0FBRitDLElBQXRCLEVBRzdCLFVBQUNkLE1BQUQsRUFBU2dCLEdBQVQsRUFBY1QsSUFBZCxFQUF1QjtBQUN6QixRQUFJUyxPQUFPLElBQVAsSUFBZVQsUUFBUSxJQUEzQixFQUFpQztBQUNoQyxTQUFJQSxLQUFLLENBQUwsTUFBWVUsY0FBaEIsRUFBZ0MsT0FBS3RCLE1BQUwsQ0FBWXdCLGNBQVosQ0FBMkJaLEtBQUssQ0FBTCxDQUEzQjtBQUNoQyxLQUZELE1BRU87QUFDTixZQUFLYSxVQUFMO0FBQ0E7QUFDRCxXQUFLakIsd0JBQUwsQ0FBOEJrQixLQUE5QjtBQUNBLFdBQUtsQix3QkFBTCxHQUFnQyxJQUFoQztBQUNBLFdBQUtSLE1BQUwsR0FBYyxJQUFkO0FBQ0EsV0FBS0csVUFBTCxHQUFrQixJQUFsQjtBQUNBLFdBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxXQUFLQyxNQUFMLEdBQWMsSUFBZDtBQUNBLFdBQUtFLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsSUFoQitCLENBQWhDO0FBaUJBOzs7O0VBekR1QlYsUzs7QUE0RHpCOEIsT0FBT0MsT0FBUCxHQUFpQjdCLFVBQWpCIiwiZmlsZSI6IkRpeWFTb2NrZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm07XG5cbmNsYXNzIERpeWFTb2NrZXQgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuXHRjb25zdHJ1Y3RvcihkMWluc3QsIHBhcmFtcywgb3B0aW9ucykge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMuZDFpbnN0ID0gZDFpbnN0O1xuXHRcdHRoaXMuc29ja2V0TmFtZSA9IHBhcmFtcy5zb2NrZXROYW1lO1xuXHRcdHRoaXMuc29ja2V0SWQgPSBwYXJhbXMuc29ja2V0SWQ7XG5cdFx0dGhpcy5wZWVySWQgPSBwYXJhbXMudGFyZ2V0O1xuXHRcdHRoaXMuZmxhZ1NvY2tldElzRGVhZCA9IGZhbHNlO1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uU29ja2V0Q2xvc2VkID0gbnVsbDtcblx0fVxuXG5cdF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKHRoaXMuZmxhZ1NvY2tldElzRGVhZCA9PT0gZmFsc2UpIHtcblx0XHRcdGxldCBwYXJhbXMgPSB7XG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRzb2NrZXRJZDogdGhpcy5zb2NrZXRJZCxcblx0XHRcdFx0XHRzb2NrZXRCdWZmZXI6IGNodW5rLnRvU3RyaW5nKCdiYXNlNjQnKSxcblx0XHRcdFx0fSwgdGFyZ2V0OiB0aGlzLnBlZXJJZFxuXHRcdFx0fTtcblx0XHRcdHRoaXMuZDFpbnN0LnNlbmRTb2NrZXREYXRhKHBhcmFtcyk7XG5cdFx0fVxuXHRcdGNhbGxiYWNrKCk7XG5cdH1cblxuXHRkaXNjb25uZWN0KCkge1xuXHRcdGlmICh0aGlzLmZsYWdTb2NrZXRJc0RlYWQgPT09IGZhbHNlKSB7XG5cdFx0XHR0aGlzLmVuZCgpO1xuXHRcdFx0dGhpcy5kMWluc3QucmVxdWVzdCh7XG5cdFx0XHRcdHNlcnZpY2U6ICdzb2NrZXRIYW5kbGVyJyxcblx0XHRcdFx0ZnVuYzogJ0Rpc2Nvbm5lY3RDbGllbnQnLFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0c29ja2V0X2lkOiB0aGlzLnNvY2tldElkXG5cdFx0XHRcdH1cblx0XHRcdH0sIChwZWVySWQsIGVyciwgZGF0YSkgPT4ge1xuXHRcdFx0XHR0aGlzLmZsYWdTb2NrZXRJc0RlYWQgPSB0cnVlXG5cdFx0XHR9KVxuXHRcdH1cblx0fVxuXG5cdHN1YnNjcmliZVNvY2tldENsb3NlZChvcGVuZWRTb2NrZXRJZCkge1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uU29ja2V0Q2xvc2VkID0gdGhpcy5kMWluc3Quc3Vic2NyaWJlKHtcblx0XHRcdHNlcnZpY2U6ICdTb2NrZXRIYW5kbGVyJyxcblx0XHRcdGZ1bmM6ICdTb2NrZXRJc0Nsb3NlZCdcblx0XHR9LCAocGVlcklkLCBlcnIsIGRhdGEpID0+IHtcblx0XHRcdGlmIChlcnIgPT0gbnVsbCAmJiBkYXRhICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGRhdGFbMF0gPT09IG9wZW5lZFNvY2tldElkKSB0aGlzLmQxaW5zdC5vblNvY2tldENsb3NlZChkYXRhWzBdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGlzY29ubmVjdCgpXG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvblNvY2tldENsb3NlZC5jbG9zZSgpO1xuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Tb2NrZXRDbG9zZWQgPSBudWxsO1xuXHRcdFx0dGhpcy5kMWluc3QgPSBudWxsO1xuXHRcdFx0dGhpcy5zb2NrZXROYW1lID0gbnVsbDtcblx0XHRcdHRoaXMuc29ja2V0SWQgPSBudWxsO1xuXHRcdFx0dGhpcy5wZWVySWQgPSBudWxsO1xuXHRcdFx0dGhpcy5mbGFnU29ja2V0SXNEZWFkID0gbnVsbDtcblx0XHR9KVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGl5YVNvY2tldDtcbiJdfQ==
},{"stream":25}],43:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isBrowser = !(typeof window === 'undefined');

if (!isBrowser) {

	var Q = require('q');
	var net = require('net');
	var JSONSocket = require('json-socket');
	var EventEmitter = require('node-event-emitter');

	var UNIXSocketHandler = function (_EventEmitter) {
		_inherits(UNIXSocketHandler, _EventEmitter);

		function UNIXSocketHandler(addr, connectTimeout) {
			_classCallCheck(this, UNIXSocketHandler);

			var _this = _possibleConstructorReturn(this, (UNIXSocketHandler.__proto__ || Object.getPrototypeOf(UNIXSocketHandler)).call(this));

			_this.addr = addr;

			_this._socket = new JSONSocket(new net.Socket());
			_this._socket.connect(_this.addr);

			// Store callback so that we can unregister them later
			_this._socketOpenCallback = _this._onopen.bind(_this);
			_this._socketCloseCallback = _this._onclose.bind(_this);
			_this._socketMessageCallback = _this._onmessage.bind(_this);
			_this._socketErrorCallback = _this._onerror.bind(_this);

			_this._socket.on('connect', _this._socketOpenCallback);
			_this._socket._socket.on('close', _this._socketCloseCallback);
			_this._socket.on('message', _this._socketMessageCallback);
			_this._socket._socket.on('error', _this._socketErrorCallback);

			// Create timeout to abord connectiong
			setTimeout(function (_) {
				// Whe ntime times out, if the socket is opened, simply return
				if (_this._status === 'opened') return;
				// Otherwise, abord
				if (_this._status !== 'closed') {
					Logger.log('d1: ' + that.addr + ' timed out while connecting');
					_this.close();
					_this.emit('timeout', _this._socket);
				}
			}, connectTimeout);
			return _this;
		}

		_createClass(UNIXSocketHandler, [{
			key: 'close',
			value: function close() {
				if (this._disconnectionDeferred && this._disconnectionDeferred.promise) return this._disconnectionDeferred.promise;

				this._disconnectionDeferred = Q.defer();
				this._status = 'closing';

				this.emit('closing', this._socket);

				if (this._socket) this._socket.end();

				return this._disconnectionDeferred.promise;
			}

			/**
    * Send a JSON-formatted message through the socket
    * @param {JSON} msg The JSON to send (do not stringify it, json-socket will do it)
    */

		}, {
			key: 'send',
			value: function send(msg) {
				try {
					this._socket.sendMessage(msg);
				} catch (err) {
					console.error('Cannot send message: ' + err.message);
					return false;
				}

				return true;
			}
		}, {
			key: 'isConnected',
			value: function isConnected() {
				return !this._socket.isClosed() && this._status === 'opened';
			}
		}, {
			key: '_onopen',
			value: function _onopen() {
				this._status = 'opened';
				this.emit('open', this._socket);
			}
		}, {
			key: '_onclose',
			value: function _onclose() {
				this._status = 'closed';
				this.unregisterCallbacks();
				this.emit('close', this._socket);
				if (this._disconnectionDeferred && this._disconnectionDeferred.promise) this._disconnectionDeferred.resolve();
			}
		}, {
			key: '_onmessage',
			value: function _onmessage(msg) {
				// The message is already a JSON
				this.emit('message', msg);
			}
		}, {
			key: '_onerror',
			value: function _onerror(err) {
				this.emit('error', err);
			}
		}, {
			key: 'unregisterCallbacks',
			value: function unregisterCallbacks() {
				if (this._socket && typeof this._socket.removeEventListener === 'function') {
					this._socket.removeEventListener('open', this._socketOpenCallback);
					this._socket.removeEventListener('close', this._socketCloseCallback);
					this._socket.removeEventListener('message', this._socketMessageCallback);
				} else if (this._socket && typeof this._socket.removeAllListeners === 'function') {
					this._socket.removeAllListeners();
				}
			}
		}]);

		return UNIXSocketHandler;
	}(EventEmitter);

	module.exports = UNIXSocketHandler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"json-socket":undefined,"net":3,"node-event-emitter":13,"q":undefined}],44:[function(require,module,exports){
'use strict';

var d1 = require('./DiyaSelector.js');

require('./services/rtc/rtc.js');
require('./services/ieq/ieq.js');
require('./services/peerAuth/PeerAuth.js');
require('./services/meshNetwork/MeshNetwork.js');
require('./utils/encoding/encoding.js');
require('./services/status/status.js');
require('./DBusObject.js');
require('./services/shell/Shell.js');

module.exports = d1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpeWEtc2RrLmpzIl0sIm5hbWVzIjpbImQxIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsS0FBS0MsUUFBUSxtQkFBUixDQUFUOztBQUVBQSxRQUFRLHVCQUFSO0FBQ0FBLFFBQVEsdUJBQVI7QUFDQUEsUUFBUSxpQ0FBUjtBQUNBQSxRQUFRLHVDQUFSO0FBQ0FBLFFBQVEsOEJBQVI7QUFDQUEsUUFBUSw2QkFBUjtBQUNBQSxRQUFRLGlCQUFSO0FBQ0FBLFFBQVEsMkJBQVI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJILEVBQWpCIiwiZmlsZSI6ImRpeWEtc2RrLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGQxID0gcmVxdWlyZSgnLi9EaXlhU2VsZWN0b3IuanMnKTtcblxucmVxdWlyZSgnLi9zZXJ2aWNlcy9ydGMvcnRjLmpzJyk7XG5yZXF1aXJlKCcuL3NlcnZpY2VzL2llcS9pZXEuanMnKTtcbnJlcXVpcmUoJy4vc2VydmljZXMvcGVlckF1dGgvUGVlckF1dGguanMnKTtcbnJlcXVpcmUoJy4vc2VydmljZXMvbWVzaE5ldHdvcmsvTWVzaE5ldHdvcmsuanMnKTtcbnJlcXVpcmUoJy4vdXRpbHMvZW5jb2RpbmcvZW5jb2RpbmcuanMnKTtcbnJlcXVpcmUoJy4vc2VydmljZXMvc3RhdHVzL3N0YXR1cy5qcycpO1xucmVxdWlyZSgnLi9EQnVzT2JqZWN0LmpzJyk7XG5yZXF1aXJlKCcuL3NlcnZpY2VzL3NoZWxsL1NoZWxsLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZDE7XG4iXX0=
},{"./DBusObject.js":39,"./DiyaSelector.js":41,"./services/ieq/ieq.js":45,"./services/meshNetwork/MeshNetwork.js":46,"./services/peerAuth/PeerAuth.js":48,"./services/rtc/rtc.js":53,"./services/shell/Shell.js":54,"./services/status/status.js":55,"./utils/encoding/encoding.js":56}],45:[function(require,module,exports){
'use strict';

/* maya-client
 * Copyright (c) 2014, Partnering Robotics, All rights reserved.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; version
 *	3.0 of the License. This library is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

/**
   Todo :
   check err for each data
   improve API : getData(sensorName, dataConfig)
   return adapted vector for display with D3 to reduce code in IHM ?
   updateData(sensorName, dataConfig)
   set and get for the different dataConfig params

*/

var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var util = require('util');

var Message = require('../message');

//////////////////////////////////////////////////////////////
/////////////////// Logging utility methods //////////////////
//////////////////////////////////////////////////////////////

var DEBUG = true;
var Logger = {
	log: function log(message) {
		if (DEBUG) console.log(message);
	},

	error: function error(message) {
		if (DEBUG) console.error(message);
	}
};

/**
 *	callback : function called after model updated
 * */
function IEQ(selector) {
	var that = this;
	this.selector = selector;
	this.dataModel = {};
	this._coder = selector.encode();
	this.subscriptions = [];
	//	that.subscriptionErrorNum = 0;

	/*** structure of data config ***
 	 criteria :
 	   time: all 3 time criteria should not be defined at the same time. (range would be given up)
 	     start: {[null],time} (null means most recent) // stored a UTC in ms (num)
 	     end: {[null], time} (null means most oldest) // stored as UTC in ms (num)
 	     range: {[null], time} (range of time(positive) ) // in s (num)
 	   robot: {ArrayOf ID or ["all"]}
 	   place: {ArrayOf ID or ["all"]}
 	 operator: {[last], max, moy, sd} -( maybe moy should be default
 	 ...
 		 sensors : {[null] or ArrayOf SensorName}
 		 sampling: {[null] or int}
 */
	this.dataConfig = {
		criteria: {
			time: {
				start: null,
				end: null,
				range: null // in s
			},
			robot: null,
			place: null
		},
		operator: 'last',
		sensors: null,
		sampling: null //sampling
	};

	return this;
};

/**
 * Get dataModel :
 * {
 *	"senseurXX": {
 *			data:[FLOAT, ...],
 *			time:[FLOAT, ...],
 *			robot:[FLOAT, ...],
 *			place:[FLOAT, ...],
 *			qualityIndex:[FLOAT, ...],
 *			range: [FLOAT, FLOAT],
 *			unit: string,
 *		label: string
 *		},
 *	 ... ("senseursYY")
 * }
 */
IEQ.prototype.getDataModel = function () {
	return this.dataModel;
};
IEQ.prototype.getDataRange = function () {
	return this.dataModel.range;
};

/**
 * @param {Object} dataConfig config for data request
 * if dataConfig is define : set and return this
 *	 @return {IEQ} this
 * else
 *	 @return {Object} current dataConfig
 */
IEQ.prototype.DataConfig = function (newDataConfig) {
	if (newDataConfig) {
		this.dataConfig = newDataConfig;
		return this;
	} else return this.dataConfig;
};
/**
 * TO BE IMPLEMENTED : operator management in DN-IEQ
 * @param  {String}	 newOperator : {[last], max, moy, sd}
 * @return {IEQ} this - chainable
 * Set operator criteria.
 * Depends on newOperator
 *	@param {String} newOperator
 *	@return this
 * Get operator criteria.
 *	@return {String} operator
 */
IEQ.prototype.DataOperator = function (newOperator) {
	if (newOperator) {
		this.dataConfig.operator = newOperator;
		return this;
	} else return this.dataConfig.operator;
};
/**
 * Depends on numSamples
 * @param {int} number of samples in dataModel
 * if defined : set number of samples
 *	@return {IEQ} this
 * else
 *	@return {int} number of samples
 **/
IEQ.prototype.DataSampling = function (numSamples) {
	if (numSamples) {
		this.dataConfig.sampling = numSamples;
		return this;
	} else return this.dataConfig.sampling;
};
/**
 * Set or get data time criteria start and end.
 * If param defined
 *	@param {Date} newTimeStart // may be null
 *	@param {Date} newTimeEnd // may be null
 *	@return {IEQ} this
 * If no param defined:
 *	@return {Object} Time object: fields start and end.
 */
IEQ.prototype.DataTime = function (newTimeStart, newTimeEnd, newRange) {
	if (newTimeStart || newTimeEnd || newRange) {
		this.dataConfig.criteria.time.start = newTimeStart.getTime();
		this.dataConfig.criteria.time.end = newTimeEnd.getTime();
		this.dataConfig.criteria.time.range = newRange;
		return this;
	} else return {
		start: new Date(this.dataConfig.criteria.time.start),
		end: new Date(this.dataConfig.criteria.time.end),
		range: new Date(this.dataConfig.criteria.time.range)
	};
};
/**
 * Depends on robotIds
 * Set robot criteria.
 *	@param {Array[Int]} robotIds list of robot Ids
 * Get robot criteria.
 *	@return {Array[Int]} list of robot Ids
 */
IEQ.prototype.DataRobotIds = function (robotIds) {
	if (robotIds) {
		this.dataConfig.criteria.robot = robotIds;
		return this;
	} else return this.dataConfig.criteria.robot;
};
/**
 * Depends on placeIds
 * Set place criteria.
 *	@param {Array[Int]} placeIds list of place Ids
 * Get place criteria.
 *	@return {Array[Int]} list of place Ids
 */
IEQ.prototype.DataPlaceIds = function (placeIds) {
	if (placeIds) {
		this.dataConfig.criteria.placeId = placeIds;
		return this;
	} else return this.dataConfig.criteria.place;
};
/**
 * Get data by sensor name.
 *	@param {Array[String]} sensorName list of sensors
 */
IEQ.prototype.getDataByName = function (sensorNames) {
	var data = [];
	for (var n in sensorNames) {
		data.push(this.dataModel[sensorNames[n]]);
	}
	return data;
};
/**
 * Update data given dataConfig.
 * @param {func} callback : called after update
 * TODO USE PROMISE
 */
IEQ.prototype.updateData = function (callback, dataConfig) {
	var that = this;
	if (dataConfig) this.DataConfig(dataConfig);
	// console.log("Request: "+JSON.stringify(dataConfig));
	this.selector.request({
		service: "ieq",
		func: "DataRequest",
		data: {
			type: "splReq",
			dataConfig: that.dataConfig
		}
	}, function (dnId, err, data) {
		if (err) {
			Logger.error("[" + that.dataConfig.sensors + "] Recv err: " + JSON.stringify(err));
			return;
		}
		if (data.header.error) {
			// TODO : check/use err status and adapt behavior accordingly
			Logger.error("UpdateData:\n" + JSON.stringify(data.header.dataConfig));
			Logger.error("Data request failed (" + data.header.error.st + "): " + data.header.error.msg);
			return;
		}

		// console.log(data);
		that._getDataModelFromRecv(data);

		// Logger.log(that.getDataModel());

		callback = callback.bind(that); // bind callback with IEQ
		callback(that.getDataModel()); // callback func
	});
};

IEQ.prototype._isDataModelWithNaN = function () {
	var dataModelNaN = false;
	var sensorNan;
	for (var n in this.dataModel) {
		sensorNan = this.dataModel[n].data.reduce(function (nanPres, d) {
			return nanPres && isNaN(d);
		}, false);
		dataModelNaN = dataModelNaN && sensorNan;
		Logger.log(n + " with nan : " + sensorNan + " (" + dataModelNaN + ") / " + this.dataModel[n].data.length);
	}
};

IEQ.prototype.getConfinementLevel = function () {
	return this.confinement;
};

IEQ.prototype.getAirQualityLevel = function () {
	return this.airQuality;
};

IEQ.prototype.getEnvQualityLevel = function () {
	return this.envQuality;
};

/**
 * Update internal model with received data
 * @param  data to configure subscription
 * @param  callback called on answers (@param : dataModel)
 */
IEQ.prototype.watch = function (data, callback) {
	var that = this;
	// console.log("Request: "+JSON.stringify(dataConfig));

	/** default **/
	data = data || {};
	data.timeRange = data.timeRange || 'hours';
	data.cat = data.cat || 'ieq'; /* category */

	var subs = this.selector.subscribe({
		service: "ieq",
		func: "Data",
		data: data,
		obj: data.cat /* provide category of sensor to be watched, filtered according to CRM */
	}, function (dnId, err, data) {
		if (err) {
			Logger.error("WatchIEQRecvErr:" + JSON.stringify(err));
			// console.log(e);
			// console.log(that.selector);
			// if(err==="SubscriptionClosed") {
			// 	that.closeSubscriptions(); // should not be necessary
			// 	that.subscriptionError = that.subscriptionErrorNum+1; // increase error counter
			// 	setTimeout(that.subscriptionErrorNum*60000, that.watch(data,callback)); // try again later
			// }
			// else {
			// 	console.error("Unmanage cases : should the subscription be regenerated ?");
			// }
			return;
		}
		if (data.header.error) {
			// TODO : check/use err status and adapt behavior accordingly
			Logger.error("WatchIEQ:\n" + JSON.stringify(data.header.dataConfig));
			Logger.error("Data request failed (" + data.header.error.st + "): " + data.header.error.msg);
			return;
		}
		// console.log(data);
		that._getDataModelFromRecv(data);
		//		that.subscriptionError = 0; // reset error counter

		callback = callback.bind(that); // bind callback with IEQ
		callback(that.getDataModel()); // callback func
	});

	this.subscriptions.push(subs);
};

/**
 * Close all subscriptions
 */
IEQ.prototype.closeSubscriptions = function () {
	for (var i in this.subscriptions) {
		this.subscriptions[i].close();
	}
	this.subscriptions = [];
};

/**
 * request Data to make CSV file
 */
IEQ.prototype.getCSVData = function (sensorNames, _firstDay, callback) {
	var firstDay = new Date(_firstDay);
	var dataConfig = {
		criteria: {
			time: { start: firstDay.getTime(), rangeUnit: 'hour', range: 180 }, // 360h -> 15d // 180h -> 7j
			places: [],
			robots: []
		},
		sensors: sensorNames
	};

	this.updateData(callback, dataConfig);
};

/**
 * Update internal model with received data
 * @param  {Object} data data received from DiyaNode by websocket
 * @return {[type]}		[description]
 */
IEQ.prototype._getDataModelFromRecv = function (data) {
	var dataModel = null;

	if (data.err && data.err.st > 0) {
		Logger.error(data.err.msg);
		return null;
	}
	delete data.err;
	if (data && data.header) {
		for (var n in data) {
			if (n != "header" && n != "err") {

				if (data[n].err && data[n].err.st > 0) {
					Logger.error(n + " was in error: " + data[n].err.msg);
					continue;
				}

				if (!dataModel) dataModel = {};

				// Logger.log(n);
				if (!dataModel[n]) {
					dataModel[n] = {};
				}
				/* update data absolute range */
				dataModel[n].range = data[n].range;
				/* update data range */
				dataModel[n].timeRange = data[n].timeRange;
				/* update data label */
				dataModel[n].label = data[n].label;
				/* update data unit */
				dataModel[n].unit = data[n].unit;
				/* update data precision */
				dataModel[n].precision = data[n].precision;
				/* update data categories */
				dataModel[n].category = data[n].category;

				/* suggested y display range */
				dataModel[n].zoomRange = [0, 100];

				/* update data indexRange */
				dataModel[n].qualityConfig = {
					/* confortRange: data[n].confortRange, */
					indexRange: data[n].indexRange
				};
				dataModel[n].time = this._coder.from(data[n].time, 'b64', 8);
				dataModel[n].data = data[n].data ? this._coder.from(data[n].data, 'b64', 4) : data[n].avg ? this._coder.from(data[n].avg.d, 'b64', 4) : null;
				dataModel[n].qualityIndex = data[n].data ? this._coder.from(data[n].index, 'b64', 4) : data[n].avg ? this._coder.from(data[n].avg.i, 'b64', 4) : null;
				dataModel[n].robotId = this._coder.from(data[n].robotId, 'b64', 4);
				if (dataModel[n].robotId) {
					/** dico robotId -> robotName **/
					var dicoRobot = {};
					data.header.robots.forEach(function (el) {
						dicoRobot[el.id] = el.name;
					});
					dataModel[n].robotId = dataModel[n].robotId.map(function (el) {
						return dicoRobot[el];
					});
				}

				dataModel[n].placeId = this._coder.from(data[n].placeId, 'b64', 4);
				dataModel[n].x = null;
				dataModel[n].y = null;

				if (data[n].avg) dataModel[n].avg = {
					d: this._coder.from(data[n].avg.d, 'b64', 4),
					i: this._coder.from(data[n].avg.i, 'b64', 4)
				};
				if (data[n].min) dataModel[n].min = {
					d: this._coder.from(data[n].min.d, 'b64', 4),
					i: this._coder.from(data[n].min.i, 'b64', 4)
				};
				if (data[n].max) dataModel[n].max = {
					d: this._coder.from(data[n].max.d, 'b64', 4),
					i: this._coder.from(data[n].max.i, 'b64', 4)
				};
				if (data[n].stddev) dataModel[n].stddev = {
					d: this._coder.from(data[n].stddev.d, 'b64', 4),
					i: this._coder.from(data[n].stddev.i, 'b64', 4)
				};
				if (data[n].stddev) dataModel[n].stddev = {
					d: this._coder.from(data[n].stddev.d, 'b64', 4),
					i: this._coder.from(data[n].stddev.i, 'b64', 4)
				};
				if (data[n].x) dataModel[n].x = this._coder.from(data[n].x, 'b64', 4);
				if (data[n].y) dataModel[n].y = this._coder.from(data[n].y, 'b64', 4);
				/**
     * current quality : {'b'ad, 'm'edium, 'g'ood}
     * evolution : {'u'p, 'd'own, 's'table}
     * evolution quality : {'b'etter, 'w'orse, 's'ame}
     */
				/// TODO
				dataModel[n].trend = 'mss';
			}
		}
	} else {
		Logger.error("No Data to read or header is missing !");
	}
	/** list robots **/
	//	dataModel.robots = [{name: 'D2R2', id:1}];
	this.dataModel = dataModel;
	return dataModel;
};

/** create IEQ service **/
DiyaSelector.prototype.IEQ = function () {
	return new IEQ(this);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../DiyaSelector":41,"../message":47,"util":29}],46:[function(require,module,exports){
'use strict';

var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var d1 = require('../../DiyaSelector');
var isBrowser = !(typeof window === 'undefined');
if (!isBrowser) {
	var Q = require('q');
} else {
	var Q = window.Q;
}

d1.knownPeers = function () {
	return d1("#self").knownPeers();
};
d1.kp = d1.knownPeers;

DiyaSelector.prototype.knownPeers = function (callback) {
	var deferred = Q.defer();
	this.request({ service: 'meshNetwork', func: 'ListKnownPeers' }, function (peerId, err, data) {
		if (err) return deferred.reject(err);
		var peers = [];
		for (var i = 0; i < data.length; i++) {
			peers.push(data[i].peer_name);
		}return deferred.resolve(peers);
	});
	return deferred.promise;
};

d1.listenMeshNetwork = function (callback) {
	return d1(/.*/).subscribe({ service: 'meshNetwork', func: 'MeshNetwork' }, callback, { auto: true });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lc2hOZXR3b3JrLmpzIl0sIm5hbWVzIjpbIkRpeWFTZWxlY3RvciIsInJlcXVpcmUiLCJkMSIsImlzQnJvd3NlciIsIndpbmRvdyIsIlEiLCJrbm93blBlZXJzIiwia3AiLCJwcm90b3R5cGUiLCJjYWxsYmFjayIsImRlZmVycmVkIiwiZGVmZXIiLCJyZXF1ZXN0Iiwic2VydmljZSIsImZ1bmMiLCJwZWVySWQiLCJlcnIiLCJkYXRhIiwicmVqZWN0IiwicGVlcnMiLCJpIiwibGVuZ3RoIiwicHVzaCIsInBlZXJfbmFtZSIsInJlc29sdmUiLCJwcm9taXNlIiwibGlzdGVuTWVzaE5ldHdvcmsiLCJzdWJzY3JpYmUiLCJhdXRvIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGVBQWVDLFFBQVEsb0JBQVIsRUFBOEJELFlBQWpEO0FBQ0EsSUFBSUUsS0FBS0QsUUFBUSxvQkFBUixDQUFUO0FBQ0EsSUFBSUUsWUFBWSxFQUFFLE9BQU9DLE1BQVAsS0FBa0IsV0FBcEIsQ0FBaEI7QUFDQSxJQUFHLENBQUNELFNBQUosRUFBZTtBQUFFLEtBQUlFLElBQUlKLFFBQVEsR0FBUixDQUFSO0FBQXVCLENBQXhDLE1BQ0s7QUFBRSxLQUFJSSxJQUFJRCxPQUFPQyxDQUFmO0FBQW1COztBQUcxQkgsR0FBR0ksVUFBSCxHQUFnQixZQUFXO0FBQzFCLFFBQU9KLEdBQUcsT0FBSCxFQUFZSSxVQUFaLEVBQVA7QUFDQSxDQUZEO0FBR0FKLEdBQUdLLEVBQUgsR0FBUUwsR0FBR0ksVUFBWDs7QUFJQU4sYUFBYVEsU0FBYixDQUF1QkYsVUFBdkIsR0FBb0MsVUFBU0csUUFBVCxFQUFtQjtBQUN0RCxLQUFJQyxXQUFXTCxFQUFFTSxLQUFGLEVBQWY7QUFDQSxNQUFLQyxPQUFMLENBQWEsRUFBQ0MsU0FBUyxhQUFWLEVBQXdCQyxNQUFNLGdCQUE5QixFQUFiLEVBQThELFVBQVNDLE1BQVQsRUFBaUJDLEdBQWpCLEVBQXNCQyxJQUF0QixFQUEyQjtBQUN4RixNQUFHRCxHQUFILEVBQVEsT0FBT04sU0FBU1EsTUFBVCxDQUFnQkYsR0FBaEIsQ0FBUDtBQUNSLE1BQUlHLFFBQVEsRUFBWjtBQUNBLE9BQUksSUFBSUMsSUFBRSxDQUFWLEVBQWFBLElBQUVILEtBQUtJLE1BQXBCLEVBQTRCRCxHQUE1QjtBQUFpQ0QsU0FBTUcsSUFBTixDQUFXTCxLQUFLRyxDQUFMLEVBQVFHLFNBQW5CO0FBQWpDLEdBQ0EsT0FBT2IsU0FBU2MsT0FBVCxDQUFpQkwsS0FBakIsQ0FBUDtBQUNBLEVBTEQ7QUFNQSxRQUFPVCxTQUFTZSxPQUFoQjtBQUNBLENBVEQ7O0FBYUF2QixHQUFHd0IsaUJBQUgsR0FBdUIsVUFBU2pCLFFBQVQsRUFBbUI7QUFDekMsUUFBT1AsR0FBRyxJQUFILEVBQVN5QixTQUFULENBQW1CLEVBQUVkLFNBQVMsYUFBWCxFQUEwQkMsTUFBTSxhQUFoQyxFQUFuQixFQUFvRUwsUUFBcEUsRUFBOEUsRUFBQ21CLE1BQU0sSUFBUCxFQUE5RSxDQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiJNZXNoTmV0d29yay5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBEaXlhU2VsZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKS5EaXlhU2VsZWN0b3I7XG52YXIgZDEgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKTtcbnZhciBpc0Jyb3dzZXIgPSAhKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcbmlmKCFpc0Jyb3dzZXIpIHsgdmFyIFEgPSByZXF1aXJlKCdxJyk7IH1cbmVsc2UgeyB2YXIgUSA9IHdpbmRvdy5ROyB9XG5cblxuZDEua25vd25QZWVycyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZDEoXCIjc2VsZlwiKS5rbm93blBlZXJzKCk7XG59O1xuZDEua3AgPSBkMS5rbm93blBlZXJzO1xuXG5cblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5rbm93blBlZXJzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0dmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXHR0aGlzLnJlcXVlc3Qoe3NlcnZpY2U6ICdtZXNoTmV0d29yaycsZnVuYzogJ0xpc3RLbm93blBlZXJzJ30sIGZ1bmN0aW9uKHBlZXJJZCwgZXJyLCBkYXRhKXtcblx0XHRpZihlcnIpIHJldHVybiBkZWZlcnJlZC5yZWplY3QoZXJyKTtcblx0XHR2YXIgcGVlcnMgPSBbXTtcblx0XHRmb3IodmFyIGk9MDsgaTxkYXRhLmxlbmd0aDsgaSsrKSBwZWVycy5wdXNoKGRhdGFbaV0ucGVlcl9uYW1lKTtcblx0XHRyZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShwZWVycyk7XG5cdH0pO1xuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuXG5cbmQxLmxpc3Rlbk1lc2hOZXR3b3JrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0cmV0dXJuIGQxKC8uKi8pLnN1YnNjcmliZSh7IHNlcnZpY2U6ICdtZXNoTmV0d29yaycsIGZ1bmM6ICdNZXNoTmV0d29yaycgfSwgY2FsbGJhY2ssIHthdXRvOiB0cnVlfSk7XG59O1xuIl19
},{"../../DiyaSelector":41,"q":undefined}],47:[function(require,module,exports){
'use strict';

/* maya-client
 *
 * Copyright (c) 2014, Partnering Robotics, All rights reserved.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; version
 *  3.0 of the License This library is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

function Message(service, func, obj, permanent) {

	this.service = service;
	this.func = func;
	this.obj = obj;

	this.permanent = permanent; //If this flag is on, the command will stay on the callback list listening for events
}

Message.buildSignature = function (msg) {
	return msg.service + '.' + msg.func + '.' + msg.obj;
};

Message.prototype.signature = function () {
	return this.service + '.' + this.func + '.' + this.obj;
};

Message.prototype.exec = function (data) {
	return {
		service: this.service,
		func: this.func,
		obj: this.obj,
		data: data
	};
};

module.exports = Message;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2UuanMiXSwibmFtZXMiOlsiTWVzc2FnZSIsInNlcnZpY2UiLCJmdW5jIiwib2JqIiwicGVybWFuZW50IiwiYnVpbGRTaWduYXR1cmUiLCJtc2ciLCJwcm90b3R5cGUiLCJzaWduYXR1cmUiLCJleGVjIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLFNBQVNBLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCQyxJQUExQixFQUFnQ0MsR0FBaEMsRUFBcUNDLFNBQXJDLEVBQStDOztBQUU5QyxNQUFLSCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxNQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxNQUFLQyxHQUFMLEdBQVdBLEdBQVg7O0FBRUEsTUFBS0MsU0FBTCxHQUFpQkEsU0FBakIsQ0FOOEMsQ0FNbEI7QUFDNUI7O0FBRURKLFFBQVFLLGNBQVIsR0FBeUIsVUFBU0MsR0FBVCxFQUFhO0FBQ3JDLFFBQU9BLElBQUlMLE9BQUosR0FBWSxHQUFaLEdBQWdCSyxJQUFJSixJQUFwQixHQUF5QixHQUF6QixHQUE2QkksSUFBSUgsR0FBeEM7QUFDQSxDQUZEOztBQUtBSCxRQUFRTyxTQUFSLENBQWtCQyxTQUFsQixHQUE4QixZQUFVO0FBQ3ZDLFFBQU8sS0FBS1AsT0FBTCxHQUFhLEdBQWIsR0FBaUIsS0FBS0MsSUFBdEIsR0FBMkIsR0FBM0IsR0FBK0IsS0FBS0MsR0FBM0M7QUFDQSxDQUZEOztBQUlBSCxRQUFRTyxTQUFSLENBQWtCRSxJQUFsQixHQUF5QixVQUFTQyxJQUFULEVBQWM7QUFDdEMsUUFBTztBQUNOVCxXQUFTLEtBQUtBLE9BRFI7QUFFTkMsUUFBTSxLQUFLQSxJQUZMO0FBR05DLE9BQUssS0FBS0EsR0FISjtBQUlOTyxRQUFNQTtBQUpBLEVBQVA7QUFNQSxDQVBEOztBQVNBQyxPQUFPQyxPQUFQLEdBQWlCWixPQUFqQiIsImZpbGUiOiJtZXNzYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogbWF5YS1jbGllbnRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIFBhcnRuZXJpbmcgUm9ib3RpY3MsIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyB2ZXJzaW9uXG4gKiAgMy4wIG9mIHRoZSBMaWNlbnNlIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZVxuICogdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW5cbiAqIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVJcbiAqIFBVUlBPU0UuIFNlZSB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5LlxuICovXG5cblxuXG5mdW5jdGlvbiBNZXNzYWdlKHNlcnZpY2UsIGZ1bmMsIG9iaiwgcGVybWFuZW50KXtcblxuXHR0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuXHR0aGlzLmZ1bmMgPSBmdW5jO1xuXHR0aGlzLm9iaiA9IG9iajtcblx0XG5cdHRoaXMucGVybWFuZW50ID0gcGVybWFuZW50OyAvL0lmIHRoaXMgZmxhZyBpcyBvbiwgdGhlIGNvbW1hbmQgd2lsbCBzdGF5IG9uIHRoZSBjYWxsYmFjayBsaXN0IGxpc3RlbmluZyBmb3IgZXZlbnRzXG59XG5cbk1lc3NhZ2UuYnVpbGRTaWduYXR1cmUgPSBmdW5jdGlvbihtc2cpe1xuXHRyZXR1cm4gbXNnLnNlcnZpY2UrJy4nK21zZy5mdW5jKycuJyttc2cub2JqO1xufVxuXG5cbk1lc3NhZ2UucHJvdG90eXBlLnNpZ25hdHVyZSA9IGZ1bmN0aW9uKCl7XG5cdHJldHVybiB0aGlzLnNlcnZpY2UrJy4nK3RoaXMuZnVuYysnLicrdGhpcy5vYmo7XG59XG5cbk1lc3NhZ2UucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbihkYXRhKXtcblx0cmV0dXJuIHtcblx0XHRzZXJ2aWNlOiB0aGlzLnNlcnZpY2UsXG5cdFx0ZnVuYzogdGhpcy5mdW5jLFxuXHRcdG9iajogdGhpcy5vYmosXG5cdFx0ZGF0YTogZGF0YVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZTtcbiJdfQ==
},{}],48:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var d1 = require('../../DiyaSelector');
var isBrowser = !(typeof window === 'undefined');
if (!isBrowser) {
	var Q = require('q');
} else {
	var Q = window.Q;
}

if (typeof INFO === 'undefined') var INFO = function INFO(s) {
	console.log(s);
};
if (typeof OK === 'undefined') var OK = function OK(s) {
	console.log(s);
};

/**
* Installs a new DiyaNode device (with address 'ip') into an existing network, by
* contacting an existing DiyaNode device with address 'bootstrap_ip' :
*   1) Contact the new node to get its public key
*   2) Add this public key to the existing node TrustedPeers list
*   3) Add the existing node's public key to the new node's TrustedPeers list
*   4) Ask the new node to join the network by calling @see{d1().join()}
*
* NOTE : This operation requires the given user to have root role on both nodes
*
* @param ip : the IP address of the new device
* @param user : a username with root role on the new device
* @param password : the password for 'user'
* @param bootstrap_ip : the IP address of the bootstrap device
* @param bootstrap_user : a user identifier with root role on the boostrap device
* @param bootstrap_password : the password for 'bootstrap_user'
* @param bootstrap_net : the IP address where the new device will connect to the boostrap one
* @param callback : of the form callback(new_peer_name,bootstrap_peer_name, err, data)
*/
d1.installNodeExt = function (ip, user, password, bootstrap_ip, bootstrap_user, bootstrap_password, bootstrap_net, callback) {
	if (typeof ip !== 'string') throw "[installNode] ip should be an IP address";
	if (typeof bootstrap_ip !== 'string') throw "[installNode] bootstrap_ip should be an IP address";
	if (typeof bootstrap_net !== 'string') throw "[installNode] bootstrap_net should be an IP address";

	// Check and Format URI (FQDN)
	if (bootstrap_ip.indexOf("ws://") !== 0 && bootstrap_ip.indexOf("wss://") !== 0) {
		if (d1.isSecured()) bootstrap_ip = "wss://" + bootstrap_ip;else bootstrap_ip = "ws://" + bootstrap_ip;
	}
	if (bootstrap_net.indexOf("ws://") !== 0 && bootstrap_net.indexOf("wss://") !== 0) {
		if (d1.isSecured()) bootstrap_net = "wss://" + bootstrap_net;else bootstrap_net = "ws://" + bootstrap_net;
	}

	function join(peer, bootstrap_peer) {
		d1("#self").join(bootstrap_net, true, function (peer, err, data) {
			if (!err) OK("JOINED !!!");
			return callback(peer, bootstrap_peer, err, data);
		});
	}

	d1.connectAsUser(ip, user, password).then(function (peer, err, data) {
		d1("#self").givePublicKey(function (peer, err, data) {
			if (err === 'ServiceNotFound') {
				INFO("Peer Authentication disabled ... directly joining");
				join();
				return;
			} else if (err) return callback(peer, null, err, null);else {
				INFO("Add trusted peer '" + peer + "' (ip=" + ip + ") to '" + bootstrap_ip + "' with public key\n" + data.public_key);
				d1.connectAsUser(bootstrap_ip, bootstrap_user, bootstrap_password).then(function () {
					d1("#self").addTrustedPeer(peer, data.public_key, function (bootstrap_peer, err, _ref) {
						var _ref2 = _slicedToArray(_ref, 2),
						    alreadyTrusted = _ref2[0],
						    public_key = _ref2[1];

						if (err) return callback(peer, bootstrap_peer, err, null);
						if (alreadyTrusted) INFO(peer + " already trusted by " + bootstrap_peer);else INFO(bootstrap_peer + "(ip=" + bootstrap_ip + ") added " + peer + "(ip=" + ip + ") as a Trusted Peer");

						d1('#self').givePublicKey(function (_, err, data) {
							INFO("In return, add " + bootstrap_peer + " to " + peer + " as a Trusted Peer with public key " + data.public_key);
							d1.connectAsUser(ip, user, password).then(function () {
								d1("#self").addTrustedPeer(bootstrap_peer, data.public_key, function (peer, err, _ref3) {
									var _ref4 = _slicedToArray(_ref3, 2),
									    alreadyTrusted = _ref4[0],
									    public_key = _ref4[1];

									if (err) callback(peer, bootstrap_peer, err, null);else if (alreadyTrusted) INFO(bootstrap_peer + " already trusted by " + peer);else INFO(peer + "(ip=" + ip + ") added " + bootstrap_peer + "(ip=" + bootstrap_ip + ") as a Trusted Peer");
									// Once Keys have been exchanged ask to join the network
									OK("KEYS OK ! Now, let " + peer + "(ip=" + ip + ") join the network via " + bootstrap_peer + "(ip=" + bootstrap_net + ") ...");
									return join(peer, bootstrap_peer);
								});
							});
						});
					});
				});
			}
		});
	});
};

/** Short version of @see{d1.installNodeExt} */
d1.installNode = function (bootstrap_ip, bootstrap_net, callback) {
	var ip = d1.addr();
	var user = d1.user();
	var password = d1.pass();
	var bootstrap_user = user;
	var bootstrap_password = password;

	console.log('[installNode]\nip:' + ip);

	return d1.installNodeExt(ip, user, password, bootstrap_ip, bootstrap_user, bootstrap_password, bootstrap_net, callback);
};

/**
 * Make the selected DiyaNodes join an existing DiyaNodes Mesh Network by contacting
 * the given bootstrap peers.
 *
 * NOTE : This operation requires root role
 *
 * @param bootstrap_ips : an array of bootstrap IP addresses to contact to join the Network
 * @param permanent : if true, permanently add the bootstrap peers as automatic bootstrap peers for the selected nodes.
 *
 */
DiyaSelector.prototype.join = function (bootstrap_ips, permanent, callback) {
	if (typeof bootstrap_ips === 'string') bootstrap_ips = [bootstrap_ips];

	if (bootstrap_ips.constructor !== Array) throw "join() : bootstrap_ips should be an array of peers URIs";

	this.request({
		service: 'meshNetwork',
		func: 'Join',
		data: {
			bootstrap_ips: bootstrap_ips,
			permanent: permanent
		}
	}, function (peerId, err, data) {
		if (typeof callback === "function") callback(peerId, err, data);
	});
};

/**
 * Disconnect the selected DiyaNodes from the given bootstrap peers
 *
 * NOTE : This operation requires root role
 *
 * @param bootstrap_ips : an array of bootstrap IP addresses to leave
 * @param bPermanent : if true, permanently remove the given peers from the automatic bootstrap peers list
 *
 */
DiyaSelector.prototype.leave = function (bootstrap_ips, bPermanent, callback) {
	if (typeof bootstrap_ips === 'string') bootstrap_ips = [bootstrap_ips];
	if (bootstrap_ips.constructor !== Array) throw "leave() : bootstrap_ips should be an array of peers URIs";
	this.request({ service: 'meshNetwork', func: 'Leave', data: { bootstrap_ips: bootstrap_ips, bPermanent: bPermanent } }, function (peerId, err, data) {
		if (typeof callback === "function") callback(peerId, err, data);
	});
};

/**
 * Ask the selected DiyaNodes for their public keys
 */
DiyaSelector.prototype.givePublicKey = function (callback) {
	return this.request({ service: 'peerAuth', func: 'GivePublicKey', data: {} }, function (peerId, err, data) {
		callback(peerId, err, data);
	});
};

/**
 * Add a new trusted peer RSA public key to the selected DiyaNodes
 * NOTE : This operation requires root role
 *
 * @param peer_name : the name of the new trusted DiyaNode peer
 * @param public_key : the RSA public key of the new trusted DiyaNode peer
 */
DiyaSelector.prototype.addTrustedPeer = function (name, public_key, callback) {
	return this.request({
		service: 'peerAuth',
		func: 'AddTrustedPeer',
		data: {
			peer_name: name,
			public_key: public_key
		}
	}, function (peerId, err, data) {
		callback(peerId, err, data);
	});
};

/**
 * Check if the selected DiyaNodes trust the given peers
 * @param peers : an array of peer names
 */
DiyaSelector.prototype.areTrusted = function (peers, callback) {
	return this.request({ service: 'peerAuth', func: 'AreTrusted', data: { peers: peers } }, function (peerId, err, data) {
		var allTrusted = data.trusted;
		if (allTrusted) {
			OK(peers + " are trusted by " + peerId);callback(peerId, true);
		} else {
			ERR("Some peers in " + peers + " are untrusted by " + peerId);callback(peerId, false);
		}
	});
};
DiyaSelector.prototype.isTrusted = function (peer, callback) {
	return this.areTrusted([peer], callback);
};

d1.trustedPeers = function () {
	var deferred = Q.defer();
	d1("#self").request({ service: 'peerAuth', func: 'GetTrustedPeers' }, function (peerId, err, data) {
		if (err) return deferred.reject(err);
		var peers = [];
		for (var i = 0; i < data.peers.length; i++) {
			peers.push(data.peers[i].name);
		}return deferred.resolve(peers);
	});
	return deferred.promise;
};
d1.tp = d1.trustedPeers; // Shorthand

d1.blacklistedPeers = function () {
	var deferred = Q.defer();
	d1("#self").request({ service: 'peerAuth', func: 'GetBlacklistedPeers' }, function (peerId, err, data) {
		if (err) return deferred.reject(err);
		var peers = [];
		for (var i = 0; i < data.peers.length; i++) {
			peers.push(data.peers[i].name);
		}return deferred.resolve(peers);
	});
	return deferred.promise;
};
d1.bp = d1.blacklistedPeers; // Shorthand
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../DiyaSelector":41,"q":undefined}],49:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('node-event-emitter');

var RTCChannel = function (_EventEmitter) {
	_inherits(RTCChannel, _EventEmitter);

	function RTCChannel(name, dataChannelCallback, streamCallback) {
		_classCallCheck(this, RTCChannel);

		var _this = _possibleConstructorReturn(this, (RTCChannel.__proto__ || Object.getPrototypeOf(RTCChannel)).call(this));

		_this.name = name;
		_this.type = 'N/A';
		_this.frequency = 20;
		_this._lastSendTimestamp = 0;

		_this._dataChannelCallback = dataChannelCallback;
		_this._streamCallback = streamCallback;

		_this._dataChannel = null;
		_this._buffer = null;

		console.log('created channel ' + _this.name + ' !');
		return _this;
	}

	_createClass(RTCChannel, [{
		key: 'close',
		value: function close() {
			if (this._dataChannel == null) {
				console.warn('trying to close non-open channel ' + this.name);
				return;
			}

			this._dataChannel.close();
		}
	}, {
		key: 'setDataChannel',
		value: function setDataChannel(dataChannel) {
			var _this2 = this;

			console.log('data channel ' + this.name + ' connected !');

			this._dataChannel = dataChannel;

			this._dataChannel.binaryType = 'arraybuffer';

			dataChannel.onmessage = function (message) {
				// First message carries channel description header
				var view = new DataView(message.data);

				// extract channel type (input or output)
				var typeChar = String.fromCharCode(view.getUint8(0));
				if (typeChar === 'O') _this2.type = 'input'; //Promethe Output = Client Input
				else if (typeChar === 'I') _this2.type = 'output'; //Promethe Input = Client Output
					else throw "Unrecnognized channel type : " + typeChar;

				//extract channel size
				var size = view.getInt32(1, true);
				if (isNaN(size)) throw "Wrong datachannel message size";
				_this2.size = size;
				_this2._buffer = new Float32Array(size);

				// Subsequent messages are forwarded to appropriate handlers
				dataChannel.onmessage = function (message) {
					return _this2._onMessage(message);
				};
				dataChannel.onclose = function () {
					return _this2._onClose();
				};

				if (typeof _this2._dataChannelCallback === 'function') {
					_this2._dataChannelCallback("N/A", _this2);
				}

				console.log('data channel ' + _this2.name + ' ready !');
			};
		}

		/** Bind an incoming RTC stream to this channel 
  onAddStream (stream) {
  	this.stream = stream;
  	if(typeof this.onstream === 'function') this.onstream(this.dnId, stream);
  	else console.warn("Ignore stream " + stream.id);
  
  	console.log('Open stream '+this.name);
  }*/

		/** Write a scalar value to the given index on the RTC datachannel */

	}, {
		key: 'write',
		value: function write(index, value) {
			if (index < 0 || index > this.size || isNaN(value)) {
				return false;
			}

			this._buffer[index] = value;
			this._requestSend();
			return true;
		}

		/** Write an array of values to the RTC datachannel */

	}, {
		key: 'writeAll',
		value: function writeAll(values) {
			if (!Array.isArray(values) || values.length !== this.size) {
				return false;
			}

			for (var i = 0; i < values.length; i++) {
				if (isNaN(values[i])) return false;
				this._buffer[i] = values[i];
			}

			this._requestSend();
		}

		/** Ask to send the internal data buffer through the datachannel at the defined frequency */

	}, {
		key: '_requestSend',
		value: function _requestSend() {
			var _this3 = this;

			var doSend = function doSend() {
				_this3._sendRequested = false;
				_this3._lastSendTimestamp = new Date().getTime();
				var ret = _this3._send(_this3._buffer);
				//If autosend is set, automatically send buffer at the given frequency
				if (ret && _this3.autosend) {
					_this3._requestSend();
				}
			};

			var elapsedTime = new Date().getTime() - this._lastSendTimestamp;
			var period = 1000 / this.frequency;

			if (elapsedTime >= period) {
				doSend();
			} else if (!this._sendRequested) {
				this._sendRequested = true;
				setTimeout(doSend, period - elapsedTime);
			}
		}

		/** Actual send the internal data buffer through the RTC datachannel */

	}, {
		key: '_send',
		value: function _send(msg) {
			if (this.closed || this._dataChannel == null) {
				return false;
			} else if (this._dataChannel.readyState === 'open') {
				try {
					this._dataChannel.send(msg);
				} catch (e) {
					console.error('[rtc.channel.write] exception occured while sending data');
				}
				return true;
			} else {
				console.warn('[rtc.channel.write] warning : webrtc datachannel state = ' + this._dataChannel.readyState);
				return false;
			}
		}

		/** Called when a message is received from the channel's RTC datachannel */

	}, {
		key: '_onMessage',
		value: function _onMessage(message) {
			var valArray = new Float32Array(message.data);
			this.emit('value', valArray);
		}

		/** Called when the channel is closed on the remote side */

	}, {
		key: '_onClose',
		value: function _onClose() {
			console.log('data channel ' + this.name + ' closed !');
			this.emit('close');
		}
	}]);

	return RTCChannel;
}(EventEmitter);

module.exports = RTCChannel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"node-event-emitter":13}],50:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RTCPeer = require('./RTCPeer.js');
var RTCChannel = require('./RTCChannel.js');

var RTCController = function () {
	function RTCController(dbusObject, requestedChannels) {
		var _this = this;

		_classCallCheck(this, RTCController);

		this._dbusObject = dbusObject;
		this._requestedChannels = requestedChannels;
		this._usedChannels = [];

		this._peers = new Map();

		this._propertiesChangedCallback = function () {
			return _this._propertiesChanged.apply(_this, arguments);
		};
		this._dbusObject.on('properties-changed', this._propertiesChangedCallback);
	}

	_createClass(RTCController, [{
		key: 'connect',
		value: function connect() {
			this._dbusObject.initPropertiesChangedSignal();
			this._dbusObject.getAll('fr.partnering.RTC', true);
		}
	}, {
		key: 'disconnect',
		value: function disconnect() {
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = this._peers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var _step$value = _slicedToArray(_step.value, 2),
					    id = _step$value[0],
					    peer = _step$value[1];

					peer.close();
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			this._dbusObject.removeListener('properties-changed', this._propertiesChangedCallback);
			this._propertiesChangedCallback = null;
			this._usedChannels = [];
			this._dbusObject.close();
		}
	}, {
		key: '_propertiesChanged',
		value: function _propertiesChanged(iface, changedProperties, invalidatedProperties) {
			var _this2 = this;

			if (changedProperties == null || changedProperties.LocalPeers == null) {
				return;
			}

			//find and notify new peers
			changedProperties.LocalPeers.forEach(function (peerData) {
				if (!_this2._peers.has(peerData[0])) {
					_this2._onPeerConnected(peerData);
				}
			});

			//find and notify deleted peers
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				var _loop = function _loop() {
					var _step2$value = _slicedToArray(_step2.value, 2),
					    peerId = _step2$value[0],
					    peer = _step2$value[1];

					if (!changedProperties.LocalPeers.find(function (p) {
						return p[0] === peerId;
					})) {
						_this2._onPeerDisconnected(peer);
					}
				};

				for (var _iterator2 = this._peers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					_loop();
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}, {
		key: '_onPeerConnected',
		value: function _onPeerConnected(peerData) {
			var channels = this._matchChannels(peerData[1]);

			if (channels.length > 0) {
				this._peers.set(peerData[0], new RTCPeer(peerData[0], channels, this._dbusObject));
			} else {
				console.log("not using peer " + peerData[0]);
			}
		}
	}, {
		key: '_onPeerDisconnected',
		value: function _onPeerDisconnected(peer) {
			var _this3 = this;

			this._peers.delete(peer.id);
			peer.channels.forEach(function (channel) {
				delete _this3._usedChannels[channel.name];
			});
			peer.close();
		}
	}, {
		key: '_matchChannels',
		value: function _matchChannels(receivedChannels) {
			var channels = [];

			for (var i = 0; i < receivedChannels.length; i++) {
				var name = receivedChannels[i];
				var remoteStreamId = name.split("_;:_")[1];
				name = name.split("_;:_")[0];

				for (var j = 0; j < this._requestedChannels.length; j++) {
					var req = this._requestedChannels[j];

					if (!name || !name.match(req.regex) || this._usedChannels[name]) {
						continue;
					}

					var channel = new RTCChannel(name, req.cb, req.stream_cb);
					this._usedChannels[name] = channel;
					channels.push(channel);

					break;

					/*
     // If a stream id is provided for the channel, register the mapping
     if(remoteStreamId) {
     	this._channelsByStream = this._channelsByStream.filter((cbs) => {
     		return cbs.stream !== remoteStreamId && cbs.channel !== channel
     	})
     	this._channelsByStream.push({
     		stream: remoteStreamId, 
     		channel: channel
     	})
     	channel.streamId = streamId
     }
     //let localStreamId = that.channelsByStream.filter(function(cbs){return cbs.channel === name; })[0]; TODO: what's that global channelsByStream obj ?!
     if(localStreamId) {
     	this._channelsByStream = this._channelsByStream.filter((cbs) => {
     		return cbs.stream !== localStreamId && cbs.channel !== name
     	})
     	this._channelsByStream.push({
     		stream: localStreamId, 
     		channel: name
     	})
     	channel.localStreamId = localStreamId
     }*/
				}
			}

			return channels;
		}
	}]);

	return RTCController;
}();

module.exports = RTCController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./RTCChannel.js":49,"./RTCPeer.js":51}],51:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('node-event-emitter');
var messageify = require('./messageify-browser.js');

var RTCPeer = function (_EventEmitter) {
	_inherits(RTCPeer, _EventEmitter);

	function RTCPeer(id, channels, dbusObject) {
		_classCallCheck(this, RTCPeer);

		var _this = _possibleConstructorReturn(this, (RTCPeer.__proto__ || Object.getPrototypeOf(RTCPeer)).call(this));

		_this.id = id;
		_this.channels = channels;
		_this._dbusObject = dbusObject;

		//default turn servers	
		_this._turnServers = [{ urls: ["stun:stun.l.google.com:19302"] }];

		_this._connect();
		return _this;
	}

	_createClass(RTCPeer, [{
		key: 'close',
		value: function close() {
			var _this2 = this;

			console.log("Peer " + this.id + " closed !");
			this.channels.forEach(function (c) {
				return c.close();
			});
			this.channels = [];

			this._sendSignalingMessage({
				func: 'Close'
			});

			setTimeout(function () {
				_this2._disconnectSignaling();
			});

			if (this._peerConnection == null) {
				return;
			}
			this._peerConnection.close();
		}
	}, {
		key: '_connect',
		value: function _connect() {
			console.log("trying to connect to peer " + this.id + "...");

			this._connectSignaling();
		}

		////////////////////////////////////////////////////////
		//////////////// Signaling methods /////////////////////
		////////////////////////////////////////////////////////

	}, {
		key: '_connectSignaling',
		value: function _connectSignaling() {
			var _this3 = this;

			this._dbusObject.call('fr.partnering.RTC.Connect', {
				localPeerId: this.id,
				channels: this.channels.map(function (c) {
					return c.name;
				})
			}, function (_, err, sessionToken) {
				console.log("session token for peer " + _this3.id + " : " + sessionToken);
				_this3._dbusObject._d1inst(_this3._dbusObject._peerId).openSocket('/var/run/diya/rtc.sock', function (_, err, socket) {
					socket.write(sessionToken + '\n');

					_this3._onSignalingConnected(messageify(socket));
				});
			});
		}
	}, {
		key: '_disconnectSignaling',
		value: function _disconnectSignaling() {
			console.log('disconnecting signaling for peer ' + this.id);
			this._signaling.disconnect();
		}
	}, {
		key: '_onSignalingConnected',
		value: function _onSignalingConnected(socket) {
			var _this4 = this;

			console.log('signaling connected for peer ' + this.id);
			this._signaling = socket;

			this._signaling.on('message', function (data) {
				_this4._onSignalingMessage(JSON.parse(data));
			});
		}
	}, {
		key: '_sendSignalingMessage',
		value: function _sendSignalingMessage(message) {
			var data = JSON.stringify(message);
			this._signaling.sendMessage(data);
		}
	}, {
		key: '_onSignalingMessage',
		value: function _onSignalingMessage(message) {
			switch (message.func) {
				case "TurnInfo":
					this._onTurnInfo(message);
					break;
				case "RemoteOffer":
					this._onRemoteOffer(message);
					break;
				case "RemoteICECandidate":
					this._onRemoteICECandidate(message);
					break;
				default:
					break;
			}
		}

		///////////////////////////////////////////////////////////////
		/////////////// Remote peer messages handling     /////////////
		///////////////////////////////////////////////////////////////

	}, {
		key: '_onTurnInfo',
		value: function _onTurnInfo(turnInfos) {
			if (!Array.isArray(turnInfos.servers)) return;

			this._turnServers = turnInfos.servers.map(function (server) {
				return {
					urls: [server.url],
					username: server.username,
					credential: server.password
				};
			});
		}
	}, {
		key: '_onRemoteOffer',
		value: function _onRemoteOffer(offer) {
			var _this5 = this;

			this._peerConnection = new RTCPeerConnection({
				iceServers: this._turnServers,
				iceTransportPolicy: 'all'
			}, {
				mandatory: {
					DtlsSrtpKeyAgreement: true,
					OfferToReceiveAudio: true,
					OfferToReceiveVideo: true
				}
			});

			/*this.streams.forEach(function(s) { peer.addStream(s);});*/

			this._peerConnection.setRemoteDescription(new RTCSessionDescription({
				sdp: offer.sdp,
				type: offer.type
			}));

			this._peerConnection.createAnswer(function (localSDP) {
				return _this5._onLocalSDP(localSDP);
			}, function (err) {
				return console.error(err);
			}, { mandatory: { OfferToReceiveAudio: true, OfferToReceiveVideo: true } });

			this._peerConnection.oniceconnectionstatechange = function () {
				return _this5._onICEConnectionStateChange();
			};
			this._peerConnection.onicecandidate = function (candidate) {
				return _this5._onLocalICECandidate(candidate);
			};
			this._peerConnection.ondatachannel = function (channel) {
				return _this5._onDataChannel(channel);
			};
			this._peerConnection.onaddstream = function (stream) {
				return _this5._onAddStream(stream);
			};
		}
	}, {
		key: '_onRemoteICECandidate',
		value: function _onRemoteICECandidate(evt) {
			var candidate = new RTCIceCandidate(evt.candidate);
			this._peerConnection.addIceCandidate(candidate, function () {}, function (err) {
				return console.log(err);
			});
		}

		//////////////////////////////////////////////
		////// local peer connection events //////////
		//////////////////////////////////////////////


	}, {
		key: '_onLocalSDP',
		value: function _onLocalSDP(localSDP) {
			this._peerConnection.setLocalDescription(localSDP);

			this._sendSignalingMessage({
				func: "Answer",
				type: localSDP.type,
				sdp: localSDP.sdp
			});
		}
	}, {
		key: '_onLocalICECandidate',
		value: function _onLocalICECandidate(evt) {
			this._sendSignalingMessage({
				func: 'ICECandidate',
				candidate: evt.candidate
			});
		}
	}, {
		key: '_onICEConnectionStateChange',
		value: function _onICEConnectionStateChange() {
			console.log("ICE connection state : " + this._peerConnection.iceConnectionState);
			/*if(peer.iceConnectionState === 'connected'){
   	that.connected = true;
   	if(that.subscription) that.subscription.close();
   }
   else if(peer.iceConnectionState === 'disconnected' || peer.iceConnectionState === 'closed' || peer.iceConnectionState === 'failed'){
   	if(!that.closed) that._reconnect();
   }*/
		}
	}, {
		key: '_onDataChannel',
		value: function _onDataChannel(evt) {
			var channel = this.channels.find(function (c) {
				return c.name === evt.channel.label;
			});
			if (channel == null) {
				console.warn('no matching channel found for ' + evt.channel.label + '. Closing...');
				evt.channel.close();
				return;
			}

			channel.setDataChannel(evt.channel);
		}
	}, {
		key: '_onAddStream',
		value: function _onAddStream(stream) {
			/*that.connected = true;
   that.rtc._onAddStream(that.dnId, evt.stream);*/
		}
	}]);

	return RTCPeer;
}(EventEmitter);

module.exports = RTCPeer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./messageify-browser.js":52,"node-event-emitter":13}],52:[function(require,module,exports){
(function (Buffer){
'use strict';

require('buffer');

module.exports = function (socket) {
	if (socket._messageified) return socket;
	socket._messageified = true;

	//structures for building messages from unix socket bytestream
	var msgBufSize = 81920;
	var msgBuf = new Buffer(msgBufSize);
	var tmpBuf = new Buffer(msgBufSize);
	var bufPos = 0;

	//listen to socket events
	socket.on('data', function (data) {
		var len = data.length;
		var msgComplete = false;

		//Size up msgBuf if it is too small 
		if (bufPos + data.length > msgBufSize) {
			msgBufSize = msgBufSize + 2 * data.length;
			tmpBuf = new Buffer(msgBufSize);
			msgBuf.copy(tmpBuf);
			msgBuf = tmpBuf;
			tmpBuf = new Buffer(msgBufSize);
		}

		//copy new chunk into msgBuf
		data.copy(msgBuf, bufPos, 0, data.length);

		bufPos += len;

		do {
			msgComplete = false;
			//read message length
			var msgLength = msgBuf.readInt32LE(0);

			//if buffer contains more than msgLength, a message is ready to be sent to user
			if (bufPos > msgLength) {
				//extract message from buffer
				var newMessage = msgBuf.toString('utf8', 4, 4 + msgLength);

				//send message to user
				socket.emit('message', newMessage);

				//delete message from buffer
				msgBuf.copy(tmpBuf, 0, 4 + msgLength, msgBufSize - 4 - msgLength);
				tmpBuf.copy(msgBuf);
				bufPos -= 4 + msgLength;

				msgComplete = true;
			}
		} while (msgComplete && bufPos > 0); //read messages while there are complete messages and the buffer is not empty
	});

	socket.sendMessage = function (message) {
		//message size + 4 bytes for storing message length
		var buffer = new Buffer(message.length + 4);

		buffer.writeInt32LE(message.length, 0);
		buffer.write(message, 4);

		socket.write(buffer);
	};

	return socket;
};

}).call(this,require("buffer").Buffer)
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2aWNlcy9ydGMvbWVzc2FnZWlmeS1icm93c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLFFBQVEsUUFBUjs7QUFHQSxPQUFPLE9BQVAsR0FBaUIsVUFBVSxNQUFWLEVBQWtCO0FBQ2xDLEtBQUksT0FBTyxhQUFYLEVBQTBCLE9BQU8sTUFBUDtBQUMxQixRQUFPLGFBQVAsR0FBdUIsSUFBdkI7O0FBRUE7QUFDQSxLQUFJLGFBQWEsS0FBakI7QUFDQSxLQUFJLFNBQVMsSUFBSSxNQUFKLENBQVcsVUFBWCxDQUFiO0FBQ0EsS0FBSSxTQUFTLElBQUksTUFBSixDQUFXLFVBQVgsQ0FBYjtBQUNBLEtBQUksU0FBUyxDQUFiOztBQUVBO0FBQ0EsUUFBTyxFQUFQLENBQVUsTUFBVixFQUFrQixnQkFBUTtBQUN6QixNQUFJLE1BQU0sS0FBSyxNQUFmO0FBQ0EsTUFBSSxjQUFjLEtBQWxCOztBQUVBO0FBQ0EsTUFBRyxTQUFTLEtBQUssTUFBZCxHQUF1QixVQUExQixFQUFxQztBQUNwQyxnQkFBYSxhQUFhLElBQUUsS0FBSyxNQUFqQztBQUNBLFlBQVMsSUFBSSxNQUFKLENBQVcsVUFBWCxDQUFUO0FBQ0EsVUFBTyxJQUFQLENBQVksTUFBWjtBQUNBLFlBQVMsTUFBVDtBQUNBLFlBQVMsSUFBSSxNQUFKLENBQVcsVUFBWCxDQUFUO0FBQ0E7O0FBRUQ7QUFDQSxPQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLE1BQWxCLEVBQTBCLENBQTFCLEVBQTZCLEtBQUssTUFBbEM7O0FBRUEsWUFBVSxHQUFWOztBQUVBLEtBQUU7QUFDRCxpQkFBYyxLQUFkO0FBQ0E7QUFDQSxPQUFJLFlBQVksT0FBTyxXQUFQLENBQW1CLENBQW5CLENBQWhCOztBQUVBO0FBQ0EsT0FBRyxTQUFTLFNBQVosRUFBc0I7QUFDckI7QUFDQSxRQUFJLGFBQWEsT0FBTyxRQUFQLENBQWdCLE1BQWhCLEVBQXVCLENBQXZCLEVBQXlCLElBQUUsU0FBM0IsQ0FBakI7O0FBRUE7QUFDQSxXQUFPLElBQVAsQ0FBWSxTQUFaLEVBQXVCLFVBQXZCOztBQUVBO0FBQ0EsV0FBTyxJQUFQLENBQVksTUFBWixFQUFvQixDQUFwQixFQUF1QixJQUFFLFNBQXpCLEVBQW9DLGFBQVcsQ0FBWCxHQUFhLFNBQWpEO0FBQ0EsV0FBTyxJQUFQLENBQVksTUFBWjtBQUNBLGNBQVcsSUFBSSxTQUFmOztBQUVBLGtCQUFjLElBQWQ7QUFDQTtBQUNELEdBcEJELFFBb0JTLGVBQWUsU0FBUyxDQXBCakMsRUFsQnlCLENBc0NXO0FBQ3BDLEVBdkNEOztBQXlDQSxRQUFPLFdBQVAsR0FBcUIsVUFBVSxPQUFWLEVBQW1CO0FBQ3ZDO0FBQ0EsTUFBSSxTQUFTLElBQUksTUFBSixDQUFZLFFBQVEsTUFBUixHQUFlLENBQTNCLENBQWI7O0FBRUEsU0FBTyxZQUFQLENBQW9CLFFBQVEsTUFBNUIsRUFBb0MsQ0FBcEM7QUFDQSxTQUFPLEtBQVAsQ0FBYSxPQUFiLEVBQXNCLENBQXRCOztBQUVBLFNBQU8sS0FBUCxDQUFhLE1BQWI7QUFDQSxFQVJEOztBQVVBLFFBQU8sTUFBUDtBQUNBLENBL0REIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdidWZmZXInKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNvY2tldCkge1xuXHRpZiAoc29ja2V0Ll9tZXNzYWdlaWZpZWQpIHJldHVybiBzb2NrZXRcblx0c29ja2V0Ll9tZXNzYWdlaWZpZWQgPSB0cnVlXG5cblx0Ly9zdHJ1Y3R1cmVzIGZvciBidWlsZGluZyBtZXNzYWdlcyBmcm9tIHVuaXggc29ja2V0IGJ5dGVzdHJlYW1cblx0bGV0IG1zZ0J1ZlNpemUgPSA4MTkyMDtcblx0bGV0IG1zZ0J1ZiA9IG5ldyBCdWZmZXIobXNnQnVmU2l6ZSk7XG5cdGxldCB0bXBCdWYgPSBuZXcgQnVmZmVyKG1zZ0J1ZlNpemUpO1xuXHRsZXQgYnVmUG9zID0gMDtcblxuXHQvL2xpc3RlbiB0byBzb2NrZXQgZXZlbnRzXG5cdHNvY2tldC5vbignZGF0YScsIGRhdGEgPT4ge1xuXHRcdGxldCBsZW4gPSBkYXRhLmxlbmd0aFxuXHRcdGxldCBtc2dDb21wbGV0ZSA9IGZhbHNlXG5cblx0XHQvL1NpemUgdXAgbXNnQnVmIGlmIGl0IGlzIHRvbyBzbWFsbCBcblx0XHRpZihidWZQb3MgKyBkYXRhLmxlbmd0aCA+IG1zZ0J1ZlNpemUpe1xuXHRcdFx0bXNnQnVmU2l6ZSA9IG1zZ0J1ZlNpemUgKyAyKmRhdGEubGVuZ3RoXG5cdFx0XHR0bXBCdWYgPSBuZXcgQnVmZmVyKG1zZ0J1ZlNpemUpXG5cdFx0XHRtc2dCdWYuY29weSh0bXBCdWYpXG5cdFx0XHRtc2dCdWYgPSB0bXBCdWZcblx0XHRcdHRtcEJ1ZiA9IG5ldyBCdWZmZXIobXNnQnVmU2l6ZSlcblx0XHR9XG5cblx0XHQvL2NvcHkgbmV3IGNodW5rIGludG8gbXNnQnVmXG5cdFx0ZGF0YS5jb3B5KG1zZ0J1ZiwgYnVmUG9zLCAwLCBkYXRhLmxlbmd0aClcblxuXHRcdGJ1ZlBvcyArPSBsZW5cblxuXHRcdGRve1xuXHRcdFx0bXNnQ29tcGxldGUgPSBmYWxzZVxuXHRcdFx0Ly9yZWFkIG1lc3NhZ2UgbGVuZ3RoXG5cdFx0XHRsZXQgbXNnTGVuZ3RoID0gbXNnQnVmLnJlYWRJbnQzMkxFKDApXG5cblx0XHRcdC8vaWYgYnVmZmVyIGNvbnRhaW5zIG1vcmUgdGhhbiBtc2dMZW5ndGgsIGEgbWVzc2FnZSBpcyByZWFkeSB0byBiZSBzZW50IHRvIHVzZXJcblx0XHRcdGlmKGJ1ZlBvcyA+IG1zZ0xlbmd0aCl7XG5cdFx0XHRcdC8vZXh0cmFjdCBtZXNzYWdlIGZyb20gYnVmZmVyXG5cdFx0XHRcdGxldCBuZXdNZXNzYWdlID0gbXNnQnVmLnRvU3RyaW5nKCd1dGY4Jyw0LDQrbXNnTGVuZ3RoKVxuXG5cdFx0XHRcdC8vc2VuZCBtZXNzYWdlIHRvIHVzZXJcblx0XHRcdFx0c29ja2V0LmVtaXQoJ21lc3NhZ2UnLCBuZXdNZXNzYWdlKVxuXG5cdFx0XHRcdC8vZGVsZXRlIG1lc3NhZ2UgZnJvbSBidWZmZXJcblx0XHRcdFx0bXNnQnVmLmNvcHkodG1wQnVmLCAwLCA0K21zZ0xlbmd0aCwgbXNnQnVmU2l6ZS00LW1zZ0xlbmd0aClcblx0XHRcdFx0dG1wQnVmLmNvcHkobXNnQnVmKVxuXHRcdFx0XHRidWZQb3MgLT0gKDQgKyBtc2dMZW5ndGgpXG5cblx0XHRcdFx0bXNnQ29tcGxldGUgPSB0cnVlXG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAobXNnQ29tcGxldGUgJiYgYnVmUG9zID4gMCkgLy9yZWFkIG1lc3NhZ2VzIHdoaWxlIHRoZXJlIGFyZSBjb21wbGV0ZSBtZXNzYWdlcyBhbmQgdGhlIGJ1ZmZlciBpcyBub3QgZW1wdHlcblx0fSlcblxuXHRzb2NrZXQuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRcdC8vbWVzc2FnZSBzaXplICsgNCBieXRlcyBmb3Igc3RvcmluZyBtZXNzYWdlIGxlbmd0aFxuXHRcdGxldCBidWZmZXIgPSBuZXcgQnVmZmVyIChtZXNzYWdlLmxlbmd0aCs0KVxuXG5cdFx0YnVmZmVyLndyaXRlSW50MzJMRShtZXNzYWdlLmxlbmd0aCwgMClcblx0XHRidWZmZXIud3JpdGUobWVzc2FnZSwgNClcblx0XHRcblx0XHRzb2NrZXQud3JpdGUoYnVmZmVyKVxuXHR9XG5cblx0cmV0dXJuIHNvY2tldFxufVxuXG5cbiJdfQ==
},{"buffer":5}],53:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var EventEmitter = require('node-event-emitter');

require('webrtc-adapter');

var RTCController = require('./RTCController.js');

var RTC = function () {
	function RTC(selector) {
		_classCallCheck(this, RTC);

		this._selector = selector;
		this._rtcControllers = [];

		this._requestedChannels = [];
	}

	_createClass(RTC, [{
		key: 'use',
		value: function use(name_regex, type, ondatachannel_callback, onaddstream_callback) {
			this._requestedChannels.push({ regex: name_regex, type: type, cb: ondatachannel_callback, stream_cb: onaddstream_callback });
			return this;
		}
	}, {
		key: 'connect',
		value: function connect() {
			var _this = this;

			this._rtcControllers = this._selector.dbusObject('fr.partnering.RTC', '/fr/partnering/RTC').map(function (object) {
				return new RTCController(object, _this._requestedChannels);
			});

			this._rtcControllers.forEach(function (c) {
				return c.connect();
			});
		}
	}, {
		key: 'disconnect',
		value: function disconnect() {
			this._rtcControllers.forEach(function (c) {
				return c.disconnect();
			});
		}
	}]);

	return RTC;
}();

DiyaSelector.prototype.rtc = function () {
	return new RTC(this);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ0Yy5qcyJdLCJuYW1lcyI6WyJEaXlhU2VsZWN0b3IiLCJyZXF1aXJlIiwiRXZlbnRFbWl0dGVyIiwiUlRDQ29udHJvbGxlciIsIlJUQyIsInNlbGVjdG9yIiwiX3NlbGVjdG9yIiwiX3J0Y0NvbnRyb2xsZXJzIiwiX3JlcXVlc3RlZENoYW5uZWxzIiwibmFtZV9yZWdleCIsInR5cGUiLCJvbmRhdGFjaGFubmVsX2NhbGxiYWNrIiwib25hZGRzdHJlYW1fY2FsbGJhY2siLCJwdXNoIiwicmVnZXgiLCJjYiIsInN0cmVhbV9jYiIsImRidXNPYmplY3QiLCJtYXAiLCJvYmplY3QiLCJmb3JFYWNoIiwiYyIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwicHJvdG90eXBlIiwicnRjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxlQUFlQyxRQUFRLG9CQUFSLEVBQThCRCxZQUFuRDtBQUNBLElBQU1FLGVBQWVELFFBQVEsb0JBQVIsQ0FBckI7O0FBRUFBLFFBQVEsZ0JBQVI7O0FBRUEsSUFBTUUsZ0JBQWdCRixRQUFRLG9CQUFSLENBQXRCOztJQU1NRyxHO0FBQ0wsY0FBYUMsUUFBYixFQUF1QjtBQUFBOztBQUN0QixPQUFLQyxTQUFMLEdBQWlCRCxRQUFqQjtBQUNBLE9BQUtFLGVBQUwsR0FBdUIsRUFBdkI7O0FBRUEsT0FBS0Msa0JBQUwsR0FBMEIsRUFBMUI7QUFDQTs7OztzQkFFSUMsVSxFQUFZQyxJLEVBQU1DLHNCLEVBQXdCQyxvQixFQUFxQjtBQUNuRSxRQUFLSixrQkFBTCxDQUF3QkssSUFBeEIsQ0FBNkIsRUFBQ0MsT0FBT0wsVUFBUixFQUFvQkMsTUFBS0EsSUFBekIsRUFBK0JLLElBQUlKLHNCQUFuQyxFQUEyREssV0FBV0osb0JBQXRFLEVBQTdCO0FBQ0EsVUFBTyxJQUFQO0FBQ0E7Ozs0QkFFVTtBQUFBOztBQUNWLFFBQUtMLGVBQUwsR0FBdUIsS0FBS0QsU0FBTCxDQUFlVyxVQUFmLENBQTBCLG1CQUExQixFQUErQyxvQkFBL0MsRUFBcUVDLEdBQXJFLENBQXlFLGtCQUFVO0FBQ3pHLFdBQU8sSUFBSWYsYUFBSixDQUFrQmdCLE1BQWxCLEVBQTBCLE1BQUtYLGtCQUEvQixDQUFQO0FBQ0EsSUFGc0IsQ0FBdkI7O0FBSUEsUUFBS0QsZUFBTCxDQUFxQmEsT0FBckIsQ0FBOEI7QUFBQSxXQUFLQyxFQUFFQyxPQUFGLEVBQUw7QUFBQSxJQUE5QjtBQUNBOzs7K0JBRWE7QUFDYixRQUFLZixlQUFMLENBQXFCYSxPQUFyQixDQUE4QjtBQUFBLFdBQUtDLEVBQUVFLFVBQUYsRUFBTDtBQUFBLElBQTlCO0FBQ0E7Ozs7OztBQUlGdkIsYUFBYXdCLFNBQWIsQ0FBdUJDLEdBQXZCLEdBQTZCLFlBQVk7QUFDeEMsUUFBTyxJQUFJckIsR0FBSixDQUFRLElBQVIsQ0FBUDtBQUNBLENBRkQiLCJmaWxlIjoicnRjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRGl5YVNlbGVjdG9yID0gcmVxdWlyZSgnLi4vLi4vRGl5YVNlbGVjdG9yJykuRGl5YVNlbGVjdG9yXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlLWV2ZW50LWVtaXR0ZXInKVxuXG5yZXF1aXJlKCd3ZWJydGMtYWRhcHRlcicpXG5cbmNvbnN0IFJUQ0NvbnRyb2xsZXIgPSByZXF1aXJlKCcuL1JUQ0NvbnRyb2xsZXIuanMnKVxuXG5cblxuXG5cbmNsYXNzIFJUQyB7XG5cdGNvbnN0cnVjdG9yIChzZWxlY3Rvcikge1xuXHRcdHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3JcdFxuXHRcdHRoaXMuX3J0Y0NvbnRyb2xsZXJzID0gW11cblxuXHRcdHRoaXMuX3JlcXVlc3RlZENoYW5uZWxzID0gW11cblx0fVxuXG5cdHVzZSAobmFtZV9yZWdleCwgdHlwZSwgb25kYXRhY2hhbm5lbF9jYWxsYmFjaywgb25hZGRzdHJlYW1fY2FsbGJhY2spe1xuXHRcdHRoaXMuX3JlcXVlc3RlZENoYW5uZWxzLnB1c2goe3JlZ2V4OiBuYW1lX3JlZ2V4LCB0eXBlOnR5cGUsIGNiOiBvbmRhdGFjaGFubmVsX2NhbGxiYWNrLCBzdHJlYW1fY2I6IG9uYWRkc3RyZWFtX2NhbGxiYWNrfSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRjb25uZWN0ICgpIHtcblx0XHR0aGlzLl9ydGNDb250cm9sbGVycyA9IHRoaXMuX3NlbGVjdG9yLmRidXNPYmplY3QoJ2ZyLnBhcnRuZXJpbmcuUlRDJywgJy9mci9wYXJ0bmVyaW5nL1JUQycpLm1hcChvYmplY3QgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBSVENDb250cm9sbGVyKG9iamVjdCwgdGhpcy5fcmVxdWVzdGVkQ2hhbm5lbHMpXG5cdFx0fSlcblxuXHRcdHRoaXMuX3J0Y0NvbnRyb2xsZXJzLmZvckVhY2ggKGMgPT4gYy5jb25uZWN0KCkpXG5cdH1cblxuXHRkaXNjb25uZWN0ICgpIHtcblx0XHR0aGlzLl9ydGNDb250cm9sbGVycy5mb3JFYWNoIChjID0+IGMuZGlzY29ubmVjdCgpKVxuXHR9XG59XG5cblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5ydGMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgUlRDKHRoaXMpXG59XG4iXX0=
},{"../../DiyaSelector":41,"./RTCController.js":50,"node-event-emitter":13,"webrtc-adapter":30}],54:[function(require,module,exports){
'use strict';

var DiyaSelector = require('../../DiyaSelector.js').DiyaSelector;

DiyaSelector.prototype.shell = function (command, args, cols, rows, term, callback) {
	var _this = this;

	this.request({
		service: 'shell',
		func: 'RegisterProcess',
		data: {
			command: command,
			args: args,
			cols: cols,
			rows: rows,
			term: term
		}
	}, function (peerId, err, termId) {
		if (err) return callback(peerId, err, null);

		_this._connection._d1inst(peerId).openSocket('/var/run/diya/shell.sock', function (peerId, err, socket) {
			if (err) return callback(peerId, err, null);

			socket.write(termId + '\n');

			callback(peerId, null, {
				socket: socket,

				resize: function resize(cols, rows) {
					_this._connection._d1inst(peerId).request({
						service: 'shell',
						func: 'ResizeShell',
						data: {
							process_id: termId,
							cols: cols,
							rows: rows
						}
					}, function (peerId, err, data) {
						console.log('resized term ' + termId);
					});
				},

				close: function close() {
					socket.disconnect();
				}
			});
		});
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNoZWxsLmpzIl0sIm5hbWVzIjpbIkRpeWFTZWxlY3RvciIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJzaGVsbCIsImNvbW1hbmQiLCJhcmdzIiwiY29scyIsInJvd3MiLCJ0ZXJtIiwiY2FsbGJhY2siLCJyZXF1ZXN0Iiwic2VydmljZSIsImZ1bmMiLCJkYXRhIiwicGVlcklkIiwiZXJyIiwidGVybUlkIiwiX2Nvbm5lY3Rpb24iLCJfZDFpbnN0Iiwib3BlblNvY2tldCIsInNvY2tldCIsIndyaXRlIiwicmVzaXplIiwicHJvY2Vzc19pZCIsImNvbnNvbGUiLCJsb2ciLCJjbG9zZSIsImRpc2Nvbm5lY3QiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsZUFBZUMsUUFBUSx1QkFBUixFQUFpQ0QsWUFBdEQ7O0FBR0FBLGFBQWFFLFNBQWIsQ0FBdUJDLEtBQXZCLEdBQStCLFVBQVVDLE9BQVYsRUFBbUJDLElBQW5CLEVBQXlCQyxJQUF6QixFQUErQkMsSUFBL0IsRUFBcUNDLElBQXJDLEVBQTJDQyxRQUEzQyxFQUFxRDtBQUFBOztBQUNuRixNQUFLQyxPQUFMLENBQWE7QUFDWkMsV0FBUyxPQURHO0FBRVpDLFFBQU0saUJBRk07QUFHWkMsUUFBTTtBQUNMVCxtQkFESztBQUVMQyxhQUZLO0FBR0xDLGFBSEs7QUFJTEMsYUFKSztBQUtMQztBQUxLO0FBSE0sRUFBYixFQVdFLFVBQUNNLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxNQUFkLEVBQXlCO0FBQzFCLE1BQUlELEdBQUosRUFBUyxPQUFPTixTQUFTSyxNQUFULEVBQWlCQyxHQUFqQixFQUFzQixJQUF0QixDQUFQOztBQUVULFFBQUtFLFdBQUwsQ0FBaUJDLE9BQWpCLENBQXlCSixNQUF6QixFQUFpQ0ssVUFBakMsQ0FBNEMsMEJBQTVDLEVBQXdFLFVBQUNMLE1BQUQsRUFBU0MsR0FBVCxFQUFjSyxNQUFkLEVBQXlCO0FBQ2hHLE9BQUlMLEdBQUosRUFBUyxPQUFPTixTQUFVSyxNQUFWLEVBQWtCQyxHQUFsQixFQUF1QixJQUF2QixDQUFQOztBQUVUSyxVQUFPQyxLQUFQLENBQWdCTCxNQUFoQjs7QUFHQVAsWUFBVUssTUFBVixFQUFrQixJQUFsQixFQUF3QjtBQUN2Qk0sWUFBUUEsTUFEZTs7QUFHdkJFLFlBQVEsZ0JBQUNoQixJQUFELEVBQU9DLElBQVAsRUFBZ0I7QUFDdkIsV0FBS1UsV0FBTCxDQUFpQkMsT0FBakIsQ0FBeUJKLE1BQXpCLEVBQWlDSixPQUFqQyxDQUF5QztBQUN4Q0MsZUFBUyxPQUQrQjtBQUV4Q0MsWUFBTSxhQUZrQztBQUd4Q0MsWUFBTTtBQUNMVSxtQkFBWVAsTUFEUDtBQUVMVixhQUFNQSxJQUZEO0FBR0xDLGFBQU1BO0FBSEQ7QUFIa0MsTUFBekMsRUFRRyxVQUFDTyxNQUFELEVBQVNDLEdBQVQsRUFBY0YsSUFBZCxFQUF1QjtBQUN6QlcsY0FBUUMsR0FBUixtQkFBNEJULE1BQTVCO0FBQ0EsTUFWRDtBQVdBLEtBZnNCOztBQWlCdkJVLFdBQU8saUJBQU07QUFDWk4sWUFBT08sVUFBUDtBQUNBO0FBbkJzQixJQUF4QjtBQXFCQSxHQTNCRDtBQTRCQSxFQTFDRDtBQTJDQSxDQTVDRCIsImZpbGUiOiJTaGVsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERpeWFTZWxlY3RvciA9IHJlcXVpcmUoJy4uLy4uL0RpeWFTZWxlY3Rvci5qcycpLkRpeWFTZWxlY3RvclxuXG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuc2hlbGwgPSBmdW5jdGlvbiAoY29tbWFuZCwgYXJncywgY29scywgcm93cywgdGVybSwgY2FsbGJhY2spIHtcblx0dGhpcy5yZXF1ZXN0KHtcblx0XHRzZXJ2aWNlOiAnc2hlbGwnLFxuXHRcdGZ1bmM6ICdSZWdpc3RlclByb2Nlc3MnLFxuXHRcdGRhdGE6IHtcblx0XHRcdGNvbW1hbmQsXG5cdFx0XHRhcmdzLFxuXHRcdFx0Y29scyxcblx0XHRcdHJvd3MsXG5cdFx0XHR0ZXJtXG5cdFx0fVxuXHR9XG5cdCwgKHBlZXJJZCwgZXJyLCB0ZXJtSWQpID0+IHtcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2socGVlcklkLCBlcnIsIG51bGwpXG5cdFx0XG5cdFx0dGhpcy5fY29ubmVjdGlvbi5fZDFpbnN0KHBlZXJJZCkub3BlblNvY2tldCgnL3Zhci9ydW4vZGl5YS9zaGVsbC5zb2NrJywgKHBlZXJJZCwgZXJyLCBzb2NrZXQpID0+IHtcblx0XHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayAocGVlcklkLCBlcnIsIG51bGwpXG5cblx0XHRcdHNvY2tldC53cml0ZShgJHt0ZXJtSWR9XFxuYClcblxuXG5cdFx0XHRjYWxsYmFjayAocGVlcklkLCBudWxsLCB7XG5cdFx0XHRcdHNvY2tldDogc29ja2V0LFxuXHRcdFx0XHRcblx0XHRcdFx0cmVzaXplOiAoY29scywgcm93cykgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX2Nvbm5lY3Rpb24uX2QxaW5zdChwZWVySWQpLnJlcXVlc3Qoe1xuXHRcdFx0XHRcdFx0c2VydmljZTogJ3NoZWxsJyxcblx0XHRcdFx0XHRcdGZ1bmM6ICdSZXNpemVTaGVsbCcsXG5cdFx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRcdHByb2Nlc3NfaWQ6IHRlcm1JZCxcblx0XHRcdFx0XHRcdFx0Y29sczogY29scyxcblx0XHRcdFx0XHRcdFx0cm93czogcm93c1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIChwZWVySWQsIGVyciwgZGF0YSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYHJlc2l6ZWQgdGVybSAke3Rlcm1JZH1gKVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Y2xvc2U6ICgpID0+IHtcblx0XHRcdFx0XHRzb2NrZXQuZGlzY29ubmVjdCgpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSlcblx0fSlcbn1cbiJdfQ==
},{"../../DiyaSelector.js":41}],55:[function(require,module,exports){
'use strict';

/*
 * Copyright : Partnering 3.0 (2007-2016)
 * Author : Sylvain Mahé <sylvain.mahe@partnering.fr>
 *
 * This file is part of diya-sdk.
 *
 * diya-sdk is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * diya-sdk is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with diya-sdk.  If not, see <http://www.gnu.org/licenses/>.
 */

/* maya-client
 * Copyright (c) 2014, Partnering Robotics, All rights reserved.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; version
 *	3.0 of the License. This library is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

var isBrowser = !(typeof window === 'undefined');
if (!isBrowser) {
	var Promise = require('bluebird');
} else {
	var Promise = window.Promise;
}
var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var util = require('util');

var Message = require('../message');

//////////////////////////////////////////////////////////////
/////////////////// Logging utility methods //////////////////
//////////////////////////////////////////////////////////////

var DEBUG = true;
var Logger = {
	log: function log(message) {
		if (DEBUG) console.log(message);
	},

	error: function error(message) {
		if (DEBUG) console.error(message);
	}
};

/**
 *	callback : function called after model updated
 * */
function Status(selector) {
	this.selector = selector;
	this._coder = selector.encode();
	this.subscriptions = [];

	/** model of robot : available parts and status **/
	this.robotModel = [];
	this._robotModelInit = false;

	/*** structure of data config ***
 	 criteria :
 	   time: all 3 time criteria should not be defined at the same time. (range would be given up)
 	     beg: {[null],time} (null means most recent) // stored a UTC in ms (num)
 	     end: {[null], time} (null means most oldest) // stored as UTC in ms (num)
 	     range: {[null], time} (range of time(positive) ) // in s (num)
 	   robot: {ArrayOf ID or ["all"]}
 	   place: {ArrayOf ID or ["all"]}
 	 operator: {[last], max, moy, sd} -( maybe moy should be default
 	 ...
 		 parts : {[null] or ArrayOf PartsId} to get errors
 	 status : {[null] or ArrayOf StatusName} to get status
 		 sampling: {[null] or int}
 */
	this.dataConfig = {
		criteria: {
			time: {
				beg: null,
				end: null,
				range: null // in s
			},
			robot: null
		},
		operator: 'last',
		parts: null,
		status: null
	};

	return this;
};
/**
 * Get robotModel :
 * {
 *  parts: {
 *		"partXX": {
 * 			 errorsDescr: { encountered errors indexed by errorIds>0 }
 *				> Config of errors :
 *					critLevel: FLOAT, // could be int...
 * 					msg: STRING,
 *					stopServiceId: STRING,
 *					runScript: Sequelize.STRING,
 *					missionMask: Sequelize.INTEGER,
 *					runLevel: Sequelize.INTEGER
 *			error:[FLOAT, ...], // could be int...
 *			time:[FLOAT, ...],
 *			robot:[FLOAT, ...],
 *			/// place:[FLOAT, ...], not implemented yet
 *		},
 *	 	... ("PartYY")
 *  },
 *  status: {
 *		"statusXX": {
 *				data:[FLOAT, ...], // could be int...
 *				time:[FLOAT, ...],
 *				robot:[FLOAT, ...],
 *				/// place:[FLOAT, ...], not implemented yet
 *				range: [FLOAT, FLOAT],
 *				label: string
 *			},
 *	 	... ("StatusYY")
 *  }
 * }
 */
Status.prototype.getRobotModel = function () {
	return this.robotModel;
};

/**
 * @param {Object} dataConfig config for data request
 * if dataConfig is define : set and return this
 *	 @return {Status} this
 * else
 *	 @return {Object} current dataConfig
 */
Status.prototype.DataConfig = function (newDataConfig) {
	if (newDataConfig) {
		this.dataConfig = newDataConfig;
		return this;
	} else return this.dataConfig;
};
/**
 * TO BE IMPLEMENTED : operator management in DN-Status
 * @param  {String}	 newOperator : {[last], max, moy, sd}
 * @return {Status} this - chainable
 * Set operator criteria.
 * Depends on newOperator
 *	@param {String} newOperator
 *	@return this
 * Get operator criteria.
 *	@return {String} operator
 */
Status.prototype.DataOperator = function (newOperator) {
	if (newOperator) {
		this.dataConfig.operator = newOperator;
		return this;
	} else return this.dataConfig.operator;
};
/**
 * Depends on numSamples
 * @param {int} number of samples in dataModel
 * if defined : set number of samples
 *	@return {Status} this
 * else
 *	@return {int} number of samples
 **/
Status.prototype.DataSampling = function (numSamples) {
	if (numSamples) {
		this.dataConfig.sampling = numSamples;
		return this;
	} else return this.dataConfig.sampling;
};
/**
 * Set or get data time criteria beg and end.
 * If param defined
 *	@param {Date} newTimeBeg // may be null
 *	@param {Date} newTimeEnd // may be null
 *	@return {Status} this
 * If no param defined:
 *	@return {Object} Time object: fields beg and end.
 */
Status.prototype.DataTime = function (newTimeBeg, newTimeEnd, newRange) {
	if (newTimeBeg || newTimeEnd || newRange) {
		this.dataConfig.criteria.time.beg = newTimeBeg.getTime();
		this.dataConfig.criteria.time.end = newTimeEnd.getTime();
		this.dataConfig.criteria.time.range = newRange;
		return this;
	} else return {
		beg: new Date(this.dataConfig.criteria.time.beg),
		end: new Date(this.dataConfig.criteria.time.end),
		range: new Date(this.dataConfig.criteria.time.range)
	};
};
/**
 * Depends on robotIds
 * Set robot criteria.
 *	@param {Array[Int]} robotIds list of robot Ids
 * Get robot criteria.
 *	@return {Array[Int]} list of robot Ids
 */
Status.prototype.DataRobotIds = function (robotIds) {
	if (robotIds) {
		this.dataConfig.criteria.robot = robotIds;
		return this;
	} else return this.dataConfig.criteria.robot;
};
/**
 * Depends on placeIds // not relevant?, not implemented yet
 * Set place criteria.
 *	@param {Array[Int]} placeIds list of place Ids
 * Get place criteria.
 *	@return {Array[Int]} list of place Ids
 */
Status.prototype.DataPlaceIds = function (placeIds) {
	if (placeIds) {
		this.dataConfig.criteria.placeId = placeIds;
		return this;
	} else return this.dataConfig.criteria.place;
};
/**
 * Get data by sensor name.
 *	@param {Array[String]} sensorName list of sensors
 */
Status.prototype.getDataByName = function (sensorNames) {
	var data = [];
	for (var n in sensorNames) {
		data.push(this.dataModel[sensorNames[n]]);
	}
	return data;
};

/**
 * Subscribe to error/status updates
 */
Status.prototype.watch = function (robotNames, callback) {
	var _this = this;

	this.selector.setMaxListeners(0);
	this.selector._connection.setMaxListeners(0);
	var sendData = [];
	var robotIds = [];
	return Promise.try(function (_) {
		var req = _this.selector.request({
			service: 'status',
			func: 'GetManagedObjects',
			obj: {
				interface: 'org.freedesktop.DBus.ObjectManager'
			}
		}, function (peerId, err, objData) {
			// get all object paths, interfaces and properties children of Status
			var robotName = '';
			var robotId = 1;

			var _loop = function _loop(objectPath) {
				if (objData[objectPath]['fr.partnering.Status.Robot'] != null) {
					robotName = objData[objectPath]['fr.partnering.Status.Robot'].RobotName;
					robotId = objData[objectPath]['fr.partnering.Status.Robot'].RobotId;
					robotIds[robotName] = robotId;
					_this.getAllStatuses(robotName, function (model) {
						callback(model);
					});
				}
				if (objData[objectPath]['fr.partnering.Status.Part'] != null) {
					var subs = _this.selector.subscribe({ // subscribes to status changes for all parts
						service: 'status',
						func: 'CurrentStatusChanged',
						obj: {
							interface: 'fr.partnering.Status.Part',
							path: objectPath
						},
						data: robotNames
					}, function (peerId, err, data) {
						if (err != null) {
							Logger.error("StatusSubscribe:" + err);
						} else {
							robotName = objectPath.split("/")[5];
							robotId = robotIds[robotName];
							sendData[0] = data;
							_this._getRobotModelFromRecv2(sendData, robotId, robotName);
							if (typeof callback === 'function') callback(_this.robotModel);
						}
					});
					_this.subscriptions.push(subs);
				}
			};

			for (var objectPath in objData) {
				_loop(objectPath);
			}
		});
	}).catch(function (err) {
		Logger.error(err);
	});
};

/**
 * Close all subscriptions
 */
Status.prototype.closeSubscriptions = function () {
	for (var i in this.subscriptions) {
		this.subscriptions[i].close();
	}
	this.subscriptions = [];
	this.robotModel = [];
};

/**
 * Get data given dataConfig.
 * @param {func} callback : called after update
 * TODO USE PROMISE
 */
Status.prototype.getData = function (callback, dataConfig) {
	var _this2 = this;

	var dataModel = {};
	return Promise.try(function (_) {
		if (dataConfig != null) _this2.DataConfig(dataConfig);
		// console.log("Request: "+JSON.stringify(dataConfig));
		_this2.selector.request({
			service: "status",
			func: "DataRequest",
			data: {
				type: "splReq",
				dataConfig: _this2.dataConfig
			}
		}, function (dnId, err, data) {
			if (err != null) {
				Logger.error("[" + _this2.dataConfig.sensors + "] Recv err: " + JSON.stringify(err));
				return;
			}
			if (data.header.error != null) {
				// TODO : check/use err status and adapt behavior accordingly
				Logger.error("UpdateData:\n" + JSON.stringify(data.header.reqConfig));
				Logger.error("Data request failed (" + data.header.error.st + "): " + data.header.error.msg);
				return;
			}
			//Logger.log(JSON.stringify(this.dataModel));
			dataModel = _this2._getDataModelFromRecv(data);

			Logger.log(_this2.getDataModel());
			callback = callback.bind(_this2); // bind callback with Status
			callback(dataModel); // callback func
		});
	}).catch(function (err) {
		Logger.error(err);
	});
};

/**
 * Update internal robot model with received data (version 2)
 * @param  {Object} data data received from DiyaNode by websocket
 * @return {[type]}		[description]
 */
Status.prototype._getRobotModelFromRecv2 = function (data, robotId, robotName) {
	var _this3 = this;

	if (this.robotModel == null) this.robotModel = [];

	if (this.robotModel[robotId] != null) this.robotModel[robotId].parts = {}; // reset parts

	if (this.robotModel[robotId] == null) this.robotModel[robotId] = {};

	this.robotModel[robotId] = {
		robot: {
			name: robotName
		}
	};

	/** extract parts info **/
	this.robotModel[robotId].parts = {};
	var rParts = this.robotModel[robotId].parts;

	data.forEach(function (d) {
		var partId = d[0];
		var category = d[1];
		var partName = d[2];
		var label = d[3];
		var time = d[4];
		var code = d[5];
		var codeRef = d[6];
		var msg = d[7];
		var critLevel = d[8];
		var description = d[9];

		if (rParts[partId] == null) {
			rParts[partId] = {};
		}
		/* update part category */
		rParts[partId].category = category;
		/* update part name */
		rParts[partId].name = partName.toLowerCase();
		/* update part label */
		rParts[partId].label = label;

		/* update error */
		/** update errorList **/
		if (rParts[partId].errorList == null) rParts[partId].errorList = {};

		if (rParts[partId].errorList[codeRef] == null) rParts[partId].errorList[codeRef] = {
			msg: msg,
			critLevel: critLevel,
			description: description
		};
		var evts_tmp = {
			time: _this3._coder.from(time),
			code: _this3._coder.from(code),
			codeRef: _this3._coder.from(codeRef)
		};
		/** if received list of events **/
		if (Array.isArray(evts_tmp.code) || Array.isArray(evts_tmp.time) || Array.isArray(evts_tmp.codeRef)) {
			if (evts_tmp.code.length === evts_tmp.codeRef.length && evts_tmp.code.length === evts_tmp.time.length) {
				/** build list of events **/
				rParts[partId].evts = [];
				for (var i = 0; i < evts_tmp.code.length; i++) {
					rParts[partId].evts.push({
						time: evts_tmp.time[i],
						code: evts_tmp.code[i],
						codeRef: evts_tmp.codeRef[i]
					});
				}
			} else Logger.error("Status:Inconsistant lengths of buffers (time/code/codeRef)");
		} else {
			/** just in case, to provide backward compatibility **/
			/** set received event **/
			rParts[partId].evts = [{
				time: evts_tmp.time,
				code: evts_tmp.code,
				codeRef: evts_tmp.codeRef
			}];
		}
	});
};

/** create Status service **/
DiyaSelector.prototype.Status = function () {
	return new Status(this);
};

/**
 * Set on status
 * @param robotName to find status to modify
 * @param partName 	to find status to modify
 * @param code		newCode
 * @param source		source
 * @param callback		return callback (<bool>success)
 */
DiyaSelector.prototype.setStatus = function (robotName, partName, code, source, callback) {
	var _this4 = this;

	return Promise.try(function (_) {
		var objectPath = "/fr/partnering/Status/Robots/" + robotName + "/Parts/" + partName;
		_this4.request({
			service: "status",
			func: "SetPart",
			obj: {
				interface: 'fr.partnering.Status.Part',
				path: objectPath
			},
			data: {
				//robotName: robotName,
				code: code,
				//partName: partName,
				source: source | 1
			}
		}, function (peerId, err, data) {
			if (err != null) {
				if (typeof callback === 'function') callback(false);
			} else {
				if (typeof callback === 'function') callback(true);
			}
		});
	}).catch(function (err) {
		Logger.error(err);
	});
};

/**
 * Get one status
 * @param robotName to get status
 * @param partName 	to get status
 * @param callback		return callback(-1 if not found/data otherwise)
 * @param _full 	more data about status
 */
Status.prototype.getStatus = function (robotName, partName, callback /*, _full*/) {
	var _this5 = this;

	var sendData = [];
	return Promise.try(function (_) {
		var req = _this5.selector.request({
			service: 'status',
			func: 'GetManagedObjects',
			obj: {
				interface: 'org.freedesktop.DBus.ObjectManager'
			}
		}, function (peerId, err, objData) {

			var objectPathRobot = "/fr/partnering/Status/Robots/" + robotName;
			var objectPathPart = "/fr/partnering/Status/Robots/" + robotName + "/Parts/" + partName;
			var robotId = objData[objectPathRobot]['fr.partnering.Status.Robot'].RobotId;
			_this5.selector.request({
				service: "status",
				func: "GetPart",
				obj: {
					interface: 'fr.partnering.Status.Part',
					path: objectPathPart
				}
			}, function (peerId, err, data) {
				sendData.push(data);
				_this5._getRobotModelFromRecv2(sendData, robotId, robotName);
				if (err != null) {
					if (typeof callback === 'function') callback(-1);
				} else {
					if (typeof callback === 'function') callback(_this5.robotModel);
				}
			});
		});
	}).catch(function (err) {
		Logger.error(err);
	});
};

/**
 * Get all status
 * @param robotName to get status
 * @param partName 	to get status
 * @param callback		return callback(-1 if not found/data otherwise)
 * @param _full 	more data about status
 */
Status.prototype.getAllStatuses = function (robotName, callback) {
	var _this6 = this;

	var req = this.selector.request({
		service: 'status',
		func: 'GetManagedObjects',
		obj: {
			interface: 'org.freedesktop.DBus.ObjectManager'
		}
	}, function (peerId, err, objData) {
		// get all object paths, interfaces and properties children of Status
		var objectPath = "/fr/partnering/Status/Robots/" + robotName;
		if (objData[objectPath] != null) {
			if (objData[objectPath]['fr.partnering.Status.Robot'] != null) {
				var robotId = objData[objectPath]['fr.partnering.Status.Robot'].RobotId;
				//var full = _full || false;
				_this6.selector.request({
					service: "status",
					func: "GetAllParts",
					obj: {
						interface: 'fr.partnering.Status.Robot',
						path: objectPath
					}
				}, function (peerId, err, data) {
					if (err != null) {
						if (typeof callback === 'function') callback(-1);
						throw new Error(err);
					} else {
						_this6._getRobotModelFromRecv2(data, robotId, robotName);
						if (typeof callback === 'function') callback(_this6.robotModel);
					}
				});
			} else {
				Logger.error("Interface fr.partnering.Status.Robot doesn't exist!");
			}
		} else {
			Logger.error("ObjectPath " + objectPath + " doesn't exist!");
		}
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../DiyaSelector":41,"../message":47,"bluebird":undefined,"util":29}],56:[function(require,module,exports){
'use strict';

/* maya-client
 * Copyright (c) 2014, Partnering Robotics, All rights reserved.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; version
 *	3.0 of the License. This library is distributed in the hope
 * that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

/**
 * Management of channel encoding
 * - base64 coding
 * - none
 * Data format :
 *		t: {'b64','none'}
 *		b: <if b64> {4,8}
 *		d: encoded data {buffer or Array}
 *		s: size
 */

var DiyaSelector = require('../../DiyaSelector').DiyaSelector;
var base64 = require('base-64');

/**
 * Default : no encoding
 * */
function NoCoding() {
	return this;
};

/**
*
*/
NoCoding.prototype.from = function (data) {
	if (data.d === 'number' || Array.isArray(data.d)) return data.d;else return data;
};

/**
*/
NoCoding.prototype.to = function (array) {
	return {
		t: 'no', /* type */
		d: array, /* data */
		s: array.length
	};
};

/**
 * Management of base64 encoding
 * Effective for string based channels (like JSON based WS)
 * */
function Base64Coding() {
	return this;
};

////////////////////////////////////////////////////////////////
/////////////////    Utility functions    //////////////////////
////////////////////////////////////////////////////////////////

/*\
 |*|
 |*|  utilitaires de manipulations de chaînes base 64 / binaires / UTF-8
 |*|
 |*|  https://developer.mozilla.org/fr/docs/Décoder_encoder_en_base64
 |*|
 \*/
/** Decoder un tableau d'octets depuis une chaîne en base64 */
var b64ToUint6 = function b64ToUint6(nChr) {
	return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
};

/**
 * Decode base64 string to UInt8Array
 * @param  {String} sBase64		base64 coded string
 * @param  {int} nBlocksSize size of blocks of bytes to be read. Output byteArray length will be a multiple of this value.
 * @return {Uint8Array}				tab of decoded bytes
 */
var base64DecToArr = function base64DecToArr(sBase64, nBlocksSize) {
	var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
	    nInLen = sB64Enc.length,
	    nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
	    buffer = new ArrayBuffer(nOutLen),
	    taBytes = new Uint8Array(buffer);

	for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
		nMod4 = nInIdx & 3; /* n mod 4 */
		nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
		if (nMod4 === 3 || nInLen - nInIdx === 1) {
			for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
				taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
			}
			nUint24 = 0;
		}
	}
	// console.log("u8int : "+JSON.stringify(taBytes));
	return buffer;
};

////////////////////////////////////////////////////////////////
/////////////////   Interface functions   //////////////////////
////////////////////////////////////////////////////////////////


/**
* Convert buffer coded in base64 and containing numbers coded by
* byteCoding bytes into array
* @param buffer in base64
* @param byteCoding number of bytes for each number (4 or 8)
* @return array of float (32 or 64). null if could not convert.
*/
Base64Coding.prototype.from = function (data) {
	var byteCoding = data.b;

	/* check byte coding */
	if (byteCoding !== 4 && byteCoding !== 8) {
		return null;
	}

	/* decode data to array of byte */
	var buf = base64DecToArr(data.d, data.b);
	/* parse data to float array */
	var fArray = null;
	switch (data.b) {
		case 4:
			fArray = new Float32Array(buf);
			break;
		case 8:
			fArray = new Float64Array(buf);
			break;
		default:
			console.log("Unexpected byteCoding! Should not happen!!");
			return null;
	}
	/* parse fArray into normal array */
	var tab = [].slice.call(fArray);

	if (data.s !== tab.length) {
		console.log("Size mismatch when decoding !");
		return null;
	}
	return tab;
};

/**
* Convert array containing numbers coded by byteCoding bytes into buffer coded in base64
* @param 	{Array<Float>} 	array of float (32 or 64 bits)
* @param 	{integer} 	byteCoding number of bytes for each float (4 or 8)
* @return  	{String} 	buffer in base64. null if could not convert.
*/
Base64Coding.prototype.to = function (array, byteCoding) {
	/* check byte coding */
	if (byteCoding !== 4 && byteCoding !== 8) {
		return null;
	}

	/*** case ArrayBuffer ***/
	var buffer = new ArrayBuffer(array.length * byteCoding);
	switch (byteCoding) {
		case 4:
			var buf32 = new Float32Array(buffer);
			buf32.set(array);
			break;
		case 8:
			var buf64 = new Float64Array(buffer);
			buf64.set(array);
			break;
	}
	var buffChar = new Uint8Array(buffer);
	var buffCharCoded = new Array(buffChar.length);
	for (var n = 0; n < buffChar.length; n++) {
		buffCharCoded[n] = String.fromCharCode(buffChar[n]);
	}
	var str = new String(buffCharCoded.join(''));
	var b64Buff = base64.encode(str);
	return {
		t: 'b64', /* type */
		b: byteCoding, /* byteCoding */
		d: b64Buff, /* data */
		s: array.length /* size */
	};
};

/**
 * Management of comm encoding
 * */
function CodingHandler() {
	this.b64 = new Base64Coding();
	this.none = new NoCoding();

	return this;
};

CodingHandler.prototype.from = function (data) {
	if (typeof data == 'undefined' || data == null) return null;
	switch (data.t) {
		case 'b64':
			return this.b64.from(data);
		default:
			return this.none.from(data);
	}
};

CodingHandler.prototype.to = function (array, type, byteCoding) {
	if (typeof array === 'number') {
		array = [array];
	}
	if (!Array.isArray(array)) {
		console.log("CodingHandler.to only accepts array !");
		return null;
	}

	switch (type) {
		case 'b64':
			return this.b64.to(array, byteCoding);
		case 'no':
		default:
			return this.none.to(array);
	}
};

/** Add base64 handler to DiyaSelector **/
DiyaSelector.prototype.encode = function () {
	return new CodingHandler();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../DiyaSelector":41,"base-64":1}]},{},[44])(44)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvYmFzZS02NC9iYXNlNjQuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9saWIvYjY0LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvaXMtYXJyYXkvaW5kZXguanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvbm9kZS1ldmVudC1lbWl0dGVyL2luZGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2luZGV4LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2Nocm9tZS9jaHJvbWVfc2hpbS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2dldHVzZXJtZWRpYS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9lZGdlX3NkcC5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9lZGdlX3NoaW0uanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZmlyZWZveF9zaGltLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9maXJlZm94L2dldHVzZXJtZWRpYS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvc2FmYXJpL3NhZmFyaV9zaGltLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy91dGlscy5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9EQnVzT2JqZWN0LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL0RpeWFOb2RlLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL0RpeWFTZWxlY3Rvci5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9EaXlhU29ja2V0LmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL1VOSVhTb2NrZXRIYW5kbGVyLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL2RpeWEtc2RrLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL3NlcnZpY2VzL2llcS9pZXEuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9zcmMvc2VydmljZXMvbWVzaE5ldHdvcmsvTWVzaE5ldHdvcmsuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9zcmMvc2VydmljZXMvbWVzc2FnZS5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9zZXJ2aWNlcy9wZWVyQXV0aC9QZWVyQXV0aC5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9zZXJ2aWNlcy9ydGMvUlRDQ2hhbm5lbC5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9zZXJ2aWNlcy9ydGMvUlRDQ29udHJvbGxlci5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9zZXJ2aWNlcy9ydGMvUlRDUGVlci5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy9zZXJ2aWNlcy9ydGMvbWVzc2FnZWlmeS1icm93c2VyLmpzIiwiL2hvbWUvc3lsdm1haGUvd29ya3NwYWNlL0FwcHMvZGl5YS1zZGsvc3JjL3NlcnZpY2VzL3J0Yy9ydGMuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9zcmMvc2VydmljZXMvc2hlbGwvU2hlbGwuanMiLCIvaG9tZS9zeWx2bWFoZS93b3Jrc3BhY2UvQXBwcy9kaXlhLXNkay9zcmMvc2VydmljZXMvc3RhdHVzL3N0YXR1cy5qcyIsIi9ob21lL3N5bHZtYWhlL3dvcmtzcGFjZS9BcHBzL2RpeWEtc2RrL3NyYy91dGlscy9lbmNvZGluZy9lbmNvZGluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWhDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaGVBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDN05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25QQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2x2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdk1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25RQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbi8qISBodHRwOi8vbXRocy5iZS9iYXNlNjQgdjAuMS4wIGJ5IEBtYXRoaWFzIHwgTUlUIGxpY2Vuc2UgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlcyBgZXhwb3J0c2AuXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuXG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHRtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAsIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSwgYW5kIHVzZVxuXHQvLyBpdCBhcyBgcm9vdGAuXG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIEludmFsaWRDaGFyYWN0ZXJFcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblx0XHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHR9O1xuXHRJbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yO1xuXHRJbnZhbGlkQ2hhcmFjdGVyRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuXHR2YXIgZXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG5cdFx0Ly8gTm90ZTogdGhlIGVycm9yIG1lc3NhZ2VzIHVzZWQgdGhyb3VnaG91dCB0aGlzIGZpbGUgbWF0Y2ggdGhvc2UgdXNlZCBieVxuXHRcdC8vIHRoZSBuYXRpdmUgYGF0b2JgL2BidG9hYCBpbXBsZW1lbnRhdGlvbiBpbiBDaHJvbWl1bS5cblx0XHR0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKG1lc3NhZ2UpO1xuXHR9O1xuXG5cdHZhciBUQUJMRSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblx0Ly8gaHR0cDovL3doYXR3Zy5vcmcvaHRtbC9jb21tb24tbWljcm9zeW50YXhlcy5odG1sI3NwYWNlLWNoYXJhY3RlclxuXHR2YXIgUkVHRVhfU1BBQ0VfQ0hBUkFDVEVSUyA9IC9bXFx0XFxuXFxmXFxyIF0vZztcblxuXHQvLyBgZGVjb2RlYCBpcyBkZXNpZ25lZCB0byBiZSBmdWxseSBjb21wYXRpYmxlIHdpdGggYGF0b2JgIGFzIGRlc2NyaWJlZCBpbiB0aGVcblx0Ly8gSFRNTCBTdGFuZGFyZC4gaHR0cDovL3doYXR3Zy5vcmcvaHRtbC93ZWJhcHBhcGlzLmh0bWwjZG9tLXdpbmRvd2Jhc2U2NC1hdG9iXG5cdC8vIFRoZSBvcHRpbWl6ZWQgYmFzZTY0LWRlY29kaW5nIGFsZ29yaXRobSB1c2VkIGlzIGJhc2VkIG9uIEBhdGvigJlzIGV4Y2VsbGVudFxuXHQvLyBpbXBsZW1lbnRhdGlvbi4gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYXRrLzEwMjAzOTZcblx0dmFyIGRlY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0aW5wdXQgPSBTdHJpbmcoaW5wdXQpXG5cdFx0XHQucmVwbGFjZShSRUdFWF9TUEFDRV9DSEFSQUNURVJTLCAnJyk7XG5cdFx0dmFyIGxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblx0XHRpZiAobGVuZ3RoICUgNCA9PSAwKSB7XG5cdFx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UoLz09PyQvLCAnJyk7XG5cdFx0XHRsZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cdFx0fVxuXHRcdGlmIChcblx0XHRcdGxlbmd0aCAlIDQgPT0gMSB8fFxuXHRcdFx0Ly8gaHR0cDovL3doYXR3Zy5vcmcvQyNhbHBoYW51bWVyaWMtYXNjaWktY2hhcmFjdGVyc1xuXHRcdFx0L1teK2EtekEtWjAtOS9dLy50ZXN0KGlucHV0KVxuXHRcdCkge1xuXHRcdFx0ZXJyb3IoXG5cdFx0XHRcdCdJbnZhbGlkIGNoYXJhY3RlcjogdGhlIHN0cmluZyB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC4nXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR2YXIgYml0Q291bnRlciA9IDA7XG5cdFx0dmFyIGJpdFN0b3JhZ2U7XG5cdFx0dmFyIGJ1ZmZlcjtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0dmFyIHBvc2l0aW9uID0gLTE7XG5cdFx0d2hpbGUgKCsrcG9zaXRpb24gPCBsZW5ndGgpIHtcblx0XHRcdGJ1ZmZlciA9IFRBQkxFLmluZGV4T2YoaW5wdXQuY2hhckF0KHBvc2l0aW9uKSk7XG5cdFx0XHRiaXRTdG9yYWdlID0gYml0Q291bnRlciAlIDQgPyBiaXRTdG9yYWdlICogNjQgKyBidWZmZXIgOiBidWZmZXI7XG5cdFx0XHQvLyBVbmxlc3MgdGhpcyBpcyB0aGUgZmlyc3Qgb2YgYSBncm91cCBvZiA0IGNoYXJhY3RlcnPigKZcblx0XHRcdGlmIChiaXRDb3VudGVyKysgJSA0KSB7XG5cdFx0XHRcdC8vIOKApmNvbnZlcnQgdGhlIGZpcnN0IDggYml0cyB0byBhIHNpbmdsZSBBU0NJSSBjaGFyYWN0ZXIuXG5cdFx0XHRcdG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuXHRcdFx0XHRcdDB4RkYgJiBiaXRTdG9yYWdlID4+ICgtMiAqIGJpdENvdW50ZXIgJiA2KVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9O1xuXG5cdC8vIGBlbmNvZGVgIGlzIGRlc2lnbmVkIHRvIGJlIGZ1bGx5IGNvbXBhdGlibGUgd2l0aCBgYnRvYWAgYXMgZGVzY3JpYmVkIGluIHRoZVxuXHQvLyBIVE1MIFN0YW5kYXJkOiBodHRwOi8vd2hhdHdnLm9yZy9odG1sL3dlYmFwcGFwaXMuaHRtbCNkb20td2luZG93YmFzZTY0LWJ0b2Fcblx0dmFyIGVuY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0aW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuXHRcdGlmICgvW15cXDAtXFx4RkZdLy50ZXN0KGlucHV0KSkge1xuXHRcdFx0Ly8gTm90ZTogbm8gbmVlZCB0byBzcGVjaWFsLWNhc2UgYXN0cmFsIHN5bWJvbHMgaGVyZSwgYXMgc3Vycm9nYXRlcyBhcmVcblx0XHRcdC8vIG1hdGNoZWQsIGFuZCB0aGUgaW5wdXQgaXMgc3VwcG9zZWQgdG8gb25seSBjb250YWluIEFTQ0lJIGFueXdheS5cblx0XHRcdGVycm9yKFxuXHRcdFx0XHQnVGhlIHN0cmluZyB0byBiZSBlbmNvZGVkIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3V0c2lkZSBvZiB0aGUgJyArXG5cdFx0XHRcdCdMYXRpbjEgcmFuZ2UuJ1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0dmFyIHBhZGRpbmcgPSBpbnB1dC5sZW5ndGggJSAzO1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHR2YXIgcG9zaXRpb24gPSAtMTtcblx0XHR2YXIgYTtcblx0XHR2YXIgYjtcblx0XHR2YXIgYztcblx0XHR2YXIgZDtcblx0XHR2YXIgYnVmZmVyO1xuXHRcdC8vIE1ha2Ugc3VyZSBhbnkgcGFkZGluZyBpcyBoYW5kbGVkIG91dHNpZGUgb2YgdGhlIGxvb3AuXG5cdFx0dmFyIGxlbmd0aCA9IGlucHV0Lmxlbmd0aCAtIHBhZGRpbmc7XG5cblx0XHR3aGlsZSAoKytwb3NpdGlvbiA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gUmVhZCB0aHJlZSBieXRlcywgaS5lLiAyNCBiaXRzLlxuXHRcdFx0YSA9IGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIDw8IDE2O1xuXHRcdFx0YiA9IGlucHV0LmNoYXJDb2RlQXQoKytwb3NpdGlvbikgPDwgODtcblx0XHRcdGMgPSBpbnB1dC5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuXHRcdFx0YnVmZmVyID0gYSArIGIgKyBjO1xuXHRcdFx0Ly8gVHVybiB0aGUgMjQgYml0cyBpbnRvIGZvdXIgY2h1bmtzIG9mIDYgYml0cyBlYWNoLCBhbmQgYXBwZW5kIHRoZVxuXHRcdFx0Ly8gbWF0Y2hpbmcgY2hhcmFjdGVyIGZvciBlYWNoIG9mIHRoZW0gdG8gdGhlIG91dHB1dC5cblx0XHRcdG91dHB1dCArPSAoXG5cdFx0XHRcdFRBQkxFLmNoYXJBdChidWZmZXIgPj4gMTggJiAweDNGKSArXG5cdFx0XHRcdFRBQkxFLmNoYXJBdChidWZmZXIgPj4gMTIgJiAweDNGKSArXG5cdFx0XHRcdFRBQkxFLmNoYXJBdChidWZmZXIgPj4gNiAmIDB4M0YpICtcblx0XHRcdFx0VEFCTEUuY2hhckF0KGJ1ZmZlciAmIDB4M0YpXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGlmIChwYWRkaW5nID09IDIpIHtcblx0XHRcdGEgPSBpbnB1dC5jaGFyQ29kZUF0KHBvc2l0aW9uKSA8PCA4O1xuXHRcdFx0YiA9IGlucHV0LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG5cdFx0XHRidWZmZXIgPSBhICsgYjtcblx0XHRcdG91dHB1dCArPSAoXG5cdFx0XHRcdFRBQkxFLmNoYXJBdChidWZmZXIgPj4gMTApICtcblx0XHRcdFx0VEFCTEUuY2hhckF0KChidWZmZXIgPj4gNCkgJiAweDNGKSArXG5cdFx0XHRcdFRBQkxFLmNoYXJBdCgoYnVmZmVyIDw8IDIpICYgMHgzRikgK1xuXHRcdFx0XHQnPSdcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChwYWRkaW5nID09IDEpIHtcblx0XHRcdGJ1ZmZlciA9IGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuXHRcdFx0b3V0cHV0ICs9IChcblx0XHRcdFx0VEFCTEUuY2hhckF0KGJ1ZmZlciA+PiAyKSArXG5cdFx0XHRcdFRBQkxFLmNoYXJBdCgoYnVmZmVyIDw8IDQpICYgMHgzRikgK1xuXHRcdFx0XHQnPT0nXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH07XG5cblx0dmFyIGJhc2U2NCA9IHtcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J3ZlcnNpb24nOiAnMC4xLjAnXG5cdH07XG5cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gYmFzZTY0O1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gYmFzZTY0O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gYmFzZTY0KSB7XG5cdFx0XHRcdGJhc2U2NC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gYmFzZTY0W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QuYmFzZTY0ID0gYmFzZTY0O1xuXHR9XG5cbn0odGhpcykpO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpWVhObExUWTBMMkpoYzJVMk5DNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFJU0JvZEhSd09pOHZiWFJvY3k1aVpTOWlZWE5sTmpRZ2RqQXVNUzR3SUdKNUlFQnRZWFJvYVdGeklId2dUVWxVSUd4cFkyVnVjMlVnS2k5Y2Jqc29ablZ1WTNScGIyNG9jbTl2ZENrZ2UxeHVYRzVjZEM4dklFUmxkR1ZqZENCbWNtVmxJSFpoY21saFlteGxjeUJnWlhod2IzSjBjMkF1WEc1Y2RIWmhjaUJtY21WbFJYaHdiM0owY3lBOUlIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOUlDZHZZbXBsWTNRbklDWW1JR1Y0Y0c5eWRITTdYRzVjYmx4MEx5OGdSR1YwWldOMElHWnlaV1VnZG1GeWFXRmliR1VnWUcxdlpIVnNaV0F1WEc1Y2RIWmhjaUJtY21WbFRXOWtkV3hsSUQwZ2RIbHdaVzltSUcxdlpIVnNaU0E5UFNBbmIySnFaV04wSnlBbUppQnRiMlIxYkdVZ0ppWmNibHgwWEhSdGIyUjFiR1V1Wlhod2IzSjBjeUE5UFNCbWNtVmxSWGh3YjNKMGN5QW1KaUJ0YjJSMWJHVTdYRzVjYmx4MEx5OGdSR1YwWldOMElHWnlaV1VnZG1GeWFXRmliR1VnWUdkc2IySmhiR0FzSUdaeWIyMGdUbTlrWlM1cWN5QnZjaUJDY205M2MyVnlhV1pwWldRZ1kyOWtaU3dnWVc1a0lIVnpaVnh1WEhRdkx5QnBkQ0JoY3lCZ2NtOXZkR0F1WEc1Y2RIWmhjaUJtY21WbFIyeHZZbUZzSUQwZ2RIbHdaVzltSUdkc2IySmhiQ0E5UFNBbmIySnFaV04wSnlBbUppQm5iRzlpWVd3N1hHNWNkR2xtSUNobWNtVmxSMnh2WW1Gc0xtZHNiMkpoYkNBOVBUMGdabkpsWlVkc2IySmhiQ0I4ZkNCbWNtVmxSMnh2WW1Gc0xuZHBibVJ2ZHlBOVBUMGdabkpsWlVkc2IySmhiQ2tnZTF4dVhIUmNkSEp2YjNRZ1BTQm1jbVZsUjJ4dlltRnNPMXh1WEhSOVhHNWNibHgwTHlvdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTb3ZYRzVjYmx4MGRtRnlJRWx1ZG1Gc2FXUkRhR0Z5WVdOMFpYSkZjbkp2Y2lBOUlHWjFibU4wYVc5dUtHMWxjM05oWjJVcElIdGNibHgwWEhSMGFHbHpMbTFsYzNOaFoyVWdQU0J0WlhOellXZGxPMXh1WEhSOU8xeHVYSFJKYm5aaGJHbGtRMmhoY21GamRHVnlSWEp5YjNJdWNISnZkRzkwZVhCbElEMGdibVYzSUVWeWNtOXlPMXh1WEhSSmJuWmhiR2xrUTJoaGNtRmpkR1Z5UlhKeWIzSXVjSEp2ZEc5MGVYQmxMbTVoYldVZ1BTQW5TVzUyWVd4cFpFTm9ZWEpoWTNSbGNrVnljbTl5Snp0Y2JseHVYSFIyWVhJZ1pYSnliM0lnUFNCbWRXNWpkR2x2YmlodFpYTnpZV2RsS1NCN1hHNWNkRngwTHk4Z1RtOTBaVG9nZEdobElHVnljbTl5SUcxbGMzTmhaMlZ6SUhWelpXUWdkR2h5YjNWbmFHOTFkQ0IwYUdseklHWnBiR1VnYldGMFkyZ2dkR2h2YzJVZ2RYTmxaQ0JpZVZ4dVhIUmNkQzh2SUhSb1pTQnVZWFJwZG1VZ1lHRjBiMkpnTDJCaWRHOWhZQ0JwYlhCc1pXMWxiblJoZEdsdmJpQnBiaUJEYUhKdmJXbDFiUzVjYmx4MFhIUjBhSEp2ZHlCdVpYY2dTVzUyWVd4cFpFTm9ZWEpoWTNSbGNrVnljbTl5S0cxbGMzTmhaMlVwTzF4dVhIUjlPMXh1WEc1Y2RIWmhjaUJVUVVKTVJTQTlJQ2RCUWtORVJVWkhTRWxLUzB4TlRrOVFVVkpUVkZWV1YxaFpXbUZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wZFhaM2VIbDZNREV5TXpRMU5qYzRPU3N2Snp0Y2JseDBMeThnYUhSMGNEb3ZMM2RvWVhSM1p5NXZjbWN2YUhSdGJDOWpiMjF0YjI0dGJXbGpjbTl6ZVc1MFlYaGxjeTVvZEcxc0kzTndZV05sTFdOb1lYSmhZM1JsY2x4dVhIUjJZWElnVWtWSFJWaGZVMUJCUTBWZlEwaEJVa0ZEVkVWU1V5QTlJQzliWEZ4MFhGeHVYRnhtWEZ4eUlGMHZaenRjYmx4dVhIUXZMeUJnWkdWamIyUmxZQ0JwY3lCa1pYTnBaMjVsWkNCMGJ5QmlaU0JtZFd4c2VTQmpiMjF3WVhScFlteGxJSGRwZEdnZ1lHRjBiMkpnSUdGeklHUmxjMk55YVdKbFpDQnBiaUIwYUdWY2JseDBMeThnU0ZSTlRDQlRkR0Z1WkdGeVpDNGdhSFIwY0RvdkwzZG9ZWFIzWnk1dmNtY3ZhSFJ0YkM5M1pXSmhjSEJoY0dsekxtaDBiV3dqWkc5dExYZHBibVJ2ZDJKaGMyVTJOQzFoZEc5aVhHNWNkQzh2SUZSb1pTQnZjSFJwYldsNlpXUWdZbUZ6WlRZMExXUmxZMjlrYVc1bklHRnNaMjl5YVhSb2JTQjFjMlZrSUdseklHSmhjMlZrSUc5dUlFQmhkR3ZpZ0pseklHVjRZMlZzYkdWdWRGeHVYSFF2THlCcGJYQnNaVzFsYm5SaGRHbHZiaTRnYUhSMGNITTZMeTluYVhOMExtZHBkR2gxWWk1amIyMHZZWFJyTHpFd01qQXpPVFpjYmx4MGRtRnlJR1JsWTI5a1pTQTlJR1oxYm1OMGFXOXVLR2x1Y0hWMEtTQjdYRzVjZEZ4MGFXNXdkWFFnUFNCVGRISnBibWNvYVc1d2RYUXBYRzVjZEZ4MFhIUXVjbVZ3YkdGalpTaFNSVWRGV0Y5VFVFRkRSVjlEU0VGU1FVTlVSVkpUTENBbkp5azdYRzVjZEZ4MGRtRnlJR3hsYm1kMGFDQTlJR2x1Y0hWMExteGxibWQwYUR0Y2JseDBYSFJwWmlBb2JHVnVaM1JvSUNVZ05DQTlQU0F3S1NCN1hHNWNkRngwWEhScGJuQjFkQ0E5SUdsdWNIVjBMbkpsY0d4aFkyVW9MejA5UHlRdkxDQW5KeWs3WEc1Y2RGeDBYSFJzWlc1bmRHZ2dQU0JwYm5CMWRDNXNaVzVuZEdnN1hHNWNkRngwZlZ4dVhIUmNkR2xtSUNoY2JseDBYSFJjZEd4bGJtZDBhQ0FsSURRZ1BUMGdNU0I4ZkZ4dVhIUmNkRngwTHk4Z2FIUjBjRG92TDNkb1lYUjNaeTV2Y21jdlF5TmhiSEJvWVc1MWJXVnlhV010WVhOamFXa3RZMmhoY21GamRHVnljMXh1WEhSY2RGeDBMMXRlSzJFdGVrRXRXakF0T1M5ZEx5NTBaWE4wS0dsdWNIVjBLVnh1WEhSY2RDa2dlMXh1WEhSY2RGeDBaWEp5YjNJb1hHNWNkRngwWEhSY2RDZEpiblpoYkdsa0lHTm9ZWEpoWTNSbGNqb2dkR2hsSUhOMGNtbHVaeUIwYnlCaVpTQmtaV052WkdWa0lHbHpJRzV2ZENCamIzSnlaV04wYkhrZ1pXNWpiMlJsWkM0blhHNWNkRngwWEhRcE8xeHVYSFJjZEgxY2JseDBYSFIyWVhJZ1ltbDBRMjkxYm5SbGNpQTlJREE3WEc1Y2RGeDBkbUZ5SUdKcGRGTjBiM0poWjJVN1hHNWNkRngwZG1GeUlHSjFabVpsY2p0Y2JseDBYSFIyWVhJZ2IzVjBjSFYwSUQwZ0p5YzdYRzVjZEZ4MGRtRnlJSEJ2YzJsMGFXOXVJRDBnTFRFN1hHNWNkRngwZDJocGJHVWdLQ3NyY0c5emFYUnBiMjRnUENCc1pXNW5kR2dwSUh0Y2JseDBYSFJjZEdKMVptWmxjaUE5SUZSQlFreEZMbWx1WkdWNFQyWW9hVzV3ZFhRdVkyaGhja0YwS0hCdmMybDBhVzl1S1NrN1hHNWNkRngwWEhSaWFYUlRkRzl5WVdkbElEMGdZbWwwUTI5MWJuUmxjaUFsSURRZ1B5QmlhWFJUZEc5eVlXZGxJQ29nTmpRZ0t5QmlkV1ptWlhJZ09pQmlkV1ptWlhJN1hHNWNkRngwWEhRdkx5QlZibXhsYzNNZ2RHaHBjeUJwY3lCMGFHVWdabWx5YzNRZ2IyWWdZU0JuY205MWNDQnZaaUEwSUdOb1lYSmhZM1JsY25QaWdLWmNibHgwWEhSY2RHbG1JQ2hpYVhSRGIzVnVkR1Z5S3lzZ0pTQTBLU0I3WEc1Y2RGeDBYSFJjZEM4dklPS0FwbU52Ym5abGNuUWdkR2hsSUdacGNuTjBJRGdnWW1sMGN5QjBieUJoSUhOcGJtZHNaU0JCVTBOSlNTQmphR0Z5WVdOMFpYSXVYRzVjZEZ4MFhIUmNkRzkxZEhCMWRDQXJQU0JUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0Z4dVhIUmNkRngwWEhSY2REQjRSa1lnSmlCaWFYUlRkRzl5WVdkbElENCtJQ2d0TWlBcUlHSnBkRU52ZFc1MFpYSWdKaUEyS1Z4dVhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBYSFJ5WlhSMWNtNGdiM1YwY0hWME8xeHVYSFI5TzF4dVhHNWNkQzh2SUdCbGJtTnZaR1ZnSUdseklHUmxjMmxuYm1Wa0lIUnZJR0psSUdaMWJHeDVJR052YlhCaGRHbGliR1VnZDJsMGFDQmdZblJ2WVdBZ1lYTWdaR1Z6WTNKcFltVmtJR2x1SUhSb1pWeHVYSFF2THlCSVZFMU1JRk4wWVc1a1lYSmtPaUJvZEhSd09pOHZkMmhoZEhkbkxtOXlaeTlvZEcxc0wzZGxZbUZ3Y0dGd2FYTXVhSFJ0YkNOa2IyMHRkMmx1Wkc5M1ltRnpaVFkwTFdKMGIyRmNibHgwZG1GeUlHVnVZMjlrWlNBOUlHWjFibU4wYVc5dUtHbHVjSFYwS1NCN1hHNWNkRngwYVc1d2RYUWdQU0JUZEhKcGJtY29hVzV3ZFhRcE8xeHVYSFJjZEdsbUlDZ3ZXMTVjWERBdFhGeDRSa1pkTHk1MFpYTjBLR2x1Y0hWMEtTa2dlMXh1WEhSY2RGeDBMeThnVG05MFpUb2dibThnYm1WbFpDQjBieUJ6Y0dWamFXRnNMV05oYzJVZ1lYTjBjbUZzSUhONWJXSnZiSE1nYUdWeVpTd2dZWE1nYzNWeWNtOW5ZWFJsY3lCaGNtVmNibHgwWEhSY2RDOHZJRzFoZEdOb1pXUXNJR0Z1WkNCMGFHVWdhVzV3ZFhRZ2FYTWdjM1Z3Y0c5elpXUWdkRzhnYjI1c2VTQmpiMjUwWVdsdUlFRlRRMGxKSUdGdWVYZGhlUzVjYmx4MFhIUmNkR1Z5Y205eUtGeHVYSFJjZEZ4MFhIUW5WR2hsSUhOMGNtbHVaeUIwYnlCaVpTQmxibU52WkdWa0lHTnZiblJoYVc1eklHTm9ZWEpoWTNSbGNuTWdiM1YwYzJsa1pTQnZaaUIwYUdVZ0p5QXJYRzVjZEZ4MFhIUmNkQ2RNWVhScGJqRWdjbUZ1WjJVdUoxeHVYSFJjZEZ4MEtUdGNibHgwWEhSOVhHNWNkRngwZG1GeUlIQmhaR1JwYm1jZ1BTQnBibkIxZEM1c1pXNW5kR2dnSlNBek8xeHVYSFJjZEhaaGNpQnZkWFJ3ZFhRZ1BTQW5KenRjYmx4MFhIUjJZWElnY0c5emFYUnBiMjRnUFNBdE1UdGNibHgwWEhSMllYSWdZVHRjYmx4MFhIUjJZWElnWWp0Y2JseDBYSFIyWVhJZ1l6dGNibHgwWEhSMllYSWdaRHRjYmx4MFhIUjJZWElnWW5WbVptVnlPMXh1WEhSY2RDOHZJRTFoYTJVZ2MzVnlaU0JoYm5rZ2NHRmtaR2x1WnlCcGN5Qm9ZVzVrYkdWa0lHOTFkSE5wWkdVZ2IyWWdkR2hsSUd4dmIzQXVYRzVjZEZ4MGRtRnlJR3hsYm1kMGFDQTlJR2x1Y0hWMExteGxibWQwYUNBdElIQmhaR1JwYm1jN1hHNWNibHgwWEhSM2FHbHNaU0FvS3l0d2IzTnBkR2x2YmlBOElHeGxibWQwYUNrZ2UxeHVYSFJjZEZ4MEx5OGdVbVZoWkNCMGFISmxaU0JpZVhSbGN5d2dhUzVsTGlBeU5DQmlhWFJ6TGx4dVhIUmNkRngwWVNBOUlHbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2NHOXphWFJwYjI0cElEdzhJREUyTzF4dVhIUmNkRngwWWlBOUlHbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb0t5dHdiM05wZEdsdmJpa2dQRHdnT0R0Y2JseDBYSFJjZEdNZ1BTQnBibkIxZEM1amFHRnlRMjlrWlVGMEtDc3JjRzl6YVhScGIyNHBPMXh1WEhSY2RGeDBZblZtWm1WeUlEMGdZU0FySUdJZ0t5QmpPMXh1WEhSY2RGeDBMeThnVkhWeWJpQjBhR1VnTWpRZ1ltbDBjeUJwYm5SdklHWnZkWElnWTJoMWJtdHpJRzltSURZZ1ltbDBjeUJsWVdOb0xDQmhibVFnWVhCd1pXNWtJSFJvWlZ4dVhIUmNkRngwTHk4Z2JXRjBZMmhwYm1jZ1kyaGhjbUZqZEdWeUlHWnZjaUJsWVdOb0lHOW1JSFJvWlcwZ2RHOGdkR2hsSUc5MWRIQjFkQzVjYmx4MFhIUmNkRzkxZEhCMWRDQXJQU0FvWEc1Y2RGeDBYSFJjZEZSQlFreEZMbU5vWVhKQmRDaGlkV1ptWlhJZ1BqNGdNVGdnSmlBd2VETkdLU0FyWEc1Y2RGeDBYSFJjZEZSQlFreEZMbU5vWVhKQmRDaGlkV1ptWlhJZ1BqNGdNVElnSmlBd2VETkdLU0FyWEc1Y2RGeDBYSFJjZEZSQlFreEZMbU5vWVhKQmRDaGlkV1ptWlhJZ1BqNGdOaUFtSURCNE0wWXBJQ3RjYmx4MFhIUmNkRngwVkVGQ1RFVXVZMmhoY2tGMEtHSjFabVpsY2lBbUlEQjRNMFlwWEc1Y2RGeDBYSFFwTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNod1lXUmthVzVuSUQwOUlESXBJSHRjYmx4MFhIUmNkR0VnUFNCcGJuQjFkQzVqYUdGeVEyOWtaVUYwS0hCdmMybDBhVzl1S1NBOFBDQTRPMXh1WEhSY2RGeDBZaUE5SUdsdWNIVjBMbU5vWVhKRGIyUmxRWFFvS3l0d2IzTnBkR2x2YmlrN1hHNWNkRngwWEhSaWRXWm1aWElnUFNCaElDc2dZanRjYmx4MFhIUmNkRzkxZEhCMWRDQXJQU0FvWEc1Y2RGeDBYSFJjZEZSQlFreEZMbU5vWVhKQmRDaGlkV1ptWlhJZ1BqNGdNVEFwSUN0Y2JseDBYSFJjZEZ4MFZFRkNURVV1WTJoaGNrRjBLQ2hpZFdabVpYSWdQajRnTkNrZ0ppQXdlRE5HS1NBclhHNWNkRngwWEhSY2RGUkJRa3hGTG1Ob1lYSkJkQ2dvWW5WbVptVnlJRHc4SURJcElDWWdNSGd6UmlrZ0sxeHVYSFJjZEZ4MFhIUW5QU2RjYmx4MFhIUmNkQ2s3WEc1Y2RGeDBmU0JsYkhObElHbG1JQ2h3WVdSa2FXNW5JRDA5SURFcElIdGNibHgwWEhSY2RHSjFabVpsY2lBOUlHbHVjSFYwTG1Ob1lYSkRiMlJsUVhRb2NHOXphWFJwYjI0cE8xeHVYSFJjZEZ4MGIzVjBjSFYwSUNzOUlDaGNibHgwWEhSY2RGeDBWRUZDVEVVdVkyaGhja0YwS0dKMVptWmxjaUErUGlBeUtTQXJYRzVjZEZ4MFhIUmNkRlJCUWt4RkxtTm9ZWEpCZENnb1luVm1abVZ5SUR3OElEUXBJQ1lnTUhnelJpa2dLMXh1WEhSY2RGeDBYSFFuUFQwblhHNWNkRngwWEhRcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJ2ZFhSd2RYUTdYRzVjZEgwN1hHNWNibHgwZG1GeUlHSmhjMlUyTkNBOUlIdGNibHgwWEhRblpXNWpiMlJsSnpvZ1pXNWpiMlJsTEZ4dVhIUmNkQ2RrWldOdlpHVW5PaUJrWldOdlpHVXNYRzVjZEZ4MEozWmxjbk5wYjI0bk9pQW5NQzR4TGpBblhHNWNkSDA3WEc1Y2JseDBMeThnVTI5dFpTQkJUVVFnWW5WcGJHUWdiM0IwYVcxcGVtVnljeXdnYkdsclpTQnlMbXB6TENCamFHVmpheUJtYjNJZ2MzQmxZMmxtYVdNZ1kyOXVaR2wwYVc5dUlIQmhkSFJsY201elhHNWNkQzh2SUd4cGEyVWdkR2hsSUdadmJHeHZkMmx1WnpwY2JseDBhV1lnS0Z4dVhIUmNkSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmx4dVhIUmNkSFI1Y0dWdlppQmtaV1pwYm1VdVlXMWtJRDA5SUNkdlltcGxZM1FuSUNZbVhHNWNkRngwWkdWbWFXNWxMbUZ0WkZ4dVhIUXBJSHRjYmx4MFhIUmtaV1pwYm1Vb1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1ltRnpaVFkwTzF4dVhIUmNkSDBwTzF4dVhIUjlYSFJsYkhObElHbG1JQ2htY21WbFJYaHdiM0owY3lBbUppQWhabkpsWlVWNGNHOXlkSE11Ym05a1pWUjVjR1VwSUh0Y2JseDBYSFJwWmlBb1puSmxaVTF2WkhWc1pTa2dleUF2THlCcGJpQk9iMlJsTG1weklHOXlJRkpwYm1kdlNsTWdkakF1T0M0d0sxeHVYSFJjZEZ4MFpuSmxaVTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlRZME8xeHVYSFJjZEgwZ1pXeHpaU0I3SUM4dklHbHVJRTVoY25kb1lXd2diM0lnVW1sdVoyOUtVeUIyTUM0M0xqQXRYRzVjZEZ4MFhIUm1iM0lnS0haaGNpQnJaWGtnYVc0Z1ltRnpaVFkwS1NCN1hHNWNkRngwWEhSY2RHSmhjMlUyTkM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcElDWW1JQ2htY21WbFJYaHdiM0owYzF0clpYbGRJRDBnWW1GelpUWTBXMnRsZVYwcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmU0JsYkhObElIc2dMeThnYVc0Z1VtaHBibThnYjNJZ1lTQjNaV0lnWW5KdmQzTmxjbHh1WEhSY2RISnZiM1F1WW1GelpUWTBJRDBnWW1GelpUWTBPMXh1WEhSOVhHNWNibjBvZEdocGN5a3BPMXh1SWwxOSIsbnVsbCwidmFyIGxvb2t1cCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblxuOyhmdW5jdGlvbiAoZXhwb3J0cykge1xuXHQndXNlIHN0cmljdCc7XG5cbiAgdmFyIEFyciA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgPyBVaW50OEFycmF5XG4gICAgOiBBcnJheVxuXG5cdHZhciBQTFVTICAgPSAnKycuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0ggID0gJy8nLmNoYXJDb2RlQXQoMClcblx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBMT1dFUiAgPSAnYScuY2hhckNvZGVBdCgwKVxuXHR2YXIgVVBQRVIgID0gJ0EnLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUylcblx0XHRcdHJldHVybiA2MiAvLyAnKydcblx0XHRpZiAoY29kZSA9PT0gU0xBU0gpXG5cdFx0XHRyZXR1cm4gNjMgLy8gJy8nXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIpXG5cdFx0XHRyZXR1cm4gLTEgLy9ubyBtYXRjaFxuXHRcdGlmIChjb2RlIDwgTlVNQkVSICsgMTApXG5cdFx0XHRyZXR1cm4gY29kZSAtIE5VTUJFUiArIDI2ICsgMjZcblx0XHRpZiAoY29kZSA8IFVQUEVSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIFVQUEVSXG5cdFx0aWYgKGNvZGUgPCBMT1dFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBMT1dFUiArIDI2XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRUb0J5dGVBcnJheSAoYjY0KSB7XG5cdFx0dmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcblxuXHRcdGlmIChiNjQubGVuZ3RoICUgNCA+IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cdFx0cGxhY2VIb2xkZXJzID0gJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDIpID8gMiA6ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAxKSA/IDEgOiAwXG5cblx0XHQvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcblx0XHRhcnIgPSBuZXcgQXJyKGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuXHRcdC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aFxuXG5cdFx0dmFyIEwgPSAwXG5cblx0XHRmdW5jdGlvbiBwdXNoICh2KSB7XG5cdFx0XHRhcnJbTCsrXSA9IHZcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDE4KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDEyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYpIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDMpKVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwMDApID4+IDE2KVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwKSA+PiA4KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA+PiA0KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDEwKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDQpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPj4gMilcblx0XHRcdHB1c2goKHRtcCA+PiA4KSAmIDB4RkYpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFyclxuXHR9XG5cblx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCAodWludDgpIHtcblx0XHR2YXIgaSxcblx0XHRcdGV4dHJhQnl0ZXMgPSB1aW50OC5sZW5ndGggJSAzLCAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuXHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdHRlbXAsIGxlbmd0aFxuXG5cdFx0ZnVuY3Rpb24gZW5jb2RlIChudW0pIHtcblx0XHRcdHJldHVybiBsb29rdXAuY2hhckF0KG51bSlcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShudW0gPj4gMTggJiAweDNGKSArIGVuY29kZShudW0gPj4gMTIgJiAweDNGKSArIGVuY29kZShudW0gPj4gNiAmIDB4M0YpICsgZW5jb2RlKG51bSAmIDB4M0YpXG5cdFx0fVxuXG5cdFx0Ly8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuXHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHVpbnQ4Lmxlbmd0aCAtIGV4dHJhQnl0ZXM7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuXHRcdFx0dGVtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcblx0XHRcdG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQodGVtcClcblx0XHR9XG5cblx0XHQvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG5cdFx0c3dpdGNoIChleHRyYUJ5dGVzKSB7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHRlbXAgPSB1aW50OFt1aW50OC5sZW5ndGggLSAxXVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPT0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHRlbXAgPSAodWludDhbdWludDgubGVuZ3RoIC0gMl0gPDwgOCkgKyAodWludDhbdWludDgubGVuZ3RoIC0gMV0pXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAxMClcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA+PiA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgMikgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG5cblx0ZXhwb3J0cy50b0J5dGVBcnJheSA9IGI2NFRvQnl0ZUFycmF5XG5cdGV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IHVpbnQ4VG9CYXNlNjRcbn0odHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMuYmFzZTY0anMgPSB7fSkgOiBleHBvcnRzKSlcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpcy1hcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbnZhciBrTWF4TGVuZ3RoID0gMHgzZmZmZmZmZlxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqIC0gSW1wbGVtZW50YXRpb24gbXVzdCBzdXBwb3J0IGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLlxuICogICBGaXJlZm94IDQtMjkgbGFja2VkIHN1cHBvcnQsIGZpeGVkIGluIEZpcmVmb3ggMzArLlxuICogICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuICpcbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5IHdpbGxcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IHdpbGwgd29yayBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApXG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIHJldHVybiA0MiA9PT0gYXJyLmZvbygpICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIG5ldyBVaW50OEFycmF5KDEpLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgdHlwZSA9IHR5cGVvZiBzdWJqZWN0XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGhcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgIGxlbmd0aCA9IHN1YmplY3QgPiAwID8gc3ViamVjdCA+Pj4gMCA6IDBcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZW5jb2RpbmcgPT09ICdiYXNlNjQnKVxuICAgICAgc3ViamVjdCA9IGJhc2U2NGNsZWFuKHN1YmplY3QpXG4gICAgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3ViamVjdCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcgJiYgc3ViamVjdCAhPT0gbnVsbCkgeyAvLyBhc3N1bWUgb2JqZWN0IGlzIGFycmF5LWxpa2VcbiAgICBpZiAoc3ViamVjdC50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KHN1YmplY3QuZGF0YSkpXG4gICAgICBzdWJqZWN0ID0gc3ViamVjdC5kYXRhXG4gICAgbGVuZ3RoID0gK3N1YmplY3QubGVuZ3RoID4gMCA/IE1hdGguZmxvb3IoK3N1YmplY3QubGVuZ3RoKSA6IDBcbiAgfSBlbHNlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBzdGFydCB3aXRoIG51bWJlciwgYnVmZmVyLCBhcnJheSBvciBzdHJpbmcnKVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IGtNYXhMZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcblxuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFByZWZlcnJlZDogUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICBidWYgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXNcbiAgICBidWYubGVuZ3RoID0gbGVuZ3RoXG4gICAgYnVmLl9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdClcbiAgfSBlbHNlIGlmIChpc0FycmF5aXNoKHN1YmplY3QpKSB7XG4gICAgLy8gVHJlYXQgYXJyYXktaXNoIG9iamVjdHMgYXMgYSBieXRlIGFycmF5XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGJ1ZltpXSA9ICgoc3ViamVjdFtpXSAlIDI1NikgKyAyNTYpICUgMjU2XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmLndyaXRlKHN1YmplY3QsIDAsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhbm9aZXJvKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZbaV0gPSAwXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbiAmJiBhW2ldID09PSBiW2ldOyBpKyspIHt9XG4gIGlmIChpICE9PSBsZW4pIHtcbiAgICB4ID0gYVtpXVxuICAgIHkgPSBiW2ldXG4gIH1cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAncmF3JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VzYWdlOiBCdWZmZXIuY29uY2F0KGxpc3RbLCBsZW5ndGhdKScpXG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoMClcbiAgfSBlbHNlIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBsaXN0WzBdXG4gIH1cblxuICB2YXIgaVxuICBpZiAodG90YWxMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIHRvdGFsTGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbExlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKHRvdGFsTGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIGl0ZW0uY29weShidWYsIHBvcylcbiAgICBwb3MgKz0gaXRlbS5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gKHN0ciwgZW5jb2RpbmcpIHtcbiAgdmFyIHJldFxuICBzdHIgPSBzdHIgKyAnJ1xuICBzd2l0Y2ggKGVuY29kaW5nIHx8ICd1dGY4Jykge1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoICogMlxuICAgICAgYnJlYWtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCA+Pj4gMVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aFxuICB9XG4gIHJldHVybiByZXRcbn1cblxuLy8gcHJlLXNldCBmb3IgdmFsdWVzIHRoYXQgbWF5IGV4aXN0IGluIHRoZSBmdXR1cmVcbkJ1ZmZlci5wcm90b3R5cGUubGVuZ3RoID0gdW5kZWZpbmVkXG5CdWZmZXIucHJvdG90eXBlLnBhcmVudCA9IHVuZGVmaW5lZFxuXG4vLyB0b1N0cmluZyhlbmNvZGluZywgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPT09IEluZmluaXR5ID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAoZW5kIDw9IHN0YXJ0KSByZXR1cm4gJydcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBiaW5hcnlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KVxuICAgICAgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKVxufVxuXG4vLyBgZ2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuZ2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy5yZWFkVUludDgob2Zmc2V0KVxufVxuXG4vLyBgc2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgb2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuc2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy53cml0ZVVJbnQ4KHYsIG9mZnNldClcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4oYnl0ZSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gYmluYXJ5V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIDIpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IGJpbmFyeVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gdXRmMTZsZVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJlcyA9ICcnXG4gIHZhciB0bXAgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoYnVmW2ldIDw9IDB4N0YpIHtcbiAgICAgIHJlcyArPSBkZWNvZGVVdGY4Q2hhcih0bXApICsgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gICAgICB0bXAgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgKz0gJyUnICsgYnVmW2ldLnRvU3RyaW5nKDE2KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXMgKyBkZWNvZGVVdGY4Q2hhcih0bXApXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gYmluYXJ5U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gYXNjaWlTbGljZShidWYsIHN0YXJ0LCBlbmQpXG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlbjtcbiAgICBpZiAoc3RhcnQgPCAwKVxuICAgICAgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApXG4gICAgICBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpXG4gICAgZW5kID0gc3RhcnRcblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICByZXR1cm4gQnVmZmVyLl9hdWdtZW50KHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCkpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICB2YXIgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkLCB0cnVlKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47IGkrKykge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICAgIHJldHVybiBuZXdCdWZcbiAgfVxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKVxuICAgIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzXG5cbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFR5cGVFcnJvcignc291cmNlRW5kIDwgc291cmNlU3RhcnQnKVxuICBpZiAodGFyZ2V0X3N0YXJ0IDwgMCB8fCB0YXJnZXRfc3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aClcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSBzb3VyY2UubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDAgfHwgZW5kID4gc291cmNlLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aClcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCA8IGVuZCAtIHN0YXJ0KVxuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgKyBzdGFydFxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0X3N0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuX3NldCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksIHRhcmdldF9zdGFydClcbiAgfVxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5kIDwgc3RhcnQnKVxuXG4gIC8vIEZpbGwgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB0aGlzW2ldID0gdmFsdWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gdXRmOFRvQnl0ZXModmFsdWUudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLmNvbnN0cnVjdG9yID0gQnVmZmVyXG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5lcXVhbHMgPSBCUC5lcXVhbHNcbiAgYXJyLmNvbXBhcmUgPSBCUC5jb21wYXJlXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnQ4ID0gQlAucmVhZFVJbnQ4XG4gIGFyci5yZWFkVUludDE2TEUgPSBCUC5yZWFkVUludDE2TEVcbiAgYXJyLnJlYWRVSW50MTZCRSA9IEJQLnJlYWRVSW50MTZCRVxuICBhcnIucmVhZFVJbnQzMkxFID0gQlAucmVhZFVJbnQzMkxFXG4gIGFyci5yZWFkVUludDMyQkUgPSBCUC5yZWFkVUludDMyQkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50OCA9IEJQLndyaXRlSW50OFxuICBhcnIud3JpdGVJbnQxNkxFID0gQlAud3JpdGVJbnQxNkxFXG4gIGFyci53cml0ZUludDE2QkUgPSBCUC53cml0ZUludDE2QkVcbiAgYXJyLndyaXRlSW50MzJMRSA9IEJQLndyaXRlSW50MzJMRVxuICBhcnIud3JpdGVJbnQzMkJFID0gQlAud3JpdGVJbnQzMkJFXG4gIGFyci53cml0ZUZsb2F0TEUgPSBCUC53cml0ZUZsb2F0TEVcbiAgYXJyLndyaXRlRmxvYXRCRSA9IEJQLndyaXRlRmxvYXRCRVxuICBhcnIud3JpdGVEb3VibGVMRSA9IEJQLndyaXRlRG91YmxlTEVcbiAgYXJyLndyaXRlRG91YmxlQkUgPSBCUC53cml0ZURvdWJsZUJFXG4gIGFyci5maWxsID0gQlAuZmlsbFxuICBhcnIuaW5zcGVjdCA9IEJQLmluc3BlY3RcbiAgYXJyLnRvQXJyYXlCdWZmZXIgPSBCUC50b0FycmF5QnVmZmVyXG5cbiAgcmV0dXJuIGFyclxufVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS16XS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gaXNBcnJheWlzaCAoc3ViamVjdCkge1xuICByZXR1cm4gaXNBcnJheShzdWJqZWN0KSB8fCBCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkgfHxcbiAgICAgIHN1YmplY3QgJiYgdHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2Ygc3ViamVjdC5sZW5ndGggPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYiA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGIgPD0gMHg3Rikge1xuICAgICAgYnl0ZUFycmF5LnB1c2goYilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YXJ0ID0gaVxuICAgICAgaWYgKGIgPj0gMHhEODAwICYmIGIgPD0gMHhERkZGKSBpKytcbiAgICAgIHZhciBoID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5zbGljZShzdGFydCwgaSsxKSkuc3Vic3RyKDEpLnNwbGl0KCclJylcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaC5sZW5ndGg7IGorKykge1xuICAgICAgICBieXRlQXJyYXkucHVzaChwYXJzZUludChoW2pdLCAxNikpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KHN0cilcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoLCB1bml0U2l6ZSkge1xuICBpZiAodW5pdFNpemUpIGxlbmd0aCAtPSBsZW5ndGggJSB1bml0U2l6ZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSlcbiAgICAgIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gZGVjb2RlVXRmOENoYXIgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpIC8vIFVURiA4IGludmFsaWQgY2hhclxuICB9XG59XG4iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cbn0pLmNhbGwodGhpcyx7XCJpc0J1ZmZlclwiOnJlcXVpcmUoXCIuLi8uLi9pcy1idWZmZXIvaW5kZXguanNcIil9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFhWMGFXd3RhWE12YkdsaUwzVjBhV3d1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnUTI5d2VYSnBaMmgwSUVwdmVXVnVkQ3dnU1c1akxpQmhibVFnYjNSb1pYSWdUbTlrWlNCamIyNTBjbWxpZFhSdmNuTXVYRzR2TDF4dUx5OGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRmNiaTh2SUdOdmNIa2diMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCa2IyTjFiV1Z1ZEdGMGFXOXVJR1pwYkdWeklDaDBhR1ZjYmk4dklGd2lVMjltZEhkaGNtVmNJaWtzSUhSdklHUmxZV3dnYVc0Z2RHaGxJRk52Wm5SM1lYSmxJSGRwZEdodmRYUWdjbVZ6ZEhKcFkzUnBiMjRzSUdsdVkyeDFaR2x1WjF4dUx5OGdkMmwwYUc5MWRDQnNhVzFwZEdGMGFXOXVJSFJvWlNCeWFXZG9kSE1nZEc4Z2RYTmxMQ0JqYjNCNUxDQnRiMlJwWm5rc0lHMWxjbWRsTENCd2RXSnNhWE5vTEZ4dUx5OGdaR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JSFJvWlNCVGIyWjBkMkZ5WlN3Z1lXNWtJSFJ2SUhCbGNtMXBkRnh1THk4Z2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjeUJtZFhKdWFYTm9aV1FnZEc4Z1pHOGdjMjhzSUhOMVltcGxZM1FnZEc4Z2RHaGxYRzR2THlCbWIyeHNiM2RwYm1jZ1kyOXVaR2wwYVc5dWN6cGNiaTh2WEc0dkx5QlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpGeHVMeThnYVc0Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEc0dkwxeHVMeThnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVTF4dUx5OGdUMUlnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmx4dUx5OGdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxDQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUbHh1THk4Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRklFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc1hHNHZMeUJFUVUxQlIwVlRJRTlTSUU5VVNFVlNJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSmNiaTh2SUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MQ0JQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VWY2JpOHZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRpQlVTRVVnVTA5R1ZGZEJVa1V1WEc1Y2JpOHZJRTVQVkVVNklGUm9aWE5sSUhSNWNHVWdZMmhsWTJ0cGJtY2dablZ1WTNScGIyNXpJR2x1ZEdWdWRHbHZibUZzYkhrZ1pHOXVKM1FnZFhObElHQnBibk4wWVc1alpXOW1ZRnh1THk4Z1ltVmpZWFZ6WlNCcGRDQnBjeUJtY21GbmFXeGxJR0Z1WkNCallXNGdZbVVnWldGemFXeDVJR1poYTJWa0lIZHBkR2dnWUU5aWFtVmpkQzVqY21WaGRHVW9LV0F1WEc1Y2JtWjFibU4wYVc5dUlHbHpRWEp5WVhrb1lYSm5LU0I3WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbWx6UVhKeVlYa29ZWEpuS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJKcVpXTjBWRzlUZEhKcGJtY29ZWEpuS1NBOVBUMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEp6dGNibjFjYm1WNGNHOXlkSE11YVhOQmNuSmhlU0E5SUdselFYSnlZWGs3WEc1Y2JtWjFibU4wYVc5dUlHbHpRbTl2YkdWaGJpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkaWIyOXNaV0Z1Snp0Y2JuMWNibVY0Y0c5eWRITXVhWE5DYjI5c1pXRnVJRDBnYVhOQ2IyOXNaV0Z1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMDUxYkd3b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCaGNtY2dQVDA5SUc1MWJHdzdYRzU5WEc1bGVIQnZjblJ6TG1selRuVnNiQ0E5SUdselRuVnNiRHRjYmx4dVpuVnVZM1JwYjI0Z2FYTk9kV3hzVDNKVmJtUmxabWx1WldRb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCaGNtY2dQVDBnYm5Wc2JEdGNibjFjYm1WNGNHOXlkSE11YVhOT2RXeHNUM0pWYm1SbFptbHVaV1FnUFNCcGMwNTFiR3hQY2xWdVpHVm1hVzVsWkR0Y2JseHVablZ1WTNScGIyNGdhWE5PZFcxaVpYSW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmJuVnRZbVZ5Snp0Y2JuMWNibVY0Y0c5eWRITXVhWE5PZFcxaVpYSWdQU0JwYzA1MWJXSmxjanRjYmx4dVpuVnVZM1JwYjI0Z2FYTlRkSEpwYm1jb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYzNSeWFXNW5KenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlRkSEpwYm1jZ1BTQnBjMU4wY21sdVp6dGNibHh1Wm5WdVkzUnBiMjRnYVhOVGVXMWliMndvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5jM2x0WW05c0p6dGNibjFjYm1WNGNHOXlkSE11YVhOVGVXMWliMndnUFNCcGMxTjViV0p2YkR0Y2JseHVablZ1WTNScGIyNGdhWE5WYm1SbFptbHVaV1FvWVhKbktTQjdYRzRnSUhKbGRIVnliaUJoY21jZ1BUMDlJSFp2YVdRZ01EdGNibjFjYm1WNGNHOXlkSE11YVhOVmJtUmxabWx1WldRZ1BTQnBjMVZ1WkdWbWFXNWxaRHRjYmx4dVpuVnVZM1JwYjI0Z2FYTlNaV2RGZUhBb2NtVXBJSHRjYmlBZ2NtVjBkWEp1SUc5aWFtVmpkRlJ2VTNSeWFXNW5LSEpsS1NBOVBUMGdKMXR2WW1wbFkzUWdVbVZuUlhod1hTYzdYRzU5WEc1bGVIQnZjblJ6TG1selVtVm5SWGh3SUQwZ2FYTlNaV2RGZUhBN1hHNWNibVoxYm1OMGFXOXVJR2x6VDJKcVpXTjBLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdZWEpuSUNFOVBTQnVkV3hzTzF4dWZWeHVaWGh3YjNKMGN5NXBjMDlpYW1WamRDQTlJR2x6VDJKcVpXTjBPMXh1WEc1bWRXNWpkR2x2YmlCcGMwUmhkR1VvWkNrZ2UxeHVJQ0J5WlhSMWNtNGdiMkpxWldOMFZHOVRkSEpwYm1jb1pDa2dQVDA5SUNkYmIySnFaV04wSUVSaGRHVmRKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTkVZWFJsSUQwZ2FYTkVZWFJsTzF4dVhHNW1kVzVqZEdsdmJpQnBjMFZ5Y205eUtHVXBJSHRjYmlBZ2NtVjBkWEp1SUNodlltcGxZM1JVYjFOMGNtbHVaeWhsS1NBOVBUMGdKMXR2WW1wbFkzUWdSWEp5YjNKZEp5QjhmQ0JsSUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwTzF4dWZWeHVaWGh3YjNKMGN5NXBjMFZ5Y205eUlEMGdhWE5GY25KdmNqdGNibHh1Wm5WdVkzUnBiMjRnYVhOR2RXNWpkR2x2YmloaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpSblZ1WTNScGIyNGdQU0JwYzBaMWJtTjBhVzl1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU2hoY21jcElIdGNiaUFnY21WMGRYSnVJR0Z5WnlBOVBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oySnZiMnhsWVc0bklIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM04wY21sdVp5Y2dmSHhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZVcxaWIyd25JSHg4SUNBdkx5QkZVellnYzNsdFltOXNYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5kVzVrWldacGJtVmtKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlFjbWx0YVhScGRtVWdQU0JwYzFCeWFXMXBkR2wyWlR0Y2JseHVaWGh3YjNKMGN5NXBjMEoxWm1abGNpQTlJRUoxWm1abGNpNXBjMEoxWm1abGNqdGNibHh1Wm5WdVkzUnBiMjRnYjJKcVpXTjBWRzlUZEhKcGJtY29ieWtnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRzhwTzF4dWZWeHVJbDE5IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gMDtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbWl0dGVyLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IDE7XG4gIGVsc2VcbiAgICByZXQgPSBlbWl0dGVyLl9ldmVudHNbdHlwZV0ubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBpc0FycmF5XG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIHRvU3RyaW5nXG4gKi9cblxudmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGB2YWxgXG4gKiBpcyBhbiBhcnJheS5cbiAqXG4gKiBleGFtcGxlOlxuICpcbiAqICAgICAgICBpc0FycmF5KFtdKTtcbiAqICAgICAgICAvLyA+IHRydWVcbiAqICAgICAgICBpc0FycmF5KGFyZ3VtZW50cyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICogICAgICAgIGlzQXJyYXkoJycpO1xuICogICAgICAgIC8vID4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge21peGVkfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2x9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuICEhIHZhbCAmJiAnW29iamVjdCBBcnJheV0nID09IHN0ci5jYWxsKHZhbCk7XG59O1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uc1xuICovXG5cbnZhciB1dGlsID0ge307XG5cbnV0aWwuaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxudXRpbC5pc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbnV0aWwuaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG51dGlsLmlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZyl7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5cbi8qKlxuICogRXZlbnRFbWl0dGVyIGNsYXNzXG4gKi9cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghdXRpbC5pc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InICYmICF0aGlzLl9ldmVudHMuZXJyb3IpIHtcbiAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmICh1dGlsLmlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodXRpbC5pc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghdXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgdXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAodXRpbC5pc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgdmFyIG07XG4gICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG5cbiAgICAgIGlmICh1dGlsLmlzRnVuY3Rpb24oY29uc29sZS5lcnJvcikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKGNvbnNvbGUudHJhY2UpKVxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghdXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAodXRpbC5pc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShsaXN0ZW5lcnMpKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKHV0aWwuaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmICh1dGlsLmlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5wcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuICAgIHZhciBjYW5Qb3N0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cucG9zdE1lc3NhZ2UgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXJcbiAgICA7XG5cbiAgICBpZiAoY2FuU2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZikgeyByZXR1cm4gd2luZG93LnNldEltbWVkaWF0ZShmKSB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGV2LnNvdXJjZTtcbiAgICAgICAgICAgIGlmICgoc291cmNlID09PSB3aW5kb3cgfHwgc291cmNlID09PSBudWxsKSAmJiBldi5kYXRhID09PSAncHJvY2Vzcy10aWNrJykge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKCdwcm9jZXNzLXRpY2snLCAnKicpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgICB9O1xufSkoKTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpXG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxuZm9yRWFjaChvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSksIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSlcbiAgICBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbn0pO1xuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSlcbiAgICByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSlcbiAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSlcbiAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZClcbiAgICByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcHJvY2Vzcy5uZXh0VGljayh0aGlzLmVuZC5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZiR2xpTDE5emRISmxZVzFmWkhWd2JHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRU52Y0hseWFXZG9kQ0JLYjNsbGJuUXNJRWx1WXk0Z1lXNWtJRzkwYUdWeUlFNXZaR1VnWTI5dWRISnBZblYwYjNKekxseHVMeTljYmk4dklGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaFhHNHZMeUJqYjNCNUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWkc5amRXMWxiblJoZEdsdmJpQm1hV3hsY3lBb2RHaGxYRzR2THlCY0lsTnZablIzWVhKbFhDSXBMQ0IwYnlCa1pXRnNJR2x1SUhSb1pTQlRiMlowZDJGeVpTQjNhWFJvYjNWMElISmxjM1J5YVdOMGFXOXVMQ0JwYm1Oc2RXUnBibWRjYmk4dklIZHBkR2h2ZFhRZ2JHbHRhWFJoZEdsdmJpQjBhR1VnY21sbmFIUnpJSFJ2SUhWelpTd2dZMjl3ZVN3Z2JXOWthV1o1TENCdFpYSm5aU3dnY0hWaWJHbHphQ3hjYmk4dklHUnBjM1J5YVdKMWRHVXNJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQjBhR1VnVTI5bWRIZGhjbVVzSUdGdVpDQjBieUJ3WlhKdGFYUmNiaTh2SUhCbGNuTnZibk1nZEc4Z2QyaHZiU0IwYUdVZ1UyOW1kSGRoY21VZ2FYTWdablZ5Ym1semFHVmtJSFJ2SUdSdklITnZMQ0J6ZFdKcVpXTjBJSFJ2SUhSb1pWeHVMeThnWm05c2JHOTNhVzVuSUdOdmJtUnBkR2x2Ym5NNlhHNHZMMXh1THk4Z1ZHaGxJR0ZpYjNabElHTnZjSGx5YVdkb2RDQnViM1JwWTJVZ1lXNWtJSFJvYVhNZ2NHVnliV2x6YzJsdmJpQnViM1JwWTJVZ2MyaGhiR3dnWW1VZ2FXNWpiSFZrWldSY2JpOHZJR2x1SUdGc2JDQmpiM0JwWlhNZ2IzSWdjM1ZpYzNSaGJuUnBZV3dnY0c5eWRHbHZibk1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMbHh1THk5Y2JpOHZJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU5jYmk4dklFOVNJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFpjYmk4dklFMUZVa05JUVU1VVFVSkpURWxVV1N3Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNWNiaTh2SUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTEZ4dUx5OGdSRUZOUVVkRlV5QlBVaUJQVkVoRlVpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U1hHNHZMeUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTd2dUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGWEc0dkx5QlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1WEc0dkx5QmhJR1IxY0d4bGVDQnpkSEpsWVcwZ2FYTWdhblZ6ZENCaElITjBjbVZoYlNCMGFHRjBJR2x6SUdKdmRHZ2djbVZoWkdGaWJHVWdZVzVrSUhkeWFYUmhZbXhsTGx4dUx5OGdVMmx1WTJVZ1NsTWdaRzlsYzI0bmRDQm9ZWFpsSUcxMWJIUnBjR3hsSUhCeWIzUnZkSGx3WVd3Z2FXNW9aWEpwZEdGdVkyVXNJSFJvYVhNZ1kyeGhjM05jYmk4dklIQnliM1J2ZEhsd1lXeHNlU0JwYm1obGNtbDBjeUJtY205dElGSmxZV1JoWW14bExDQmhibVFnZEdobGJpQndZWEpoYzJsMGFXTmhiR3g1SUdaeWIyMWNiaTh2SUZkeWFYUmhZbXhsTGx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFUjFjR3hsZUR0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNiblpoY2lCdlltcGxZM1JMWlhseklEMGdUMkpxWldOMExtdGxlWE1nZkh3Z1puVnVZM1JwYjI0Z0tHOWlhaWtnZTF4dUlDQjJZWElnYTJWNWN5QTlJRnRkTzF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IySnFLU0JyWlhsekxuQjFjMmdvYTJWNUtUdGNiaUFnY21WMGRYSnVJR3RsZVhNN1hHNTlYRzR2S2p3dmNtVndiR0ZqWlcxbGJuUStLaTljYmx4dVhHNHZLanh5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVkbUZ5SUhWMGFXd2dQU0J5WlhGMWFYSmxLQ2RqYjNKbExYVjBhV3d0YVhNbktUdGNiblYwYVd3dWFXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJTWldGa1lXSnNaU0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5eVpXRmtZV0pzWlNjcE8xeHVkbUZ5SUZkeWFYUmhZbXhsSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5WldGdFgzZHlhWFJoWW14bEp5azdYRzVjYm5WMGFXd3VhVzVvWlhKcGRITW9SSFZ3YkdWNExDQlNaV0ZrWVdKc1pTazdYRzVjYm1admNrVmhZMmdvYjJKcVpXTjBTMlY1Y3loWGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVcExDQm1kVzVqZEdsdmJpaHRaWFJvYjJRcElIdGNiaUFnYVdZZ0tDRkVkWEJzWlhndWNISnZkRzkwZVhCbFcyMWxkR2h2WkYwcFhHNGdJQ0FnUkhWd2JHVjRMbkJ5YjNSdmRIbHdaVnR0WlhSb2IyUmRJRDBnVjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsVzIxbGRHaHZaRjA3WEc1OUtUdGNibHh1Wm5WdVkzUnBiMjRnUkhWd2JHVjRLRzl3ZEdsdmJuTXBJSHRjYmlBZ2FXWWdLQ0VvZEdocGN5QnBibk4wWVc1alpXOW1JRVIxY0d4bGVDa3BYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkVkWEJzWlhnb2IzQjBhVzl1Y3lrN1hHNWNiaUFnVW1WaFpHRmliR1V1WTJGc2JDaDBhR2x6TENCdmNIUnBiMjV6S1R0Y2JpQWdWM0pwZEdGaWJHVXVZMkZzYkNoMGFHbHpMQ0J2Y0hScGIyNXpLVHRjYmx4dUlDQnBaaUFvYjNCMGFXOXVjeUFtSmlCdmNIUnBiMjV6TG5KbFlXUmhZbXhsSUQwOVBTQm1ZV3h6WlNsY2JpQWdJQ0IwYUdsekxuSmxZV1JoWW14bElEMGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NZ0ppWWdiM0IwYVc5dWN5NTNjbWwwWVdKc1pTQTlQVDBnWm1Gc2MyVXBYRzRnSUNBZ2RHaHBjeTUzY21sMFlXSnNaU0E5SUdaaGJITmxPMXh1WEc0Z0lIUm9hWE11WVd4c2IzZElZV3htVDNCbGJpQTlJSFJ5ZFdVN1hHNGdJR2xtSUNodmNIUnBiMjV6SUNZbUlHOXdkR2x2Ym5NdVlXeHNiM2RJWVd4bVQzQmxiaUE5UFQwZ1ptRnNjMlVwWEc0Z0lDQWdkR2hwY3k1aGJHeHZkMGhoYkdaUGNHVnVJRDBnWm1Gc2MyVTdYRzVjYmlBZ2RHaHBjeTV2Ym1ObEtDZGxibVFuTENCdmJtVnVaQ2s3WEc1OVhHNWNiaTh2SUhSb1pTQnVieTFvWVd4bUxXOXdaVzRnWlc1bWIzSmpaWEpjYm1aMWJtTjBhVzl1SUc5dVpXNWtLQ2tnZTF4dUlDQXZMeUJwWmlCM1pTQmhiR3h2ZHlCb1lXeG1MVzl3Wlc0Z2MzUmhkR1VzSUc5eUlHbG1JSFJvWlNCM2NtbDBZV0pzWlNCemFXUmxJR1Z1WkdWa0xGeHVJQ0F2THlCMGFHVnVJSGRsSjNKbElHOXJMbHh1SUNCcFppQW9kR2hwY3k1aGJHeHZkMGhoYkdaUGNHVnVJSHg4SUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVdVpXNWtaV1FwWEc0Z0lDQWdjbVYwZFhKdU8xeHVYRzRnSUM4dklHNXZJRzF2Y21VZ1pHRjBZU0JqWVc0Z1ltVWdkM0pwZEhSbGJpNWNiaUFnTHk4Z1FuVjBJR0ZzYkc5M0lHMXZjbVVnZDNKcGRHVnpJSFJ2SUdoaGNIQmxiaUJwYmlCMGFHbHpJSFJwWTJzdVhHNGdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29kR2hwY3k1bGJtUXVZbWx1WkNoMGFHbHpLU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1p2Y2tWaFkyZ2dLSGh6TENCbUtTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ2VITXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdaaWg0YzF0cFhTd2dhU2s3WEc0Z0lIMWNibjFjYmlKZGZRPT0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKVxuICAgIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59O1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuaWYgKCFFRS5saXN0ZW5lckNvdW50KSBFRS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmluZ0RlY29kZXI7XG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ3V0aWwnKTtcbmlmIChkZWJ1ZyAmJiBkZWJ1Zy5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICB2YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSBvcHRpb25zLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gKGh3bSB8fCBod20gPT09IDApID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIHRoaXMuYnVmZmVyID0gW107XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG5cblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KVxuICAgIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHdoZW4gcGlwaW5nLCB3ZSBvbmx5IGNhcmUgYWJvdXQgJ3JlYWRhYmxlJyBldmVudHMgdGhhdCBoYXBwZW5cbiAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay5cbiAgdGhpcy5yYW5PdXQgPSBmYWxzZTtcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcilcbiAgICAgIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKVxuICAgIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAodXRpbC5pc1N0cmluZyhjaHVuaykgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICBjaHVuayA9IG5ldyBCdWZmZXIoY2h1bmssIGVuY29kaW5nKTtcbiAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgZmFsc2UpO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCAnJywgdHJ1ZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkge1xuICB2YXIgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2UgaWYgKHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoY2h1bmspKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIGlmICghc3RhdGUuZW5kZWQpXG4gICAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgIGlmIChzdGF0ZS5lbmRlZCAmJiAhYWRkVG9Gcm9udCkge1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZEVtaXR0ZWQgJiYgYWRkVG9Gcm9udCkge1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50Jyk7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWFkZFRvRnJvbnQgJiYgIWVuY29kaW5nKVxuICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgICBpZiAoIWFkZFRvRnJvbnQpXG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gaWYgd2Ugd2FudCB0aGUgZGF0YSBub3csIGp1c3QgZW1pdCBpdC5cbiAgICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICAgICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICAgIGlmIChhZGRUb0Zyb250KVxuICAgICAgICAgIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgICAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKVxuICAgICAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICAgICAgfVxuXG4gICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiZcbiAgICAgICAgIChzdGF0ZS5uZWVkUmVhZGFibGUgfHxcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8XG4gICAgICAgICAgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbihlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKVxuICAgIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiAxMjhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIHJvdW5kVXBUb05leHRQb3dlck9mMihuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyXG4gICAgbi0tO1xuICAgIGZvciAodmFyIHAgPSAxOyBwIDwgMzI7IHAgPDw9IDEpIG4gfD0gbiA+PiBwO1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKVxuICAgIHJldHVybiAwO1xuXG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKVxuICAgIHJldHVybiBuID09PSAwID8gMCA6IDE7XG5cbiAgaWYgKGlzTmFOKG4pIHx8IHV0aWwuaXNOdWxsKG4pKSB7XG4gICAgLy8gb25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUuYnVmZmVyLmxlbmd0aClcbiAgICAgIHJldHVybiBzdGF0ZS5idWZmZXJbMF0ubGVuZ3RoO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAobiA8PSAwKVxuICAgIHJldHVybiAwO1xuXG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSB0YXJnZXQgYnVmZmVyIGxldmVsLFxuICAvLyB0aGVuIHJhaXNlIHRoZSB3YXRlciBtYXJrLiAgQnVtcCB1cCB0byB0aGUgbmV4dCBoaWdoZXN0XG4gIC8vIHBvd2VyIG9mIDIsIHRvIHByZXZlbnQgaW5jcmVhc2luZyBpdCBleGNlc3NpdmVseSBpbiB0aW55XG4gIC8vIGFtb3VudHMuXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaylcbiAgICBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gcm91bmRVcFRvTmV4dFBvd2VyT2YyKG4pO1xuXG4gIC8vIGRvbid0IGhhdmUgdGhhdCBtdWNoLiAgcmV0dXJuIG51bGwsIHVubGVzcyB3ZSd2ZSBlbmRlZC5cbiAgaWYgKG4gPiBzdGF0ZS5sZW5ndGgpIHtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG47XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAoIXV0aWwuaXNOdW1iZXIobikgfHwgbiA+IDApXG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJlxuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlICYmXG4gICAgICAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpXG4gICAgICBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICBlbHNlXG4gICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApXG4gICAgICBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9XG5cbiAgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKVxuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gIH1cblxuICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gIGlmIChkb1JlYWQgJiYgIXN0YXRlLnJlYWRpbmcpXG4gICAgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApXG4gICAgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO1xuICBlbHNlXG4gICAgcmV0ID0gbnVsbDtcblxuICBpZiAodXRpbC5pc051bGwocmV0KSkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH1cblxuICBzdGF0ZS5sZW5ndGggLT0gbjtcblxuICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5lbmRlZClcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMClcbiAgICBlbmRSZWFkYWJsZSh0aGlzKTtcblxuICBpZiAoIXV0aWwuaXNOdWxsKHJldCkpXG4gICAgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXIgPSBudWxsO1xuICBpZiAoIXV0aWwuaXNCdWZmZXIoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc1N0cmluZyhjaHVuaykgJiZcbiAgICAgICF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSAmJlxuICAgICAgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgZWxzZVxuICAgICAgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmXG4gICAgICAgICBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO1xuICAgIGVsc2VcbiAgICAgIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmXG4gICAgICAgICAgICAgIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmXG4gICAgICAgICAgICAgIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiBjbGVhbnVwO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZClcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVuZEZuKTtcbiAgZWxzZVxuICAgIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSkge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiZcbiAgICAgICAgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSlcbiAgICAgIG9uZHJhaW4oKTtcbiAgfVxuXG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQpIHtcbiAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLFxuICAgICAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKVxuICAgICAgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuICAvLyBUaGlzIGlzIGEgYnJ1dGFsbHkgdWdseSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyXG4gIC8vIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnkgdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuXG4gIGlmICghZGVzdC5fZXZlbnRzIHx8ICFkZXN0Ll9ldmVudHMuZXJyb3IpXG4gICAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZWxzZSBpZiAoaXNBcnJheShkZXN0Ll9ldmVudHMuZXJyb3IpKVxuICAgIGRlc3QuX2V2ZW50cy5lcnJvci51bnNoaWZ0KG9uZXJyb3IpO1xuICBlbHNlXG4gICAgZGVzdC5fZXZlbnRzLmVycm9yID0gW29uZXJyb3IsIGRlc3QuX2V2ZW50cy5lcnJvcl07XG5cblxuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbilcbiAgICAgIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRS5saXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbihkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdClcbiAgICAgIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpXG4gICAgICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaSA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaSA9PT0gLTEpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGksIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKVxuICAgIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIC8vIElmIGxpc3RlbmluZyB0byBkYXRhLCBhbmQgaXQgaGFzIG5vdCBleHBsaWNpdGx5IGJlZW4gcGF1c2VkLFxuICAvLyB0aGVuIGNhbGwgcmVzdW1lIHRvIHN0YXJ0IHRoZSBmbG93IG9mIGRhdGEgb24gdGhlIG5leHQgdGljay5cbiAgaWYgKGV2ID09PSAnZGF0YScgJiYgZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIHRoaXMucmVzdW1lKCk7XG4gIH1cblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgJiYgdGhpcy5yZWFkYWJsZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gICAgICAgICAgc2VsZi5yZWFkKDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICAgIHRoaXMucmVhZCgwKTtcbiAgICB9XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgcmVzdW1lXyhzdHJlYW0sIHN0YXRlKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZylcbiAgICBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgY2h1bmsgPSBzdHJlYW0ucmVhZCgpO1xuICAgIH0gd2hpbGUgKG51bGwgIT09IGNodW5rICYmIHN0YXRlLmZsb3dpbmcpO1xuICB9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aClcbiAgICAgICAgc2VsZi5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKVxuICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICBpZiAoIWNodW5rIHx8ICFzdGF0ZS5vYmplY3RNb2RlICYmICFjaHVuay5sZW5ndGgpXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gc2VsZi5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKHN0cmVhbVtpXSkgJiYgdXRpbC5pc1VuZGVmaW5lZCh0aGlzW2ldKSkge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uKG1ldGhvZCkgeyByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICB9fShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIHZhciBldmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG4gIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbihldikge1xuICAgIHN0cmVhbS5vbihldiwgc2VsZi5lbWl0LmJpbmQoc2VsZiwgZXYpKTtcbiAgfSk7XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgc2VsZi5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cblxuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIHZhciBsaXN0ID0gc3RhdGUuYnVmZmVyO1xuICB2YXIgbGVuZ3RoID0gc3RhdGUubGVuZ3RoO1xuICB2YXIgc3RyaW5nTW9kZSA9ICEhc3RhdGUuZGVjb2RlcjtcbiAgdmFyIG9iamVjdE1vZGUgPSAhIXN0YXRlLm9iamVjdE1vZGU7XG4gIHZhciByZXQ7XG5cbiAgLy8gbm90aGluZyBpbiB0aGUgbGlzdCwgZGVmaW5pdGVseSBlbXB0eS5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmIChsZW5ndGggPT09IDApXG4gICAgcmV0ID0gbnVsbDtcbiAgZWxzZSBpZiAob2JqZWN0TW9kZSlcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIGVsc2UgaWYgKCFuIHx8IG4gPj0gbGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBhcnJheS5cbiAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgIHJldCA9IGxpc3Quam9pbignJyk7XG4gICAgZWxzZVxuICAgICAgcmV0ID0gQnVmZmVyLmNvbmNhdChsaXN0LCBsZW5ndGgpO1xuICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIGp1c3Qgc29tZSBvZiBpdC5cbiAgICBpZiAobiA8IGxpc3RbMF0ubGVuZ3RoKSB7XG4gICAgICAvLyBqdXN0IHRha2UgYSBwYXJ0IG9mIHRoZSBmaXJzdCBsaXN0IGl0ZW0uXG4gICAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cbiAgICAgIHZhciBidWYgPSBsaXN0WzBdO1xuICAgICAgcmV0ID0gYnVmLnNsaWNlKDAsIG4pO1xuICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShuKTtcbiAgICB9IGVsc2UgaWYgKG4gPT09IGxpc3RbMF0ubGVuZ3RoKSB7XG4gICAgICAvLyBmaXJzdCBsaXN0IGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb21wbGV4IGNhc2UuXG4gICAgICAvLyB3ZSBoYXZlIGVub3VnaCB0byBjb3ZlciBpdCwgYnV0IGl0IHNwYW5zIHBhc3QgdGhlIGZpcnN0IGJ1ZmZlci5cbiAgICAgIGlmIChzdHJpbmdNb2RlKVxuICAgICAgICByZXQgPSAnJztcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0ID0gbmV3IEJ1ZmZlcihuKTtcblxuICAgICAgdmFyIGMgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGwgJiYgYyA8IG47IGkrKykge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFswXTtcbiAgICAgICAgdmFyIGNweSA9IE1hdGgubWluKG4gLSBjLCBidWYubGVuZ3RoKTtcblxuICAgICAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgICAgICByZXQgKz0gYnVmLnNsaWNlKDAsIGNweSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBidWYuY29weShyZXQsIGMsIDAsIGNweSk7XG5cbiAgICAgICAgaWYgKGNweSA8IGJ1Zi5sZW5ndGgpXG4gICAgICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShjcHkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuXG4gICAgICAgIGMgKz0gY3B5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKVxuICAgIHRocm93IG5ldyBFcnJvcignZW5kUmVhZGFibGUgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICAgICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YgKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmJHbGlMMTl6ZEhKbFlXMWZjbVZoWkdGaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGa1lXSnNaVHRjYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JuWmhjaUJwYzBGeWNtRjVJRDBnY21WeGRXbHlaU2duYVhOaGNuSmhlU2NwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDZGlkV1ptWlhJbktTNUNkV1ptWlhJN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1VW1WaFpHRmliR1V1VW1WaFpHRmliR1ZUZEdGMFpTQTlJRkpsWVdSaFlteGxVM1JoZEdVN1hHNWNiblpoY2lCRlJTQTlJSEpsY1hWcGNtVW9KMlYyWlc1MGN5Y3BMa1YyWlc1MFJXMXBkSFJsY2p0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibWxtSUNnaFJVVXViR2x6ZEdWdVpYSkRiM1Z1ZENrZ1JVVXViR2x6ZEdWdVpYSkRiM1Z1ZENBOUlHWjFibU4wYVc5dUtHVnRhWFIwWlhJc0lIUjVjR1VwSUh0Y2JpQWdjbVYwZFhKdUlHVnRhWFIwWlhJdWJHbHpkR1Z1WlhKektIUjVjR1VwTG14bGJtZDBhRHRjYm4wN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlGTjBjbVZoYlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcE8xeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlIVjBhV3dnUFNCeVpYRjFhWEpsS0NkamIzSmxMWFYwYVd3dGFYTW5LVHRjYm5WMGFXd3VhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCVGRISnBibWRFWldOdlpHVnlPMXh1WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnWkdWaWRXY2dQU0J5WlhGMWFYSmxLQ2QxZEdsc0p5azdYRzVwWmlBb1pHVmlkV2NnSmlZZ1pHVmlkV2N1WkdWaWRXZHNiMmNwSUh0Y2JpQWdaR1ZpZFdjZ1BTQmtaV0oxWnk1a1pXSjFaMnh2WnlnbmMzUnlaV0Z0SnlrN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JrWldKMVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0OU8xeHVmVnh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JseHVkWFJwYkM1cGJtaGxjbWwwY3loU1pXRmtZV0pzWlN3Z1UzUnlaV0Z0S1R0Y2JseHVablZ1WTNScGIyNGdVbVZoWkdGaWJHVlRkR0YwWlNodmNIUnBiMjV6TENCemRISmxZVzBwSUh0Y2JpQWdkbUZ5SUVSMWNHeGxlQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5a2RYQnNaWGduS1R0Y2JseHVJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNibHh1SUNBdkx5QjBhR1VnY0c5cGJuUWdZWFFnZDJocFkyZ2dhWFFnYzNSdmNITWdZMkZzYkdsdVp5QmZjbVZoWkNncElIUnZJR1pwYkd3Z2RHaGxJR0oxWm1abGNseHVJQ0F2THlCT2IzUmxPaUF3SUdseklHRWdkbUZzYVdRZ2RtRnNkV1VzSUcxbFlXNXpJRndpWkc5dUozUWdZMkZzYkNCZmNtVmhaQ0J3Y21WbGJYQjBhWFpsYkhrZ1pYWmxjbHdpWEc0Z0lIWmhjaUJvZDIwZ1BTQnZjSFJwYjI1ekxtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lIWmhjaUJrWldaaGRXeDBTSGR0SUQwZ2IzQjBhVzl1Y3k1dlltcGxZM1JOYjJSbElEOGdNVFlnT2lBeE5pQXFJREV3TWpRN1hHNGdJSFJvYVhNdWFHbG5hRmRoZEdWeVRXRnlheUE5SUNob2QyMGdmSHdnYUhkdElEMDlQU0F3S1NBL0lHaDNiU0E2SUdSbFptRjFiSFJJZDIwN1hHNWNiaUFnTHk4Z1kyRnpkQ0IwYnlCcGJuUnpMbHh1SUNCMGFHbHpMbWhwWjJoWFlYUmxjazFoY21zZ1BTQitmblJvYVhNdWFHbG5hRmRoZEdWeVRXRnlhenRjYmx4dUlDQjBhR2x6TG1KMVptWmxjaUE5SUZ0ZE8xeHVJQ0IwYUdsekxteGxibWQwYUNBOUlEQTdYRzRnSUhSb2FYTXVjR2x3WlhNZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG5CcGNHVnpRMjkxYm5RZ1BTQXdPMXh1SUNCMGFHbHpMbVpzYjNkcGJtY2dQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVaR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lIUm9hWE11Wlc1a1JXMXBkSFJsWkNBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJoSUdac1lXY2dkRzhnWW1VZ1lXSnNaU0IwYnlCMFpXeHNJR2xtSUhSb1pTQnZibmR5YVhSbElHTmlJR2x6SUdOaGJHeGxaQ0JwYlcxbFpHbGhkR1ZzZVN4Y2JpQWdMeThnYjNJZ2IyNGdZU0JzWVhSbGNpQjBhV05yTGlBZ1YyVWdjMlYwSUhSb2FYTWdkRzhnZEhKMVpTQmhkQ0JtYVhKemRDd2dZbVZqWVhWelpTQmhibmxjYmlBZ0x5OGdZV04wYVc5dWN5QjBhR0YwSUhOb2IzVnNaRzRuZENCb1lYQndaVzRnZFc1MGFXd2dYQ0pzWVhSbGNsd2lJSE5vYjNWc1pDQm5aVzVsY21Gc2JIa2dZV3h6YjF4dUlDQXZMeUJ1YjNRZ2FHRndjR1Z1SUdKbFptOXlaU0IwYUdVZ1ptbHljM1FnZDNKcGRHVWdZMkZzYkM1Y2JpQWdkR2hwY3k1emVXNWpJRDBnZEhKMVpUdGNibHh1SUNBdkx5QjNhR1Z1WlhabGNpQjNaU0J5WlhSMWNtNGdiblZzYkN3Z2RHaGxiaUIzWlNCelpYUWdZU0JtYkdGbklIUnZJSE5oZVZ4dUlDQXZMeUIwYUdGMElIZGxKM0psSUdGM1lXbDBhVzVuSUdFZ0ozSmxZV1JoWW14bEp5QmxkbVZ1ZENCbGJXbHpjMmx2Ymk1Y2JpQWdkR2hwY3k1dVpXVmtVbVZoWkdGaWJHVWdQU0JtWVd4elpUdGNiaUFnZEdocGN5NWxiV2wwZEdWa1VtVmhaR0ZpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1eVpXRmtZV0pzWlV4cGMzUmxibWx1WnlBOUlHWmhiSE5sTzF4dVhHNWNiaUFnTHk4Z2IySnFaV04wSUhOMGNtVmhiU0JtYkdGbkxpQlZjMlZrSUhSdklHMWhhMlVnY21WaFpDaHVLU0JwWjI1dmNtVWdiaUJoYm1RZ2RHOWNiaUFnTHk4Z2JXRnJaU0JoYkd3Z2RHaGxJR0oxWm1abGNpQnRaWEpuYVc1bklHRnVaQ0JzWlc1bmRHZ2dZMmhsWTJ0eklHZHZJR0YzWVhsY2JpQWdkR2hwY3k1dlltcGxZM1JOYjJSbElEMGdJU0Z2Y0hScGIyNXpMbTlpYW1WamRFMXZaR1U3WEc1Y2JpQWdhV1lnS0hOMGNtVmhiU0JwYm5OMFlXNWpaVzltSUVSMWNHeGxlQ2xjYmlBZ0lDQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1BTQjBhR2x6TG05aWFtVmpkRTF2WkdVZ2ZId2dJU0Z2Y0hScGIyNXpMbkpsWVdSaFlteGxUMkpxWldOMFRXOWtaVHRjYmx4dUlDQXZMeUJEY25sd2RHOGdhWE1nYTJsdVpDQnZaaUJ2YkdRZ1lXNWtJR055ZFhOMGVTNGdJRWhwYzNSdmNtbGpZV3hzZVN3Z2FYUnpJR1JsWm1GMWJIUWdjM1J5YVc1blhHNGdJQzh2SUdWdVkyOWthVzVuSUdseklDZGlhVzVoY25rbklITnZJSGRsSUdoaGRtVWdkRzhnYldGclpTQjBhR2x6SUdOdmJtWnBaM1Z5WVdKc1pTNWNiaUFnTHk4Z1JYWmxjbmwwYUdsdVp5QmxiSE5sSUdsdUlIUm9aU0IxYm1sMlpYSnpaU0IxYzJWeklDZDFkR1k0Snl3Z2RHaHZkV2RvTGx4dUlDQjBhR2x6TG1SbFptRjFiSFJGYm1OdlpHbHVaeUE5SUc5d2RHbHZibk11WkdWbVlYVnNkRVZ1WTI5a2FXNW5JSHg4SUNkMWRHWTRKenRjYmx4dUlDQXZMeUIzYUdWdUlIQnBjR2x1Wnl3Z2QyVWdiMjVzZVNCallYSmxJR0ZpYjNWMElDZHlaV0ZrWVdKc1pTY2daWFpsYm5SeklIUm9ZWFFnYUdGd2NHVnVYRzRnSUM4dklHRm1kR1Z5SUhKbFlXUW9LV2x1WnlCaGJHd2dkR2hsSUdKNWRHVnpJR0Z1WkNCdWIzUWdaMlYwZEdsdVp5QmhibmtnY0hWemFHSmhZMnN1WEc0Z0lIUm9hWE11Y21GdVQzVjBJRDBnWm1Gc2MyVTdYRzVjYmlBZ0x5OGdkR2hsSUc1MWJXSmxjaUJ2WmlCM2NtbDBaWEp6SUhSb1lYUWdZWEpsSUdGM1lXbDBhVzVuSUdFZ1pISmhhVzRnWlhabGJuUWdhVzRnTG5CcGNHVW9LWE5jYmlBZ2RHaHBjeTVoZDJGcGRFUnlZV2x1SUQwZ01EdGNibHh1SUNBdkx5QnBaaUIwY25WbExDQmhJRzFoZVdKbFVtVmhaRTF2Y21VZ2FHRnpJR0psWlc0Z2MyTm9aV1IxYkdWa1hHNGdJSFJvYVhNdWNtVmhaR2x1WjAxdmNtVWdQU0JtWVd4elpUdGNibHh1SUNCMGFHbHpMbVJsWTI5a1pYSWdQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JpQWdhV1lnS0c5d2RHbHZibk11Wlc1amIyUnBibWNwSUh0Y2JpQWdJQ0JwWmlBb0lWTjBjbWx1WjBSbFkyOWtaWElwWEc0Z0lDQWdJQ0JUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJdkp5a3VVM1J5YVc1blJHVmpiMlJsY2p0Y2JpQWdJQ0IwYUdsekxtUmxZMjlrWlhJZ1BTQnVaWGNnVTNSeWFXNW5SR1ZqYjJSbGNpaHZjSFJwYjI1ekxtVnVZMjlrYVc1bktUdGNiaUFnSUNCMGFHbHpMbVZ1WTI5a2FXNW5JRDBnYjNCMGFXOXVjeTVsYm1OdlpHbHVaenRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCU1pXRmtZV0pzWlNodmNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCRWRYQnNaWGdnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpsWVcxZlpIVndiR1Y0SnlrN1hHNWNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGSmxZV1JoWW14bEtTbGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGSmxZV1JoWW14bEtHOXdkR2x2Ym5NcE8xeHVYRzRnSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVZ1BTQnVaWGNnVW1WaFpHRmliR1ZUZEdGMFpTaHZjSFJwYjI1ekxDQjBhR2x6S1R0Y2JseHVJQ0F2THlCc1pXZGhZM2xjYmlBZ2RHaHBjeTV5WldGa1lXSnNaU0E5SUhSeWRXVTdYRzVjYmlBZ1UzUnlaV0Z0TG1OaGJHd29kR2hwY3lrN1hHNTlYRzVjYmk4dklFMWhiblZoYkd4NUlITm9iM1psSUhOdmJXVjBhR2x1WnlCcGJuUnZJSFJvWlNCeVpXRmtLQ2tnWW5WbVptVnlMbHh1THk4Z1ZHaHBjeUJ5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUdocFoyaFhZWFJsY2sxaGNtc2dhR0Z6SUc1dmRDQmlaV1Z1SUdocGRDQjVaWFFzWEc0dkx5QnphVzFwYkdGeUlIUnZJR2h2ZHlCWGNtbDBZV0pzWlM1M2NtbDBaU2dwSUhKbGRIVnlibk1nZEhKMVpTQnBaaUI1YjNVZ2MyaHZkV3hrWEc0dkx5QjNjbWwwWlNncElITnZiV1VnYlc5eVpTNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3ZFhOb0lEMGdablZ1WTNScGIyNG9ZMmgxYm1zc0lHVnVZMjlrYVc1bktTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjYmlBZ2FXWWdLSFYwYVd3dWFYTlRkSEpwYm1jb1kyaDFibXNwSUNZbUlDRnpkR0YwWlM1dlltcGxZM1JOYjJSbEtTQjdYRzRnSUNBZ1pXNWpiMlJwYm1jZ1BTQmxibU52WkdsdVp5QjhmQ0J6ZEdGMFpTNWtaV1poZFd4MFJXNWpiMlJwYm1jN1hHNGdJQ0FnYVdZZ0tHVnVZMjlrYVc1bklDRTlQU0J6ZEdGMFpTNWxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMmgxYm1zZ1BTQnVaWGNnUW5WbVptVnlLR05vZFc1ckxDQmxibU52WkdsdVp5azdYRzRnSUNBZ0lDQmxibU52WkdsdVp5QTlJQ2NuTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ5WldGa1lXSnNaVUZrWkVOb2RXNXJLSFJvYVhNc0lITjBZWFJsTENCamFIVnVheXdnWlc1amIyUnBibWNzSUdaaGJITmxLVHRjYm4wN1hHNWNiaTh2SUZWdWMyaHBablFnYzJodmRXeGtJQ3BoYkhkaGVYTXFJR0psSUhOdmJXVjBhR2x1WnlCa2FYSmxZM1JzZVNCdmRYUWdiMllnY21WaFpDZ3BYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZFc1emFHbG1kQ0E5SUdaMWJtTjBhVzl1S0dOb2RXNXJLU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lISmxkSFZ5YmlCeVpXRmtZV0pzWlVGa1pFTm9kVzVyS0hSb2FYTXNJSE4wWVhSbExDQmphSFZ1YXl3Z0p5Y3NJSFJ5ZFdVcE8xeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2NtVmhaR0ZpYkdWQlpHUkRhSFZ1YXloemRISmxZVzBzSUhOMFlYUmxMQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR0ZrWkZSdlJuSnZiblFwSUh0Y2JpQWdkbUZ5SUdWeUlEMGdZMmgxYm10SmJuWmhiR2xrS0hOMFlYUmxMQ0JqYUhWdWF5azdYRzRnSUdsbUlDaGxjaWtnZTF4dUlDQWdJSE4wY21WaGJTNWxiV2wwS0NkbGNuSnZjaWNzSUdWeUtUdGNiaUFnZlNCbGJITmxJR2xtSUNoMWRHbHNMbWx6VG5Wc2JFOXlWVzVrWldacGJtVmtLR05vZFc1cktTa2dlMXh1SUNBZ0lITjBZWFJsTG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVZ1WkdWa0tWeHVJQ0FnSUNBZ2IyNUZiMlpEYUhWdWF5aHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJSHg4SUdOb2RXNXJJQ1ltSUdOb2RXNXJMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1Wlc1a1pXUWdKaVlnSVdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnSUNBZ0lIWmhjaUJsSUQwZ2JtVjNJRVZ5Y205eUtDZHpkSEpsWVcwdWNIVnphQ2dwSUdGbWRHVnlJRVZQUmljcE8xeHVJQ0FnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlZ5Y205eUp5d2daU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNWxibVJGYldsMGRHVmtJQ1ltSUdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnSUNBZ0lIWmhjaUJsSUQwZ2JtVjNJRVZ5Y205eUtDZHpkSEpsWVcwdWRXNXphR2xtZENncElHRm1kR1Z5SUdWdVpDQmxkbVZ1ZENjcE8xeHVJQ0FnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlZ5Y205eUp5d2daU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTNWtaV052WkdWeUlDWW1JQ0ZoWkdSVWIwWnliMjUwSUNZbUlDRmxibU52WkdsdVp5bGNiaUFnSUNBZ0lDQWdZMmgxYm1zZ1BTQnpkR0YwWlM1a1pXTnZaR1Z5TG5keWFYUmxLR05vZFc1cktUdGNibHh1SUNBZ0lDQWdhV1lnS0NGaFpHUlViMFp5YjI1MEtWeHVJQ0FnSUNBZ0lDQnpkR0YwWlM1eVpXRmthVzVuSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUM4dklHbG1JSGRsSUhkaGJuUWdkR2hsSUdSaGRHRWdibTkzTENCcWRYTjBJR1Z0YVhRZ2FYUXVYRzRnSUNBZ0lDQnBaaUFvYzNSaGRHVXVabXh2ZDJsdVp5QW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFnSmlZZ0lYTjBZWFJsTG5ONWJtTXBJSHRjYmlBZ0lDQWdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyUmhkR0VuTENCamFIVnVheWs3WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiUzV5WldGa0tEQXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnZFhCa1lYUmxJSFJvWlNCaWRXWm1aWElnYVc1bWJ5NWNiaUFnSUNBZ0lDQWdjM1JoZEdVdWJHVnVaM1JvSUNzOUlITjBZWFJsTG05aWFtVmpkRTF2WkdVZ1B5QXhJRG9nWTJoMWJtc3ViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQnBaaUFvWVdSa1ZHOUdjbTl1ZENsY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1ZFc1emFHbG1kQ2hqYUhWdWF5azdYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1Y0hWemFDaGphSFZ1YXlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNsY2JpQWdJQ0FnSUNBZ0lDQmxiV2wwVW1WaFpHRmliR1VvYzNSeVpXRnRLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYldGNVltVlNaV0ZrVFc5eVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCcFppQW9JV0ZrWkZSdlJuSnZiblFwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2JtVmxaRTF2Y21WRVlYUmhLSE4wWVhSbEtUdGNibjFjYmx4dVhHNWNiaTh2SUdsbUlHbDBKM01nY0dGemRDQjBhR1VnYUdsbmFDQjNZWFJsY2lCdFlYSnJMQ0IzWlNCallXNGdjSFZ6YUNCcGJpQnpiMjFsSUcxdmNtVXVYRzR2THlCQmJITnZMQ0JwWmlCM1pTQm9ZWFpsSUc1dklHUmhkR0VnZVdWMExDQjNaU0JqWVc0Z2MzUmhibVFnYzI5dFpWeHVMeThnYlc5eVpTQmllWFJsY3k0Z0lGUm9hWE1nYVhNZ2RHOGdkMjl5YXlCaGNtOTFibVFnWTJGelpYTWdkMmhsY21VZ2FIZHRQVEFzWEc0dkx5QnpkV05vSUdGeklIUm9aU0J5WlhCc0xpQWdRV3h6Ynl3Z2FXWWdkR2hsSUhCMWMyZ29LU0IwY21sbloyVnlaV1FnWVZ4dUx5OGdjbVZoWkdGaWJHVWdaWFpsYm5Rc0lHRnVaQ0IwYUdVZ2RYTmxjaUJqWVd4c1pXUWdjbVZoWkNoc1lYSm5aVTUxYldKbGNpa2djM1ZqYUNCMGFHRjBYRzR2THlCdVpXVmtVbVZoWkdGaWJHVWdkMkZ6SUhObGRDd2dkR2hsYmlCM1pTQnZkV2RvZENCMGJ5QndkWE5vSUcxdmNtVXNJSE52SUhSb1lYUWdZVzV2ZEdobGNseHVMeThnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ0IzYVd4c0lHSmxJSFJ5YVdkblpYSmxaQzVjYm1aMWJtTjBhVzl1SUc1bFpXUk5iM0psUkdGMFlTaHpkR0YwWlNrZ2UxeHVJQ0J5WlhSMWNtNGdJWE4wWVhSbExtVnVaR1ZrSUNZbVhHNGdJQ0FnSUNBZ0lDQW9jM1JoZEdVdWJtVmxaRkpsWVdSaFlteGxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkR1V1YkdWdVozUm9JRHdnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlCOGZGeHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ2s3WEc1OVhHNWNiaTh2SUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVMbHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5ObGRFVnVZMjlrYVc1bklEMGdablZ1WTNScGIyNG9aVzVqS1NCN1hHNGdJR2xtSUNnaFUzUnlhVzVuUkdWamIyUmxjaWxjYmlBZ0lDQlRkSEpwYm1kRVpXTnZaR1Z5SUQwZ2NtVnhkV2x5WlNnbmMzUnlhVzVuWDJSbFkyOWtaWEl2SnlrdVUzUnlhVzVuUkdWamIyUmxjanRjYmlBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaV052WkdWeUlEMGdibVYzSUZOMGNtbHVaMFJsWTI5a1pYSW9aVzVqS1R0Y2JpQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVsYm1OdlpHbHVaeUE5SUdWdVl6dGNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc0dkx5QkViMjRuZENCeVlXbHpaU0IwYUdVZ2FIZHRJRDRnTVRJNFRVSmNiblpoY2lCTlFWaGZTRmROSUQwZ01IZzRNREF3TURBN1hHNW1kVzVqZEdsdmJpQnliM1Z1WkZWd1ZHOU9aWGgwVUc5M1pYSlBaaklvYmlrZ2UxeHVJQ0JwWmlBb2JpQStQU0JOUVZoZlNGZE5LU0I3WEc0Z0lDQWdiaUE5SUUxQldGOUlWMDA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1IyVjBJSFJvWlNCdVpYaDBJR2hwWjJobGMzUWdjRzkzWlhJZ2IyWWdNbHh1SUNBZ0lHNHRMVHRjYmlBZ0lDQm1iM0lnS0haaGNpQndJRDBnTVRzZ2NDQThJRE15T3lCd0lEdzhQU0F4S1NCdUlIdzlJRzRnUGo0Z2NEdGNiaUFnSUNCdUt5czdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaHZkMDExWTJoVWIxSmxZV1FvYml3Z2MzUmhkR1VwSUh0Y2JpQWdhV1lnS0hOMFlYUmxMbXhsYm1kMGFDQTlQVDBnTUNBbUppQnpkR0YwWlM1bGJtUmxaQ2xjYmlBZ0lDQnlaWFIxY200Z01EdGNibHh1SUNCcFppQW9jM1JoZEdVdWIySnFaV04wVFc5a1pTbGNiaUFnSUNCeVpYUjFjbTRnYmlBOVBUMGdNQ0EvSURBZ09pQXhPMXh1WEc0Z0lHbG1JQ2hwYzA1aFRpaHVLU0I4ZkNCMWRHbHNMbWx6VG5Wc2JDaHVLU2tnZTF4dUlDQWdJQzh2SUc5dWJIa2dabXh2ZHlCdmJtVWdZblZtWm1WeUlHRjBJR0VnZEdsdFpWeHVJQ0FnSUdsbUlDaHpkR0YwWlM1bWJHOTNhVzVuSUNZbUlITjBZWFJsTG1KMVptWmxjaTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUmhkR1V1WW5WbVptVnlXekJkTG14bGJtZDBhRHRjYmlBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1JoZEdVdWJHVnVaM1JvTzF4dUlDQjlYRzVjYmlBZ2FXWWdLRzRnUEQwZ01DbGNiaUFnSUNCeVpYUjFjbTRnTUR0Y2JseHVJQ0F2THlCSlppQjNaU2R5WlNCaGMydHBibWNnWm05eUlHMXZjbVVnZEdoaGJpQjBhR1VnZEdGeVoyVjBJR0oxWm1abGNpQnNaWFpsYkN4Y2JpQWdMeThnZEdobGJpQnlZV2x6WlNCMGFHVWdkMkYwWlhJZ2JXRnlheTRnSUVKMWJYQWdkWEFnZEc4Z2RHaGxJRzVsZUhRZ2FHbG5hR1Z6ZEZ4dUlDQXZMeUJ3YjNkbGNpQnZaaUF5TENCMGJ5QndjbVYyWlc1MElHbHVZM0psWVhOcGJtY2dhWFFnWlhoalpYTnphWFpsYkhrZ2FXNGdkR2x1ZVZ4dUlDQXZMeUJoYlc5MWJuUnpMbHh1SUNCcFppQW9iaUErSUhOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zcFhHNGdJQ0FnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlISnZkVzVrVlhCVWIwNWxlSFJRYjNkbGNrOW1NaWh1S1R0Y2JseHVJQ0F2THlCa2IyNG5kQ0JvWVhabElIUm9ZWFFnYlhWamFDNGdJSEpsZEhWeWJpQnVkV3hzTENCMWJteGxjM01nZDJVbmRtVWdaVzVrWldRdVhHNGdJR2xtSUNodUlENGdjM1JoZEdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYVdZZ0tDRnpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lIMGdaV3h6WlZ4dUlDQWdJQ0FnY21WMGRYSnVJSE4wWVhSbExteGxibWQwYUR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdU8xeHVmVnh1WEc0dkx5QjViM1VnWTJGdUlHOTJaWEp5YVdSbElHVnBkR2hsY2lCMGFHbHpJRzFsZEdodlpDd2diM0lnZEdobElHRnplVzVqSUY5eVpXRmtLRzRwSUdKbGJHOTNMbHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5KbFlXUWdQU0JtZFc1amRHbHZiaWh1S1NCN1hHNGdJR1JsWW5WbktDZHlaV0ZrSnl3Z2JpazdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzRnSUhaaGNpQnVUM0pwWnlBOUlHNDdYRzVjYmlBZ2FXWWdLQ0YxZEdsc0xtbHpUblZ0WW1WeUtHNHBJSHg4SUc0Z1BpQXdLVnh1SUNBZ0lITjBZWFJsTG1WdGFYUjBaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1WEc0Z0lDOHZJR2xtSUhkbEozSmxJR1J2YVc1bklISmxZV1FvTUNrZ2RHOGdkSEpwWjJkbGNpQmhJSEpsWVdSaFlteGxJR1YyWlc1MExDQmlkWFFnZDJWY2JpQWdMeThnWVd4eVpXRmtlU0JvWVhabElHRWdZblZ1WTJnZ2IyWWdaR0YwWVNCcGJpQjBhR1VnWW5WbVptVnlMQ0IwYUdWdUlHcDFjM1FnZEhKcFoyZGxjbHh1SUNBdkx5QjBhR1VnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ0JoYm1RZ2JXOTJaU0J2Ymk1Y2JpQWdhV1lnS0c0Z1BUMDlJREFnSmlaY2JpQWdJQ0FnSUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNBbUpseHVJQ0FnSUNBZ0tITjBZWFJsTG14bGJtZDBhQ0ErUFNCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcklIeDhJSE4wWVhSbExtVnVaR1ZrS1NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R5WldGa09pQmxiV2wwVW1WaFpHRmliR1VuTENCemRHRjBaUzVzWlc1bmRHZ3NJSE4wWVhSbExtVnVaR1ZrS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JSE4wWVhSbExtVnVaR1ZrS1Z4dUlDQWdJQ0FnWlc1a1VtVmhaR0ZpYkdVb2RHaHBjeWs3WEc0Z0lDQWdaV3h6WlZ4dUlDQWdJQ0FnWlcxcGRGSmxZV1JoWW14bEtIUm9hWE1wTzF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ2JpQTlJR2h2ZDAxMVkyaFViMUpsWVdRb2Jpd2djM1JoZEdVcE8xeHVYRzRnSUM4dklHbG1JSGRsSjNabElHVnVaR1ZrTENCaGJtUWdkMlVuY21VZ2JtOTNJR05zWldGeUxDQjBhR1Z1SUdacGJtbHphQ0JwZENCMWNDNWNiaUFnYVdZZ0tHNGdQVDA5SURBZ0ppWWdjM1JoZEdVdVpXNWtaV1FwSUh0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUNBZ1pXNWtVbVZoWkdGaWJHVW9kR2hwY3lrN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQXZMeUJCYkd3Z2RHaGxJR0ZqZEhWaGJDQmphSFZ1YXlCblpXNWxjbUYwYVc5dUlHeHZaMmxqSUc1bFpXUnpJSFJ2SUdKbFhHNGdJQzh2SUNwaVpXeHZkeW9nZEdobElHTmhiR3dnZEc4Z1gzSmxZV1F1SUNCVWFHVWdjbVZoYzI5dUlHbHpJSFJvWVhRZ2FXNGdZMlZ5ZEdGcGJseHVJQ0F2THlCemVXNTBhR1YwYVdNZ2MzUnlaV0Z0SUdOaGMyVnpMQ0J6ZFdOb0lHRnpJSEJoYzNOMGFISnZkV2RvSUhOMGNtVmhiWE1zSUY5eVpXRmtYRzRnSUM4dklHMWhlU0JpWlNCaElHTnZiWEJzWlhSbGJIa2djM2x1WTJoeWIyNXZkWE1nYjNCbGNtRjBhVzl1SUhkb2FXTm9JRzFoZVNCamFHRnVaMlZjYmlBZ0x5OGdkR2hsSUhOMFlYUmxJRzltSUhSb1pTQnlaV0ZrSUdKMVptWmxjaXdnY0hKdmRtbGthVzVuSUdWdWIzVm5hQ0JrWVhSaElIZG9aVzVjYmlBZ0x5OGdZbVZtYjNKbElIUm9aWEpsSUhkaGN5QXFibTkwS2lCbGJtOTFaMmd1WEc0Z0lDOHZYRzRnSUM4dklGTnZMQ0IwYUdVZ2MzUmxjSE1nWVhKbE9seHVJQ0F2THlBeExpQkdhV2QxY21VZ2IzVjBJSGRvWVhRZ2RHaGxJSE4wWVhSbElHOW1JSFJvYVc1bmN5QjNhV3hzSUdKbElHRm1kR1Z5SUhkbElHUnZYRzRnSUM4dklHRWdjbVZoWkNCbWNtOXRJSFJvWlNCaWRXWm1aWEl1WEc0Z0lDOHZYRzRnSUM4dklESXVJRWxtSUhSb1lYUWdjbVZ6ZFd4MGFXNW5JSE4wWVhSbElIZHBiR3dnZEhKcFoyZGxjaUJoSUY5eVpXRmtMQ0IwYUdWdUlHTmhiR3dnWDNKbFlXUXVYRzRnSUM4dklFNXZkR1VnZEdoaGRDQjBhR2x6SUcxaGVTQmlaU0JoYzNsdVkyaHliMjV2ZFhNc0lHOXlJSE41Ym1Ob2NtOXViM1Z6TGlBZ1dXVnpMQ0JwZENCcGMxeHVJQ0F2THlCa1pXVndiSGtnZFdkc2VTQjBieUIzY21sMFpTQkJVRWx6SUhSb2FYTWdkMkY1TENCaWRYUWdkR2hoZENCemRHbHNiQ0JrYjJWemJpZDBJRzFsWVc1Y2JpQWdMeThnZEdoaGRDQjBhR1VnVW1WaFpHRmliR1VnWTJ4aGMzTWdjMmh2ZFd4a0lHSmxhR0YyWlNCcGJYQnliM0JsY214NUxDQmhjeUJ6ZEhKbFlXMXpJR0Z5WlZ4dUlDQXZMeUJrWlhOcFoyNWxaQ0IwYnlCaVpTQnplVzVqTDJGemVXNWpJR0ZuYm05emRHbGpMbHh1SUNBdkx5QlVZV3RsSUc1dmRHVWdhV1lnZEdobElGOXlaV0ZrSUdOaGJHd2dhWE1nYzNsdVl5QnZjaUJoYzNsdVl5QW9hV1VzSUdsbUlIUm9aU0J5WldGa0lHTmhiR3hjYmlBZ0x5OGdhR0Z6SUhKbGRIVnlibVZrSUhsbGRDa3NJSE52SUhSb1lYUWdkMlVnYTI1dmR5QjNhR1YwYUdWeUlHOXlJRzV2ZENCcGRDZHpJSE5oWm1VZ2RHOGdaVzFwZEZ4dUlDQXZMeUFuY21WaFpHRmliR1VuSUdWMFl5NWNiaUFnTHk5Y2JpQWdMeThnTXk0Z1FXTjBkV0ZzYkhrZ2NIVnNiQ0IwYUdVZ2NtVnhkV1Z6ZEdWa0lHTm9kVzVyY3lCdmRYUWdiMllnZEdobElHSjFabVpsY2lCaGJtUWdjbVYwZFhKdUxseHVYRzRnSUM4dklHbG1JSGRsSUc1bFpXUWdZU0J5WldGa1lXSnNaU0JsZG1WdWRDd2dkR2hsYmlCM1pTQnVaV1ZrSUhSdklHUnZJSE52YldVZ2NtVmhaR2x1Wnk1Y2JpQWdkbUZ5SUdSdlVtVmhaQ0E5SUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlR0Y2JpQWdaR1ZpZFdjb0oyNWxaV1FnY21WaFpHRmliR1VuTENCa2IxSmxZV1FwTzF4dVhHNGdJQzh2SUdsbUlIZGxJR04xY25KbGJuUnNlU0JvWVhabElHeGxjM01nZEdoaGJpQjBhR1VnYUdsbmFGZGhkR1Z5VFdGeWF5d2dkR2hsYmlCaGJITnZJSEpsWVdRZ2MyOXRaVnh1SUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdJSHg4SUhOMFlYUmxMbXhsYm1kMGFDQXRJRzRnUENCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcktTQjdYRzRnSUNBZ1pHOVNaV0ZrSUQwZ2RISjFaVHRjYmlBZ0lDQmtaV0oxWnlnbmJHVnVaM1JvSUd4bGMzTWdkR2hoYmlCM1lYUmxjbTFoY21zbkxDQmtiMUpsWVdRcE8xeHVJQ0I5WEc1Y2JpQWdMeThnYUc5M1pYWmxjaXdnYVdZZ2QyVW5kbVVnWlc1a1pXUXNJSFJvWlc0Z2RHaGxjbVVuY3lCdWJ5QndiMmx1ZEN3Z1lXNWtJR2xtSUhkbEozSmxJR0ZzY21WaFpIbGNiaUFnTHk4Z2NtVmhaR2x1Wnl3Z2RHaGxiaUJwZENkeklIVnVibVZqWlhOellYSjVMbHh1SUNCcFppQW9jM1JoZEdVdVpXNWtaV1FnZkh3Z2MzUmhkR1V1Y21WaFpHbHVaeWtnZTF4dUlDQWdJR1J2VW1WaFpDQTlJR1poYkhObE8xeHVJQ0FnSUdSbFluVm5LQ2R5WldGa2FXNW5JRzl5SUdWdVpHVmtKeXdnWkc5U1pXRmtLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGtiMUpsWVdRcElIdGNiaUFnSUNCa1pXSjFaeWduWkc4Z2NtVmhaQ2NwTzF4dUlDQWdJSE4wWVhSbExuSmxZV1JwYm1jZ1BTQjBjblZsTzF4dUlDQWdJSE4wWVhSbExuTjVibU1nUFNCMGNuVmxPMXh1SUNBZ0lDOHZJR2xtSUhSb1pTQnNaVzVuZEdnZ2FYTWdZM1Z5Y21WdWRHeDVJSHBsY204c0lIUm9aVzRnZDJVZ0ttNWxaV1FxSUdFZ2NtVmhaR0ZpYkdVZ1pYWmxiblF1WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbXhsYm1kMGFDQTlQVDBnTUNsY2JpQWdJQ0FnSUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNBOUlIUnlkV1U3WEc0Z0lDQWdMeThnWTJGc2JDQnBiblJsY201aGJDQnlaV0ZrSUcxbGRHaHZaRnh1SUNBZ0lIUm9hWE11WDNKbFlXUW9jM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheWs3WEc0Z0lDQWdjM1JoZEdVdWMzbHVZeUE5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnTHk4Z1NXWWdYM0psWVdRZ2NIVnphR1ZrSUdSaGRHRWdjM2x1WTJoeWIyNXZkWE5zZVN3Z2RHaGxiaUJnY21WaFpHbHVaMkFnZDJsc2JDQmlaU0JtWVd4elpTeGNiaUFnTHk4Z1lXNWtJSGRsSUc1bFpXUWdkRzhnY21VdFpYWmhiSFZoZEdVZ2FHOTNJRzExWTJnZ1pHRjBZU0IzWlNCallXNGdjbVYwZFhKdUlIUnZJSFJvWlNCMWMyVnlMbHh1SUNCcFppQW9aRzlTWldGa0lDWW1JQ0Z6ZEdGMFpTNXlaV0ZrYVc1bktWeHVJQ0FnSUc0Z1BTQm9iM2ROZFdOb1ZHOVNaV0ZrS0c1UGNtbG5MQ0J6ZEdGMFpTazdYRzVjYmlBZ2RtRnlJSEpsZER0Y2JpQWdhV1lnS0c0Z1BpQXdLVnh1SUNBZ0lISmxkQ0E5SUdaeWIyMU1hWE4wS0c0c0lITjBZWFJsS1R0Y2JpQWdaV3h6WlZ4dUlDQWdJSEpsZENBOUlHNTFiR3c3WEc1Y2JpQWdhV1lnS0hWMGFXd3VhWE5PZFd4c0tISmxkQ2twSUh0Y2JpQWdJQ0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lHNGdQU0F3TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1YkdWdVozUm9JQzA5SUc0N1hHNWNiaUFnTHk4Z1NXWWdkMlVnYUdGMlpTQnViM1JvYVc1bklHbHVJSFJvWlNCaWRXWm1aWElzSUhSb1pXNGdkMlVnZDJGdWRDQjBieUJyYm05M1hHNGdJQzh2SUdGeklITnZiMjRnWVhNZ2QyVWdLbVJ2S2lCblpYUWdjMjl0WlhSb2FXNW5JR2x1ZEc4Z2RHaGxJR0oxWm1abGNpNWNiaUFnYVdZZ0tITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01DQW1KaUFoYzNSaGRHVXVaVzVrWldRcFhHNGdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmx4dUlDQXZMeUJKWmlCM1pTQjBjbWxsWkNCMGJ5QnlaV0ZrS0NrZ2NHRnpkQ0IwYUdVZ1JVOUdMQ0IwYUdWdUlHVnRhWFFnWlc1a0lHOXVJSFJvWlNCdVpYaDBJSFJwWTJzdVhHNGdJR2xtSUNodVQzSnBaeUFoUFQwZ2JpQW1KaUJ6ZEdGMFpTNWxibVJsWkNBbUppQnpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQXBYRzRnSUNBZ1pXNWtVbVZoWkdGaWJHVW9kR2hwY3lrN1hHNWNiaUFnYVdZZ0tDRjFkR2xzTG1selRuVnNiQ2h5WlhRcEtWeHVJQ0FnSUhSb2FYTXVaVzFwZENnblpHRjBZU2NzSUhKbGRDazdYRzVjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHTm9kVzVyU1c1MllXeHBaQ2h6ZEdGMFpTd2dZMmgxYm1zcElIdGNiaUFnZG1GeUlHVnlJRDBnYm5Wc2JEdGNiaUFnYVdZZ0tDRjFkR2xzTG1selFuVm1abVZ5S0dOb2RXNXJLU0FtSmx4dUlDQWdJQ0FnSVhWMGFXd3VhWE5UZEhKcGJtY29ZMmgxYm1zcElDWW1YRzRnSUNBZ0lDQWhkWFJwYkM1cGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoamFIVnVheWtnSmlaY2JpQWdJQ0FnSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnWlhJZ1BTQnVaWGNnVkhsd1pVVnljbTl5S0NkSmJuWmhiR2xrSUc1dmJpMXpkSEpwYm1jdlluVm1abVZ5SUdOb2RXNXJKeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1Z5TzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUc5dVJXOW1RMmgxYm1zb2MzUnlaV0Z0TENCemRHRjBaU2tnZTF4dUlDQnBaaUFvYzNSaGRHVXVaR1ZqYjJSbGNpQW1KaUFoYzNSaGRHVXVaVzVrWldRcElIdGNiaUFnSUNCMllYSWdZMmgxYm1zZ1BTQnpkR0YwWlM1a1pXTnZaR1Z5TG1WdVpDZ3BPMXh1SUNBZ0lHbG1JQ2hqYUhWdWF5QW1KaUJqYUhWdWF5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lITjBZWFJsTG1KMVptWmxjaTV3ZFhOb0tHTm9kVzVyS1R0Y2JpQWdJQ0FnSUhOMFlYUmxMbXhsYm1kMGFDQXJQU0J6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJRDhnTVNBNklHTm9kVzVyTG14bGJtZDBhRHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjM1JoZEdVdVpXNWtaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDOHZJR1Z0YVhRZ0ozSmxZV1JoWW14bEp5QnViM2NnZEc4Z2JXRnJaU0J6ZFhKbElHbDBJR2RsZEhNZ2NHbGphMlZrSUhWd0xseHVJQ0JsYldsMFVtVmhaR0ZpYkdVb2MzUnlaV0Z0S1R0Y2JuMWNibHh1THk4Z1JHOXVKM1FnWlcxcGRDQnlaV0ZrWVdKc1pTQnlhV2RvZENCaGQyRjVJR2x1SUhONWJtTWdiVzlrWlN3Z1ltVmpZWFZ6WlNCMGFHbHpJR05oYmlCMGNtbG5aMlZ5WEc0dkx5QmhibTkwYUdWeUlISmxZV1FvS1NCallXeHNJRDArSUhOMFlXTnJJRzkyWlhKbWJHOTNMaUFnVkdocGN5QjNZWGtzSUdsMElHMXBaMmgwSUhSeWFXZG5aWEpjYmk4dklHRWdibVY0ZEZScFkyc2djbVZqZFhKemFXOXVJSGRoY201cGJtY3NJR0oxZENCMGFHRjBKM01nYm05MElITnZJR0poWkM1Y2JtWjFibU4wYVc5dUlHVnRhWFJTWldGa1lXSnNaU2h6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQnpkR0YwWlM1dVpXVmtVbVZoWkdGaWJHVWdQU0JtWVd4elpUdGNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJXbDBkR1ZrVW1WaFpHRmliR1VwSUh0Y2JpQWdJQ0JrWldKMVp5Z25aVzFwZEZKbFlXUmhZbXhsSnl3Z2MzUmhkR1V1Wm14dmQybHVaeWs3WEc0Z0lDQWdjM1JoZEdVdVpXMXBkSFJsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQnBaaUFvYzNSaGRHVXVjM2x1WXlsY2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHVnRhWFJTWldGa1lXSnNaVjhvYzNSeVpXRnRLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUdWdGFYUlNaV0ZrWVdKc1pWOG9jM1J5WldGdEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJsYldsMFVtVmhaR0ZpYkdWZktITjBjbVZoYlNrZ2UxeHVJQ0JrWldKMVp5Z25aVzFwZENCeVpXRmtZV0pzWlNjcE8xeHVJQ0J6ZEhKbFlXMHVaVzFwZENnbmNtVmhaR0ZpYkdVbktUdGNiaUFnWm14dmR5aHpkSEpsWVcwcE8xeHVmVnh1WEc1Y2JpOHZJR0YwSUhSb2FYTWdjRzlwYm5Rc0lIUm9aU0IxYzJWeUlHaGhjeUJ3Y21WemRXMWhZbXg1SUhObFpXNGdkR2hsSUNkeVpXRmtZV0pzWlNjZ1pYWmxiblFzWEc0dkx5QmhibVFnWTJGc2JHVmtJSEpsWVdRb0tTQjBieUJqYjI1emRXMWxJSE52YldVZ1pHRjBZUzRnSUhSb1lYUWdiV0Y1SUdoaGRtVWdkSEpwWjJkbGNtVmtYRzR2THlCcGJpQjBkWEp1SUdGdWIzUm9aWElnWDNKbFlXUW9iaWtnWTJGc2JDd2dhVzRnZDJocFkyZ2dZMkZ6WlNCeVpXRmthVzVuSUQwZ2RISjFaU0JwWmx4dUx5OGdhWFFuY3lCcGJpQndjbTluY21WemN5NWNiaTh2SUVodmQyVjJaWElzSUdsbUlIZGxKM0psSUc1dmRDQmxibVJsWkN3Z2IzSWdjbVZoWkdsdVp5d2dZVzVrSUhSb1pTQnNaVzVuZEdnZ1BDQm9kMjBzWEc0dkx5QjBhR1Z1SUdkdklHRm9aV0ZrSUdGdVpDQjBjbmtnZEc4Z2NtVmhaQ0J6YjIxbElHMXZjbVVnY0hKbFpXMXdkR2wyWld4NUxseHVablZ1WTNScGIyNGdiV0Y1WW1WU1pXRmtUVzl5WlNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2doYzNSaGRHVXVjbVZoWkdsdVowMXZjbVVwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXlaV0ZrYVc1blRXOXlaU0E5SUhSeWRXVTdYRzRnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHMWhlV0psVW1WaFpFMXZjbVZmS0hOMGNtVmhiU3dnYzNSaGRHVXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUcxaGVXSmxVbVZoWkUxdmNtVmZLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnZG1GeUlHeGxiaUE5SUhOMFlYUmxMbXhsYm1kMGFEdGNiaUFnZDJocGJHVWdLQ0Z6ZEdGMFpTNXlaV0ZrYVc1bklDWW1JQ0Z6ZEdGMFpTNW1iRzkzYVc1bklDWW1JQ0Z6ZEdGMFpTNWxibVJsWkNBbUpseHVJQ0FnSUNBZ0lDQWdjM1JoZEdVdWJHVnVaM1JvSUR3Z2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5a2dlMXh1SUNBZ0lHUmxZblZuS0NkdFlYbGlaVkpsWVdSTmIzSmxJSEpsWVdRZ01DY3BPMXh1SUNBZ0lITjBjbVZoYlM1eVpXRmtLREFwTzF4dUlDQWdJR2xtSUNoc1pXNGdQVDA5SUhOMFlYUmxMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDOHZJR1JwWkc0bmRDQm5aWFFnWVc1NUlHUmhkR0VzSUhOMGIzQWdjM0JwYm01cGJtY3VYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JsYkhObFhHNGdJQ0FnSUNCc1pXNGdQU0J6ZEdGMFpTNXNaVzVuZEdnN1hHNGdJSDFjYmlBZ2MzUmhkR1V1Y21WaFpHbHVaMDF2Y21VZ1BTQm1ZV3h6WlR0Y2JuMWNibHh1THk4Z1lXSnpkSEpoWTNRZ2JXVjBhRzlrTGlBZ2RHOGdZbVVnYjNabGNuSnBaR1JsYmlCcGJpQnpjR1ZqYVdacFl5QnBiWEJzWlcxbGJuUmhkR2x2YmlCamJHRnpjMlZ6TGx4dUx5OGdZMkZzYkNCallpaGxjaXdnWkdGMFlTa2dkMmhsY21VZ1pHRjBZU0JwY3lBOFBTQnVJR2x1SUd4bGJtZDBhQzVjYmk4dklHWnZjaUIyYVhKMGRXRnNJQ2h1YjI0dGMzUnlhVzVuTENCdWIyNHRZblZtWm1WeUtTQnpkSEpsWVcxekxDQmNJbXhsYm1kMGFGd2lJR2x6SUhOdmJXVjNhR0YwWEc0dkx5QmhjbUpwZEhKaGNua3NJR0Z1WkNCd1pYSm9ZWEJ6SUc1dmRDQjJaWEo1SUcxbFlXNXBibWRtZFd3dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVYM0psWVdRZ1BTQm1kVzVqZEdsdmJpaHVLU0I3WEc0Z0lIUm9hWE11WlcxcGRDZ25aWEp5YjNJbkxDQnVaWGNnUlhKeWIzSW9KMjV2ZENCcGJYQnNaVzFsYm5SbFpDY3BLVHRjYm4wN1hHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3YVhCbElEMGdablZ1WTNScGIyNG9aR1Z6ZEN3Z2NHbHdaVTl3ZEhNcElIdGNiaUFnZG1GeUlITnlZeUE5SUhSb2FYTTdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjYmlBZ2MzZHBkR05vSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwS1NCN1hHNGdJQ0FnWTJGelpTQXdPbHh1SUNBZ0lDQWdjM1JoZEdVdWNHbHdaWE1nUFNCa1pYTjBPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQXhPbHh1SUNBZ0lDQWdjM1JoZEdVdWNHbHdaWE1nUFNCYmMzUmhkR1V1Y0dsd1pYTXNJR1JsYzNSZE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lITjBZWFJsTG5CcGNHVnpMbkIxYzJnb1pHVnpkQ2s3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnZlZ4dUlDQnpkR0YwWlM1d2FYQmxjME52ZFc1MElDczlJREU3WEc0Z0lHUmxZblZuS0Nkd2FYQmxJR052ZFc1MFBTVmtJRzl3ZEhNOUpXb25MQ0J6ZEdGMFpTNXdhWEJsYzBOdmRXNTBMQ0J3YVhCbFQzQjBjeWs3WEc1Y2JpQWdkbUZ5SUdSdlJXNWtJRDBnS0NGd2FYQmxUM0IwY3lCOGZDQndhWEJsVDNCMGN5NWxibVFnSVQwOUlHWmhiSE5sS1NBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYTjBJQ0U5UFNCd2NtOWpaWE56TG5OMFpHOTFkQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhOMElDRTlQU0J3Y205alpYTnpMbk4wWkdWeWNqdGNibHh1SUNCMllYSWdaVzVrUm00Z1BTQmtiMFZ1WkNBL0lHOXVaVzVrSURvZ1kyeGxZVzUxY0R0Y2JpQWdhV1lnS0hOMFlYUmxMbVZ1WkVWdGFYUjBaV1FwWEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGxibVJHYmlrN1hHNGdJR1ZzYzJWY2JpQWdJQ0J6Y21NdWIyNWpaU2duWlc1a0p5d2daVzVrUm00cE8xeHVYRzRnSUdSbGMzUXViMjRvSjNWdWNHbHdaU2NzSUc5dWRXNXdhWEJsS1R0Y2JpQWdablZ1WTNScGIyNGdiMjUxYm5CcGNHVW9jbVZoWkdGaWJHVXBJSHRjYmlBZ0lDQmtaV0oxWnlnbmIyNTFibkJwY0dVbktUdGNiaUFnSUNCcFppQW9jbVZoWkdGaWJHVWdQVDA5SUhOeVl5a2dlMXh1SUNBZ0lDQWdZMnhsWVc1MWNDZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRzl1Wlc1a0tDa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtVnVaQ2NwTzF4dUlDQWdJR1JsYzNRdVpXNWtLQ2s3WEc0Z0lIMWNibHh1SUNBdkx5QjNhR1Z1SUhSb1pTQmtaWE4wSUdSeVlXbHVjeXdnYVhRZ2NtVmtkV05sY3lCMGFHVWdZWGRoYVhSRWNtRnBiaUJqYjNWdWRHVnlYRzRnSUM4dklHOXVJSFJvWlNCemIzVnlZMlV1SUNCVWFHbHpJSGR2ZFd4a0lHSmxJRzF2Y21VZ1pXeGxaMkZ1ZENCM2FYUm9JR0VnTG05dVkyVW9LVnh1SUNBdkx5Qm9ZVzVrYkdWeUlHbHVJR1pzYjNjb0tTd2dZblYwSUdGa1pHbHVaeUJoYm1RZ2NtVnRiM1pwYm1jZ2NtVndaV0YwWldSc2VTQnBjMXh1SUNBdkx5QjBiMjhnYzJ4dmR5NWNiaUFnZG1GeUlHOXVaSEpoYVc0Z1BTQndhWEJsVDI1RWNtRnBiaWh6Y21NcE8xeHVJQ0JrWlhOMExtOXVLQ2RrY21GcGJpY3NJRzl1WkhKaGFXNHBPMXh1WEc0Z0lHWjFibU4wYVc5dUlHTnNaV0Z1ZFhBb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjJOc1pXRnVkWEFuS1R0Y2JpQWdJQ0F2THlCamJHVmhiblZ3SUdWMlpXNTBJR2hoYm1Sc1pYSnpJRzl1WTJVZ2RHaGxJSEJwY0dVZ2FYTWdZbkp2YTJWdVhHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblkyeHZjMlVuTENCdmJtTnNiM05sS1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpISmhhVzRuTENCdmJtUnlZV2x1S1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGNuSnZjaWNzSUc5dVpYSnliM0lwTzF4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjNWdWNHbHdaU2NzSUc5dWRXNXdhWEJsS1R0Y2JpQWdJQ0J6Y21NdWNtVnRiM1psVEdsemRHVnVaWElvSjJWdVpDY3NJRzl1Wlc1a0tUdGNiaUFnSUNCemNtTXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyVnVaQ2NzSUdOc1pXRnVkWEFwTzF4dUlDQWdJSE55WXk1eVpXMXZkbVZNYVhOMFpXNWxjaWduWkdGMFlTY3NJRzl1WkdGMFlTazdYRzVjYmlBZ0lDQXZMeUJwWmlCMGFHVWdjbVZoWkdWeUlHbHpJSGRoYVhScGJtY2dabTl5SUdFZ1pISmhhVzRnWlhabGJuUWdabkp2YlNCMGFHbHpYRzRnSUNBZ0x5OGdjM0JsWTJsbWFXTWdkM0pwZEdWeUxDQjBhR1Z1SUdsMElIZHZkV3hrSUdOaGRYTmxJR2wwSUhSdklHNWxkbVZ5SUhOMFlYSjBYRzRnSUNBZ0x5OGdabXh2ZDJsdVp5QmhaMkZwYmk1Y2JpQWdJQ0F2THlCVGJ5d2dhV1lnZEdocGN5QnBjeUJoZDJGcGRHbHVaeUJoSUdSeVlXbHVMQ0IwYUdWdUlIZGxJR3AxYzNRZ1kyRnNiQ0JwZENCdWIzY3VYRzRnSUNBZ0x5OGdTV1lnZDJVZ1pHOXVKM1FnYTI1dmR5d2dkR2hsYmlCaGMzTjFiV1VnZEdoaGRDQjNaU0JoY21VZ2QyRnBkR2x1WnlCbWIzSWdiMjVsTGx4dUlDQWdJR2xtSUNoemRHRjBaUzVoZDJGcGRFUnlZV2x1SUNZbVhHNGdJQ0FnSUNBZ0lDZ2haR1Z6ZEM1ZmQzSnBkR0ZpYkdWVGRHRjBaU0I4ZkNCa1pYTjBMbDkzY21sMFlXSnNaVk4wWVhSbExtNWxaV1JFY21GcGJpa3BYRzRnSUNBZ0lDQnZibVJ5WVdsdUtDazdYRzRnSUgxY2JseHVJQ0J6Y21NdWIyNG9KMlJoZEdFbkxDQnZibVJoZEdFcE8xeHVJQ0JtZFc1amRHbHZiaUJ2Ym1SaGRHRW9ZMmgxYm1zcElIdGNiaUFnSUNCa1pXSjFaeWduYjI1a1lYUmhKeWs3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR1JsYzNRdWQzSnBkR1VvWTJoMWJtc3BPMXh1SUNBZ0lHbG1JQ2htWVd4elpTQTlQVDBnY21WMEtTQjdYRzRnSUNBZ0lDQmtaV0oxWnlnblptRnNjMlVnZDNKcGRHVWdjbVZ6Y0c5dWMyVXNJSEJoZFhObEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhOeVl5NWZjbVZoWkdGaWJHVlRkR0YwWlM1aGQyRnBkRVJ5WVdsdUtUdGNiaUFnSUNBZ0lITnlZeTVmY21WaFpHRmliR1ZUZEdGMFpTNWhkMkZwZEVSeVlXbHVLeXM3WEc0Z0lDQWdJQ0J6Y21NdWNHRjFjMlVvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QnBaaUIwYUdVZ1pHVnpkQ0JvWVhNZ1lXNGdaWEp5YjNJc0lIUm9aVzRnYzNSdmNDQndhWEJwYm1jZ2FXNTBieUJwZEM1Y2JpQWdMeThnYUc5M1pYWmxjaXdnWkc5dUozUWdjM1Z3Y0hKbGMzTWdkR2hsSUhSb2NtOTNhVzVuSUdKbGFHRjJhVzl5SUdadmNpQjBhR2x6TGx4dUlDQm1kVzVqZEdsdmJpQnZibVZ5Y205eUtHVnlLU0I3WEc0Z0lDQWdaR1ZpZFdjb0oyOXVaWEp5YjNJbkxDQmxjaWs3WEc0Z0lDQWdkVzV3YVhCbEtDazdYRzRnSUNBZ1pHVnpkQzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25aWEp5YjNJbkxDQnZibVZ5Y205eUtUdGNiaUFnSUNCcFppQW9SVVV1YkdsemRHVnVaWEpEYjNWdWRDaGtaWE4wTENBblpYSnliM0luS1NBOVBUMGdNQ2xjYmlBZ0lDQWdJR1JsYzNRdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSDFjYmlBZ0x5OGdWR2hwY3lCcGN5QmhJR0p5ZFhSaGJHeDVJSFZuYkhrZ2FHRmpheUIwYnlCdFlXdGxJSE4xY21VZ2RHaGhkQ0J2ZFhJZ1pYSnliM0lnYUdGdVpHeGxjbHh1SUNBdkx5QnBjeUJoZEhSaFkyaGxaQ0JpWldadmNtVWdZVzU1SUhWelpYSnNZVzVrSUc5dVpYTXVJQ0JPUlZaRlVpQkVUeUJVU0VsVExseHVJQ0JwWmlBb0lXUmxjM1F1WDJWMlpXNTBjeUI4ZkNBaFpHVnpkQzVmWlhabGJuUnpMbVZ5Y205eUtWeHVJQ0FnSUdSbGMzUXViMjRvSjJWeWNtOXlKeXdnYjI1bGNuSnZjaWs3WEc0Z0lHVnNjMlVnYVdZZ0tHbHpRWEp5WVhrb1pHVnpkQzVmWlhabGJuUnpMbVZ5Y205eUtTbGNiaUFnSUNCa1pYTjBMbDlsZG1WdWRITXVaWEp5YjNJdWRXNXphR2xtZENodmJtVnljbTl5S1R0Y2JpQWdaV3h6WlZ4dUlDQWdJR1JsYzNRdVgyVjJaVzUwY3k1bGNuSnZjaUE5SUZ0dmJtVnljbTl5TENCa1pYTjBMbDlsZG1WdWRITXVaWEp5YjNKZE8xeHVYRzVjYmx4dUlDQXZMeUJDYjNSb0lHTnNiM05sSUdGdVpDQm1hVzVwYzJnZ2MyaHZkV3hrSUhSeWFXZG5aWElnZFc1d2FYQmxMQ0JpZFhRZ2IyNXNlU0J2Ym1ObExseHVJQ0JtZFc1amRHbHZiaUJ2Ym1Oc2IzTmxLQ2tnZTF4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjJacGJtbHphQ2NzSUc5dVptbHVhWE5vS1R0Y2JpQWdJQ0IxYm5CcGNHVW9LVHRjYmlBZ2ZWeHVJQ0JrWlhOMExtOXVZMlVvSjJOc2IzTmxKeXdnYjI1amJHOXpaU2s3WEc0Z0lHWjFibU4wYVc5dUlHOXVabWx1YVhOb0tDa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtWnBibWx6YUNjcE8xeHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyTnNiM05sSnl3Z2IyNWpiRzl6WlNrN1hHNGdJQ0FnZFc1d2FYQmxLQ2s3WEc0Z0lIMWNiaUFnWkdWemRDNXZibU5sS0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnZFc1d2FYQmxLQ2tnZTF4dUlDQWdJR1JsWW5WbktDZDFibkJwY0dVbktUdGNiaUFnSUNCemNtTXVkVzV3YVhCbEtHUmxjM1FwTzF4dUlDQjlYRzVjYmlBZ0x5OGdkR1ZzYkNCMGFHVWdaR1Z6ZENCMGFHRjBJR2wwSjNNZ1ltVnBibWNnY0dsd1pXUWdkRzljYmlBZ1pHVnpkQzVsYldsMEtDZHdhWEJsSnl3Z2MzSmpLVHRjYmx4dUlDQXZMeUJ6ZEdGeWRDQjBhR1VnWm14dmR5QnBaaUJwZENCb1lYTnVKM1FnWW1WbGJpQnpkR0Z5ZEdWa0lHRnNjbVZoWkhrdVhHNGdJR2xtSUNnaGMzUmhkR1V1Wm14dmQybHVaeWtnZTF4dUlDQWdJR1JsWW5WbktDZHdhWEJsSUhKbGMzVnRaU2NwTzF4dUlDQWdJSE55WXk1eVpYTjFiV1VvS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCa1pYTjBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdjR2x3WlU5dVJISmhhVzRvYzNKaktTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCemNtTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJQ0FnWkdWaWRXY29KM0JwY0dWUGJrUnlZV2x1Snl3Z2MzUmhkR1V1WVhkaGFYUkVjbUZwYmlrN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG1GM1lXbDBSSEpoYVc0cFhHNGdJQ0FnSUNCemRHRjBaUzVoZDJGcGRFUnlZV2x1TFMwN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG1GM1lXbDBSSEpoYVc0Z1BUMDlJREFnSmlZZ1JVVXViR2x6ZEdWdVpYSkRiM1Z1ZENoemNtTXNJQ2RrWVhSaEp5a3BJSHRjYmlBZ0lDQWdJSE4wWVhSbExtWnNiM2RwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnWm14dmR5aHpjbU1wTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVkVzV3YVhCbElEMGdablZ1WTNScGIyNG9aR1Z6ZENrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVYRzRnSUM4dklHbG1JSGRsSjNKbElHNXZkQ0J3YVhCcGJtY2dZVzU1ZDJobGNtVXNJSFJvWlc0Z1pHOGdibTkwYUdsdVp5NWNiaUFnYVdZZ0tITjBZWFJsTG5CcGNHVnpRMjkxYm5RZ1BUMDlJREFwWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc1Y2JpQWdMeThnYW5WemRDQnZibVVnWkdWemRHbHVZWFJwYjI0dUlDQnRiM04wSUdOdmJXMXZiaUJqWVhObExseHVJQ0JwWmlBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOVBUMGdNU2tnZTF4dUlDQWdJQzh2SUhCaGMzTmxaQ0JwYmlCdmJtVXNJR0oxZENCcGRDZHpJRzV2ZENCMGFHVWdjbWxuYUhRZ2IyNWxMbHh1SUNBZ0lHbG1JQ2hrWlhOMElDWW1JR1JsYzNRZ0lUMDlJSE4wWVhSbExuQnBjR1Z6S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9JV1JsYzNRcFhHNGdJQ0FnSUNCa1pYTjBJRDBnYzNSaGRHVXVjR2x3WlhNN1hHNWNiaUFnSUNBdkx5Qm5iM1FnWVNCdFlYUmphQzVjYmlBZ0lDQnpkR0YwWlM1d2FYQmxjeUE5SUc1MWJHdzdYRzRnSUNBZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOUlEQTdYRzRnSUNBZ2MzUmhkR1V1Wm14dmQybHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hrWlhOMEtWeHVJQ0FnSUNBZ1pHVnpkQzVsYldsMEtDZDFibkJwY0dVbkxDQjBhR2x6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lDOHZJSE5zYjNjZ1kyRnpaUzRnYlhWc2RHbHdiR1VnY0dsd1pTQmtaWE4wYVc1aGRHbHZibk11WEc1Y2JpQWdhV1lnS0NGa1pYTjBLU0I3WEc0Z0lDQWdMeThnY21WdGIzWmxJR0ZzYkM1Y2JpQWdJQ0IyWVhJZ1pHVnpkSE1nUFNCemRHRjBaUzV3YVhCbGN6dGNiaUFnSUNCMllYSWdiR1Z1SUQwZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZER0Y2JpQWdJQ0J6ZEdGMFpTNXdhWEJsY3lBOUlHNTFiR3c3WEc0Z0lDQWdjM1JoZEdVdWNHbHdaWE5EYjNWdWRDQTlJREE3WEc0Z0lDQWdjM1JoZEdVdVpteHZkMmx1WnlBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lsY2JpQWdJQ0FnSUdSbGMzUnpXMmxkTG1WdGFYUW9KM1Z1Y0dsd1pTY3NJSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeThnZEhKNUlIUnZJR1pwYm1RZ2RHaGxJSEpwWjJoMElHOXVaUzVjYmlBZ2RtRnlJR2tnUFNCcGJtUmxlRTltS0hOMFlYUmxMbkJwY0dWekxDQmtaWE4wS1R0Y2JpQWdhV1lnS0drZ1BUMDlJQzB4S1Z4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dVhHNGdJSE4wWVhSbExuQnBjR1Z6TG5Od2JHbGpaU2hwTENBeEtUdGNiaUFnYzNSaGRHVXVjR2x3WlhORGIzVnVkQ0F0UFNBeE8xeHVJQ0JwWmlBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOVBUMGdNU2xjYmlBZ0lDQnpkR0YwWlM1d2FYQmxjeUE5SUhOMFlYUmxMbkJwY0dWeld6QmRPMXh1WEc0Z0lHUmxjM1F1WlcxcGRDZ25kVzV3YVhCbEp5d2dkR2hwY3lrN1hHNWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc0dkx5QnpaWFFnZFhBZ1pHRjBZU0JsZG1WdWRITWdhV1lnZEdobGVTQmhjbVVnWVhOclpXUWdabTl5WEc0dkx5QkZibk4xY21VZ2NtVmhaR0ZpYkdVZ2JHbHpkR1Z1WlhKeklHVjJaVzUwZFdGc2JIa2daMlYwSUhOdmJXVjBhR2x1WjF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExtOXVJRDBnWm5WdVkzUnBiMjRvWlhZc0lHWnVLU0I3WEc0Z0lIWmhjaUJ5WlhNZ1BTQlRkSEpsWVcwdWNISnZkRzkwZVhCbExtOXVMbU5oYkd3b2RHaHBjeXdnWlhZc0lHWnVLVHRjYmx4dUlDQXZMeUJKWmlCc2FYTjBaVzVwYm1jZ2RHOGdaR0YwWVN3Z1lXNWtJR2wwSUdoaGN5QnViM1FnWlhod2JHbGphWFJzZVNCaVpXVnVJSEJoZFhObFpDeGNiaUFnTHk4Z2RHaGxiaUJqWVd4c0lISmxjM1Z0WlNCMGJ5QnpkR0Z5ZENCMGFHVWdabXh2ZHlCdlppQmtZWFJoSUc5dUlIUm9aU0J1WlhoMElIUnBZMnN1WEc0Z0lHbG1JQ2hsZGlBOVBUMGdKMlJoZEdFbklDWW1JR1poYkhObElDRTlQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1ac2IzZHBibWNwSUh0Y2JpQWdJQ0IwYUdsekxuSmxjM1Z0WlNncE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWMklEMDlQU0FuY21WaFpHRmliR1VuSUNZbUlIUm9hWE11Y21WaFpHRmliR1VwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdWNtVmhaR0ZpYkdWTWFYTjBaVzVwYm1jcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5KbFlXUmhZbXhsVEdsemRHVnVhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSE4wWVhSbExtVnRhWFIwWldSU1pXRmtZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR2xtSUNnaGMzUmhkR1V1Y21WaFpHbHVaeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb0ozSmxZV1JoWW14bElHNWxlSFIwYVdOcklISmxZV1FnTUNjcE8xeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWNtVmhaQ2d3S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wWVhSbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQmxiV2wwVW1WaFpHRmliR1VvZEdocGN5d2djM1JoZEdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCeVpYTTdYRzU5TzF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExtRmtaRXhwYzNSbGJtVnlJRDBnVW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG05dU8xeHVYRzR2THlCd1lYVnpaU2dwSUdGdVpDQnlaWE4xYldVb0tTQmhjbVVnY21WdGJtRnVkSE1nYjJZZ2RHaGxJR3hsWjJGamVTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ1FWQkpYRzR2THlCSlppQjBhR1VnZFhObGNpQjFjMlZ6SUhSb1pXMHNJSFJvWlc0Z2MzZHBkR05vSUdsdWRHOGdiMnhrSUcxdlpHVXVYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1Y21WemRXMWxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJR2xtSUNnaGMzUmhkR1V1Wm14dmQybHVaeWtnZTF4dUlDQWdJR1JsWW5WbktDZHlaWE4xYldVbktUdGNiaUFnSUNCemRHRjBaUzVtYkc5M2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNCcFppQW9JWE4wWVhSbExuSmxZV1JwYm1jcElIdGNiaUFnSUNBZ0lHUmxZblZuS0NkeVpYTjFiV1VnY21WaFpDQXdKeWs3WEc0Z0lDQWdJQ0IwYUdsekxuSmxZV1FvTUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsYzNWdFpTaDBhR2x6TENCemRHRjBaU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCeVpYTjFiV1VvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCcFppQW9JWE4wWVhSbExuSmxjM1Z0WlZOamFHVmtkV3hsWkNrZ2UxeHVJQ0FnSUhOMFlYUmxMbkpsYzNWdFpWTmphR1ZrZFd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGMzVnRaVjhvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WemRXMWxYeWh6ZEhKbFlXMHNJSE4wWVhSbEtTQjdYRzRnSUhOMFlYUmxMbkpsYzNWdFpWTmphR1ZrZFd4bFpDQTlJR1poYkhObE8xeHVJQ0J6ZEhKbFlXMHVaVzFwZENnbmNtVnpkVzFsSnlrN1hHNGdJR1pzYjNjb2MzUnlaV0Z0S1R0Y2JpQWdhV1lnS0hOMFlYUmxMbVpzYjNkcGJtY2dKaVlnSVhOMFlYUmxMbkpsWVdScGJtY3BYRzRnSUNBZ2MzUnlaV0Z0TG5KbFlXUW9NQ2s3WEc1OVhHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3WVhWelpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQmtaV0oxWnlnblkyRnNiQ0J3WVhWelpTQm1iRzkzYVc1blBTVnFKeXdnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bWJHOTNhVzVuS1R0Y2JpQWdhV1lnS0daaGJITmxJQ0U5UFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtWnNiM2RwYm1jcElIdGNiaUFnSUNCa1pXSjFaeWduY0dGMWMyVW5LVHRjYmlBZ0lDQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVpzYjNkcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbVZ0YVhRb0ozQmhkWE5sSnlrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQm1iRzkzS0hOMGNtVmhiU2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0J6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJR1JsWW5WbktDZG1iRzkzSnl3Z2MzUmhkR1V1Wm14dmQybHVaeWs3WEc0Z0lHbG1JQ2h6ZEdGMFpTNW1iRzkzYVc1bktTQjdYRzRnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdkbUZ5SUdOb2RXNXJJRDBnYzNSeVpXRnRMbkpsWVdRb0tUdGNiaUFnSUNCOUlIZG9hV3hsSUNodWRXeHNJQ0U5UFNCamFIVnVheUFtSmlCemRHRjBaUzVtYkc5M2FXNW5LVHRjYmlBZ2ZWeHVmVnh1WEc0dkx5QjNjbUZ3SUdGdUlHOXNaQzF6ZEhsc1pTQnpkSEpsWVcwZ1lYTWdkR2hsSUdGemVXNWpJR1JoZEdFZ2MyOTFjbU5sTGx4dUx5OGdWR2hwY3lCcGN5QXFibTkwS2lCd1lYSjBJRzltSUhSb1pTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ2FXNTBaWEptWVdObExseHVMeThnU1hRZ2FYTWdZVzRnZFdkc2VTQjFibVp2Y25SMWJtRjBaU0J0WlhOeklHOW1JR2hwYzNSdmNua3VYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZDNKaGNDQTlJR1oxYm1OMGFXOXVLSE4wY21WaGJTa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNCMllYSWdjR0YxYzJWa0lEMGdabUZzYzJVN1hHNWNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNCemRISmxZVzB1YjI0b0oyVnVaQ2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2QzY21Gd2NHVmtJR1Z1WkNjcE8xeHVJQ0FnSUdsbUlDaHpkR0YwWlM1a1pXTnZaR1Z5SUNZbUlDRnpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHTm9kVzVySUQwZ2MzUmhkR1V1WkdWamIyUmxjaTVsYm1Rb0tUdGNiaUFnSUNBZ0lHbG1JQ2hqYUhWdWF5QW1KaUJqYUhWdWF5NXNaVzVuZEdncFhHNGdJQ0FnSUNBZ0lITmxiR1l1Y0hWemFDaGphSFZ1YXlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWc1ppNXdkWE5vS0c1MWJHd3BPMXh1SUNCOUtUdGNibHh1SUNCemRISmxZVzB1YjI0b0oyUmhkR0VuTENCbWRXNWpkR2x2YmloamFIVnVheWtnZTF4dUlDQWdJR1JsWW5WbktDZDNjbUZ3Y0dWa0lHUmhkR0VuS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1WkdWamIyUmxjaWxjYmlBZ0lDQWdJR05vZFc1cklEMGdjM1JoZEdVdVpHVmpiMlJsY2k1M2NtbDBaU2hqYUhWdWF5azdYRzRnSUNBZ2FXWWdLQ0ZqYUhWdWF5QjhmQ0FoYzNSaGRHVXViMkpxWldOMFRXOWtaU0FtSmlBaFkyaDFibXN1YkdWdVozUm9LVnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVYRzRnSUNBZ2RtRnlJSEpsZENBOUlITmxiR1l1Y0hWemFDaGphSFZ1YXlrN1hHNGdJQ0FnYVdZZ0tDRnlaWFFwSUh0Y2JpQWdJQ0FnSUhCaGRYTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnpkSEpsWVcwdWNHRjFjMlVvS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJSEJ5YjNoNUlHRnNiQ0IwYUdVZ2IzUm9aWElnYldWMGFHOWtjeTVjYmlBZ0x5OGdhVzF3YjNKMFlXNTBJSGRvWlc0Z2QzSmhjSEJwYm1jZ1ptbHNkR1Z5Y3lCaGJtUWdaSFZ3YkdWNFpYTXVYRzRnSUdadmNpQW9kbUZ5SUdrZ2FXNGdjM1J5WldGdEtTQjdYRzRnSUNBZ2FXWWdLSFYwYVd3dWFYTkdkVzVqZEdsdmJpaHpkSEpsWVcxYmFWMHBJQ1ltSUhWMGFXd3VhWE5WYm1SbFptbHVaV1FvZEdocGMxdHBYU2twSUh0Y2JpQWdJQ0FnSUhSb2FYTmJhVjBnUFNCbWRXNWpkR2x2YmlodFpYUm9iMlFwSUhzZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUnlaV0Z0VzIxbGRHaHZaRjB1WVhCd2JIa29jM1J5WldGdExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdmWDBvYVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdjSEp2ZUhrZ1kyVnlkR0ZwYmlCcGJYQnZjblJoYm5RZ1pYWmxiblJ6TGx4dUlDQjJZWElnWlhabGJuUnpJRDBnV3lkbGNuSnZjaWNzSUNkamJHOXpaU2NzSUNka1pYTjBjbTk1Snl3Z0ozQmhkWE5sSnl3Z0ozSmxjM1Z0WlNkZE8xeHVJQ0JtYjNKRllXTm9LR1YyWlc1MGN5d2dablZ1WTNScGIyNG9aWFlwSUh0Y2JpQWdJQ0J6ZEhKbFlXMHViMjRvWlhZc0lITmxiR1l1WlcxcGRDNWlhVzVrS0hObGJHWXNJR1YyS1NrN1hHNGdJSDBwTzF4dVhHNGdJQzh2SUhkb1pXNGdkMlVnZEhKNUlIUnZJR052Ym5OMWJXVWdjMjl0WlNCdGIzSmxJR0o1ZEdWekxDQnphVzF3YkhrZ2RXNXdZWFZ6WlNCMGFHVmNiaUFnTHk4Z2RXNWtaWEpzZVdsdVp5QnpkSEpsWVcwdVhHNGdJSE5sYkdZdVgzSmxZV1FnUFNCbWRXNWpkR2x2YmlodUtTQjdYRzRnSUNBZ1pHVmlkV2NvSjNkeVlYQndaV1FnWDNKbFlXUW5MQ0J1S1R0Y2JpQWdJQ0JwWmlBb2NHRjFjMlZrS1NCN1hHNGdJQ0FnSUNCd1lYVnpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSE4wY21WaGJTNXlaWE4xYldVb0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlITmxiR1k3WEc1OU8xeHVYRzVjYmx4dUx5OGdaWGh3YjNObFpDQm1iM0lnZEdWemRHbHVaeUJ3ZFhKd2IzTmxjeUJ2Ym14NUxseHVVbVZoWkdGaWJHVXVYMlp5YjIxTWFYTjBJRDBnWm5KdmJVeHBjM1E3WEc1Y2JpOHZJRkJzZFdOcklHOW1aaUJ1SUdKNWRHVnpJR1p5YjIwZ1lXNGdZWEp5WVhrZ2IyWWdZblZtWm1WeWN5NWNiaTh2SUV4bGJtZDBhQ0JwY3lCMGFHVWdZMjl0WW1sdVpXUWdiR1Z1WjNSb2N5QnZaaUJoYkd3Z2RHaGxJR0oxWm1abGNuTWdhVzRnZEdobElHeHBjM1F1WEc1bWRXNWpkR2x2YmlCbWNtOXRUR2x6ZENodUxDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JHbHpkQ0E5SUhOMFlYUmxMbUoxWm1abGNqdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlITjBZWFJsTG14bGJtZDBhRHRjYmlBZ2RtRnlJSE4wY21sdVowMXZaR1VnUFNBaElYTjBZWFJsTG1SbFkyOWtaWEk3WEc0Z0lIWmhjaUJ2WW1wbFkzUk5iMlJsSUQwZ0lTRnpkR0YwWlM1dlltcGxZM1JOYjJSbE8xeHVJQ0IyWVhJZ2NtVjBPMXh1WEc0Z0lDOHZJRzV2ZEdocGJtY2dhVzRnZEdobElHeHBjM1FzSUdSbFptbHVhWFJsYkhrZ1pXMXdkSGt1WEc0Z0lHbG1JQ2hzYVhOMExteGxibWQwYUNBOVBUMGdNQ2xjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmx4dUlDQnBaaUFvYkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUhKbGRDQTlJRzUxYkd3N1hHNGdJR1ZzYzJVZ2FXWWdLRzlpYW1WamRFMXZaR1VwWEc0Z0lDQWdjbVYwSUQwZ2JHbHpkQzV6YUdsbWRDZ3BPMXh1SUNCbGJITmxJR2xtSUNnaGJpQjhmQ0J1SUQ0OUlHeGxibWQwYUNrZ2UxeHVJQ0FnSUM4dklISmxZV1FnYVhRZ1lXeHNMQ0IwY25WdVkyRjBaU0IwYUdVZ1lYSnlZWGt1WEc0Z0lDQWdhV1lnS0hOMGNtbHVaMDF2WkdVcFhHNGdJQ0FnSUNCeVpYUWdQU0JzYVhOMExtcHZhVzRvSnljcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lISmxkQ0E5SUVKMVptWmxjaTVqYjI1allYUW9iR2x6ZEN3Z2JHVnVaM1JvS1R0Y2JpQWdJQ0JzYVhOMExteGxibWQwYUNBOUlEQTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnY21WaFpDQnFkWE4wSUhOdmJXVWdiMllnYVhRdVhHNGdJQ0FnYVdZZ0tHNGdQQ0JzYVhOMFd6QmRMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdMeThnYW5WemRDQjBZV3RsSUdFZ2NHRnlkQ0J2WmlCMGFHVWdabWx5YzNRZ2JHbHpkQ0JwZEdWdExseHVJQ0FnSUNBZ0x5OGdjMnhwWTJVZ2FYTWdkR2hsSUhOaGJXVWdabTl5SUdKMVptWmxjbk1nWVc1a0lITjBjbWx1WjNNdVhHNGdJQ0FnSUNCMllYSWdZblZtSUQwZ2JHbHpkRnN3WFR0Y2JpQWdJQ0FnSUhKbGRDQTlJR0oxWmk1emJHbGpaU2d3TENCdUtUdGNiaUFnSUNBZ0lHeHBjM1JiTUYwZ1BTQmlkV1l1YzJ4cFkyVW9iaWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h1SUQwOVBTQnNhWE4wV3pCZExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0x5OGdabWx5YzNRZ2JHbHpkQ0JwY3lCaElIQmxjbVpsWTNRZ2JXRjBZMmhjYmlBZ0lDQWdJSEpsZENBOUlHeHBjM1F1YzJocFpuUW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdZMjl0Y0d4bGVDQmpZWE5sTGx4dUlDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCbGJtOTFaMmdnZEc4Z1kyOTJaWElnYVhRc0lHSjFkQ0JwZENCemNHRnVjeUJ3WVhOMElIUm9aU0JtYVhKemRDQmlkV1ptWlhJdVhHNGdJQ0FnSUNCcFppQW9jM1J5YVc1blRXOWtaU2xjYmlBZ0lDQWdJQ0FnY21WMElEMGdKeWM3WEc0Z0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lISmxkQ0E5SUc1bGR5QkNkV1ptWlhJb2JpazdYRzVjYmlBZ0lDQWdJSFpoY2lCaklEMGdNRHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnYkdsemRDNXNaVzVuZEdnN0lHa2dQQ0JzSUNZbUlHTWdQQ0J1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSjFaaUE5SUd4cGMzUmJNRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpjSGtnUFNCTllYUm9MbTFwYmlodUlDMGdZeXdnWW5WbUxteGxibWQwYUNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOMGNtbHVaMDF2WkdVcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwSUNzOUlHSjFaaTV6YkdsalpTZ3dMQ0JqY0hrcE8xeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ1luVm1MbU52Y0hrb2NtVjBMQ0JqTENBd0xDQmpjSGtwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqY0hrZ1BDQmlkV1l1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUd4cGMzUmJNRjBnUFNCaWRXWXVjMnhwWTJVb1kzQjVLVHRjYmlBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJR3hwYzNRdWMyaHBablFvS1R0Y2JseHVJQ0FnSUNBZ0lDQmpJQ3M5SUdOd2VUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVjBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxibVJTWldGa1lXSnNaU2h6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dVhHNGdJQzh2SUVsbUlIZGxJR2RsZENCb1pYSmxJR0psWm05eVpTQmpiMjV6ZFcxcGJtY2dZV3hzSUhSb1pTQmllWFJsY3l3Z2RHaGxiaUIwYUdGMElHbHpJR0ZjYmlBZ0x5OGdZblZuSUdsdUlHNXZaR1V1SUNCVGFHOTFiR1FnYm1WMlpYSWdhR0Z3Y0dWdUxseHVJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDRnTUNsY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlZ1WkZKbFlXUmhZbXhsSUdOaGJHeGxaQ0J2YmlCdWIyNHRaVzF3ZEhrZ2MzUnlaV0Z0SnlrN1hHNWNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJtUkZiV2wwZEdWa0tTQjdYRzRnSUNBZ2MzUmhkR1V1Wlc1a1pXUWdQU0IwY25WbE8xeHVJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBdkx5QkRhR1ZqYXlCMGFHRjBJSGRsSUdScFpHNG5kQ0JuWlhRZ2IyNWxJR3hoYzNRZ2RXNXphR2xtZEM1Y2JpQWdJQ0FnSUdsbUlDZ2hjM1JoZEdVdVpXNWtSVzFwZEhSbFpDQW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2MzUmhkR1V1Wlc1a1JXMXBkSFJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiUzV5WldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0J6ZEhKbFlXMHVaVzFwZENnblpXNWtKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptOXlSV0ZqYUNBb2VITXNJR1lwSUh0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0I0Y3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCbUtIaHpXMmxkTENCcEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1SbGVFOW1JQ2g0Y3l3Z2VDa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlIaHpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNoNGMxdHBYU0E5UFQwZ2VDa2djbVYwZFhKdUlHazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlDMHhPMXh1ZlZ4dUlsMTkiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICB0aGlzLmFmdGVyVHJhbnNmb3JtID0gZnVuY3Rpb24oZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQoZGF0YSkpXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgaWYgKGNiKVxuICAgIGNiKGVyKTtcblxuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpXG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKHRoaXMuX2ZsdXNoKSlcbiAgICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uKGVyKSB7XG4gICAgICAgIGRvbmUoc3RyZWFtLCBlcik7XG4gICAgICB9KTtcbiAgICBlbHNlXG4gICAgICBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fFxuICAgICAgICBycy5uZWVkUmVhZGFibGUgfHxcbiAgICAgICAgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaylcbiAgICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICghdXRpbC5pc051bGwodHMud3JpdGVjaHVuaykgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAodHMudHJhbnNmb3JtaW5nKVxuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gb3B0aW9ucy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleClcbiAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyID0gW107XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3RcbiAgLy8gaW5zdGFuY2VvZiBXcml0YWJsZSwgdGhleSdyZSBpbnN0YW5jZW9mIFJlYWRhYmxlLlxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGFibGUpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpXG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUuIE5vdCByZWFkYWJsZS4nKSk7XG59O1xuXG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIGNiKGVyKTtcbiAgfSk7XG59XG5cbi8vIElmIHdlIGdldCBzb21ldGhpbmcgdGhhdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgbnVsbCwgb3IgdW5kZWZpbmVkLFxuLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci5cbi8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZVxuLy8gd2F0ZXJtYXJrcyBkZXRlcm1pbmUgaG93IG1hbnkgb2JqZWN0cyB0byBrZWVwIGluIHRoZSBidWZmZXIsIHJhdGhlciB0aGFuXG4vLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgaWYgKCF1dGlsLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgIXV0aWwuaXNTdHJpbmcoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgdmFyIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IoZXIpO1xuICAgIH0pO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcblxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKHV0aWwuaXNCdWZmZXIoY2h1bmspKVxuICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gIGVsc2UgaWYgKCFlbmNvZGluZylcbiAgICBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihjYikpXG4gICAgY2IgPSBmdW5jdGlvbigpIHt9O1xuXG4gIGlmIChzdGF0ZS5lbmRlZClcbiAgICB3cml0ZUFmdGVyRW5kKHRoaXMsIHN0YXRlLCBjYik7XG4gIGVsc2UgaWYgKHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJlxuICAgICAgICAhc3RhdGUuY29ya2VkICYmXG4gICAgICAgICFzdGF0ZS5maW5pc2hlZCAmJlxuICAgICAgICAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJlxuICAgICAgICBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJlxuICAgICAgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiZcbiAgICAgIHV0aWwuaXNTdHJpbmcoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gIGlmICh1dGlsLmlzQnVmZmVyKGNodW5rKSlcbiAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KVxuICAgIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKVxuICAgIHN0YXRlLmJ1ZmZlci5wdXNoKG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSk7XG4gIGVsc2VcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KVxuICAgIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtcbiAgZWxzZVxuICAgIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIGlmIChzeW5jKVxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICAgIGNiKGVyKTtcbiAgICB9KTtcbiAgZWxzZSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXIpO1xuICB9XG5cbiAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpXG4gICAgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7XG4gIGVsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiZcbiAgICAgICAgIXN0YXRlLmNvcmtlZCAmJlxuICAgICAgICAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJlxuICAgICAgICBzdGF0ZS5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZClcbiAgICBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGggPiAxKSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBjYnMgPSBbXTtcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGg7IGMrKylcbiAgICAgIGNicy5wdXNoKHN0YXRlLmJ1ZmZlcltjXS5jYWxsYmFjayk7XG5cbiAgICAvLyBjb3VudCB0aGUgb25lIHdlIGFyZSBhZGRpbmcsIGFzIHdlbGwuXG4gICAgLy8gVE9ETyhpc2FhY3MpIGNsZWFuIHRoaXMgdXBcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgc3RhdGUuYnVmZmVyLCAnJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICAgICAgY2JzW2ldKGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhciBidWZmZXJcbiAgICBzdGF0ZS5idWZmZXIgPSBbXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcltjXTtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcblxuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGMrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgc3RhdGUuYnVmZmVyID0gc3RhdGUuYnVmZmVyLnNsaWNlKGMpO1xuICAgIGVsc2VcbiAgICAgIHN0YXRlLmJ1ZmZlci5sZW5ndGggPSAwO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcblxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh1dGlsLmlzRnVuY3Rpb24oY2h1bmspKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHV0aWwuaXNGdW5jdGlvbihlbmNvZGluZykpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykpXG4gICAgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZClcbiAgICBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgcmV0dXJuIChzdGF0ZS5lbmRpbmcgJiZcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAhc3RhdGUuZmluaXNoZWQgJiZcbiAgICAgICAgICAhc3RhdGUud3JpdGluZyk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQpIHtcbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9IGVsc2VcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZClcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IpO1xuICAgIGVsc2VcbiAgICAgIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZiR2xpTDE5emRISmxZVzFmZDNKcGRHRmliR1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1THk4Z1FTQmlhWFFnYzJsdGNHeGxjaUIwYUdGdUlISmxZV1JoWW14bElITjBjbVZoYlhNdVhHNHZMeUJKYlhCc1pXMWxiblFnWVc0Z1lYTjVibU1nTGw5M2NtbDBaU2hqYUhWdWF5d2dZMklwTENCaGJtUWdhWFFuYkd3Z2FHRnVaR3hsSUdGc2JGeHVMeThnZEdobElHUnlZV2x1SUdWMlpXNTBJR1Z0YVhOemFXOXVJR0Z1WkNCaWRXWm1aWEpwYm1jdVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWM0pwZEdGaWJHVTdYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1MllYSWdRblZtWm1WeUlEMGdjbVZ4ZFdseVpTZ25ZblZtWm1WeUp5a3VRblZtWm1WeU8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmxkeWFYUmhZbXhsTGxkeWFYUmhZbXhsVTNSaGRHVWdQU0JYY21sMFlXSnNaVk4wWVhSbE8xeHVYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1MllYSWdkWFJwYkNBOUlISmxjWFZwY21Vb0oyTnZjbVV0ZFhScGJDMXBjeWNwTzF4dWRYUnBiQzVwYm1obGNtbDBjeUE5SUhKbGNYVnBjbVVvSjJsdWFHVnlhWFJ6SnlrN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlGTjBjbVZoYlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcE8xeHVYRzUxZEdsc0xtbHVhR1Z5YVhSektGZHlhWFJoWW14bExDQlRkSEpsWVcwcE8xeHVYRzVtZFc1amRHbHZiaUJYY21sMFpWSmxjU2hqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJSFJvYVhNdVkyaDFibXNnUFNCamFIVnVhenRjYmlBZ2RHaHBjeTVsYm1OdlpHbHVaeUE5SUdWdVkyOWthVzVuTzF4dUlDQjBhR2x6TG1OaGJHeGlZV05ySUQwZ1kySTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGZHlhWFJoWW14bFUzUmhkR1VvYjNCMGFXOXVjeXdnYzNSeVpXRnRLU0I3WEc0Z0lIWmhjaUJFZFhCc1pYZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5emRISmxZVzFmWkhWd2JHVjRKeWs3WEc1Y2JpQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNWNiaUFnTHk4Z2RHaGxJSEJ2YVc1MElHRjBJSGRvYVdOb0lIZHlhWFJsS0NrZ2MzUmhjblJ6SUhKbGRIVnlibWx1WnlCbVlXeHpaVnh1SUNBdkx5Qk9iM1JsT2lBd0lHbHpJR0VnZG1Gc2FXUWdkbUZzZFdVc0lHMWxZVzV6SUhSb1lYUWdkMlVnWVd4M1lYbHpJSEpsZEhWeWJpQm1ZV3h6WlNCcFpseHVJQ0F2THlCMGFHVWdaVzUwYVhKbElHSjFabVpsY2lCcGN5QnViM1FnWm14MWMyaGxaQ0JwYlcxbFpHbGhkR1ZzZVNCdmJpQjNjbWwwWlNncFhHNGdJSFpoY2lCb2QyMGdQU0J2Y0hScGIyNXpMbWhwWjJoWFlYUmxjazFoY21zN1hHNGdJSFpoY2lCa1pXWmhkV3gwU0hkdElEMGdiM0IwYVc5dWN5NXZZbXBsWTNSTmIyUmxJRDhnTVRZZ09pQXhOaUFxSURFd01qUTdYRzRnSUhSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlDaG9kMjBnZkh3Z2FIZHRJRDA5UFNBd0tTQS9JR2gzYlNBNklHUmxabUYxYkhSSWQyMDdYRzVjYmlBZ0x5OGdiMkpxWldOMElITjBjbVZoYlNCbWJHRm5JSFJ2SUdsdVpHbGpZWFJsSUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvYVhNZ2MzUnlaV0Z0WEc0Z0lDOHZJR052Ym5SaGFXNXpJR0oxWm1abGNuTWdiM0lnYjJKcVpXTjBjeTVjYmlBZ2RHaHBjeTV2WW1wbFkzUk5iMlJsSUQwZ0lTRnZjSFJwYjI1ekxtOWlhbVZqZEUxdlpHVTdYRzVjYmlBZ2FXWWdLSE4wY21WaGJTQnBibk4wWVc1alpXOW1JRVIxY0d4bGVDbGNiaUFnSUNCMGFHbHpMbTlpYW1WamRFMXZaR1VnUFNCMGFHbHpMbTlpYW1WamRFMXZaR1VnZkh3Z0lTRnZjSFJwYjI1ekxuZHlhWFJoWW14bFQySnFaV04wVFc5a1pUdGNibHh1SUNBdkx5QmpZWE4wSUhSdklHbHVkSE11WEc0Z0lIUm9hWE11YUdsbmFGZGhkR1Z5VFdGeWF5QTlJSDUrZEdocGN5NW9hV2RvVjJGMFpYSk5ZWEpyTzF4dVhHNGdJSFJvYVhNdWJtVmxaRVJ5WVdsdUlEMGdabUZzYzJVN1hHNGdJQzh2SUdGMElIUm9aU0J6ZEdGeWRDQnZaaUJqWVd4c2FXNW5JR1Z1WkNncFhHNGdJSFJvYVhNdVpXNWthVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDOHZJSGRvWlc0Z1pXNWtLQ2tnYUdGeklHSmxaVzRnWTJGc2JHVmtMQ0JoYm1RZ2NtVjBkWEp1WldSY2JpQWdkR2hwY3k1bGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNBdkx5QjNhR1Z1SUNkbWFXNXBjMmduSUdseklHVnRhWFIwWldSY2JpQWdkR2hwY3k1bWFXNXBjMmhsWkNBOUlHWmhiSE5sTzF4dVhHNGdJQzh2SUhOb2IzVnNaQ0IzWlNCa1pXTnZaR1VnYzNSeWFXNW5jeUJwYm5SdklHSjFabVpsY25NZ1ltVm1iM0psSUhCaGMzTnBibWNnZEc4Z1gzZHlhWFJsUDF4dUlDQXZMeUIwYUdseklHbHpJR2hsY21VZ2MyOGdkR2hoZENCemIyMWxJRzV2WkdVdFkyOXlaU0J6ZEhKbFlXMXpJR05oYmlCdmNIUnBiV2w2WlNCemRISnBibWRjYmlBZ0x5OGdhR0Z1Wkd4cGJtY2dZWFFnWVNCc2IzZGxjaUJzWlhabGJDNWNiaUFnZG1GeUlHNXZSR1ZqYjJSbElEMGdiM0IwYVc5dWN5NWtaV052WkdWVGRISnBibWR6SUQwOVBTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1a1pXTnZaR1ZUZEhKcGJtZHpJRDBnSVc1dlJHVmpiMlJsTzF4dVhHNGdJQzh2SUVOeWVYQjBieUJwY3lCcmFXNWtJRzltSUc5c1pDQmhibVFnWTNKMWMzUjVMaUFnU0dsemRHOXlhV05oYkd4NUxDQnBkSE1nWkdWbVlYVnNkQ0J6ZEhKcGJtZGNiaUFnTHk4Z1pXNWpiMlJwYm1jZ2FYTWdKMkpwYm1GeWVTY2djMjhnZDJVZ2FHRjJaU0IwYnlCdFlXdGxJSFJvYVhNZ1kyOXVabWxuZFhKaFlteGxMbHh1SUNBdkx5QkZkbVZ5ZVhSb2FXNW5JR1ZzYzJVZ2FXNGdkR2hsSUhWdWFYWmxjbk5sSUhWelpYTWdKM1YwWmpnbkxDQjBhRzkxWjJndVhHNGdJSFJvYVhNdVpHVm1ZWFZzZEVWdVkyOWthVzVuSUQwZ2IzQjBhVzl1Y3k1a1pXWmhkV3gwUlc1amIyUnBibWNnZkh3Z0ozVjBaamduTzF4dVhHNGdJQzh2SUc1dmRDQmhiaUJoWTNSMVlXd2dZblZtWm1WeUlIZGxJR3RsWlhBZ2RISmhZMnNnYjJZc0lHSjFkQ0JoSUcxbFlYTjFjbVZ0Wlc1MFhHNGdJQzh2SUc5bUlHaHZkeUJ0ZFdOb0lIZGxKM0psSUhkaGFYUnBibWNnZEc4Z1oyVjBJSEIxYzJobFpDQjBieUJ6YjIxbElIVnVaR1Z5YkhscGJtZGNiaUFnTHk4Z2MyOWphMlYwSUc5eUlHWnBiR1V1WEc0Z0lIUm9hWE11YkdWdVozUm9JRDBnTUR0Y2JseHVJQ0F2THlCaElHWnNZV2NnZEc4Z2MyVmxJSGRvWlc0Z2QyVW5jbVVnYVc0Z2RHaGxJRzFwWkdSc1pTQnZaaUJoSUhkeWFYUmxMbHh1SUNCMGFHbHpMbmR5YVhScGJtY2dQU0JtWVd4elpUdGNibHh1SUNBdkx5QjNhR1Z1SUhSeWRXVWdZV3hzSUhkeWFYUmxjeUIzYVd4c0lHSmxJR0oxWm1abGNtVmtJSFZ1ZEdsc0lDNTFibU52Y21zb0tTQmpZV3hzWEc0Z0lIUm9hWE11WTI5eWEyVmtJRDBnTUR0Y2JseHVJQ0F2THlCaElHWnNZV2NnZEc4Z1ltVWdZV0pzWlNCMGJ5QjBaV3hzSUdsbUlIUm9aU0J2Ym5keWFYUmxJR05pSUdseklHTmhiR3hsWkNCcGJXMWxaR2xoZEdWc2VTeGNiaUFnTHk4Z2IzSWdiMjRnWVNCc1lYUmxjaUIwYVdOckxpQWdWMlVnYzJWMElIUm9hWE1nZEc4Z2RISjFaU0JoZENCbWFYSnpkQ3dnWW1WallYVnpaU0JoYm5sY2JpQWdMeThnWVdOMGFXOXVjeUIwYUdGMElITm9iM1ZzWkc0bmRDQm9ZWEJ3Wlc0Z2RXNTBhV3dnWENKc1lYUmxjbHdpSUhOb2IzVnNaQ0JuWlc1bGNtRnNiSGtnWVd4emIxeHVJQ0F2THlCdWIzUWdhR0Z3Y0dWdUlHSmxabTl5WlNCMGFHVWdabWx5YzNRZ2QzSnBkR1VnWTJGc2JDNWNiaUFnZEdocGN5NXplVzVqSUQwZ2RISjFaVHRjYmx4dUlDQXZMeUJoSUdac1lXY2dkRzhnYTI1dmR5QnBaaUIzWlNkeVpTQndjbTlqWlhOemFXNW5JSEJ5WlhacGIzVnpiSGtnWW5WbVptVnlaV1FnYVhSbGJYTXNJSGRvYVdOb1hHNGdJQzh2SUcxaGVTQmpZV3hzSUhSb1pTQmZkM0pwZEdVb0tTQmpZV3hzWW1GamF5QnBiaUIwYUdVZ2MyRnRaU0IwYVdOckxDQnpieUIwYUdGMElIZGxJR1J2YmlkMFhHNGdJQzh2SUdWdVpDQjFjQ0JwYmlCaGJpQnZkbVZ5YkdGd2NHVmtJRzl1ZDNKcGRHVWdjMmwwZFdGMGFXOXVMbHh1SUNCMGFHbHpMbUoxWm1abGNsQnliMk5sYzNOcGJtY2dQU0JtWVd4elpUdGNibHh1SUNBdkx5QjBhR1VnWTJGc2JHSmhZMnNnZEdoaGRDZHpJSEJoYzNObFpDQjBieUJmZDNKcGRHVW9ZMmgxYm1zc1kySXBYRzRnSUhSb2FYTXViMjUzY21sMFpTQTlJR1oxYm1OMGFXOXVLR1Z5S1NCN1hHNGdJQ0FnYjI1M2NtbDBaU2h6ZEhKbFlXMHNJR1Z5S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUIwYUdVZ1kyRnNiR0poWTJzZ2RHaGhkQ0IwYUdVZ2RYTmxjaUJ6ZFhCd2JHbGxjeUIwYnlCM2NtbDBaU2hqYUhWdWF5eGxibU52WkdsdVp5eGpZaWxjYmlBZ2RHaHBjeTUzY21sMFpXTmlJRDBnYm5Wc2JEdGNibHh1SUNBdkx5QjBhR1VnWVcxdmRXNTBJSFJvWVhRZ2FYTWdZbVZwYm1jZ2QzSnBkSFJsYmlCM2FHVnVJRjkzY21sMFpTQnBjeUJqWVd4c1pXUXVYRzRnSUhSb2FYTXVkM0pwZEdWc1pXNGdQU0F3TzF4dVhHNGdJSFJvYVhNdVluVm1abVZ5SUQwZ1cxMDdYRzVjYmlBZ0x5OGdiblZ0WW1WeUlHOW1JSEJsYm1ScGJtY2dkWE5sY2kxemRYQndiR2xsWkNCM2NtbDBaU0JqWVd4c1ltRmphM05jYmlBZ0x5OGdkR2hwY3lCdGRYTjBJR0psSURBZ1ltVm1iM0psSUNkbWFXNXBjMmduSUdOaGJpQmlaU0JsYldsMGRHVmtYRzRnSUhSb2FYTXVjR1Z1WkdsdVoyTmlJRDBnTUR0Y2JseHVJQ0F2THlCbGJXbDBJSEJ5WldacGJtbHphQ0JwWmlCMGFHVWdiMjVzZVNCMGFHbHVaeUIzWlNkeVpTQjNZV2wwYVc1bklHWnZjaUJwY3lCZmQzSnBkR1VnWTJKelhHNGdJQzh2SUZSb2FYTWdhWE1nY21Wc1pYWmhiblFnWm05eUlITjVibU5vY205dWIzVnpJRlJ5WVc1elptOXliU0J6ZEhKbFlXMXpYRzRnSUhSb2FYTXVjSEpsWm1sdWFYTm9aV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJVY25WbElHbG1JSFJvWlNCbGNuSnZjaUIzWVhNZ1lXeHlaV0ZrZVNCbGJXbDBkR1ZrSUdGdVpDQnphRzkxYkdRZ2JtOTBJR0psSUhSb2NtOTNiaUJoWjJGcGJseHVJQ0IwYUdsekxtVnljbTl5UlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQlhjbWwwWVdKc1pTaHZjSFJwYjI1ektTQjdYRzRnSUhaaGNpQkVkWEJzWlhnZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzVjYmlBZ0x5OGdWM0pwZEdGaWJHVWdZM1J2Y2lCcGN5QmhjSEJzYVdWa0lIUnZJRVIxY0d4bGVHVnpMQ0IwYUc5MVoyZ2dkR2hsZVNkeVpTQnViM1JjYmlBZ0x5OGdhVzV6ZEdGdVkyVnZaaUJYY21sMFlXSnNaU3dnZEdobGVTZHlaU0JwYm5OMFlXNWpaVzltSUZKbFlXUmhZbXhsTGx4dUlDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVjNKcGRHRmliR1VwSUNZbUlDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFUjFjR3hsZUNrcFhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCWGNtbDBZV0pzWlNodmNIUnBiMjV6S1R0Y2JseHVJQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsSUQwZ2JtVjNJRmR5YVhSaFlteGxVM1JoZEdVb2IzQjBhVzl1Y3l3Z2RHaHBjeWs3WEc1Y2JpQWdMeThnYkdWbllXTjVMbHh1SUNCMGFHbHpMbmR5YVhSaFlteGxJRDBnZEhKMVpUdGNibHh1SUNCVGRISmxZVzB1WTJGc2JDaDBhR2x6S1R0Y2JuMWNibHh1THk4Z1QzUm9aWEozYVhObElIQmxiM0JzWlNCallXNGdjR2x3WlNCWGNtbDBZV0pzWlNCemRISmxZVzF6TENCM2FHbGphQ0JwY3lCcWRYTjBJSGR5YjI1bkxseHVWM0pwZEdGaWJHVXVjSEp2ZEc5MGVYQmxMbkJwY0dVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RHaHBjeTVsYldsMEtDZGxjbkp2Y2ljc0lHNWxkeUJGY25KdmNpZ25RMkZ1Ym05MElIQnBjR1V1SUU1dmRDQnlaV0ZrWVdKc1pTNG5LU2s3WEc1OU8xeHVYRzVjYm1aMWJtTjBhVzl1SUhkeWFYUmxRV1owWlhKRmJtUW9jM1J5WldGdExDQnpkR0YwWlN3Z1kySXBJSHRjYmlBZ2RtRnlJR1Z5SUQwZ2JtVjNJRVZ5Y205eUtDZDNjbWwwWlNCaFpuUmxjaUJsYm1RbktUdGNiaUFnTHk4Z1ZFOUVUem9nWkdWbVpYSWdaWEp5YjNJZ1pYWmxiblJ6SUdOdmJuTnBjM1JsYm5Sc2VTQmxkbVZ5ZVhkb1pYSmxMQ0J1YjNRZ2FuVnpkQ0IwYUdVZ1kySmNiaUFnYzNSeVpXRnRMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSXBPMXh1SUNCd2NtOWpaWE56TG01bGVIUlVhV05yS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdOaUtHVnlLVHRjYmlBZ2ZTazdYRzU5WEc1Y2JpOHZJRWxtSUhkbElHZGxkQ0J6YjIxbGRHaHBibWNnZEdoaGRDQnBjeUJ1YjNRZ1lTQmlkV1ptWlhJc0lITjBjbWx1Wnl3Z2JuVnNiQ3dnYjNJZ2RXNWtaV1pwYm1Wa0xGeHVMeThnWVc1a0lIZGxKM0psSUc1dmRDQnBiaUJ2WW1wbFkzUk5iMlJsTENCMGFHVnVJSFJvWVhRbmN5QmhiaUJsY25KdmNpNWNiaTh2SUU5MGFHVnlkMmx6WlNCemRISmxZVzBnWTJoMWJtdHpJR0Z5WlNCaGJHd2dZMjl1YzJsa1pYSmxaQ0IwYnlCaVpTQnZaaUJzWlc1bmRHZzlNU3dnWVc1a0lIUm9aVnh1THk4Z2QyRjBaWEp0WVhKcmN5QmtaWFJsY20xcGJtVWdhRzkzSUcxaGJua2diMkpxWldOMGN5QjBieUJyWldWd0lHbHVJSFJvWlNCaWRXWm1aWElzSUhKaGRHaGxjaUIwYUdGdVhHNHZMeUJvYjNjZ2JXRnVlU0JpZVhSbGN5QnZjaUJqYUdGeVlXTjBaWEp6TGx4dVpuVnVZM1JwYjI0Z2RtRnNhV1JEYUhWdWF5aHpkSEpsWVcwc0lITjBZWFJsTENCamFIVnVheXdnWTJJcElIdGNiaUFnZG1GeUlIWmhiR2xrSUQwZ2RISjFaVHRjYmlBZ2FXWWdLQ0YxZEdsc0xtbHpRblZtWm1WeUtHTm9kVzVyS1NBbUpseHVJQ0FnSUNBZ0lYVjBhV3d1YVhOVGRISnBibWNvWTJoMWJtc3BJQ1ltWEc0Z0lDQWdJQ0FoZFhScGJDNXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaGphSFZ1YXlrZ0ppWmNiaUFnSUNBZ0lDRnpkR0YwWlM1dlltcGxZM1JOYjJSbEtTQjdYRzRnSUNBZ2RtRnlJR1Z5SUQwZ2JtVjNJRlI1Y0dWRmNuSnZjaWduU1c1MllXeHBaQ0J1YjI0dGMzUnlhVzVuTDJKMVptWmxjaUJqYUhWdWF5Y3BPMXh1SUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JpQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnWTJJb1pYSXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIWmhiR2xrSUQwZ1ptRnNjMlU3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFpoYkdsa08xeHVmVnh1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdWQzSnBkR1VnUFNCbWRXNWpkR2x2YmloamFIVnVheXdnWlc1amIyUnBibWNzSUdOaUtTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVTdYRzRnSUhaaGNpQnlaWFFnUFNCbVlXeHpaVHRjYmx4dUlDQnBaaUFvZFhScGJDNXBjMFoxYm1OMGFXOXVLR1Z1WTI5a2FXNW5LU2tnZTF4dUlDQWdJR05pSUQwZ1pXNWpiMlJwYm1jN1hHNGdJQ0FnWlc1amIyUnBibWNnUFNCdWRXeHNPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIVjBhV3d1YVhOQ2RXWm1aWElvWTJoMWJtc3BLVnh1SUNBZ0lHVnVZMjlrYVc1bklEMGdKMkoxWm1abGNpYzdYRzRnSUdWc2MyVWdhV1lnS0NGbGJtTnZaR2x1WnlsY2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUhOMFlYUmxMbVJsWm1GMWJIUkZibU52WkdsdVp6dGNibHh1SUNCcFppQW9JWFYwYVd3dWFYTkdkVzVqZEdsdmJpaGpZaWtwWEc0Z0lDQWdZMklnUFNCbWRXNWpkR2x2YmlncElIdDlPMXh1WEc0Z0lHbG1JQ2h6ZEdGMFpTNWxibVJsWkNsY2JpQWdJQ0IzY21sMFpVRm1kR1Z5Ulc1a0tIUm9hWE1zSUhOMFlYUmxMQ0JqWWlrN1hHNGdJR1ZzYzJVZ2FXWWdLSFpoYkdsa1EyaDFibXNvZEdocGN5d2djM1JoZEdVc0lHTm9kVzVyTENCallpa3BJSHRjYmlBZ0lDQnpkR0YwWlM1d1pXNWthVzVuWTJJckt6dGNiaUFnSUNCeVpYUWdQU0IzY21sMFpVOXlRblZtWm1WeUtIUm9hWE1zSUhOMFlYUmxMQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVZMjl5YXlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxPMXh1WEc0Z0lITjBZWFJsTG1OdmNtdGxaQ3NyTzF4dWZUdGNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG5WdVkyOXlheUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVYRzRnSUdsbUlDaHpkR0YwWlM1amIzSnJaV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNWpiM0pyWldRdExUdGNibHh1SUNBZ0lHbG1JQ2doYzNSaGRHVXVkM0pwZEdsdVp5QW1KbHh1SUNBZ0lDQWdJQ0FoYzNSaGRHVXVZMjl5YTJWa0lDWW1YRzRnSUNBZ0lDQWdJQ0Z6ZEdGMFpTNW1hVzVwYzJobFpDQW1KbHh1SUNBZ0lDQWdJQ0FoYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QW1KbHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNWlkV1ptWlhJdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnWTJ4bFlYSkNkV1ptWlhJb2RHaHBjeXdnYzNSaGRHVXBPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYUhWdWF5aHpkR0YwWlN3Z1kyaDFibXNzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNBbUpseHVJQ0FnSUNBZ2MzUmhkR1V1WkdWamIyUmxVM1J5YVc1bmN5QWhQVDBnWm1Gc2MyVWdKaVpjYmlBZ0lDQWdJSFYwYVd3dWFYTlRkSEpwYm1jb1kyaDFibXNwS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0J1WlhjZ1FuVm1abVZ5S0dOb2RXNXJMQ0JsYm1OdlpHbHVaeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR05vZFc1ck8xeHVmVnh1WEc0dkx5QnBaaUIzWlNkeVpTQmhiSEpsWVdSNUlIZHlhWFJwYm1jZ2MyOXRaWFJvYVc1bkxDQjBhR1Z1SUdwMWMzUWdjSFYwSUhSb2FYTmNiaTh2SUdsdUlIUm9aU0J4ZFdWMVpTd2dZVzVrSUhkaGFYUWdiM1Z5SUhSMWNtNHVJQ0JQZEdobGNuZHBjMlVzSUdOaGJHd2dYM2R5YVhSbFhHNHZMeUJKWmlCM1pTQnlaWFIxY200Z1ptRnNjMlVzSUhSb1pXNGdkMlVnYm1WbFpDQmhJR1J5WVdsdUlHVjJaVzUwTENCemJ5QnpaWFFnZEdoaGRDQm1iR0ZuTGx4dVpuVnVZM1JwYjI0Z2QzSnBkR1ZQY2tKMVptWmxjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lHTm9kVzVySUQwZ1pHVmpiMlJsUTJoMWJtc29jM1JoZEdVc0lHTm9kVzVyTENCbGJtTnZaR2x1WnlrN1hHNGdJR2xtSUNoMWRHbHNMbWx6UW5WbVptVnlLR05vZFc1cktTbGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlDZGlkV1ptWlhJbk8xeHVJQ0IyWVhJZ2JHVnVJRDBnYzNSaGRHVXViMkpxWldOMFRXOWtaU0EvSURFZ09pQmphSFZ1YXk1c1pXNW5kR2c3WEc1Y2JpQWdjM1JoZEdVdWJHVnVaM1JvSUNzOUlHeGxianRjYmx4dUlDQjJZWElnY21WMElEMGdjM1JoZEdVdWJHVnVaM1JvSUR3Z2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF6dGNiaUFnTHk4Z2QyVWdiWFZ6ZENCbGJuTjFjbVVnZEdoaGRDQndjbVYyYVc5MWN5QnVaV1ZrUkhKaGFXNGdkMmxzYkNCdWIzUWdZbVVnY21WelpYUWdkRzhnWm1Gc2MyVXVYRzRnSUdsbUlDZ2hjbVYwS1Z4dUlDQWdJSE4wWVhSbExtNWxaV1JFY21GcGJpQTlJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tITjBZWFJsTG5keWFYUnBibWNnZkh3Z2MzUmhkR1V1WTI5eWEyVmtLVnh1SUNBZ0lITjBZWFJsTG1KMVptWmxjaTV3ZFhOb0tHNWxkeUJYY21sMFpWSmxjU2hqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NrN1hHNGdJR1ZzYzJWY2JpQWdJQ0JrYjFkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lHWmhiSE5sTENCc1pXNHNJR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwTzF4dVhHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1J2VjNKcGRHVW9jM1J5WldGdExDQnpkR0YwWlN3Z2QzSnBkR1YyTENCc1pXNHNJR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwSUh0Y2JpQWdjM1JoZEdVdWQzSnBkR1ZzWlc0Z1BTQnNaVzQ3WEc0Z0lITjBZWFJsTG5keWFYUmxZMklnUFNCallqdGNiaUFnYzNSaGRHVXVkM0pwZEdsdVp5QTlJSFJ5ZFdVN1hHNGdJSE4wWVhSbExuTjVibU1nUFNCMGNuVmxPMXh1SUNCcFppQW9kM0pwZEdWMktWeHVJQ0FnSUhOMGNtVmhiUzVmZDNKcGRHVjJLR05vZFc1ckxDQnpkR0YwWlM1dmJuZHlhWFJsS1R0Y2JpQWdaV3h6WlZ4dUlDQWdJSE4wY21WaGJTNWZkM0pwZEdVb1kyaDFibXNzSUdWdVkyOWthVzVuTENCemRHRjBaUzV2Ym5keWFYUmxLVHRjYmlBZ2MzUmhkR1V1YzNsdVl5QTlJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJuZHlhWFJsUlhKeWIzSW9jM1J5WldGdExDQnpkR0YwWlN3Z2MzbHVZeXdnWlhJc0lHTmlLU0I3WEc0Z0lHbG1JQ2h6ZVc1aktWeHVJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMkl0TFR0Y2JpQWdJQ0FnSUdOaUtHVnlLVHRjYmlBZ0lDQjlLVHRjYmlBZ1pXeHpaU0I3WEc0Z0lDQWdjM1JoZEdVdWNHVnVaR2x1WjJOaUxTMDdYRzRnSUNBZ1kySW9aWElwTzF4dUlDQjlYRzVjYmlBZ2MzUnlaV0Z0TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVZ5Y205eVJXMXBkSFJsWkNBOUlIUnlkV1U3WEc0Z0lITjBjbVZoYlM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLU0I3WEc0Z0lITjBZWFJsTG5keWFYUnBibWNnUFNCbVlXeHpaVHRjYmlBZ2MzUmhkR1V1ZDNKcGRHVmpZaUE5SUc1MWJHdzdYRzRnSUhOMFlYUmxMbXhsYm1kMGFDQXRQU0J6ZEdGMFpTNTNjbWwwWld4bGJqdGNiaUFnYzNSaGRHVXVkM0pwZEdWc1pXNGdQU0F3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2Ym5keWFYUmxLSE4wY21WaGJTd2daWElwSUh0Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2MzbHVZeUE5SUhOMFlYUmxMbk41Ym1NN1hHNGdJSFpoY2lCallpQTlJSE4wWVhSbExuZHlhWFJsWTJJN1hHNWNiaUFnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLVHRjYmx4dUlDQnBaaUFvWlhJcFhHNGdJQ0FnYjI1M2NtbDBaVVZ5Y205eUtITjBjbVZoYlN3Z2MzUmhkR1VzSUhONWJtTXNJR1Z5TENCallpazdYRzRnSUdWc2MyVWdlMXh1SUNBZ0lDOHZJRU5vWldOcklHbG1JSGRsSjNKbElHRmpkSFZoYkd4NUlISmxZV1I1SUhSdklHWnBibWx6YUN3Z1luVjBJR1J2YmlkMElHVnRhWFFnZVdWMFhHNGdJQ0FnZG1GeUlHWnBibWx6YUdWa0lEMGdibVZsWkVacGJtbHphQ2h6ZEhKbFlXMHNJSE4wWVhSbEtUdGNibHh1SUNBZ0lHbG1JQ2doWm1sdWFYTm9aV1FnSmlaY2JpQWdJQ0FnSUNBZ0lYTjBZWFJsTG1OdmNtdGxaQ0FtSmx4dUlDQWdJQ0FnSUNBaGMzUmhkR1V1WW5WbVptVnlVSEp2WTJWemMybHVaeUFtSmx4dUlDQWdJQ0FnSUNCemRHRjBaUzVpZFdabVpYSXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmpiR1ZoY2tKMVptWmxjaWh6ZEhKbFlXMHNJSE4wWVhSbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM2x1WXlrZ2UxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdZV1owWlhKWGNtbDBaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQm1hVzVwYzJobFpDd2dZMklwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR0ZtZEdWeVYzSnBkR1VvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabWx1YVhOb1pXUXNJR05pS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXWjBaWEpYY21sMFpTaHpkSEpsWVcwc0lITjBZWFJsTENCbWFXNXBjMmhsWkN3Z1kySXBJSHRjYmlBZ2FXWWdLQ0ZtYVc1cGMyaGxaQ2xjYmlBZ0lDQnZibmR5YVhSbFJISmhhVzRvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUhOMFlYUmxMbkJsYm1ScGJtZGpZaTB0TzF4dUlDQmpZaWdwTzF4dUlDQm1hVzVwYzJoTllYbGlaU2h6ZEhKbFlXMHNJSE4wWVhSbEtUdGNibjFjYmx4dUx5OGdUWFZ6ZENCbWIzSmpaU0JqWVd4c1ltRmpheUIwYnlCaVpTQmpZV3hzWldRZ2IyNGdibVY0ZEZScFkyc3NJSE52SUhSb1lYUWdkMlVnWkc5dUozUmNiaTh2SUdWdGFYUWdKMlJ5WVdsdUp5QmlaV1p2Y21VZ2RHaGxJSGR5YVhSbEtDa2dZMjl1YzNWdFpYSWdaMlYwY3lCMGFHVWdKMlpoYkhObEp5QnlaWFIxY201Y2JpOHZJSFpoYkhWbExDQmhibVFnYUdGeklHRWdZMmhoYm1ObElIUnZJR0YwZEdGamFDQmhJQ2RrY21GcGJpY2diR2x6ZEdWdVpYSXVYRzVtZFc1amRHbHZiaUJ2Ym5keWFYUmxSSEpoYVc0b2MzUnlaV0Z0TENCemRHRjBaU2tnZTF4dUlDQnBaaUFvYzNSaGRHVXViR1Z1WjNSb0lEMDlQU0F3SUNZbUlITjBZWFJsTG01bFpXUkVjbUZwYmlrZ2UxeHVJQ0FnSUhOMFlYUmxMbTVsWldSRWNtRnBiaUE5SUdaaGJITmxPMXh1SUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2RrY21GcGJpY3BPMXh1SUNCOVhHNTlYRzVjYmx4dUx5OGdhV1lnZEdobGNtVW5jeUJ6YjIxbGRHaHBibWNnYVc0Z2RHaGxJR0oxWm1abGNpQjNZV2wwYVc1bkxDQjBhR1Z1SUhCeWIyTmxjM01nYVhSY2JtWjFibU4wYVc5dUlHTnNaV0Z5UW5WbVptVnlLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tITjBjbVZoYlM1ZmQzSnBkR1YySUNZbUlITjBZWFJsTG1KMVptWmxjaTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnTHk4Z1JtRnpkQ0JqWVhObExDQjNjbWwwWlNCbGRtVnllWFJvYVc1bklIVnphVzVuSUY5M2NtbDBaWFlvS1Z4dUlDQWdJSFpoY2lCalluTWdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJqSUQwZ01Ec2dZeUE4SUhOMFlYUmxMbUoxWm1abGNpNXNaVzVuZEdnN0lHTXJLeWxjYmlBZ0lDQWdJR05pY3k1d2RYTm9LSE4wWVhSbExtSjFabVpsY2x0alhTNWpZV3hzWW1GamF5azdYRzVjYmlBZ0lDQXZMeUJqYjNWdWRDQjBhR1VnYjI1bElIZGxJR0Z5WlNCaFpHUnBibWNzSUdGeklIZGxiR3d1WEc0Z0lDQWdMeThnVkU5RVR5aHBjMkZoWTNNcElHTnNaV0Z1SUhSb2FYTWdkWEJjYmlBZ0lDQnpkR0YwWlM1d1pXNWthVzVuWTJJckt6dGNiaUFnSUNCa2IxZHlhWFJsS0hOMGNtVmhiU3dnYzNSaGRHVXNJSFJ5ZFdVc0lITjBZWFJsTG14bGJtZDBhQ3dnYzNSaGRHVXVZblZtWm1WeUxDQW5KeXdnWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR05pY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNXdaVzVrYVc1blkySXRMVHRjYmlBZ0lDQWdJQ0FnWTJKelcybGRLR1Z5Y2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QkRiR1ZoY2lCaWRXWm1aWEpjYmlBZ0lDQnpkR0YwWlM1aWRXWm1aWElnUFNCYlhUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJUYkc5M0lHTmhjMlVzSUhkeWFYUmxJR05vZFc1cmN5QnZibVV0WW5rdGIyNWxYRzRnSUNBZ1ptOXlJQ2gyWVhJZ1l5QTlJREE3SUdNZ1BDQnpkR0YwWlM1aWRXWm1aWEl1YkdWdVozUm9PeUJqS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJsYm5SeWVTQTlJSE4wWVhSbExtSjFabVpsY2x0alhUdGNiaUFnSUNBZ0lIWmhjaUJqYUhWdWF5QTlJR1Z1ZEhKNUxtTm9kVzVyTzF4dUlDQWdJQ0FnZG1GeUlHVnVZMjlrYVc1bklEMGdaVzUwY25rdVpXNWpiMlJwYm1jN1hHNGdJQ0FnSUNCMllYSWdZMklnUFNCbGJuUnllUzVqWVd4c1ltRmphenRjYmlBZ0lDQWdJSFpoY2lCc1pXNGdQU0J6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJRDhnTVNBNklHTm9kVzVyTG14bGJtZDBhRHRjYmx4dUlDQWdJQ0FnWkc5WGNtbDBaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQm1ZV3h6WlN3Z2JHVnVMQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1R0Y2JseHVJQ0FnSUNBZ0x5OGdhV1lnZDJVZ1pHbGtiaWQwSUdOaGJHd2dkR2hsSUc5dWQzSnBkR1VnYVcxdFpXUnBZWFJsYkhrc0lIUm9aVzVjYmlBZ0lDQWdJQzh2SUdsMElHMWxZVzV6SUhSb1lYUWdkMlVnYm1WbFpDQjBieUIzWVdsMElIVnVkR2xzSUdsMElHUnZaWE11WEc0Z0lDQWdJQ0F2THlCaGJITnZMQ0IwYUdGMElHMWxZVzV6SUhSb1lYUWdkR2hsSUdOb2RXNXJJR0Z1WkNCallpQmhjbVVnWTNWeWNtVnVkR3g1WEc0Z0lDQWdJQ0F2THlCaVpXbHVaeUJ3Y205alpYTnpaV1FzSUhOdklHMXZkbVVnZEdobElHSjFabVpsY2lCamIzVnVkR1Z5SUhCaGMzUWdkR2hsYlM1Y2JpQWdJQ0FnSUdsbUlDaHpkR0YwWlM1M2NtbDBhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lHTXJLenRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR01nUENCemRHRjBaUzVpZFdabVpYSXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ2MzUmhkR1V1WW5WbVptVnlJRDBnYzNSaGRHVXVZblZtWm1WeUxuTnNhV05sS0dNcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lITjBZWFJsTG1KMVptWmxjaTVzWlc1bmRHZ2dQU0F3TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1WW5WbVptVnlVSEp2WTJWemMybHVaeUE5SUdaaGJITmxPMXh1ZlZ4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbElEMGdablZ1WTNScGIyNG9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWtnZTF4dUlDQmpZaWh1WlhjZ1JYSnliM0lvSjI1dmRDQnBiWEJzWlcxbGJuUmxaQ2NwS1R0Y2JseHVmVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExsOTNjbWwwWlhZZ1BTQnVkV3hzTzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVaVzVrSUQwZ1puVnVZM1JwYjI0b1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxPMXh1WEc0Z0lHbG1JQ2gxZEdsc0xtbHpSblZ1WTNScGIyNG9ZMmgxYm1zcEtTQjdYRzRnSUNBZ1kySWdQU0JqYUhWdWF6dGNiaUFnSUNCamFIVnVheUE5SUc1MWJHdzdYRzRnSUNBZ1pXNWpiMlJwYm1jZ1BTQnVkV3hzTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSFYwYVd3dWFYTkdkVzVqZEdsdmJpaGxibU52WkdsdVp5a3BJSHRjYmlBZ0lDQmpZaUE5SUdWdVkyOWthVzVuTzF4dUlDQWdJR1Z1WTI5a2FXNW5JRDBnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJR2xtSUNnaGRYUnBiQzVwYzA1MWJHeFBjbFZ1WkdWbWFXNWxaQ2hqYUhWdWF5a3BYRzRnSUNBZ2RHaHBjeTUzY21sMFpTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jcE8xeHVYRzRnSUM4dklDNWxibVFvS1NCbWRXeHNlU0IxYm1OdmNtdHpYRzRnSUdsbUlDaHpkR0YwWlM1amIzSnJaV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNWpiM0pyWldRZ1BTQXhPMXh1SUNBZ0lIUm9hWE11ZFc1amIzSnJLQ2s3WEc0Z0lIMWNibHh1SUNBdkx5QnBaMjV2Y21VZ2RXNXVaV05sYzNOaGNua2daVzVrS0NrZ1kyRnNiSE11WEc0Z0lHbG1JQ2doYzNSaGRHVXVaVzVrYVc1bklDWW1JQ0Z6ZEdGMFpTNW1hVzVwYzJobFpDbGNiaUFnSUNCbGJtUlhjbWwwWVdKc1pTaDBhR2x6TENCemRHRjBaU3dnWTJJcE8xeHVmVHRjYmx4dVhHNW1kVzVqZEdsdmJpQnVaV1ZrUm1sdWFYTm9LSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnY21WMGRYSnVJQ2h6ZEdGMFpTNWxibVJwYm1jZ0ppWmNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFnSmlaY2JpQWdJQ0FnSUNBZ0lDQWhjM1JoZEdVdVptbHVhWE5vWldRZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FoYzNSaGRHVXVkM0pwZEdsdVp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnlaV1pwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1Y0hKbFptbHVhWE5vWldRcElIdGNiaUFnSUNCemRHRjBaUzV3Y21WbWFXNXBjMmhsWkNBOUlIUnlkV1U3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjNCeVpXWnBibWx6YUNjcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1pwYm1semFFMWhlV0psS0hOMGNtVmhiU3dnYzNSaGRHVXBJSHRjYmlBZ2RtRnlJRzVsWldRZ1BTQnVaV1ZrUm1sdWFYTm9LSE4wY21WaGJTd2djM1JoZEdVcE8xeHVJQ0JwWmlBb2JtVmxaQ2tnZTF4dUlDQWdJR2xtSUNoemRHRjBaUzV3Wlc1a2FXNW5ZMklnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSEJ5WldacGJtbHphQ2h6ZEhKbFlXMHNJSE4wWVhSbEtUdGNiaUFnSUNBZ0lITjBZWFJsTG1acGJtbHphR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSE4wY21WaGJTNWxiV2wwS0NkbWFXNXBjMmduS1R0Y2JpQWdJQ0I5SUdWc2MyVmNiaUFnSUNBZ0lIQnlaV1pwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYm1WbFpEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXNWtWM0pwZEdGaWJHVW9jM1J5WldGdExDQnpkR0YwWlN3Z1kySXBJSHRjYmlBZ2MzUmhkR1V1Wlc1a2FXNW5JRDBnZEhKMVpUdGNiaUFnWm1sdWFYTm9UV0Y1WW1Vb2MzUnlaV0Z0TENCemRHRjBaU2s3WEc0Z0lHbG1JQ2hqWWlrZ2UxeHVJQ0FnSUdsbUlDaHpkR0YwWlM1bWFXNXBjMmhsWkNsY2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTJJcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lITjBjbVZoYlM1dmJtTmxLQ2RtYVc1cGMyZ25MQ0JqWWlrN1hHNGdJSDFjYmlBZ2MzUmhkR1V1Wlc1a1pXUWdQU0IwY25WbE8xeHVmVnh1SWwxOSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanNcIilcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbmlmICghcHJvY2Vzcy5icm93c2VyICYmIHByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTSA9PT0gJ2Rpc2FibGUnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnc3RyZWFtJyk7XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmNtVmhaR0ZpYkdVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dmJHbGlMMTl6ZEhKbFlXMWZjbVZoWkdGaWJHVXVhbk1uS1R0Y2JtVjRjRzl5ZEhNdVUzUnlaV0Z0SUQwZ2NtVnhkV2x5WlNnbmMzUnlaV0Z0SnlrN1hHNWxlSEJ2Y25SekxsSmxZV1JoWW14bElEMGdaWGh3YjNKMGN6dGNibVY0Y0c5eWRITXVWM0pwZEdGaWJHVWdQU0J5WlhGMWFYSmxLQ2N1TDJ4cFlpOWZjM1J5WldGdFgzZHlhWFJoWW14bExtcHpKeWs3WEc1bGVIQnZjblJ6TGtSMWNHeGxlQ0E5SUhKbGNYVnBjbVVvSnk0dmJHbGlMMTl6ZEhKbFlXMWZaSFZ3YkdWNExtcHpKeWs3WEc1bGVIQnZjblJ6TGxSeVlXNXpabTl5YlNBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmZEhKaGJuTm1iM0p0TG1wekp5azdYRzVsZUhCdmNuUnpMbEJoYzNOVWFISnZkV2RvSUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjl3WVhOemRHaHliM1ZuYUM1cWN5Y3BPMXh1YVdZZ0tDRndjbTlqWlhOekxtSnliM2R6WlhJZ0ppWWdjSEp2WTJWemN5NWxibll1VWtWQlJFRkNURVZmVTFSU1JVRk5JRDA5UFNBblpHbHpZV0pzWlNjcElIdGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2R6ZEhKbFlXMG5LVHRjYm4xY2JpSmRmUT09IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanNcIilcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fd3JpdGFibGUuanNcIilcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBpc0J1ZmZlckVuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmdcbiAgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICAgICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgIGNhc2UgJ2hleCc6IGNhc2UgJ3V0ZjgnOiBjYXNlICd1dGYtOCc6IGNhc2UgJ2FzY2lpJzogY2FzZSAnYmluYXJ5JzogY2FzZSAnYmFzZTY0JzogY2FzZSAndWNzMic6IGNhc2UgJ3Vjcy0yJzogY2FzZSAndXRmMTZsZSc6IGNhc2UgJ3V0Zi0xNmxlJzogY2FzZSAncmF3JzogcmV0dXJuIHRydWU7XG4gICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgfVxuICAgICB9XG5cblxuZnVuY3Rpb24gYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgfVxufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuIENFU1UtOCBpcyBoYW5kbGVkIGFzIHBhcnQgb2YgdGhlIFVURi04IGVuY29kaW5nLlxuLy9cbi8vIEBUT0RPIEhhbmRsaW5nIGFsbCBlbmNvZGluZ3MgaW5zaWRlIGEgc2luZ2xlIG9iamVjdCBtYWtlcyBpdCB2ZXJ5IGRpZmZpY3VsdFxuLy8gdG8gcmVhc29uIGFib3V0IHRoaXMgY29kZSwgc28gaXQgc2hvdWxkIGJlIHNwbGl0IHVwIGluIHRoZSBmdXR1cmUuXG4vLyBAVE9ETyBUaGVyZSBzaG91bGQgYmUgYSB1dGY4LXN0cmljdCBlbmNvZGluZyB0aGF0IHJlamVjdHMgaW52YWxpZCBVVEYtOCBjb2RlXG4vLyBwb2ludHMgYXMgdXNlZCBieSBDRVNVLTguXG52YXIgU3RyaW5nRGVjb2RlciA9IGV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSAoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCAnJyk7XG4gIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKTtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICAvLyBDRVNVLTggcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDMtYnl0ZXNcbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIC8vIFVURi0xNiByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMi1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMjtcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIC8vIEJhc2UtNjQgc3RvcmVzIDMgYnl0ZXMgaW4gNCBjaGFycywgYW5kIHBhZHMgdGhlIHJlbWFpbmRlci5cbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7XG4gICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHBhc3NUaHJvdWdoV3JpdGU7XG4gICAgICByZXR1cm47XG4gIH1cblxuICAvLyBFbm91Z2ggc3BhY2UgdG8gc3RvcmUgYWxsIGJ5dGVzIG9mIGEgc2luZ2xlIGNoYXJhY3Rlci4gVVRGLTggbmVlZHMgNFxuICAvLyBieXRlcywgYnV0IENFU1UtOCBtYXkgcmVxdWlyZSB1cCB0byA2ICgzIGJ5dGVzIHBlciBzdXJyb2dhdGUpLlxuICB0aGlzLmNoYXJCdWZmZXIgPSBuZXcgQnVmZmVyKDYpO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhclJlY2VpdmVkID0gMDtcbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIGV4cGVjdGVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuICB0aGlzLmNoYXJMZW5ndGggPSAwO1xufTtcblxuXG4vLyB3cml0ZSBkZWNvZGVzIHRoZSBnaXZlbiBidWZmZXIgYW5kIHJldHVybnMgaXQgYXMgSlMgc3RyaW5nIHRoYXQgaXNcbi8vIGd1YXJhbnRlZWQgdG8gbm90IGNvbnRhaW4gYW55IHBhcnRpYWwgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLiBBbnkgcGFydGlhbFxuLy8gY2hhcmFjdGVyIGZvdW5kIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBpcyBidWZmZXJlZCB1cCwgYW5kIHdpbGwgYmVcbi8vIHJldHVybmVkIHdoZW4gY2FsbGluZyB3cml0ZSBhZ2FpbiB3aXRoIHRoZSByZW1haW5pbmcgYnl0ZXMuXG4vL1xuLy8gTm90ZTogQ29udmVydGluZyBhIEJ1ZmZlciBjb250YWluaW5nIGFuIG9ycGhhbiBzdXJyb2dhdGUgdG8gYSBTdHJpbmdcbi8vIGN1cnJlbnRseSB3b3JrcywgYnV0IGNvbnZlcnRpbmcgYSBTdHJpbmcgdG8gYSBCdWZmZXIgKHZpYSBgbmV3IEJ1ZmZlcmAsIG9yXG4vLyBCdWZmZXIjd3JpdGUpIHdpbGwgcmVwbGFjZSBpbmNvbXBsZXRlIHN1cnJvZ2F0ZXMgd2l0aCB0aGUgdW5pY29kZVxuLy8gcmVwbGFjZW1lbnQgY2hhcmFjdGVyLiBTZWUgaHR0cHM6Ly9jb2RlcmV2aWV3LmNocm9taXVtLm9yZy8xMjExNzMwMDkvIC5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBjaGFyU3RyID0gJyc7XG4gIC8vIGlmIG91ciBsYXN0IHdyaXRlIGVuZGVkIHdpdGggYW4gaW5jb21wbGV0ZSBtdWx0aWJ5dGUgY2hhcmFjdGVyXG4gIHdoaWxlICh0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgcmVtYWluaW5nIGJ5dGVzIHRoaXMgYnVmZmVyIGhhcyB0byBvZmZlciBmb3IgdGhpcyBjaGFyXG4gICAgdmFyIGF2YWlsYWJsZSA9IChidWZmZXIubGVuZ3RoID49IHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkKSA/XG4gICAgICAgIHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkIDpcbiAgICAgICAgYnVmZmVyLmxlbmd0aDtcblxuICAgIC8vIGFkZCB0aGUgbmV3IGJ5dGVzIHRvIHRoZSBjaGFyIGJ1ZmZlclxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgdGhpcy5jaGFyUmVjZWl2ZWQsIDAsIGF2YWlsYWJsZSk7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gYXZhaWxhYmxlO1xuXG4gICAgaWYgKHRoaXMuY2hhclJlY2VpdmVkIDwgdGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgICAvLyBzdGlsbCBub3QgZW5vdWdoIGNoYXJzIGluIHRoaXMgYnVmZmVyPyB3YWl0IGZvciBtb3JlIC4uLlxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBieXRlcyBiZWxvbmdpbmcgdG8gdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGZyb20gdGhlIGJ1ZmZlclxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShhdmFpbGFibGUsIGJ1ZmZlci5sZW5ndGgpO1xuXG4gICAgLy8gZ2V0IHRoZSBjaGFyYWN0ZXIgdGhhdCB3YXMgc3BsaXRcbiAgICBjaGFyU3RyID0gdGhpcy5jaGFyQnVmZmVyLnNsaWNlKDAsIHRoaXMuY2hhckxlbmd0aCkudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG5cbiAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gICAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGNoYXJTdHIubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCArPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgICBjaGFyU3RyID0gJyc7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgPSB0aGlzLmNoYXJMZW5ndGggPSAwO1xuXG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgYnl0ZXMgaW4gdGhpcyBidWZmZXIsIGp1c3QgZW1pdCBvdXIgY2hhclxuICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY2hhclN0cjtcbiAgICB9XG4gICAgYnJlYWs7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgYW5kIHNldCBjaGFyTGVuZ3RoIC8gY2hhclJlY2VpdmVkXG4gIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKTtcblxuICB2YXIgZW5kID0gYnVmZmVyLmxlbmd0aDtcbiAgaWYgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGJ1ZmZlciB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIgYnl0ZXMgd2UgZ290XG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQsIGVuZCk7XG4gICAgZW5kIC09IHRoaXMuY2hhclJlY2VpdmVkO1xuICB9XG5cbiAgY2hhclN0ciArPSBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgZW5kKTtcblxuICB2YXIgZW5kID0gY2hhclN0ci5sZW5ndGggLSAxO1xuICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoZW5kKTtcbiAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgIHZhciBzaXplID0gdGhpcy5zdXJyb2dhdGVTaXplO1xuICAgIHRoaXMuY2hhckxlbmd0aCArPSBzaXplO1xuICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IHNpemU7XG4gICAgdGhpcy5jaGFyQnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCBzaXplLCAwLCBzaXplKTtcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIDAsIHNpemUpO1xuICAgIHJldHVybiBjaGFyU3RyLnN1YnN0cmluZygwLCBlbmQpO1xuICB9XG5cbiAgLy8gb3IganVzdCBlbWl0IHRoZSBjaGFyU3RyXG4gIHJldHVybiBjaGFyU3RyO1xufTtcblxuLy8gZGV0ZWN0SW5jb21wbGV0ZUNoYXIgZGV0ZXJtaW5lcyBpZiB0aGVyZSBpcyBhbiBpbmNvbXBsZXRlIFVURi04IGNoYXJhY3RlciBhdFxuLy8gdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gYnVmZmVyLiBJZiBzbywgaXQgc2V0cyB0aGlzLmNoYXJMZW5ndGggdG8gdGhlIGJ5dGVcbi8vIGxlbmd0aCB0aGF0IGNoYXJhY3RlciwgYW5kIHNldHMgdGhpcy5jaGFyUmVjZWl2ZWQgdG8gdGhlIG51bWJlciBvZiBieXRlc1xuLy8gdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGlzIGNoYXJhY3Rlci5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmRldGVjdEluY29tcGxldGVDaGFyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIC8vIGRldGVybWluZSBob3cgbWFueSBieXRlcyB3ZSBoYXZlIHRvIGNoZWNrIGF0IHRoZSBlbmQgb2YgdGhpcyBidWZmZXJcbiAgdmFyIGkgPSAoYnVmZmVyLmxlbmd0aCA+PSAzKSA/IDMgOiBidWZmZXIubGVuZ3RoO1xuXG4gIC8vIEZpZ3VyZSBvdXQgaWYgb25lIG9mIHRoZSBsYXN0IGkgYnl0ZXMgb2Ygb3VyIGJ1ZmZlciBhbm5vdW5jZXMgYW5cbiAgLy8gaW5jb21wbGV0ZSBjaGFyLlxuICBmb3IgKDsgaSA+IDA7IGktLSkge1xuICAgIHZhciBjID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSBpXTtcblxuICAgIC8vIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi04I0Rlc2NyaXB0aW9uXG5cbiAgICAvLyAxMTBYWFhYWFxuICAgIGlmIChpID09IDEgJiYgYyA+PiA1ID09IDB4MDYpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDI7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyAxMTEwWFhYWFxuICAgIGlmIChpIDw9IDIgJiYgYyA+PiA0ID09IDB4MEUpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDM7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyAxMTExMFhYWFxuICAgIGlmIChpIDw9IDMgJiYgYyA+PiAzID09IDB4MUUpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBpO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciByZXMgPSAnJztcbiAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoKVxuICAgIHJlcyA9IHRoaXMud3JpdGUoYnVmZmVyKTtcblxuICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQpIHtcbiAgICB2YXIgY3IgPSB0aGlzLmNoYXJSZWNlaXZlZDtcbiAgICB2YXIgYnVmID0gdGhpcy5jaGFyQnVmZmVyO1xuICAgIHZhciBlbmMgPSB0aGlzLmVuY29kaW5nO1xuICAgIHJlcyArPSBidWYuc2xpY2UoMCwgY3IpLnRvU3RyaW5nKGVuYyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gcGFzc1Rocm91Z2hXcml0ZShidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMjtcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAyIDogMDtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDM7XG4gIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMyA6IDA7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5MWRHbHNMM1YwYVd3dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFTnZjSGx5YVdkb2RDQktiM2xsYm5Rc0lFbHVZeTRnWVc1a0lHOTBhR1Z5SUU1dlpHVWdZMjl1ZEhKcFluVjBiM0p6TGx4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoWEc0dkx5QmpiM0I1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobFhHNHZMeUJjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc0lHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtZGNiaTh2SUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSeklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDeGNiaTh2SUdScGMzUnlhV0oxZEdVc0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhSY2JpOHZJSEJsY25OdmJuTWdkRzhnZDJodmJTQjBhR1VnVTI5bWRIZGhjbVVnYVhNZ1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlZ4dUx5OGdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc0dkwxeHVMeThnVkdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVnWVc1a0lIUm9hWE1nY0dWeWJXbHpjMmx2YmlCdWIzUnBZMlVnYzJoaGJHd2dZbVVnYVc1amJIVmtaV1JjYmk4dklHbHVJR0ZzYkNCamIzQnBaWE1nYjNJZ2MzVmljM1JoYm5ScFlXd2djRzl5ZEdsdmJuTWdiMllnZEdobElGTnZablIzWVhKbExseHVMeTljYmk4dklGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTmNiaTh2SUU5U0lFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWmNiaTh2SUUxRlVrTklRVTVVUVVKSlRFbFVXU3dnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U1Y2JpOHZJRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MRnh1THk4Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTWEc0dkx5QlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN3Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZYRzR2THlCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTRnVkVoRklGTlBSbFJYUVZKRkxseHVYRzUyWVhJZ1ptOXliV0YwVW1WblJYaHdJRDBnTHlWYmMyUnFKVjB2Wnp0Y2JtVjRjRzl5ZEhNdVptOXliV0YwSUQwZ1puVnVZM1JwYjI0b1ppa2dlMXh1SUNCcFppQW9JV2x6VTNSeWFXNW5LR1lwS1NCN1hHNGdJQ0FnZG1GeUlHOWlhbVZqZEhNZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2IySnFaV04wY3k1d2RYTm9LR2x1YzNCbFkzUW9ZWEpuZFcxbGJuUnpXMmxkS1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnZZbXBsWTNSekxtcHZhVzRvSnlBbktUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCcElEMGdNVHRjYmlBZ2RtRnlJR0Z5WjNNZ1BTQmhjbWQxYldWdWRITTdYRzRnSUhaaGNpQnNaVzRnUFNCaGNtZHpMbXhsYm1kMGFEdGNiaUFnZG1GeUlITjBjaUE5SUZOMGNtbHVaeWhtS1M1eVpYQnNZV05sS0dadmNtMWhkRkpsWjBWNGNDd2dablZ1WTNScGIyNG9lQ2tnZTF4dUlDQWdJR2xtSUNoNElEMDlQU0FuSlNVbktTQnlaWFIxY200Z0p5VW5PMXh1SUNBZ0lHbG1JQ2hwSUQ0OUlHeGxiaWtnY21WMGRYSnVJSGc3WEc0Z0lDQWdjM2RwZEdOb0lDaDRLU0I3WEc0Z0lDQWdJQ0JqWVhObElDY2xjeWM2SUhKbGRIVnliaUJUZEhKcGJtY29ZWEpuYzF0cEt5dGRLVHRjYmlBZ0lDQWdJR05oYzJVZ0p5VmtKem9nY21WMGRYSnVJRTUxYldKbGNpaGhjbWR6VzJrcksxMHBPMXh1SUNBZ0lDQWdZMkZ6WlNBbkpXb25PbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoaGNtZHpXMmtySzEwcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkYlEybHlZM1ZzWVhKZEp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIZzdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdabTl5SUNoMllYSWdlQ0E5SUdGeVozTmJhVjA3SUdrZ1BDQnNaVzQ3SUhnZ1BTQmhjbWR6V3lzcmFWMHBJSHRjYmlBZ0lDQnBaaUFvYVhOT2RXeHNLSGdwSUh4OElDRnBjMDlpYW1WamRDaDRLU2tnZTF4dUlDQWdJQ0FnYzNSeUlDczlJQ2NnSnlBcklIZzdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMGNpQXJQU0FuSUNjZ0t5QnBibk53WldOMEtIZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2MzUnlPMXh1ZlR0Y2JseHVYRzR2THlCTllYSnJJSFJvWVhRZ1lTQnRaWFJvYjJRZ2MyaHZkV3hrSUc1dmRDQmlaU0IxYzJWa0xseHVMeThnVW1WMGRYSnVjeUJoSUcxdlpHbG1hV1ZrSUdaMWJtTjBhVzl1SUhkb2FXTm9JSGRoY201eklHOXVZMlVnWW5rZ1pHVm1ZWFZzZEM1Y2JpOHZJRWxtSUMwdGJtOHRaR1Z3Y21WallYUnBiMjRnYVhNZ2MyVjBMQ0IwYUdWdUlHbDBJR2x6SUdFZ2JtOHRiM0F1WEc1bGVIQnZjblJ6TG1SbGNISmxZMkYwWlNBOUlHWjFibU4wYVc5dUtHWnVMQ0J0YzJjcElIdGNiaUFnTHk4Z1FXeHNiM2NnWm05eUlHUmxjSEpsWTJGMGFXNW5JSFJvYVc1bmN5QnBiaUIwYUdVZ2NISnZZMlZ6Y3lCdlppQnpkR0Z5ZEdsdVp5QjFjQzVjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0dkc2IySmhiQzV3Y205alpYTnpLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmxlSEJ2Y25SekxtUmxjSEpsWTJGMFpTaG1iaXdnYlhObktTNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCcFppQW9jSEp2WTJWemN5NXViMFJsY0hKbFkyRjBhVzl1SUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJSGRoY201bFpDQTlJR1poYkhObE8xeHVJQ0JtZFc1amRHbHZiaUJrWlhCeVpXTmhkR1ZrS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkMkZ5Ym1Wa0tTQjdYRzRnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTUwYUhKdmQwUmxjSEpsWTJGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh0YzJjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTlqWlhOekxuUnlZV05sUkdWd2NtVmpZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTBjbUZqWlNodGMyY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lodGMyY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkMkZ5Ym1Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1pHVndjbVZqWVhSbFpEdGNibjA3WEc1Y2JseHVkbUZ5SUdSbFluVm5jeUE5SUh0OU8xeHVkbUZ5SUdSbFluVm5SVzUyYVhKdmJqdGNibVY0Y0c5eWRITXVaR1ZpZFdkc2IyY2dQU0JtZFc1amRHbHZiaWh6WlhRcElIdGNiaUFnYVdZZ0tHbHpWVzVrWldacGJtVmtLR1JsWW5WblJXNTJhWEp2YmlrcFhHNGdJQ0FnWkdWaWRXZEZiblpwY205dUlEMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUVSVUpWUnlCOGZDQW5KenRjYmlBZ2MyVjBJRDBnYzJWMExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc0Z0lHbG1JQ2doWkdWaWRXZHpXM05sZEYwcElIdGNiaUFnSUNCcFppQW9ibVYzSUZKbFowVjRjQ2duWEZ4Y1hHSW5JQ3NnYzJWMElDc2dKMXhjWEZ4aUp5d2dKMmtuS1M1MFpYTjBLR1JsWW5WblJXNTJhWEp2YmlrcElIdGNiaUFnSUNBZ0lIWmhjaUJ3YVdRZ1BTQndjbTlqWlhOekxuQnBaRHRjYmlBZ0lDQWdJR1JsWW5WbmMxdHpaWFJkSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGMyY2dQU0JsZUhCdmNuUnpMbVp2Y20xaGRDNWhjSEJzZVNobGVIQnZjblJ6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NjbGN5QWxaRG9nSlhNbkxDQnpaWFFzSUhCcFpDd2diWE5uS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1JsWW5WbmMxdHpaWFJkSUQwZ1puVnVZM1JwYjI0b0tTQjdmVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHUmxZblZuYzF0elpYUmRPMXh1ZlR0Y2JseHVYRzR2S2lwY2JpQXFJRVZqYUc5eklIUm9aU0IyWVd4MVpTQnZaaUJoSUhaaGJIVmxMaUJVY25seklIUnZJSEJ5YVc1MElIUm9aU0IyWVd4MVpTQnZkWFJjYmlBcUlHbHVJSFJvWlNCaVpYTjBJSGRoZVNCd2IzTnphV0pzWlNCbmFYWmxiaUIwYUdVZ1pHbG1abVZ5Wlc1MElIUjVjR1Z6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1vZ1ZHaGxJRzlpYW1WamRDQjBieUJ3Y21sdWRDQnZkWFF1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBjeUJQY0hScGIyNWhiQ0J2Y0hScGIyNXpJRzlpYW1WamRDQjBhR0YwSUdGc2RHVnljeUIwYUdVZ2IzVjBjSFYwTGx4dUlDb3ZYRzR2S2lCc1pXZGhZM2s2SUc5aWFpd2djMmh2ZDBocFpHUmxiaXdnWkdWd2RHZ3NJR052Ykc5eWN5b3ZYRzVtZFc1amRHbHZiaUJwYm5Od1pXTjBLRzlpYWl3Z2IzQjBjeWtnZTF4dUlDQXZMeUJrWldaaGRXeDBJRzl3ZEdsdmJuTmNiaUFnZG1GeUlHTjBlQ0E5SUh0Y2JpQWdJQ0J6WldWdU9pQmJYU3hjYmlBZ0lDQnpkSGxzYVhwbE9pQnpkSGxzYVhwbFRtOURiMnh2Y2x4dUlDQjlPMXh1SUNBdkx5QnNaV2RoWTNrdUxpNWNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BqMGdNeWtnWTNSNExtUmxjSFJvSUQwZ1lYSm5kVzFsYm5Seld6SmRPMXh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStQU0EwS1NCamRIZ3VZMjlzYjNKeklEMGdZWEpuZFcxbGJuUnpXek5kTzF4dUlDQnBaaUFvYVhOQ2IyOXNaV0Z1S0c5d2RITXBLU0I3WEc0Z0lDQWdMeThnYkdWbllXTjVMaTR1WEc0Z0lDQWdZM1I0TG5Ob2IzZElhV1JrWlc0Z1BTQnZjSFJ6TzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRzl3ZEhNcElIdGNiaUFnSUNBdkx5Qm5iM1FnWVc0Z1hDSnZjSFJwYjI1elhDSWdiMkpxWldOMFhHNGdJQ0FnWlhod2IzSjBjeTVmWlhoMFpXNWtLR04wZUN3Z2IzQjBjeWs3WEc0Z0lIMWNiaUFnTHk4Z2MyVjBJR1JsWm1GMWJIUWdiM0IwYVc5dWMxeHVJQ0JwWmlBb2FYTlZibVJsWm1sdVpXUW9ZM1I0TG5Ob2IzZElhV1JrWlc0cEtTQmpkSGd1YzJodmQwaHBaR1JsYmlBOUlHWmhiSE5sTzF4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb1kzUjRMbVJsY0hSb0tTa2dZM1I0TG1SbGNIUm9JRDBnTWp0Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHTjBlQzVqYjJ4dmNuTXBLU0JqZEhndVkyOXNiM0p6SUQwZ1ptRnNjMlU3WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNoamRIZ3VZM1Z6ZEc5dFNXNXpjR1ZqZENrcElHTjBlQzVqZFhOMGIyMUpibk53WldOMElEMGdkSEoxWlR0Y2JpQWdhV1lnS0dOMGVDNWpiMnh2Y25NcElHTjBlQzV6ZEhsc2FYcGxJRDBnYzNSNWJHbDZaVmRwZEdoRGIyeHZjanRjYmlBZ2NtVjBkWEp1SUdadmNtMWhkRlpoYkhWbEtHTjBlQ3dnYjJKcUxDQmpkSGd1WkdWd2RHZ3BPMXh1ZlZ4dVpYaHdiM0owY3k1cGJuTndaV04wSUQwZ2FXNXpjR1ZqZER0Y2JseHVYRzR2THlCb2RIUndPaTh2Wlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwRk9VMGxmWlhOallYQmxYMk52WkdValozSmhjR2hwWTNOY2JtbHVjM0JsWTNRdVkyOXNiM0p6SUQwZ2UxeHVJQ0FuWW05c1pDY2dPaUJiTVN3Z01qSmRMRnh1SUNBbmFYUmhiR2xqSnlBNklGc3pMQ0F5TTEwc1hHNGdJQ2QxYm1SbGNteHBibVVuSURvZ1d6UXNJREkwWFN4Y2JpQWdKMmx1ZG1WeWMyVW5JRG9nV3pjc0lESTNYU3hjYmlBZ0ozZG9hWFJsSnlBNklGc3pOeXdnTXpsZExGeHVJQ0FuWjNKbGVTY2dPaUJiT1RBc0lETTVYU3hjYmlBZ0oySnNZV05ySnlBNklGc3pNQ3dnTXpsZExGeHVJQ0FuWW14MVpTY2dPaUJiTXpRc0lETTVYU3hjYmlBZ0oyTjVZVzRuSURvZ1d6TTJMQ0F6T1Ywc1hHNGdJQ2RuY21WbGJpY2dPaUJiTXpJc0lETTVYU3hjYmlBZ0oyMWhaMlZ1ZEdFbklEb2dXek0xTENBek9WMHNYRzRnSUNkeVpXUW5JRG9nV3pNeExDQXpPVjBzWEc0Z0lDZDVaV3hzYjNjbklEb2dXek16TENBek9WMWNibjA3WEc1Y2JpOHZJRVJ2YmlkMElIVnpaU0FuWW14MVpTY2dibTkwSUhacGMybGliR1VnYjI0Z1kyMWtMbVY0WlZ4dWFXNXpjR1ZqZEM1emRIbHNaWE1nUFNCN1hHNGdJQ2R6Y0dWamFXRnNKem9nSjJONVlXNG5MRnh1SUNBbmJuVnRZbVZ5SnpvZ0ozbGxiR3h2ZHljc1hHNGdJQ2RpYjI5c1pXRnVKem9nSjNsbGJHeHZkeWNzWEc0Z0lDZDFibVJsWm1sdVpXUW5PaUFuWjNKbGVTY3NYRzRnSUNkdWRXeHNKem9nSjJKdmJHUW5MRnh1SUNBbmMzUnlhVzVuSnpvZ0oyZHlaV1Z1Snl4Y2JpQWdKMlJoZEdVbk9pQW5iV0ZuWlc1MFlTY3NYRzRnSUM4dklGd2libUZ0WlZ3aU9pQnBiblJsYm5ScGIyNWhiR3g1SUc1dmRDQnpkSGxzYVc1blhHNGdJQ2R5WldkbGVIQW5PaUFuY21Wa0oxeHVmVHRjYmx4dVhHNW1kVzVqZEdsdmJpQnpkSGxzYVhwbFYybDBhRU52Ykc5eUtITjBjaXdnYzNSNWJHVlVlWEJsS1NCN1hHNGdJSFpoY2lCemRIbHNaU0E5SUdsdWMzQmxZM1F1YzNSNWJHVnpXM04wZVd4bFZIbHdaVjA3WEc1Y2JpQWdhV1lnS0hOMGVXeGxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZGNYSFV3TURGaVd5Y2dLeUJwYm5Od1pXTjBMbU52Ykc5eWMxdHpkSGxzWlYxYk1GMGdLeUFuYlNjZ0t5QnpkSElnSzF4dUlDQWdJQ0FnSUNBZ0lDQW5YRngxTURBeFlsc25JQ3NnYVc1emNHVmpkQzVqYjJ4dmNuTmJjM1I1YkdWZFd6RmRJQ3NnSjIwbk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCemRISTdYRzRnSUgxY2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCemRIbHNhWHBsVG05RGIyeHZjaWh6ZEhJc0lITjBlV3hsVkhsd1pTa2dlMXh1SUNCeVpYUjFjbTRnYzNSeU8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHRnljbUY1Vkc5SVlYTm9LR0Z5Y21GNUtTQjdYRzRnSUhaaGNpQm9ZWE5vSUQwZ2UzMDdYRzVjYmlBZ1lYSnlZWGt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWgyWVd3c0lHbGtlQ2tnZTF4dUlDQWdJR2hoYzJoYmRtRnNYU0E5SUhSeWRXVTdYRzRnSUgwcE8xeHVYRzRnSUhKbGRIVnliaUJvWVhOb08xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEZaaGJIVmxLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5a2dlMXh1SUNBdkx5QlFjbTkyYVdSbElHRWdhRzl2YXlCbWIzSWdkWE5sY2kxemNHVmphV1pwWldRZ2FXNXpjR1ZqZENCbWRXNWpkR2x2Ym5NdVhHNGdJQzh2SUVOb1pXTnJJSFJvWVhRZ2RtRnNkV1VnYVhNZ1lXNGdiMkpxWldOMElIZHBkR2dnWVc0Z2FXNXpjR1ZqZENCbWRXNWpkR2x2YmlCdmJpQnBkRnh1SUNCcFppQW9ZM1I0TG1OMWMzUnZiVWx1YzNCbFkzUWdKaVpjYmlBZ0lDQWdJSFpoYkhWbElDWW1YRzRnSUNBZ0lDQnBjMFoxYm1OMGFXOXVLSFpoYkhWbExtbHVjM0JsWTNRcElDWW1YRzRnSUNBZ0lDQXZMeUJHYVd4MFpYSWdiM1YwSUhSb1pTQjFkR2xzSUcxdlpIVnNaU3dnYVhRbmN5QnBibk53WldOMElHWjFibU4wYVc5dUlHbHpJSE53WldOcFlXeGNiaUFnSUNBZ0lIWmhiSFZsTG1sdWMzQmxZM1FnSVQwOUlHVjRjRzl5ZEhNdWFXNXpjR1ZqZENBbUpseHVJQ0FnSUNBZ0x5OGdRV3h6YnlCbWFXeDBaWElnYjNWMElHRnVlU0J3Y205MGIzUjVjR1VnYjJKcVpXTjBjeUIxYzJsdVp5QjBhR1VnWTJseVkzVnNZWElnWTJobFkyc3VYRzRnSUNBZ0lDQWhLSFpoYkhWbExtTnZibk4wY25WamRHOXlJQ1ltSUhaaGJIVmxMbU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNBOVBUMGdkbUZzZFdVcEtTQjdYRzRnSUNBZ2RtRnlJSEpsZENBOUlIWmhiSFZsTG1sdWMzQmxZM1FvY21WamRYSnpaVlJwYldWekxDQmpkSGdwTzF4dUlDQWdJR2xtSUNnaGFYTlRkSEpwYm1jb2NtVjBLU2tnZTF4dUlDQWdJQ0FnY21WMElEMGdabTl5YldGMFZtRnNkV1VvWTNSNExDQnlaWFFzSUhKbFkzVnljMlZVYVcxbGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJSDFjYmx4dUlDQXZMeUJRY21sdGFYUnBkbVVnZEhsd1pYTWdZMkZ1Ym05MElHaGhkbVVnY0hKdmNHVnlkR2xsYzF4dUlDQjJZWElnY0hKcGJXbDBhWFpsSUQwZ1ptOXliV0YwVUhKcGJXbDBhWFpsS0dOMGVDd2dkbUZzZFdVcE8xeHVJQ0JwWmlBb2NISnBiV2wwYVhabEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWFXMXBkR2wyWlR0Y2JpQWdmVnh1WEc0Z0lDOHZJRXh2YjJzZ2RYQWdkR2hsSUd0bGVYTWdiMllnZEdobElHOWlhbVZqZEM1Y2JpQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXeDFaU2s3WEc0Z0lIWmhjaUIyYVhOcFlteGxTMlY1Y3lBOUlHRnljbUY1Vkc5SVlYTm9LR3RsZVhNcE8xeHVYRzRnSUdsbUlDaGpkSGd1YzJodmQwaHBaR1JsYmlrZ2UxeHVJQ0FnSUd0bGVYTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWgyWVd4MVpTazdYRzRnSUgxY2JseHVJQ0F2THlCSlJTQmtiMlZ6YmlkMElHMWhhMlVnWlhKeWIzSWdabWxsYkdSeklHNXZiaTFsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR2gwZEhBNkx5OXRjMlJ1TG0xcFkzSnZjMjltZEM1amIyMHZaVzR0ZFhNdmJHbGljbUZ5ZVM5cFpTOWtkM2MxTW5OaWRDaDJQWFp6TGprMEtTNWhjM0I0WEc0Z0lHbG1JQ2hwYzBWeWNtOXlLSFpoYkhWbEtWeHVJQ0FnSUNBZ0ppWWdLR3RsZVhNdWFXNWtaWGhQWmlnbmJXVnpjMkZuWlNjcElENDlJREFnZkh3Z2EyVjVjeTVwYm1SbGVFOW1LQ2RrWlhOamNtbHdkR2x2YmljcElENDlJREFwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p2Y20xaGRFVnljbTl5S0haaGJIVmxLVHRjYmlBZ2ZWeHVYRzRnSUM4dklGTnZiV1VnZEhsd1pTQnZaaUJ2WW1wbFkzUWdkMmwwYUc5MWRDQndjbTl3WlhKMGFXVnpJR05oYmlCaVpTQnphRzl5ZEdOMWRIUmxaQzVjYmlBZ2FXWWdLR3RsZVhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdhV1lnS0dselJuVnVZM1JwYjI0b2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCMllYSWdibUZ0WlNBOUlIWmhiSFZsTG01aGJXVWdQeUFuT2lBbklDc2dkbUZzZFdVdWJtRnRaU0E2SUNjbk8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDZGJSblZ1WTNScGIyNG5JQ3NnYm1GdFpTQXJJQ2RkSnl3Z0ozTndaV05wWVd3bktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpVbVZuUlhod0tIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3NJQ2R5WldkbGVIQW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6UkdGMFpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTaEVZWFJsTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTd2dKMlJoZEdVbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpSWEp5YjNJb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm05eWJXRjBSWEp5YjNJb2RtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlZWE5sSUQwZ0p5Y3NJR0Z5Y21GNUlEMGdabUZzYzJVc0lHSnlZV05sY3lBOUlGc25leWNzSUNkOUoxMDdYRzVjYmlBZ0x5OGdUV0ZyWlNCQmNuSmhlU0J6WVhrZ2RHaGhkQ0IwYUdWNUlHRnlaU0JCY25KaGVWeHVJQ0JwWmlBb2FYTkJjbkpoZVNoMllXeDFaU2twSUh0Y2JpQWdJQ0JoY25KaGVTQTlJSFJ5ZFdVN1hHNGdJQ0FnWW5KaFkyVnpJRDBnV3lkYkp5d2dKMTBuWFR0Y2JpQWdmVnh1WEc0Z0lDOHZJRTFoYTJVZ1puVnVZM1JwYjI1eklITmhlU0IwYUdGMElIUm9aWGtnWVhKbElHWjFibU4wYVc5dWMxeHVJQ0JwWmlBb2FYTkdkVzVqZEdsdmJpaDJZV3gxWlNrcElIdGNiaUFnSUNCMllYSWdiaUE5SUhaaGJIVmxMbTVoYldVZ1B5QW5PaUFuSUNzZ2RtRnNkV1V1Ym1GdFpTQTZJQ2NuTzF4dUlDQWdJR0poYzJVZ1BTQW5JRnRHZFc1amRHbHZiaWNnS3lCdUlDc2dKMTBuTzF4dUlDQjlYRzVjYmlBZ0x5OGdUV0ZyWlNCU1pXZEZlSEJ6SUhOaGVTQjBhR0YwSUhSb1pYa2dZWEpsSUZKbFowVjRjSE5jYmlBZ2FXWWdLR2x6VW1WblJYaHdLSFpoYkhWbEtTa2dlMXh1SUNBZ0lHSmhjMlVnUFNBbklDY2dLeUJTWldkRmVIQXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdUV0ZyWlNCa1lYUmxjeUIzYVhSb0lIQnliM0JsY25ScFpYTWdabWx5YzNRZ2MyRjVJSFJvWlNCa1lYUmxYRzRnSUdsbUlDaHBjMFJoZEdVb2RtRnNkV1VwS1NCN1hHNGdJQ0FnWW1GelpTQTlJQ2NnSnlBcklFUmhkR1V1Y0hKdmRHOTBlWEJsTG5SdlZWUkRVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnTHk4Z1RXRnJaU0JsY25KdmNpQjNhWFJvSUcxbGMzTmhaMlVnWm1seWMzUWdjMkY1SUhSb1pTQmxjbkp2Y2x4dUlDQnBaaUFvYVhORmNuSnZjaWgyWVd4MVpTa3BJSHRjYmlBZ0lDQmlZWE5sSUQwZ0p5QW5JQ3NnWm05eWJXRjBSWEp5YjNJb2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR3RsZVhNdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUNnaFlYSnlZWGtnZkh3Z2RtRnNkV1V1YkdWdVozUm9JRDA5SURBcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdKeVlXTmxjMXN3WFNBcklHSmhjMlVnS3lCaWNtRmpaWE5iTVYwN1hHNGdJSDFjYmx4dUlDQnBaaUFvY21WamRYSnpaVlJwYldWeklEd2dNQ2tnZTF4dUlDQWdJR2xtSUNocGMxSmxaMFY0Y0NoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNoU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcExDQW5jbVZuWlhod0p5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNnblcwOWlhbVZqZEYwbkxDQW5jM0JsWTJsaGJDY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR04wZUM1elpXVnVMbkIxYzJnb2RtRnNkV1VwTzF4dVhHNGdJSFpoY2lCdmRYUndkWFE3WEc0Z0lHbG1JQ2hoY25KaGVTa2dlMXh1SUNBZ0lHOTFkSEIxZENBOUlHWnZjbTFoZEVGeWNtRjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVYTXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzkxZEhCMWRDQTlJR3RsZVhNdWJXRndLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadmNtMWhkRkJ5YjNCbGNuUjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVTd2dZWEp5WVhrcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdZM1I0TG5ObFpXNHVjRzl3S0NrN1hHNWNiaUFnY21WMGRYSnVJSEpsWkhWalpWUnZVMmx1WjJ4bFUzUnlhVzVuS0c5MWRIQjFkQ3dnWW1GelpTd2dZbkpoWTJWektUdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSUWNtbHRhWFJwZG1Vb1kzUjRMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvZG1Gc2RXVXBLVnh1SUNBZ0lISmxkSFZ5YmlCamRIZ3VjM1I1YkdsNlpTZ25kVzVrWldacGJtVmtKeXdnSjNWdVpHVm1hVzVsWkNjcE8xeHVJQ0JwWmlBb2FYTlRkSEpwYm1jb2RtRnNkV1VwS1NCN1hHNGdJQ0FnZG1GeUlITnBiWEJzWlNBOUlDZGNYQ2NuSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2RXVXBMbkpsY0d4aFkyVW9MMTVjSW54Y0lpUXZaeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZKeTluTENCY0lseGNYRnduWENJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYRnhjWEZ3aUwyY3NJQ2RjSWljcElDc2dKMXhjSnljN1hHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0hOcGJYQnNaU3dnSjNOMGNtbHVaeWNwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMDUxYldKbGNpaDJZV3gxWlNrcFhHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NjbklDc2dkbUZzZFdVc0lDZHVkVzFpWlhJbktUdGNiaUFnYVdZZ0tHbHpRbTl2YkdWaGJpaDJZV3gxWlNrcFhHNGdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NjbklDc2dkbUZzZFdVc0lDZGliMjlzWldGdUp5azdYRzRnSUM4dklFWnZjaUJ6YjIxbElISmxZWE52YmlCMGVYQmxiMllnYm5Wc2JDQnBjeUJjSW05aWFtVmpkRndpTENCemJ5QnpjR1ZqYVdGc0lHTmhjMlVnYUdWeVpTNWNiaUFnYVdZZ0tHbHpUblZzYkNoMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2R1ZFd4c0p5d2dKMjUxYkd3bktUdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSRmNuSnZjaWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnSjFzbklDc2dSWEp5YjNJdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBJQ3NnSjEwbk8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHWnZjbTFoZEVGeWNtRjVLR04wZUN3Z2RtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5d2dkbWx6YVdKc1pVdGxlWE1zSUd0bGVYTXBJSHRjYmlBZ2RtRnlJRzkxZEhCMWRDQTlJRnRkTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJSFpoYkhWbExteGxibWQwYURzZ2FTQThJR3c3SUNzcmFTa2dlMXh1SUNBZ0lHbG1JQ2hvWVhOUGQyNVFjbTl3WlhKMGVTaDJZV3gxWlN3Z1UzUnlhVzVuS0drcEtTa2dlMXh1SUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvWm05eWJXRjBVSEp2Y0dWeWRIa29ZM1I0TENCMllXeDFaU3dnY21WamRYSnpaVlJwYldWekxDQjJhWE5wWW14bFMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNCVGRISnBibWNvYVNrc0lIUnlkV1VwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvSnljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCclpYbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnYVdZZ0tDRnJaWGt1YldGMFkyZ29MMTVjWEdRckpDOHBLU0I3WEc0Z0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNobWIzSnRZWFJRY205d1pYSjBlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TEZ4dUlDQWdJQ0FnSUNBZ0lHdGxlU3dnZEhKMVpTa3BPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQnZkWFJ3ZFhRN1hHNTlYRzVjYmx4dVpuVnVZM1JwYjI0Z1ptOXliV0YwVUhKdmNHVnlkSGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l3Z2EyVjVMQ0JoY25KaGVTa2dlMXh1SUNCMllYSWdibUZ0WlN3Z2MzUnlMQ0JrWlhOak8xeHVJQ0JrWlhOaklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMllXeDFaU3dnYTJWNUtTQjhmQ0I3SUhaaGJIVmxPaUIyWVd4MVpWdHJaWGxkSUgwN1hHNGdJR2xtSUNoa1pYTmpMbWRsZENrZ2UxeHVJQ0FnSUdsbUlDaGtaWE5qTG5ObGRDa2dlMXh1SUNBZ0lDQWdjM1J5SUQwZ1kzUjRMbk4wZVd4cGVtVW9KMXRIWlhSMFpYSXZVMlYwZEdWeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITjBjaUE5SUdOMGVDNXpkSGxzYVhwbEtDZGJSMlYwZEdWeVhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2xtSUNoa1pYTmpMbk5sZENrZ2UxeHVJQ0FnSUNBZ2MzUnlJRDBnWTNSNExuTjBlV3hwZW1Vb0oxdFRaWFIwWlhKZEp5d2dKM053WldOcFlXd25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdhV1lnS0NGb1lYTlBkMjVRY205d1pYSjBlU2gyYVhOcFlteGxTMlY1Y3l3Z2EyVjVLU2tnZTF4dUlDQWdJRzVoYldVZ1BTQW5XeWNnS3lCclpYa2dLeUFuWFNjN1hHNGdJSDFjYmlBZ2FXWWdLQ0Z6ZEhJcElIdGNiaUFnSUNCcFppQW9ZM1I0TG5ObFpXNHVhVzVrWlhoUFppaGtaWE5qTG5aaGJIVmxLU0E4SURBcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzA1MWJHd29jbVZqZFhKelpWUnBiV1Z6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnpkSElnUFNCbWIzSnRZWFJXWVd4MVpTaGpkSGdzSUdSbGMyTXVkbUZzZFdVc0lHNTFiR3dwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYzNSeUlEMGdabTl5YldGMFZtRnNkV1VvWTNSNExDQmtaWE5qTG5aaGJIVmxMQ0J5WldOMWNuTmxWR2x0WlhNZ0xTQXhLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoemRISXVhVzVrWlhoUFppZ25YRnh1SnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZWEp5WVhrcElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhJZ1BTQnpkSEl1YzNCc2FYUW9KMXhjYmljcExtMWhjQ2htZFc1amRHbHZiaWhzYVc1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSnlBZ0p5QXJJR3hwYm1VN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1YW05cGJpZ25YRnh1SnlrdWMzVmljM1J5S0RJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSE4wY2lBOUlDZGNYRzRuSUNzZ2MzUnlMbk53YkdsMEtDZGNYRzRuS1M1dFlYQW9ablZ1WTNScGIyNG9iR2x1WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2NnSUNBbklDc2diR2x1WlR0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzVxYjJsdUtDZGNYRzRuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J6ZEhJZ1BTQmpkSGd1YzNSNWJHbDZaU2duVzBOcGNtTjFiR0Z5WFNjc0lDZHpjR1ZqYVdGc0p5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNodVlXMWxLU2tnZTF4dUlDQWdJR2xtSUNoaGNuSmhlU0FtSmlCclpYa3ViV0YwWTJnb0wxNWNYR1FySkM4cEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUnlPMXh1SUNBZ0lIMWNiaUFnSUNCdVlXMWxJRDBnU2xOUFRpNXpkSEpwYm1kcFpua29KeWNnS3lCclpYa3BPMXh1SUNBZ0lHbG1JQ2h1WVcxbExtMWhkR05vS0M5ZVhDSW9XMkV0ZWtFdFdsOWRXMkV0ZWtFdFdsOHdMVGxkS2lsY0lpUXZLU2tnZTF4dUlDQWdJQ0FnYm1GdFpTQTlJRzVoYldVdWMzVmljM1J5S0RFc0lHNWhiV1V1YkdWdVozUm9JQzBnTWlrN1hHNGdJQ0FnSUNCdVlXMWxJRDBnWTNSNExuTjBlV3hwZW1Vb2JtRnRaU3dnSjI1aGJXVW5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjbVZ3YkdGalpTZ3ZKeTluTENCY0lseGNYRnduWENJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWNYRnhjWENJdlp5d2dKMXdpSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0x5aGVYQ0o4WENJa0tTOW5MQ0JjSWlkY0lpazdYRzRnSUNBZ0lDQnVZVzFsSUQwZ1kzUjRMbk4wZVd4cGVtVW9ibUZ0WlN3Z0ozTjBjbWx1WnljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdVlXMWxJQ3NnSnpvZ0p5QXJJSE4wY2p0Y2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCeVpXUjFZMlZVYjFOcGJtZHNaVk4wY21sdVp5aHZkWFJ3ZFhRc0lHSmhjMlVzSUdKeVlXTmxjeWtnZTF4dUlDQjJZWElnYm5WdFRHbHVaWE5GYzNRZ1BTQXdPMXh1SUNCMllYSWdiR1Z1WjNSb0lEMGdiM1YwY0hWMExuSmxaSFZqWlNobWRXNWpkR2x2Ymlod2NtVjJMQ0JqZFhJcElIdGNiaUFnSUNCdWRXMU1hVzVsYzBWemRDc3JPMXh1SUNBZ0lHbG1JQ2hqZFhJdWFXNWtaWGhQWmlnblhGeHVKeWtnUGowZ01Da2diblZ0VEdsdVpYTkZjM1FyS3p0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpsZGlBcklHTjFjaTV5WlhCc1lXTmxLQzljWEhVd01ERmlYRnhiWEZ4a1hGeGtQMjB2Wnl3Z0p5Y3BMbXhsYm1kMGFDQXJJREU3WEc0Z0lIMHNJREFwTzF4dVhHNGdJR2xtSUNoc1pXNW5kR2dnUGlBMk1Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCaWNtRmpaWE5iTUYwZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FvWW1GelpTQTlQVDBnSnljZ1B5QW5KeUE2SUdKaGMyVWdLeUFuWEZ4dUlDY3BJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0p5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG1wdmFXNG9KeXhjWEc0Z0lDY3BJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0p5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ1luSmhZMlZ6V3pGZE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHSnlZV05sYzFzd1hTQXJJR0poYzJVZ0t5QW5JQ2NnS3lCdmRYUndkWFF1YW05cGJpZ25MQ0FuS1NBcklDY2dKeUFySUdKeVlXTmxjMXN4WFR0Y2JuMWNibHh1WEc0dkx5Qk9UMVJGT2lCVWFHVnpaU0IwZVhCbElHTm9aV05yYVc1bklHWjFibU4wYVc5dWN5QnBiblJsYm5ScGIyNWhiR3g1SUdSdmJpZDBJSFZ6WlNCZ2FXNXpkR0Z1WTJWdlptQmNiaTh2SUdKbFkyRjFjMlVnYVhRZ2FYTWdabkpoWjJsc1pTQmhibVFnWTJGdUlHSmxJR1ZoYzJsc2VTQm1ZV3RsWkNCM2FYUm9JR0JQWW1wbFkzUXVZM0psWVhSbEtDbGdMbHh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlU2hoY2lrZ2UxeHVJQ0J5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVNoaGNpazdYRzU5WEc1bGVIQnZjblJ6TG1selFYSnlZWGtnUFNCcGMwRnljbUY1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMEp2YjJ4bFlXNG9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBblltOXZiR1ZoYmljN1hHNTlYRzVsZUhCdmNuUnpMbWx6UW05dmJHVmhiaUE5SUdselFtOXZiR1ZoYmp0Y2JseHVablZ1WTNScGIyNGdhWE5PZFd4c0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z1lYSm5JRDA5UFNCdWRXeHNPMXh1ZlZ4dVpYaHdiM0owY3k1cGMwNTFiR3dnUFNCcGMwNTFiR3c3WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZzYkU5eVZXNWtaV1pwYm1Wa0tHRnlaeWtnZTF4dUlDQnlaWFIxY200Z1lYSm5JRDA5SUc1MWJHdzdYRzU5WEc1bGVIQnZjblJ6TG1selRuVnNiRTl5Vlc1a1pXWnBibVZrSUQwZ2FYTk9kV3hzVDNKVmJtUmxabWx1WldRN1hHNWNibVoxYm1OMGFXOXVJR2x6VG5WdFltVnlLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyNTFiV0psY2ljN1hHNTlYRzVsZUhCdmNuUnpMbWx6VG5WdFltVnlJRDBnYVhOT2RXMWlaWEk3WEc1Y2JtWjFibU4wYVc5dUlHbHpVM1J5YVc1bktHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjNOMGNtbHVaeWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpVM1J5YVc1bklEMGdhWE5UZEhKcGJtYzdYRzVjYm1aMWJtTjBhVzl1SUdselUzbHRZbTlzS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM041YldKdmJDYzdYRzU5WEc1bGVIQnZjblJ6TG1selUzbHRZbTlzSUQwZ2FYTlRlVzFpYjJ3N1hHNWNibVoxYm1OMGFXOXVJR2x6Vlc1a1pXWnBibVZrS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnWVhKbklEMDlQU0IyYjJsa0lEQTdYRzU5WEc1bGVIQnZjblJ6TG1selZXNWtaV1pwYm1Wa0lEMGdhWE5WYm1SbFptbHVaV1E3WEc1Y2JtWjFibU4wYVc5dUlHbHpVbVZuUlhod0tISmxLU0I3WEc0Z0lISmxkSFZ5YmlCcGMwOWlhbVZqZENoeVpTa2dKaVlnYjJKcVpXTjBWRzlUZEhKcGJtY29jbVVwSUQwOVBTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp6dGNibjFjYm1WNGNHOXlkSE11YVhOU1pXZEZlSEFnUFNCcGMxSmxaMFY0Y0R0Y2JseHVablZ1WTNScGIyNGdhWE5QWW1wbFkzUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmIySnFaV04wSnlBbUppQmhjbWNnSVQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUMkpxWldOMElEMGdhWE5QWW1wbFkzUTdYRzVjYm1aMWJtTjBhVzl1SUdselJHRjBaU2hrS1NCN1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaGtLU0FtSmlCdlltcGxZM1JVYjFOMGNtbHVaeWhrS1NBOVBUMGdKMXR2WW1wbFkzUWdSR0YwWlYwbk8xeHVmVnh1Wlhod2IzSjBjeTVwYzBSaGRHVWdQU0JwYzBSaGRHVTdYRzVjYm1aMWJtTjBhVzl1SUdselJYSnliM0lvWlNrZ2UxeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9aU2tnSmlaY2JpQWdJQ0FnSUNodlltcGxZM1JVYjFOMGNtbHVaeWhsS1NBOVBUMGdKMXR2WW1wbFkzUWdSWEp5YjNKZEp5QjhmQ0JsSUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwTzF4dWZWeHVaWGh3YjNKMGN5NXBjMFZ5Y205eUlEMGdhWE5GY25KdmNqdGNibHh1Wm5WdVkzUnBiMjRnYVhOR2RXNWpkR2x2YmloaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpSblZ1WTNScGIyNGdQU0JwYzBaMWJtTjBhVzl1TzF4dVhHNW1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU2hoY21jcElIdGNiaUFnY21WMGRYSnVJR0Z5WnlBOVBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oySnZiMnhsWVc0bklIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM04wY21sdVp5Y2dmSHhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZVcxaWIyd25JSHg4SUNBdkx5QkZVellnYzNsdFltOXNYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5kVzVrWldacGJtVmtKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlFjbWx0YVhScGRtVWdQU0JwYzFCeWFXMXBkR2wyWlR0Y2JseHVaWGh3YjNKMGN5NXBjMEoxWm1abGNpQTlJSEpsY1hWcGNtVW9KeTR2YzNWd2NHOXlkQzlwYzBKMVptWmxjaWNwTzF4dVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSVWIxTjBjbWx1WnlodktTQjdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2J5azdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdjR0ZrS0c0cElIdGNiaUFnY21WMGRYSnVJRzRnUENBeE1DQS9JQ2N3SnlBcklHNHVkRzlUZEhKcGJtY29NVEFwSURvZ2JpNTBiMU4wY21sdVp5Z3hNQ2s3WEc1OVhHNWNibHh1ZG1GeUlHMXZiblJvY3lBOUlGc25TbUZ1Snl3Z0owWmxZaWNzSUNkTllYSW5MQ0FuUVhCeUp5d2dKMDFoZVNjc0lDZEtkVzRuTENBblNuVnNKeXdnSjBGMVp5Y3NJQ2RUWlhBbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBblQyTjBKeXdnSjA1dmRpY3NJQ2RFWldNblhUdGNibHh1THk4Z01qWWdSbVZpSURFMk9qRTVPak0wWEc1bWRXNWpkR2x2YmlCMGFXMWxjM1JoYlhBb0tTQjdYRzRnSUhaaGNpQmtJRDBnYm1WM0lFUmhkR1VvS1R0Y2JpQWdkbUZ5SUhScGJXVWdQU0JiY0dGa0tHUXVaMlYwU0c5MWNuTW9LU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkNoa0xtZGxkRTFwYm5WMFpYTW9LU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkNoa0xtZGxkRk5sWTI5dVpITW9LU2xkTG1wdmFXNG9Kem9uS1R0Y2JpQWdjbVYwZFhKdUlGdGtMbWRsZEVSaGRHVW9LU3dnYlc5dWRHaHpXMlF1WjJWMFRXOXVkR2dvS1Ywc0lIUnBiV1ZkTG1wdmFXNG9KeUFuS1R0Y2JuMWNibHh1WEc0dkx5QnNiMmNnYVhNZ2FuVnpkQ0JoSUhSb2FXNGdkM0poY0hCbGNpQjBieUJqYjI1emIyeGxMbXh2WnlCMGFHRjBJSEJ5WlhCbGJtUnpJR0VnZEdsdFpYTjBZVzF3WEc1bGVIQnZjblJ6TG14dlp5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQmpiMjV6YjJ4bExteHZaeWduSlhNZ0xTQWxjeWNzSUhScGJXVnpkR0Z0Y0NncExDQmxlSEJ2Y25SekxtWnZjbTFoZEM1aGNIQnNlU2hsZUhCdmNuUnpMQ0JoY21kMWJXVnVkSE1wS1R0Y2JuMDdYRzVjYmx4dUx5b3FYRzRnS2lCSmJtaGxjbWwwSUhSb1pTQndjbTkwYjNSNWNHVWdiV1YwYUc5a2N5Qm1jbTl0SUc5dVpTQmpiMjV6ZEhKMVkzUnZjaUJwYm5SdklHRnViM1JvWlhJdVhHNGdLbHh1SUNvZ1ZHaGxJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVwYm1obGNtbDBjeUJtY205dElHeGhibWN1YW5NZ2NtVjNjbWwwZEdWdUlHRnpJR0VnYzNSaGJtUmhiRzl1WlZ4dUlDb2dablZ1WTNScGIyNGdLRzV2ZENCdmJpQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXBMaUJPVDFSRk9pQkpaaUIwYUdseklHWnBiR1VnYVhNZ2RHOGdZbVVnYkc5aFpHVmtYRzRnS2lCa2RYSnBibWNnWW05dmRITjBjbUZ3Y0dsdVp5QjBhR2x6SUdaMWJtTjBhVzl1SUc1bFpXUnpJSFJ2SUdKbElISmxkM0pwZEhSbGJpQjFjMmx1WnlCemIyMWxJRzVoZEdsMlpWeHVJQ29nWm5WdVkzUnBiMjV6SUdGeklIQnliM1J2ZEhsd1pTQnpaWFIxY0NCMWMybHVaeUJ1YjNKdFlXd2dTbUYyWVZOamNtbHdkQ0JrYjJWeklHNXZkQ0IzYjNKcklHRnpYRzRnS2lCbGVIQmxZM1JsWkNCa2RYSnBibWNnWW05dmRITjBjbUZ3Y0dsdVp5QW9jMlZsSUcxcGNuSnZjaTVxY3lCcGJpQnlNVEUwT1RBektTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQmpkRzl5SUVOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUlIZG9hV05vSUc1bFpXUnpJSFJ2SUdsdWFHVnlhWFFnZEdobFhHNGdLaUFnSUNBZ2NISnZkRzkwZVhCbExseHVJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnYzNWd1pYSkRkRzl5SUVOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUlIUnZJR2x1YUdWeWFYUWdjSEp2ZEc5MGVYQmxJR1p5YjIwdVhHNGdLaTljYm1WNGNHOXlkSE11YVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcE8xeHVYRzVsZUhCdmNuUnpMbDlsZUhSbGJtUWdQU0JtZFc1amRHbHZiaWh2Y21sbmFXNHNJR0ZrWkNrZ2UxeHVJQ0F2THlCRWIyNG5kQ0JrYnlCaGJubDBhR2x1WnlCcFppQmhaR1FnYVhOdUozUWdZVzRnYjJKcVpXTjBYRzRnSUdsbUlDZ2hZV1JrSUh4OElDRnBjMDlpYW1WamRDaGhaR1FwS1NCeVpYUjFjbTRnYjNKcFoybHVPMXh1WEc0Z0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vWVdSa0tUdGNiaUFnZG1GeUlHa2dQU0JyWlhsekxteGxibWQwYUR0Y2JpQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJRzl5YVdkcGJsdHJaWGx6VzJsZFhTQTlJR0ZrWkZ0clpYbHpXMmxkWFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNKcFoybHVPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdhR0Z6VDNkdVVISnZjR1Z5ZEhrb2IySnFMQ0J3Y205d0tTQjdYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1R0Y2JuMWNiaUpkZlE9PSIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFNoaW1taW5nIHN0YXJ0cyBoZXJlLlxuKGZ1bmN0aW9uKCkge1xuICAvLyBVdGlscy5cbiAgdmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuL3V0aWxzJykubG9nO1xuICB2YXIgYnJvd3NlckRldGFpbHMgPSByZXF1aXJlKCcuL3V0aWxzJykuYnJvd3NlckRldGFpbHM7XG4gIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gIG1vZHVsZS5leHBvcnRzLmJyb3dzZXJEZXRhaWxzID0gYnJvd3NlckRldGFpbHM7XG4gIG1vZHVsZS5leHBvcnRzLmV4dHJhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi91dGlscycpLmV4dHJhY3RWZXJzaW9uO1xuICBtb2R1bGUuZXhwb3J0cy5kaXNhYmxlTG9nID0gcmVxdWlyZSgnLi91dGlscycpLmRpc2FibGVMb2c7XG5cbiAgLy8gQ29tbWVudCBvdXQgdGhlIGxpbmUgYmVsb3cgaWYgeW91IHdhbnQgbG9nZ2luZyB0byBvY2N1ciwgaW5jbHVkaW5nIGxvZ2dpbmdcbiAgLy8gZm9yIHRoZSBzd2l0Y2ggc3RhdGVtZW50IGJlbG93LiBDYW4gYWxzbyBiZSB0dXJuZWQgb24gaW4gdGhlIGJyb3dzZXIgdmlhXG4gIC8vIGFkYXB0ZXIuZGlzYWJsZUxvZyhmYWxzZSksIGJ1dCB0aGVuIGxvZ2dpbmcgZnJvbSB0aGUgc3dpdGNoIHN0YXRlbWVudCBiZWxvd1xuICAvLyB3aWxsIG5vdCBhcHBlYXIuXG4gIHJlcXVpcmUoJy4vdXRpbHMnKS5kaXNhYmxlTG9nKHRydWUpO1xuXG4gIC8vIEJyb3dzZXIgc2hpbXMuXG4gIHZhciBjaHJvbWVTaGltID0gcmVxdWlyZSgnLi9jaHJvbWUvY2hyb21lX3NoaW0nKSB8fCBudWxsO1xuICB2YXIgZWRnZVNoaW0gPSByZXF1aXJlKCcuL2VkZ2UvZWRnZV9zaGltJykgfHwgbnVsbDtcbiAgdmFyIGZpcmVmb3hTaGltID0gcmVxdWlyZSgnLi9maXJlZm94L2ZpcmVmb3hfc2hpbScpIHx8IG51bGw7XG4gIHZhciBzYWZhcmlTaGltID0gcmVxdWlyZSgnLi9zYWZhcmkvc2FmYXJpX3NoaW0nKSB8fCBudWxsO1xuXG4gIC8vIFNoaW0gYnJvd3NlciBpZiBmb3VuZC5cbiAgc3dpdGNoIChicm93c2VyRGV0YWlscy5icm93c2VyKSB7XG4gICAgY2FzZSAnb3BlcmEnOiAvLyBmYWxsdGhyb3VnaCBhcyBpdCB1c2VzIGNocm9tZSBzaGltc1xuICAgIGNhc2UgJ2Nocm9tZSc6XG4gICAgICBpZiAoIWNocm9tZVNoaW0gfHwgIWNocm9tZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgIGxvZ2dpbmcoJ0Nocm9tZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBjaHJvbWUuJyk7XG4gICAgICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLlxuICAgICAgbW9kdWxlLmV4cG9ydHMuYnJvd3NlclNoaW0gPSBjaHJvbWVTaGltO1xuXG4gICAgICBjaHJvbWVTaGltLnNoaW1HZXRVc2VyTWVkaWEoKTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbVNvdXJjZU9iamVjdCgpO1xuICAgICAgY2hyb21lU2hpbS5zaGltUGVlckNvbm5lY3Rpb24oKTtcbiAgICAgIGNocm9tZVNoaW0uc2hpbU9uVHJhY2soKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ZpcmVmb3gnOlxuICAgICAgaWYgKCFmaXJlZm94U2hpbSB8fCAhZmlyZWZveFNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgIGxvZ2dpbmcoJ0ZpcmVmb3ggc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBtb2R1bGUuZXhwb3J0cy5icm93c2VyU2hpbSA9IGZpcmVmb3hTaGltO1xuXG4gICAgICBmaXJlZm94U2hpbS5zaGltR2V0VXNlck1lZGlhKCk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltU291cmNlT2JqZWN0KCk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltUGVlckNvbm5lY3Rpb24oKTtcbiAgICAgIGZpcmVmb3hTaGltLnNoaW1PblRyYWNrKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlZGdlJzpcbiAgICAgIGlmICghZWRnZVNoaW0gfHwgIWVkZ2VTaGltLnNoaW1QZWVyQ29ubmVjdGlvbikge1xuICAgICAgICBsb2dnaW5nKCdNUyBlZGdlIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIGVkZ2UuJyk7XG4gICAgICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLlxuICAgICAgbW9kdWxlLmV4cG9ydHMuYnJvd3NlclNoaW0gPSBlZGdlU2hpbTtcblxuICAgICAgZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzYWZhcmknOlxuICAgICAgaWYgKCFzYWZhcmlTaGltKSB7XG4gICAgICAgIGxvZ2dpbmcoJ1NhZmFyaSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBzYWZhcmkuJyk7XG4gICAgICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLlxuICAgICAgbW9kdWxlLmV4cG9ydHMuYnJvd3NlclNoaW0gPSBzYWZhcmlTaGltO1xuXG4gICAgICBzYWZhcmlTaGltLnNoaW1HZXRVc2VyTWVkaWEoKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsb2dnaW5nKCdVbnN1cHBvcnRlZCBicm93c2VyIScpO1xuICB9XG59KSgpO1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG52YXIgbG9nZ2luZyA9IHJlcXVpcmUoJy4uL3V0aWxzLmpzJykubG9nO1xudmFyIGJyb3dzZXJEZXRhaWxzID0gcmVxdWlyZSgnLi4vdXRpbHMuanMnKS5icm93c2VyRGV0YWlscztcblxudmFyIGNocm9tZVNoaW0gPSB7XG4gIHNoaW1PblRyYWNrOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmICEoJ29udHJhY2snIGluXG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ29udHJhY2snLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX29udHJhY2s7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24oZikge1xuICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICBpZiAodGhpcy5fb250cmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrID0gZik7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vIG9uYWRkc3RyZWFtIGRvZXMgbm90IGZpcmUgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIHRvIGFuIGV4aXN0aW5nXG4gICAgICAgICAgICAvLyBzdHJlYW0uIEJ1dCBzdHJlYW0ub25hZGR0cmFjayBpcyBpbXBsZW1lbnRlZCBzbyB3ZSB1c2UgdGhhdC5cbiAgICAgICAgICAgIGUuc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgZnVuY3Rpb24odGUpIHtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpO1xuICAgICAgICAgICAgICBldmVudC50cmFjayA9IHRlLnRyYWNrO1xuICAgICAgICAgICAgICBldmVudC5yZWNlaXZlciA9IHt0cmFjazogdGUudHJhY2t9O1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTtcbiAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0ge3RyYWNrOiB0cmFja307XG4gICAgICAgICAgICAgIGV2ZW50LnN0cmVhbXMgPSBbZS5zdHJlYW1dO1xuICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2hpbVNvdXJjZU9iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAod2luZG93LkhUTUxNZWRpYUVsZW1lbnQgJiZcbiAgICAgICAgISgnc3JjT2JqZWN0JyBpbiB3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUpKSB7XG4gICAgICAgIC8vIFNoaW0gdGhlIHNyY09iamVjdCBwcm9wZXJ0eSwgb25jZSwgd2hlbiBIVE1MTWVkaWFFbGVtZW50IGlzIGZvdW5kLlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCAnc3JjT2JqZWN0Jywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3JjT2JqZWN0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIC8vIFVzZSBfc3JjT2JqZWN0IGFzIGEgcHJpdmF0ZSBwcm9wZXJ0eSBmb3IgdGhpcyBzaGltXG4gICAgICAgICAgICB0aGlzLl9zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICAgICAgICBpZiAodGhpcy5zcmMpIHtcbiAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnNyYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc3RyZWFtKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3JjID0gJyc7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgYmxvYiB1cmwgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIG9yXG4gICAgICAgICAgICAvLyByZW1vdmVkLiBEb2luZyBpdCBtYW51YWxseSBzaW5jZSB3ZSB3YW50IHRvIGF2b2lkIGEgcmVjdXJzaW9uLlxuICAgICAgICAgICAgc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnNyYykge1xuICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoc2VsZi5zcmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlbGYuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYuc3JjKSB7XG4gICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChzZWxmLnNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzaGltUGVlckNvbm5lY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoZSBSVENQZWVyQ29ubmVjdGlvbiBvYmplY3QuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24ocGNDb25maWcsIHBjQ29uc3RyYWludHMpIHtcbiAgICAgIC8vIFRyYW5zbGF0ZSBpY2VUcmFuc3BvcnRQb2xpY3kgdG8gaWNlVHJhbnNwb3J0cyxcbiAgICAgIC8vIHNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTQ4NjlcbiAgICAgIGxvZ2dpbmcoJ1BlZXJDb25uZWN0aW9uJyk7XG4gICAgICBpZiAocGNDb25maWcgJiYgcGNDb25maWcuaWNlVHJhbnNwb3J0UG9saWN5KSB7XG4gICAgICAgIHBjQ29uZmlnLmljZVRyYW5zcG9ydHMgPSBwY0NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3k7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYyA9IG5ldyB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cyk7XG4gICAgICB2YXIgb3JpZ0dldFN0YXRzID0gcGMuZ2V0U3RhdHMuYmluZChwYyk7XG4gICAgICBwYy5nZXRTdGF0cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAvLyBJZiBzZWxlY3RvciBpcyBhIGZ1bmN0aW9uIHRoZW4gd2UgYXJlIGluIHRoZSBvbGQgc3R5bGUgc3RhdHMgc28ganVzdFxuICAgICAgICAvLyBwYXNzIGJhY2sgdGhlIG9yaWdpbmFsIGdldFN0YXRzIGZvcm1hdCB0byBhdm9pZCBicmVha2luZyBvbGQgdXNlcnMuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ0dldFN0YXRzKHNlbGVjdG9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpeENocm9tZVN0YXRzXyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIHN0YW5kYXJkUmVwb3J0ID0ge307XG4gICAgICAgICAgdmFyIHJlcG9ydHMgPSByZXNwb25zZS5yZXN1bHQoKTtcbiAgICAgICAgICByZXBvcnRzLmZvckVhY2goZnVuY3Rpb24ocmVwb3J0KSB7XG4gICAgICAgICAgICB2YXIgc3RhbmRhcmRTdGF0cyA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlcG9ydC5pZCxcbiAgICAgICAgICAgICAgdGltZXN0YW1wOiByZXBvcnQudGltZXN0YW1wLFxuICAgICAgICAgICAgICB0eXBlOiByZXBvcnQudHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcG9ydC5uYW1lcygpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICBzdGFuZGFyZFN0YXRzW25hbWVdID0gcmVwb3J0LnN0YXQobmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0YW5kYXJkUmVwb3J0W3N0YW5kYXJkU3RhdHMuaWRdID0gc3RhbmRhcmRTdGF0cztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzdGFuZGFyZFJlcG9ydDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGFyZ3NbMV0oZml4Q2hyb21lU3RhdHNfKHJlc3BvbnNlKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgW3N1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfLFxuICAgICAgICAgICAgICBhcmd1bWVudHNbMF1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByb21pc2Utc3VwcG9ydFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG9yaWdHZXRTdGF0cy5hcHBseShzZWxmLFxuICAgICAgICAgICAgICAgIFtmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBbZml4Q2hyb21lU3RhdHNfKHJlc3BvbnNlKV0pO1xuICAgICAgICAgICAgICAgIH0sIHJlamVjdF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmlnR2V0U3RhdHMuYXBwbHkoc2VsZiwgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcGM7XG4gICAgfTtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlID0gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuXG4gICAgLy8gd3JhcCBzdGF0aWMgbWV0aG9kcy4gQ3VycmVudGx5IGp1c3QgZ2VuZXJhdGVDZXJ0aWZpY2F0ZS5cbiAgICBpZiAod2Via2l0UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwgJ2dlbmVyYXRlQ2VydGlmaWNhdGUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGFkZCBwcm9taXNlIHN1cHBvcnRcbiAgICBbJ2NyZWF0ZU9mZmVyJywgJ2NyZWF0ZUFuc3dlciddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICB2YXIgbmF0aXZlTWV0aG9kID0gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgdHlwZW9mKGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkoc2VsZiwgW3Jlc29sdmUsIHJlamVjdCwgb3B0c10pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLCAnYWRkSWNlQ2FuZGlkYXRlJ11cbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgICAgdmFyIG5hdGl2ZU1ldGhvZCA9IHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgICAgICAgIHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGFyZ3NbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKT9cbiAgICAgICAgICAgICAgICBSVENJY2VDYW5kaWRhdGUgOiBSVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3NbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkoc2VsZiwgW2FyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCwgW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbMl0uYXBwbHkobnVsbCwgW2Vycl0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfSxcblxuICAvLyBBdHRhY2ggYSBtZWRpYSBzdHJlYW0gdG8gYW4gZWxlbWVudC5cbiAgYXR0YWNoTWVkaWFTdHJlYW06IGZ1bmN0aW9uKGVsZW1lbnQsIHN0cmVhbSkge1xuICAgIGxvZ2dpbmcoJ0RFUFJFQ0FURUQsIGF0dGFjaE1lZGlhU3RyZWFtIHdpbGwgc29vbiBiZSByZW1vdmVkLicpO1xuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDQzKSB7XG4gICAgICBlbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnNyYyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVsZW1lbnQuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnaW5nKCdFcnJvciBhdHRhY2hpbmcgc3RyZWFtIHRvIGVsZW1lbnQuJyk7XG4gICAgfVxuICB9LFxuXG4gIHJlYXR0YWNoTWVkaWFTdHJlYW06IGZ1bmN0aW9uKHRvLCBmcm9tKSB7XG4gICAgbG9nZ2luZygnREVQUkVDQVRFRCwgcmVhdHRhY2hNZWRpYVN0cmVhbSB3aWxsIHNvb24gYmUgcmVtb3ZlZC4nKTtcbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+PSA0Mykge1xuICAgICAgdG8uc3JjT2JqZWN0ID0gZnJvbS5zcmNPYmplY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvLnNyYyA9IGZyb20uc3JjO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBFeHBvc2UgcHVibGljIG1ldGhvZHMuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2hpbU9uVHJhY2s6IGNocm9tZVNoaW0uc2hpbU9uVHJhY2ssXG4gIHNoaW1Tb3VyY2VPYmplY3Q6IGNocm9tZVNoaW0uc2hpbVNvdXJjZU9iamVjdCxcbiAgc2hpbVBlZXJDb25uZWN0aW9uOiBjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbixcbiAgc2hpbUdldFVzZXJNZWRpYTogcmVxdWlyZSgnLi9nZXR1c2VybWVkaWEnKSxcbiAgYXR0YWNoTWVkaWFTdHJlYW06IGNocm9tZVNoaW0uYXR0YWNoTWVkaWFTdHJlYW0sXG4gIHJlYXR0YWNoTWVkaWFTdHJlYW06IGNocm9tZVNoaW0ucmVhdHRhY2hNZWRpYVN0cmVhbVxufTtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xudmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuLi91dGlscy5qcycpLmxvZztcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvbnN0cmFpbnRzVG9DaHJvbWVfID0gZnVuY3Rpb24oYykge1xuICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5tYW5kYXRvcnkgfHwgYy5vcHRpb25hbCkge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHZhciBjYyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8IGtleSA9PT0gJ21lZGlhU291cmNlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgciA9ICh0eXBlb2YgY1trZXldID09PSAnb2JqZWN0JykgPyBjW2tleV0gOiB7aWRlYWw6IGNba2V5XX07XG4gICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiByLmV4YWN0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByLm1pbiA9IHIubWF4ID0gci5leGFjdDtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRuYW1lXyA9IGZ1bmN0aW9uKHByZWZpeCwgbmFtZSkge1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2RldmljZUlkJykgPyAnc291cmNlSWQnIDogbmFtZTtcbiAgICAgIH07XG4gICAgICBpZiAoci5pZGVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNjLm9wdGlvbmFsID0gY2Mub3B0aW9uYWwgfHwgW107XG4gICAgICAgIHZhciBvYyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHIuaWRlYWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJ21pbicsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgICBvYyA9IHt9O1xuICAgICAgICAgIG9jW29sZG5hbWVfKCdtYXgnLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJycsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY2MubWFuZGF0b3J5ID0gY2MubWFuZGF0b3J5IHx8IHt9O1xuICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8oJycsIGtleSldID0gci5leGFjdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFsnbWluJywgJ21heCddLmZvckVhY2goZnVuY3Rpb24obWl4KSB7XG4gICAgICAgICAgaWYgKHJbbWl4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnkgPSBjYy5tYW5kYXRvcnkgfHwge307XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8obWl4LCBrZXkpXSA9IHJbbWl4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjLmFkdmFuY2VkKSB7XG4gICAgICBjYy5vcHRpb25hbCA9IChjYy5vcHRpb25hbCB8fCBbXSkuY29uY2F0KGMuYWR2YW5jZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2M7XG4gIH07XG5cbiAgdmFyIGdldFVzZXJNZWRpYV8gPSBmdW5jdGlvbihjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKSB7XG4gICAgY29uc3RyYWludHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgaWYgKGNvbnN0cmFpbnRzLmF1ZGlvKSB7XG4gICAgICBjb25zdHJhaW50cy5hdWRpbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLmF1ZGlvKTtcbiAgICB9XG4gICAgaWYgKGNvbnN0cmFpbnRzLnZpZGVvKSB7XG4gICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLnZpZGVvKTtcbiAgICB9XG4gICAgbG9nZ2luZygnY2hyb21lOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICByZXR1cm4gbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYShjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKTtcbiAgfTtcbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYV87XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGdldFVzZXJNZWRpYSBhcyBhIFByb21pc2UuXG4gIHZhciBnZXRVc2VyTWVkaWFQcm9taXNlXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfTtcblxuICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzID0ge1xuICAgICAgZ2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWFQcm9taXNlXyxcbiAgICAgIGVudW1lcmF0ZURldmljZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIHZhciBraW5kcyA9IHthdWRpbzogJ2F1ZGlvaW5wdXQnLCB2aWRlbzogJ3ZpZGVvaW5wdXQnfTtcbiAgICAgICAgICByZXR1cm4gTWVkaWFTdHJlYW1UcmFjay5nZXRTb3VyY2VzKGZ1bmN0aW9uKGRldmljZXMpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGV2aWNlcy5tYXAoZnVuY3Rpb24oZGV2aWNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7bGFiZWw6IGRldmljZS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICBraW5kOiBraW5kc1tkZXZpY2Uua2luZF0sXG4gICAgICAgICAgICAgICAgICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiAnJ307XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBBIHNoaW0gZm9yIGdldFVzZXJNZWRpYSBtZXRob2Qgb24gdGhlIG1lZGlhRGV2aWNlcyBvYmplY3QuXG4gIC8vIFRPRE8oS2FwdGVuSmFuc3NvbikgcmVtb3ZlIG9uY2UgaW1wbGVtZW50ZWQgaW4gQ2hyb21lIHN0YWJsZS5cbiAgaWYgKCFuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHtcbiAgICAgIHJldHVybiBnZXRVc2VyTWVkaWFQcm9taXNlXyhjb25zdHJhaW50cyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBFdmVuIHRob3VnaCBDaHJvbWUgNDUgaGFzIG5hdmlnYXRvci5tZWRpYURldmljZXMgYW5kIGEgZ2V0VXNlck1lZGlhXG4gICAgLy8gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIFByb21pc2UsIGl0IGRvZXMgbm90IGFjY2VwdCBzcGVjLXN0eWxlXG4gICAgLy8gY29uc3RyYWludHMuXG4gICAgdmFyIG9yaWdHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5cbiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgIGlmIChjKSB7XG4gICAgICAgIGxvZ2dpbmcoJ3NwZWM6ICAgJyArIEpTT04uc3RyaW5naWZ5KGMpKTsgLy8gd2hpdGVzcGFjZSBmb3IgYWxpZ25tZW50XG4gICAgICAgIGMuYXVkaW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjLmF1ZGlvKTtcbiAgICAgICAgYy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGMudmlkZW8pO1xuICAgICAgICBsb2dnaW5nKCdjaHJvbWU6ICcgKyBKU09OLnN0cmluZ2lmeShjKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ0dldFVzZXJNZWRpYShjKTtcbiAgICB9LmJpbmQodGhpcyk7XG4gIH1cblxuICAvLyBEdW1teSBkZXZpY2VjaGFuZ2UgZXZlbnQgbWV0aG9kcy5cbiAgLy8gVE9ETyhLYXB0ZW5KYW5zc29uKSByZW1vdmUgb25jZSBpbXBsZW1lbnRlZCBpbiBDaHJvbWUgc3RhYmxlLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvci5tZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxvZ2dpbmcoJ0R1bW15IG1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyIGNhbGxlZC4nKTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyID09PSAndW5kZWZpbmVkJykge1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgbG9nZ2luZygnRHVtbXkgbWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgY2FsbGVkLicpO1xuICAgIH07XG4gIH1cbn07XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gU0RQIGhlbHBlcnMuXG52YXIgU0RQVXRpbHMgPSB7fTtcblxuLy8gR2VuZXJhdGUgYW4gYWxwaGFudW1lcmljIGlkZW50aWZpZXIgZm9yIGNuYW1lIG9yIG1pZHMuXG4vLyBUT0RPOiB1c2UgVVVJRHMgaW5zdGVhZD8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4M1xuU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApO1xufTtcblxuLy8gVGhlIFJUQ1AgQ05BTUUgdXNlZCBieSBhbGwgcGVlcmNvbm5lY3Rpb25zIGZyb20gdGhlIHNhbWUgSlMuXG5TRFBVdGlscy5sb2NhbENOYW1lID0gU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7XG5cbi8vIFNwbGl0cyBTRFAgaW50byBsaW5lcywgZGVhbGluZyB3aXRoIGJvdGggQ1JMRiBhbmQgTEYuXG5TRFBVdGlscy5zcGxpdExpbmVzID0gZnVuY3Rpb24oYmxvYikge1xuICByZXR1cm4gYmxvYi50cmltKCkuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgcmV0dXJuIGxpbmUudHJpbSgpO1xuICB9KTtcbn07XG4vLyBTcGxpdHMgU0RQIGludG8gc2Vzc2lvbnBhcnQgYW5kIG1lZGlhc2VjdGlvbnMuIEVuc3VyZXMgQ1JMRi5cblNEUFV0aWxzLnNwbGl0U2VjdGlvbnMgPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBwYXJ0cyA9IGJsb2Iuc3BsaXQoJ1xcbm09Jyk7XG4gIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICByZXR1cm4gKGluZGV4ID4gMCA/ICdtPScgKyBwYXJ0IDogcGFydCkudHJpbSgpICsgJ1xcclxcbic7XG4gIH0pO1xufTtcblxuLy8gUmV0dXJucyBsaW5lcyB0aGF0IHN0YXJ0IHdpdGggYSBjZXJ0YWluIHByZWZpeC5cblNEUFV0aWxzLm1hdGNoUHJlZml4ID0gZnVuY3Rpb24oYmxvYiwgcHJlZml4KSB7XG4gIHJldHVybiBTRFBVdGlscy5zcGxpdExpbmVzKGJsb2IpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgcmV0dXJuIGxpbmUuaW5kZXhPZihwcmVmaXgpID09PSAwO1xuICB9KTtcbn07XG5cbi8vIFBhcnNlcyBhbiBJQ0UgY2FuZGlkYXRlIGxpbmUuIFNhbXBsZSBpbnB1dDpcbi8vIGNhbmRpZGF0ZTo3MDI3ODYzNTAgMiB1ZHAgNDE4MTk5MDIgOC44LjguOCA2MDc2OSB0eXAgcmVsYXkgcmFkZHIgOC44LjguOFxuLy8gcnBvcnQgNTU5OTZcIlxuU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cztcbiAgLy8gUGFyc2UgYm90aCB2YXJpYW50cy5cbiAgaWYgKGxpbmUuaW5kZXhPZignYT1jYW5kaWRhdGU6JykgPT09IDApIHtcbiAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEyKS5zcGxpdCgnICcpO1xuICB9IGVsc2Uge1xuICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTApLnNwbGl0KCcgJyk7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlID0ge1xuICAgIGZvdW5kYXRpb246IHBhcnRzWzBdLFxuICAgIGNvbXBvbmVudDogcGFydHNbMV0sXG4gICAgcHJvdG9jb2w6IHBhcnRzWzJdLnRvTG93ZXJDYXNlKCksXG4gICAgcHJpb3JpdHk6IHBhcnNlSW50KHBhcnRzWzNdLCAxMCksXG4gICAgaXA6IHBhcnRzWzRdLFxuICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzVdLCAxMCksXG4gICAgLy8gc2tpcCBwYXJ0c1s2XSA9PSAndHlwJ1xuICAgIHR5cGU6IHBhcnRzWzddXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDg7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHN3aXRjaCAocGFydHNbaV0pIHtcbiAgICAgIGNhc2UgJ3JhZGRyJzpcbiAgICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Jwb3J0JzpcbiAgICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0ID0gcGFyc2VJbnQocGFydHNbaSArIDFdLCAxMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGNwdHlwZSc6XG4gICAgICAgIGNhbmRpZGF0ZS50Y3BUeXBlID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFVua25vd24gZXh0ZW5zaW9ucyBhcmUgc2lsZW50bHkgaWdub3JlZC5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW5kaWRhdGU7XG59O1xuXG4vLyBUcmFuc2xhdGVzIGEgY2FuZGlkYXRlIG9iamVjdCBpbnRvIFNEUCBjYW5kaWRhdGUgYXR0cmlidXRlLlxuU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgdmFyIHNkcCA9IFtdO1xuICBzZHAucHVzaChjYW5kaWRhdGUuZm91bmRhdGlvbik7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5jb21wb25lbnQpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJvdG9jb2wudG9VcHBlckNhc2UoKSk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5wcmlvcml0eSk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5pcCk7XG4gIHNkcC5wdXNoKGNhbmRpZGF0ZS5wb3J0KTtcblxuICB2YXIgdHlwZSA9IGNhbmRpZGF0ZS50eXBlO1xuICBzZHAucHVzaCgndHlwJyk7XG4gIHNkcC5wdXNoKHR5cGUpO1xuICBpZiAodHlwZSAhPT0gJ2hvc3QnICYmIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyAmJlxuICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KSB7XG4gICAgc2RwLnB1c2goJ3JhZGRyJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzKTsgLy8gd2FzOiByZWxBZGRyXG4gICAgc2RwLnB1c2goJ3Jwb3J0Jyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KTsgLy8gd2FzOiByZWxQb3J0XG4gIH1cbiAgaWYgKGNhbmRpZGF0ZS50Y3BUeXBlICYmIGNhbmRpZGF0ZS5wcm90b2NvbC50b0xvd2VyQ2FzZSgpID09PSAndGNwJykge1xuICAgIHNkcC5wdXNoKCd0Y3B0eXBlJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnRjcFR5cGUpO1xuICB9XG4gIHJldHVybiAnY2FuZGlkYXRlOicgKyBzZHAuam9pbignICcpO1xufTtcblxuLy8gUGFyc2VzIGFuIHJ0cG1hcCBsaW5lLCByZXR1cm5zIFJUQ1J0cENvZGRlY1BhcmFtZXRlcnMuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRwbWFwOjExMSBvcHVzLzQ4MDAwLzJcblNEUFV0aWxzLnBhcnNlUnRwTWFwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cig5KS5zcGxpdCgnICcpO1xuICB2YXIgcGFyc2VkID0ge1xuICAgIHBheWxvYWRUeXBlOiBwYXJzZUludChwYXJ0cy5zaGlmdCgpLCAxMCkgLy8gd2FzOiBpZFxuICB9O1xuXG4gIHBhcnRzID0gcGFydHNbMF0uc3BsaXQoJy8nKTtcblxuICBwYXJzZWQubmFtZSA9IHBhcnRzWzBdO1xuICBwYXJzZWQuY2xvY2tSYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsgLy8gd2FzOiBjbG9ja3JhdGVcbiAgLy8gd2FzOiBjaGFubmVsc1xuICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJ0cy5sZW5ndGggPT09IDMgPyBwYXJzZUludChwYXJ0c1syXSwgMTApIDogMTtcbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlIGFuIGE9cnRwbWFwIGxpbmUgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3Jcbi8vIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRwTWFwID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICByZXR1cm4gJ2E9cnRwbWFwOicgKyBwdCArICcgJyArIGNvZGVjLm5hbWUgKyAnLycgKyBjb2RlYy5jbG9ja1JhdGUgK1xuICAgICAgKGNvZGVjLm51bUNoYW5uZWxzICE9PSAxID8gJy8nICsgY29kZWMubnVtQ2hhbm5lbHMgOiAnJykgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyBhbiBhPWV4dG1hcCBsaW5lIChoZWFkZXJleHRlbnNpb24gZnJvbSBSRkMgNTI4NSkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuU0RQVXRpbHMucGFyc2VFeHRtYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgaWQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgdXJpOiBwYXJ0c1sxXVxuICB9O1xufTtcblxuLy8gR2VuZXJhdGVzIGE9ZXh0bWFwIGxpbmUgZnJvbSBSVENSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzIG9yXG4vLyBSVENSdHBIZWFkZXJFeHRlbnNpb24uXG5TRFBVdGlscy53cml0ZUV4dG1hcCA9IGZ1bmN0aW9uKGhlYWRlckV4dGVuc2lvbikge1xuICByZXR1cm4gJ2E9ZXh0bWFwOicgKyAoaGVhZGVyRXh0ZW5zaW9uLmlkIHx8IGhlYWRlckV4dGVuc2lvbi5wcmVmZXJyZWRJZCkgK1xuICAgICAgICcgJyArIGhlYWRlckV4dGVuc2lvbi51cmkgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyBhbiBmdG1wIGxpbmUsIHJldHVybnMgZGljdGlvbmFyeS4gU2FtcGxlIGlucHV0OlxuLy8gYT1mbXRwOjk2IHZicj1vbjtjbmc9b25cbi8vIEFsc28gZGVhbHMgd2l0aCB2YnI9b247IGNuZz1vblxuU0RQVXRpbHMucGFyc2VGbXRwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrdjtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnOycpO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAga3YgPSBwYXJ0c1tqXS50cmltKCkuc3BsaXQoJz0nKTtcbiAgICBwYXJzZWRba3ZbMF0udHJpbSgpXSA9IGt2WzFdO1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG4vLyBHZW5lcmF0ZXMgYW4gYT1mdG1wIGxpbmUgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVGbXRwID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIGxpbmUgPSAnJztcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICBpZiAoY29kZWMucGFyYW1ldGVycyAmJiBPYmplY3Qua2V5cyhjb2RlYy5wYXJhbWV0ZXJzKS5sZW5ndGgpIHtcbiAgICB2YXIgcGFyYW1zID0gW107XG4gICAgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykuZm9yRWFjaChmdW5jdGlvbihwYXJhbSkge1xuICAgICAgcGFyYW1zLnB1c2gocGFyYW0gKyAnPScgKyBjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSk7XG4gICAgfSk7XG4gICAgbGluZSArPSAnYT1mbXRwOicgKyBwdCArICcgJyArIHBhcmFtcy5qb2luKCc7JykgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gbGluZTtcbn07XG5cbi8vIFBhcnNlcyBhbiBydGNwLWZiIGxpbmUsIHJldHVybnMgUlRDUFJ0Y3BGZWVkYmFjayBvYmplY3QuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRjcC1mYjo5OCBuYWNrIHJwc2lcblNEUFV0aWxzLnBhcnNlUnRjcEZiID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cihsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcGFydHMuc2hpZnQoKSxcbiAgICBwYXJhbWV0ZXI6IHBhcnRzLmpvaW4oJyAnKVxuICB9O1xufTtcbi8vIEdlbmVyYXRlIGE9cnRjcC1mYiBsaW5lcyBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZVJ0Y3BGYiA9IGZ1bmN0aW9uKGNvZGVjKSB7XG4gIHZhciBsaW5lcyA9ICcnO1xuICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGlmIChjb2RlYy5ydGNwRmVlZGJhY2sgJiYgY29kZWMucnRjcEZlZWRiYWNrLmxlbmd0aCkge1xuICAgIC8vIEZJWE1FOiBzcGVjaWFsIGhhbmRsaW5nIGZvciB0cnItaW50P1xuICAgIGNvZGVjLnJ0Y3BGZWVkYmFjay5mb3JFYWNoKGZ1bmN0aW9uKGZiKSB7XG4gICAgICBsaW5lcyArPSAnYT1ydGNwLWZiOicgKyBwdCArICcgJyArIGZiLnR5cGUgKyAnICcgKyBmYi5wYXJhbWV0ZXIgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBsaW5lcztcbn07XG5cbi8vIFBhcnNlcyBhbiBSRkMgNTU3NiBzc3JjIG1lZGlhIGF0dHJpYnV0ZS4gU2FtcGxlIGlucHV0OlxuLy8gYT1zc3JjOjM3MzU5Mjg1NTkgY25hbWU6c29tZXRoaW5nXG5TRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHNwID0gbGluZS5pbmRleE9mKCcgJyk7XG4gIHZhciBwYXJ0cyA9IHtcbiAgICBzc3JjOiBwYXJzZUludChsaW5lLnN1YnN0cig3LCBzcCAtIDcpLCAxMClcbiAgfTtcbiAgdmFyIGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApO1xuICBpZiAoY29sb24gPiAtMSkge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSwgY29sb24gLSBzcCAtIDEpO1xuICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHIoY29sb24gKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cihzcCArIDEpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn07XG5cbi8vIEV4dHJhY3RzIERUTFMgcGFyYW1ldGVycyBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgZmluZ2VycHJpbnQgbGluZSBhcyBpbnB1dC4gU2VlIGFsc28gZ2V0SWNlUGFyYW1ldGVycy5cblNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIC8vIFNlYXJjaCBpbiBzZXNzaW9uIHBhcnQsIHRvby5cbiAgbGluZXMgPSBsaW5lcy5jb25jYXQoU0RQVXRpbHMuc3BsaXRMaW5lcyhzZXNzaW9ucGFydCkpO1xuICB2YXIgZnBMaW5lID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS5pbmRleE9mKCdhPWZpbmdlcnByaW50OicpID09PSAwO1xuICB9KVswXS5zdWJzdHIoMTQpO1xuICAvLyBOb3RlOiBhPXNldHVwIGxpbmUgaXMgaWdub3JlZCBzaW5jZSB3ZSB1c2UgdGhlICdhdXRvJyByb2xlLlxuICB2YXIgZHRsc1BhcmFtZXRlcnMgPSB7XG4gICAgcm9sZTogJ2F1dG8nLFxuICAgIGZpbmdlcnByaW50czogW3tcbiAgICAgIGFsZ29yaXRobTogZnBMaW5lLnNwbGl0KCcgJylbMF0sXG4gICAgICB2YWx1ZTogZnBMaW5lLnNwbGl0KCcgJylbMV1cbiAgICB9XVxuICB9O1xuICByZXR1cm4gZHRsc1BhcmFtZXRlcnM7XG59O1xuXG4vLyBTZXJpYWxpemVzIERUTFMgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUR0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocGFyYW1zLCBzZXR1cFR5cGUpIHtcbiAgdmFyIHNkcCA9ICdhPXNldHVwOicgKyBzZXR1cFR5cGUgKyAnXFxyXFxuJztcbiAgcGFyYW1zLmZpbmdlcnByaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGZwKSB7XG4gICAgc2RwICs9ICdhPWZpbmdlcnByaW50OicgKyBmcC5hbGdvcml0aG0gKyAnICcgKyBmcC52YWx1ZSArICdcXHJcXG4nO1xuICB9KTtcbiAgcmV0dXJuIHNkcDtcbn07XG4vLyBQYXJzZXMgSUNFIGluZm9ybWF0aW9uIGZyb20gU0RQIG1lZGlhIHNlY3Rpb24gb3Igc2Vzc2lvbnBhcnQuXG4vLyBGSVhNRTogZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgZnVuY3Rpb25zIHRoaXMgc2hvdWxkIG9ubHlcbi8vICAgZ2V0IHRoZSBpY2UtdWZyYWcgYW5kIGljZS1wd2QgbGluZXMgYXMgaW5wdXQuXG5TRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIC8vIFNlYXJjaCBpbiBzZXNzaW9uIHBhcnQsIHRvby5cbiAgbGluZXMgPSBsaW5lcy5jb25jYXQoU0RQVXRpbHMuc3BsaXRMaW5lcyhzZXNzaW9ucGFydCkpO1xuICB2YXIgaWNlUGFyYW1ldGVycyA9IHtcbiAgICB1c2VybmFtZUZyYWdtZW50OiBsaW5lcy5maWx0ZXIoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIGxpbmUuaW5kZXhPZignYT1pY2UtdWZyYWc6JykgPT09IDA7XG4gICAgfSlbMF0uc3Vic3RyKDEyKSxcbiAgICBwYXNzd29yZDogbGluZXMuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHJldHVybiBsaW5lLmluZGV4T2YoJ2E9aWNlLXB3ZDonKSA9PT0gMDtcbiAgICB9KVswXS5zdWJzdHIoMTApXG4gIH07XG4gIHJldHVybiBpY2VQYXJhbWV0ZXJzO1xufTtcblxuLy8gU2VyaWFsaXplcyBJQ0UgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgcmV0dXJuICdhPWljZS11ZnJhZzonICsgcGFyYW1zLnVzZXJuYW1lRnJhZ21lbnQgKyAnXFxyXFxuJyArXG4gICAgICAnYT1pY2UtcHdkOicgKyBwYXJhbXMucGFzc3dvcmQgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gYW5kIHJldHVybnMgUlRDUnRwUGFyYW1ldGVycy5cblNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgZGVzY3JpcHRpb24gPSB7XG4gICAgY29kZWNzOiBbXSxcbiAgICBoZWFkZXJFeHRlbnNpb25zOiBbXSxcbiAgICBmZWNNZWNoYW5pc21zOiBbXSxcbiAgICBydGNwOiBbXVxuICB9O1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7XG4gIGZvciAodmFyIGkgPSAzOyBpIDwgbWxpbmUubGVuZ3RoOyBpKyspIHsgLy8gZmluZCBhbGwgY29kZWNzIGZyb20gbWxpbmVbMy4uXVxuICAgIHZhciBwdCA9IG1saW5lW2ldO1xuICAgIHZhciBydHBtYXBsaW5lID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRwbWFwOicgKyBwdCArICcgJylbMF07XG4gICAgaWYgKHJ0cG1hcGxpbmUpIHtcbiAgICAgIHZhciBjb2RlYyA9IFNEUFV0aWxzLnBhcnNlUnRwTWFwKHJ0cG1hcGxpbmUpO1xuICAgICAgdmFyIGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1mbXRwOicgKyBwdCArICcgJyk7XG4gICAgICAvLyBPbmx5IHRoZSBmaXJzdCBhPWZtdHA6PHB0PiBpcyBjb25zaWRlcmVkLlxuICAgICAgY29kZWMucGFyYW1ldGVycyA9IGZtdHBzLmxlbmd0aCA/IFNEUFV0aWxzLnBhcnNlRm10cChmbXRwc1swXSkgOiB7fTtcbiAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1mYjonICsgcHQgKyAnICcpXG4gICAgICAgIC5tYXAoU0RQVXRpbHMucGFyc2VSdGNwRmIpO1xuICAgICAgZGVzY3JpcHRpb24uY29kZWNzLnB1c2goY29kZWMpO1xuICAgICAgLy8gcGFyc2UgRkVDIG1lY2hhbmlzbXMgZnJvbSBydHBtYXAgbGluZXMuXG4gICAgICBzd2l0Y2ggKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdSRUQnOlxuICAgICAgICBjYXNlICdVTFBGRUMnOlxuICAgICAgICAgIGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMucHVzaChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBvbmx5IFJFRCBhbmQgVUxQRkVDIGFyZSByZWNvZ25pemVkIGFzIEZFQyBtZWNoYW5pc21zLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWV4dG1hcDonKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICBkZXNjcmlwdGlvbi5oZWFkZXJFeHRlbnNpb25zLnB1c2goU0RQVXRpbHMucGFyc2VFeHRtYXAobGluZSkpO1xuICB9KTtcbiAgLy8gRklYTUU6IHBhcnNlIHJ0Y3AuXG4gIHJldHVybiBkZXNjcmlwdGlvbjtcbn07XG5cbi8vIEdlbmVyYXRlcyBwYXJ0cyBvZiB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gZGVzY3JpYmluZyB0aGUgY2FwYWJpbGl0aWVzIC9cbi8vIHBhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24oa2luZCwgY2Fwcykge1xuICB2YXIgc2RwID0gJyc7XG5cbiAgLy8gQnVpbGQgdGhlIG1saW5lLlxuICBzZHAgKz0gJ209JyArIGtpbmQgKyAnICc7XG4gIHNkcCArPSBjYXBzLmNvZGVjcy5sZW5ndGggPiAwID8gJzknIDogJzAnOyAvLyByZWplY3QgaWYgbm8gY29kZWNzLlxuICBzZHAgKz0gJyBVRFAvVExTL1JUUC9TQVZQRiAnO1xuICBzZHAgKz0gY2Fwcy5jb2RlY3MubWFwKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVjLnBheWxvYWRUeXBlO1xuICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcblxuICBzZHAgKz0gJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuICBzZHAgKz0gJ2E9cnRjcDo5IElOIElQNCAwLjAuMC4wXFxyXFxuJztcblxuICAvLyBBZGQgYT1ydHBtYXAgbGluZXMgZm9yIGVhY2ggY29kZWMuIEFsc28gZm10cCBhbmQgcnRjcC1mYi5cbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIHNkcCArPSBTRFBVdGlscy53cml0ZVJ0cE1hcChjb2RlYyk7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRm10cChjb2RlYyk7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRjcEZiKGNvZGVjKTtcbiAgfSk7XG4gIC8vIEZJWE1FOiBhZGQgaGVhZGVyRXh0ZW5zaW9ucywgZmVjTWVjaGFuaXNtxZ8gYW5kIHJ0Y3AuXG4gIHNkcCArPSAnYT1ydGNwLW11eFxcclxcbic7XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mXG4vLyBSVENSdHBFbmNvZGluZ1BhcmFtZXRlcnMuXG5TRFBVdGlscy5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgZW5jb2RpbmdQYXJhbWV0ZXJzID0gW107XG4gIHZhciBkZXNjcmlwdGlvbiA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgaGFzUmVkID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdSRUQnKSAhPT0gLTE7XG4gIHZhciBoYXNVbHBmZWMgPSBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLmluZGV4T2YoJ1VMUEZFQycpICE9PSAtMTtcblxuICAvLyBmaWx0ZXIgYT1zc3JjOi4uLiBjbmFtZTosIGlnbm9yZSBQbGFuQi1tc2lkXG4gIHZhciBzc3JjcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7XG4gIH0pXG4gIC5maWx0ZXIoZnVuY3Rpb24ocGFydHMpIHtcbiAgICByZXR1cm4gcGFydHMuYXR0cmlidXRlID09PSAnY25hbWUnO1xuICB9KTtcbiAgdmFyIHByaW1hcnlTc3JjID0gc3NyY3MubGVuZ3RoID4gMCAmJiBzc3Jjc1swXS5zc3JjO1xuICB2YXIgc2Vjb25kYXJ5U3NyYztcblxuICB2YXIgZmxvd3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmMtZ3JvdXA6RklEJylcbiAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnICcpO1xuICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbihwYXJ0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQocGFydCwgMTApO1xuICAgIH0pO1xuICB9KTtcbiAgaWYgKGZsb3dzLmxlbmd0aCA+IDAgJiYgZmxvd3NbMF0ubGVuZ3RoID4gMSAmJiBmbG93c1swXVswXSA9PT0gcHJpbWFyeVNzcmMpIHtcbiAgICBzZWNvbmRhcnlTc3JjID0gZmxvd3NbMF1bMV07XG4gIH1cblxuICBkZXNjcmlwdGlvbi5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIGlmIChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdSVFgnICYmIGNvZGVjLnBhcmFtZXRlcnMuYXB0KSB7XG4gICAgICB2YXIgZW5jUGFyYW0gPSB7XG4gICAgICAgIHNzcmM6IHByaW1hcnlTc3JjLFxuICAgICAgICBjb2RlY1BheWxvYWRUeXBlOiBwYXJzZUludChjb2RlYy5wYXJhbWV0ZXJzLmFwdCwgMTApLFxuICAgICAgICBydHg6IHtcbiAgICAgICAgICBzc3JjOiBzZWNvbmRhcnlTc3JjXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICBpZiAoaGFzUmVkKSB7XG4gICAgICAgIGVuY1BhcmFtID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbmNQYXJhbSkpO1xuICAgICAgICBlbmNQYXJhbS5mZWMgPSB7XG4gICAgICAgICAgc3NyYzogc2Vjb25kYXJ5U3NyYyxcbiAgICAgICAgICBtZWNoYW5pc206IGhhc1VscGZlYyA/ICdyZWQrdWxwZmVjJyA6ICdyZWQnXG4gICAgICAgIH07XG4gICAgICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKGVuY1BhcmFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpZiAoZW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCAmJiBwcmltYXJ5U3NyYykge1xuICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKHtcbiAgICAgIHNzcmM6IHByaW1hcnlTc3JjXG4gICAgfSk7XG4gIH1cblxuICAvLyB3ZSBzdXBwb3J0IGJvdGggYj1BUyBhbmQgYj1USUFTIGJ1dCBpbnRlcnByZXQgQVMgYXMgVElBUy5cbiAgdmFyIGJhbmR3aWR0aCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2I9Jyk7XG4gIGlmIChiYW5kd2lkdGgubGVuZ3RoKSB7XG4gICAgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPVRJQVM6JykgPT09IDApIHtcbiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHIoNyksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPUFTOicpID09PSAwKSB7XG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyKDUpLCAxMCk7XG4gICAgfVxuICAgIGVuY29kaW5nUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgcGFyYW1zLm1heEJpdHJhdGUgPSBiYW5kd2lkdGg7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nUGFyYW1ldGVycztcbn07XG5cblNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIEZJWE1FOiBzZXNzLWlkIHNob3VsZCBiZSBhbiBOVFAgdGltZXN0YW1wLlxuICByZXR1cm4gJ3Y9MFxcclxcbicgK1xuICAgICAgJ289dGhpc2lzYWRhcHRlcm9ydGMgODE2OTYzOTkxNTY0Njk0MzEzNyAyIElOIElQNCAxMjcuMC4wLjFcXHJcXG4nICtcbiAgICAgICdzPS1cXHJcXG4nICtcbiAgICAgICd0PTAgMFxcclxcbic7XG59O1xuXG5TRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbiA9IGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBjYXBzLCB0eXBlLCBzdHJlYW0pIHtcbiAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlUnRwRGVzY3JpcHRpb24odHJhbnNjZWl2ZXIua2luZCwgY2Fwcyk7XG5cbiAgLy8gTWFwIElDRSBwYXJhbWV0ZXJzICh1ZnJhZywgcHdkKSB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMoXG4gICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKSk7XG5cbiAgLy8gTWFwIERUTFMgcGFyYW1ldGVycyB0byBTRFAuXG4gIHNkcCArPSBTRFBVdGlscy53cml0ZUR0bHNQYXJhbWV0ZXJzKFxuICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSxcbiAgICAgIHR5cGUgPT09ICdvZmZlcicgPyAnYWN0cGFzcycgOiAnYWN0aXZlJyk7XG5cbiAgc2RwICs9ICdhPW1pZDonICsgdHJhbnNjZWl2ZXIubWlkICsgJ1xcclxcbic7XG5cbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1zZW5kcmVjdlxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRvbmx5XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1yZWN2b25seVxcclxcbic7XG4gIH0gZWxzZSB7XG4gICAgc2RwICs9ICdhPWluYWN0aXZlXFxyXFxuJztcbiAgfVxuXG4gIC8vIEZJWE1FOiBmb3IgUlRYIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIFNTUkNzLiBOb3QgaW1wbGVtZW50ZWQgaW4gRWRnZSB5ZXQuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICB2YXIgbXNpZCA9ICdtc2lkOicgKyBzdHJlYW0uaWQgKyAnICcgK1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIudHJhY2suaWQgKyAnXFxyXFxuJztcbiAgICBzZHAgKz0gJ2E9JyArIG1zaWQ7XG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAgICcgJyArIG1zaWQ7XG4gIH1cbiAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGJlIHdyaXR0ZW4gYnkgd3JpdGVSdHBEZXNjcmlwdGlvbi5cbiAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC5cblNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuXG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHN3aXRjaCAobGluZXNbaV0pIHtcbiAgICAgIGNhc2UgJ2E9c2VuZHJlY3YnOlxuICAgICAgY2FzZSAnYT1zZW5kb25seSc6XG4gICAgICBjYXNlICdhPXJlY3Zvbmx5JzpcbiAgICAgIGNhc2UgJ2E9aW5hY3RpdmUnOlxuICAgICAgICByZXR1cm4gbGluZXNbaV0uc3Vic3RyKDIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRklYTUU6IFdoYXQgc2hvdWxkIGhhcHBlbiBoZXJlP1xuICAgIH1cbiAgfVxuICBpZiAoc2Vzc2lvbnBhcnQpIHtcbiAgICByZXR1cm4gU0RQVXRpbHMuZ2V0RGlyZWN0aW9uKHNlc3Npb25wYXJ0KTtcbiAgfVxuICByZXR1cm4gJ3NlbmRyZWN2Jztcbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbm1vZHVsZS5leHBvcnRzID0gU0RQVXRpbHM7XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFNEUFV0aWxzID0gcmVxdWlyZSgnLi9lZGdlX3NkcCcpO1xudmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuLi91dGlscycpLmxvZztcblxudmFyIGVkZ2VTaGltID0ge1xuICBzaGltUGVlckNvbm5lY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIGlmICh3aW5kb3cuUlRDSWNlR2F0aGVyZXIpIHtcbiAgICAgIC8vIE9SVEMgZGVmaW5lcyBhbiBSVENJY2VDYW5kaWRhdGUgb2JqZWN0IGJ1dCBubyBjb25zdHJ1Y3Rvci5cbiAgICAgIC8vIE5vdCBpbXBsZW1lbnRlZCBpbiBFZGdlLlxuICAgICAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlKSB7XG4gICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAvLyBPUlRDIGRvZXMgbm90IGhhdmUgYSBzZXNzaW9uIGRlc2NyaXB0aW9uIG9iamVjdCBidXRcbiAgICAgIC8vIG90aGVyIGJyb3dzZXJzIChpLmUuIENocm9tZSkgdGhhdCB3aWxsIHN1cHBvcnQgYm90aCBQQyBhbmQgT1JUQ1xuICAgICAgLy8gaW4gdGhlIGZ1dHVyZSBtaWdodCBoYXZlIHRoaXMgZGVmaW5lZCBhbHJlYWR5LlxuICAgICAgaWYgKCF3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHZhciBfZXZlbnRUYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsICdkaXNwYXRjaEV2ZW50J11cbiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICAgIHNlbGZbbWV0aG9kXSA9IF9ldmVudFRhcmdldFttZXRob2RdLmJpbmQoX2V2ZW50VGFyZ2V0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgdGhpcy5vbmljZWNhbmRpZGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLm9uYWRkc3RyZWFtID0gbnVsbDtcbiAgICAgIHRoaXMub250cmFjayA9IG51bGw7XG4gICAgICB0aGlzLm9ucmVtb3Zlc3RyZWFtID0gbnVsbDtcbiAgICAgIHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICB0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgIHRoaXMub25uZWdvdGlhdGlvbm5lZWRlZCA9IG51bGw7XG4gICAgICB0aGlzLm9uZGF0YWNoYW5uZWwgPSBudWxsO1xuXG4gICAgICB0aGlzLmxvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgdGhpcy5yZW1vdGVTdHJlYW1zID0gW107XG4gICAgICB0aGlzLmdldExvY2FsU3RyZWFtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5sb2NhbFN0cmVhbXM7XG4gICAgICB9O1xuICAgICAgdGhpcy5nZXRSZW1vdGVTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJlbW90ZVN0cmVhbXM7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmxvY2FsRGVzY3JpcHRpb24gPSBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgICAgdHlwZTogJycsXG4gICAgICAgIHNkcDogJydcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZW1vdGVEZXNjcmlwdGlvbiA9IG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgc2RwOiAnJ1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gJ3N0YWJsZSc7XG4gICAgICB0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSA9ICduZXcnO1xuICAgICAgdGhpcy5pY2VHYXRoZXJpbmdTdGF0ZSA9ICduZXcnO1xuXG4gICAgICB0aGlzLmljZU9wdGlvbnMgPSB7XG4gICAgICAgIGdhdGhlclBvbGljeTogJ2FsbCcsXG4gICAgICAgIGljZVNlcnZlcnM6IFtdXG4gICAgICB9O1xuICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5KSB7XG4gICAgICAgIHN3aXRjaCAoY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSkge1xuICAgICAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgICAgY2FzZSAncmVsYXknOlxuICAgICAgICAgICAgdGhpcy5pY2VPcHRpb25zLmdhdGhlclBvbGljeSA9IGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3k7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgIC8vIEZJWE1FOiByZW1vdmUgb25jZSBpbXBsZW1lbnRhdGlvbiBhbmQgc3BlYyBoYXZlIGFkZGVkIHRoaXMuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpY2VUcmFuc3BvcnRQb2xpY3kgXCJub25lXCIgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBkb24ndCBzZXQgaWNlVHJhbnNwb3J0UG9saWN5LlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgLy8gRWRnZSBkb2VzIG5vdCBsaWtlXG4gICAgICAgIC8vIDEpIHN0dW46XG4gICAgICAgIC8vIDIpIHR1cm46IHRoYXQgZG9lcyBub3QgaGF2ZSBhbGwgb2YgdHVybjpob3N0OnBvcnQ/dHJhbnNwb3J0PXVkcFxuICAgICAgICB0aGlzLmljZU9wdGlvbnMuaWNlU2VydmVycyA9IGNvbmZpZy5pY2VTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICAgICAgICBpZiAoc2VydmVyICYmIHNlcnZlci51cmxzKSB7XG4gICAgICAgICAgICBzZXJ2ZXIudXJscyA9IHNlcnZlci51cmxzLmZpbHRlcihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVybC5pbmRleE9mKCd0dXJuOicpID09PSAwICYmXG4gICAgICAgICAgICAgICAgICB1cmwuaW5kZXhPZigndHJhbnNwb3J0PXVkcCcpICE9PSAtMTtcbiAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgcmV0dXJuICEhc2VydmVyLnVybHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHBlci10cmFjayBpY2VHYXRoZXJzLCBpY2VUcmFuc3BvcnRzLCBkdGxzVHJhbnNwb3J0cywgcnRwU2VuZGVycywgLi4uXG4gICAgICAvLyBldmVyeXRoaW5nIHRoYXQgaXMgbmVlZGVkIHRvIGRlc2NyaWJlIGEgU0RQIG0tbGluZS5cbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzID0gW107XG5cbiAgICAgIC8vIHNpbmNlIHRoZSBpY2VHYXRoZXJlciBpcyBjdXJyZW50bHkgY3JlYXRlZCBpbiBjcmVhdGVPZmZlciBidXQgd2VcbiAgICAgIC8vIG11c3Qgbm90IGVtaXQgY2FuZGlkYXRlcyB1bnRpbCBhZnRlciBzZXRMb2NhbERlc2NyaXB0aW9uIHdlIGJ1ZmZlclxuICAgICAgLy8gdGhlbSBpbiB0aGlzIGFycmF5LlxuICAgICAgdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyID0gW107XG4gICAgfTtcblxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoc2VsZi5sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAvLyBGSVhNRTogbmVlZCB0byBhcHBseSBpY2UgY2FuZGlkYXRlcyBpbiBhIHdheSB3aGljaCBpcyBhc3luYyBidXRcbiAgICAgIC8vIGluLW9yZGVyXG4gICAgICB0aGlzLl9sb2NhbEljZUNhbmRpZGF0ZXNCdWZmZXIuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgZW5kID0gIWV2ZW50LmNhbmRpZGF0ZSB8fCBPYmplY3Qua2V5cyhldmVudC5jYW5kaWRhdGUpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgc2VjdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uc1tqXS5pbmRleE9mKCdcXHJcXG5hPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHNlY3Rpb25zW2pdICs9ICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZS5pbmRleE9mKCd0eXAgZW5kT2ZDYW5kaWRhdGVzJylcbiAgICAgICAgICAgID09PSAtMSkge1xuICAgICAgICAgIHNlY3Rpb25zW2V2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4ICsgMV0gKz1cbiAgICAgICAgICAgICAgJ2E9JyArIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgKyAnXFxyXFxuJztcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmxvY2FsRGVzY3JpcHRpb24uc2RwID0gc2VjdGlvbnMuam9pbignJyk7XG4gICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIGlmIChzZWxmLm9uaWNlY2FuZGlkYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFldmVudC5jYW5kaWRhdGUgJiYgc2VsZi5pY2VHYXRoZXJpbmdTdGF0ZSAhPT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgIHZhciBjb21wbGV0ZSA9IHNlbGYudHJhbnNjZWl2ZXJzLmV2ZXJ5KGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgJiZcbiAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCc7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgICAgICBzZWxmLmljZUdhdGhlcmluZ1N0YXRlID0gJ2NvbXBsZXRlJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyID0gW107XG4gICAgfTtcblxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAvLyBDbG9uZSBpcyBuZWNlc3NhcnkgZm9yIGxvY2FsIGRlbW9zIG1vc3RseSwgYXR0YWNoaW5nIGRpcmVjdGx5XG4gICAgICAvLyB0byB0d28gZGlmZmVyZW50IHNlbmRlcnMgZG9lcyBub3Qgd29yayAoYnVpbGQgMTA1NDcpLlxuICAgICAgdGhpcy5sb2NhbFN0cmVhbXMucHVzaChzdHJlYW0uY2xvbmUoKSk7XG4gICAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpO1xuICAgIH07XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIGlkeCA9IHRoaXMubG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKTtcbiAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICB0aGlzLmxvY2FsU3RyZWFtcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRGV0ZXJtaW5lcyB0aGUgaW50ZXJzZWN0aW9uIG9mIGxvY2FsIGFuZCByZW1vdGUgY2FwYWJpbGl0aWVzLlxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dldENvbW1vbkNhcGFiaWxpdGllcyA9XG4gICAgICAgIGZ1bmN0aW9uKGxvY2FsQ2FwYWJpbGl0aWVzLCByZW1vdGVDYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0ge1xuICAgICAgICAgICAgY29kZWNzOiBbXSxcbiAgICAgICAgICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdLFxuICAgICAgICAgICAgZmVjTWVjaGFuaXNtczogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGxDb2RlYykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciByQ29kZWMgPSByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzW2ldO1xuICAgICAgICAgICAgICBpZiAobENvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gckNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSAmJlxuICAgICAgICAgICAgICAgICAgbENvZGVjLmNsb2NrUmF0ZSA9PT0gckNvZGVjLmNsb2NrUmF0ZSAmJlxuICAgICAgICAgICAgICAgICAgbENvZGVjLm51bUNoYW5uZWxzID09PSByQ29kZWMubnVtQ2hhbm5lbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBwdXNoIHJDb2RlYyBzbyB3ZSByZXBseSB3aXRoIG9mZmVyZXIgcGF5bG9hZCB0eXBlXG4gICAgICAgICAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5wdXNoKHJDb2RlYyk7XG5cbiAgICAgICAgICAgICAgICAvLyBGSVhNRTogYWxzbyBuZWVkIHRvIGRldGVybWluZSBpbnRlcnNlY3Rpb24gYmV0d2VlblxuICAgICAgICAgICAgICAgIC8vIC5ydGNwRmVlZGJhY2sgYW5kIC5wYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obEhlYWRlckV4dGVuc2lvbikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3RlQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgaSsrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgckhlYWRlckV4dGVuc2lvbiA9IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgaWYgKGxIZWFkZXJFeHRlbnNpb24udXJpID09PSBySGVhZGVyRXh0ZW5zaW9uLnVyaSkge1xuICAgICAgICAgICAgICAgICAgICBjb21tb25DYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKHJIZWFkZXJFeHRlbnNpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gRklYTUU6IGZlY01lY2hhbmlzbXNcbiAgICAgICAgICByZXR1cm4gY29tbW9uQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9O1xuXG4gICAgLy8gQ3JlYXRlIElDRSBnYXRoZXJlciwgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMgPVxuICAgICAgICBmdW5jdGlvbihtaWQsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdmFyIGljZUdhdGhlcmVyID0gbmV3IFJUQ0ljZUdhdGhlcmVyKHNlbGYuaWNlT3B0aW9ucyk7XG4gICAgICAgICAgdmFyIGljZVRyYW5zcG9ydCA9IG5ldyBSVENJY2VUcmFuc3BvcnQoaWNlR2F0aGVyZXIpO1xuICAgICAgICAgIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJyk7XG4gICAgICAgICAgICBldmVudC5jYW5kaWRhdGUgPSB7c2RwTWlkOiBtaWQsIHNkcE1MaW5lSW5kZXg6IHNkcE1MaW5lSW5kZXh9O1xuXG4gICAgICAgICAgICB2YXIgY2FuZCA9IGV2dC5jYW5kaWRhdGU7XG4gICAgICAgICAgICB2YXIgZW5kID0gIWNhbmQgfHwgT2JqZWN0LmtleXMoY2FuZCkubGVuZ3RoID09PSAwO1xuICAgICAgICAgICAgLy8gRWRnZSBlbWl0cyBhbiBlbXB0eSBvYmplY3QgZm9yIFJUQ0ljZUNhbmRpZGF0ZUNvbXBsZXRl4oClXG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgIC8vIHBvbHlmaWxsIHNpbmNlIFJUQ0ljZUdhdGhlcmVyLnN0YXRlIGlzIG5vdCBpbXBsZW1lbnRlZCBpblxuICAgICAgICAgICAgICAvLyBFZGdlIDEwNTQ3IHlldC5cbiAgICAgICAgICAgICAgaWYgKGljZUdhdGhlcmVyLnN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9ICdjb21wbGV0ZWQnO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gRW1pdCBhIGNhbmRpZGF0ZSB3aXRoIHR5cGUgZW5kT2ZDYW5kaWRhdGVzIHRvIG1ha2UgdGhlIHNhbXBsZXNcbiAgICAgICAgICAgICAgLy8gd29yay4gRWRnZSByZXF1aXJlcyBhZGRJY2VDYW5kaWRhdGUgd2l0aCB0aGlzIGVtcHR5IGNhbmRpZGF0ZVxuICAgICAgICAgICAgICAvLyB0byBzdGFydCBjaGVja2luZy4gVGhlIHJlYWwgc29sdXRpb24gaXMgdG8gc2lnbmFsXG4gICAgICAgICAgICAgIC8vIGVuZC1vZi1jYW5kaWRhdGVzIHRvIHRoZSBvdGhlciBzaWRlIHdoZW4gZ2V0dGluZyB0aGUgbnVsbFxuICAgICAgICAgICAgICAvLyBjYW5kaWRhdGUgYnV0IHNvbWUgYXBwcyAobGlrZSB0aGUgc2FtcGxlcykgZG9uJ3QgZG8gdGhhdC5cbiAgICAgICAgICAgICAgZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSA9XG4gICAgICAgICAgICAgICAgICAnY2FuZGlkYXRlOjEgMSB1ZHAgMSAwLjAuMC4wIDkgdHlwIGVuZE9mQ2FuZGlkYXRlcyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBSVENJY2VDYW5kaWRhdGUgZG9lc24ndCBoYXZlIGEgY29tcG9uZW50LCBuZWVkcyB0byBiZSBhZGRlZFxuICAgICAgICAgICAgICBjYW5kLmNvbXBvbmVudCA9IGljZVRyYW5zcG9ydC5jb21wb25lbnQgPT09ICdSVENQJyA/IDIgOiAxO1xuICAgICAgICAgICAgICBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlID0gU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUoY2FuZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IHNlbGYudHJhbnNjZWl2ZXJzLmV2ZXJ5KGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciAmJlxuICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuc3RhdGUgPT09ICdjb21wbGV0ZWQnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEVtaXQgY2FuZGlkYXRlIGlmIGxvY2FsRGVzY3JpcHRpb24gaXMgc2V0LlxuICAgICAgICAgICAgLy8gQWxzbyBlbWl0cyBudWxsIGNhbmRpZGF0ZSB3aGVuIGFsbCBnYXRoZXJlcnMgYXJlIGNvbXBsZXRlLlxuICAgICAgICAgICAgc3dpdGNoIChzZWxmLmljZUdhdGhlcmluZ1N0YXRlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25ldyc6XG4gICAgICAgICAgICAgICAgc2VsZi5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChlbmQgJiYgY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlci5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZ2F0aGVyaW5nJzpcbiAgICAgICAgICAgICAgICBzZWxmLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbmljZWNhbmRpZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZShldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJykpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYub25pY2VjYW5kaWRhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZShuZXcgRXZlbnQoJ2ljZWNhbmRpZGF0ZScpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHNlbGYuaWNlR2F0aGVyaW5nU3RhdGUgPSAnY29tcGxldGUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnY29tcGxldGUnOlxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBub3QgaGFwcGVuLi4uIGN1cnJlbnRseSFcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDogLy8gbm8tb3AuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpY2VUcmFuc3BvcnQub25pY2VzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBkdGxzVHJhbnNwb3J0ID0gbmV3IFJUQ0R0bHNUcmFuc3BvcnQoaWNlVHJhbnNwb3J0KTtcbiAgICAgICAgICBkdGxzVHJhbnNwb3J0Lm9uZHRsc3N0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGR0bHNUcmFuc3BvcnQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gb25lcnJvciBkb2VzIG5vdCBzZXQgc3RhdGUgdG8gZmFpbGVkIGJ5IGl0c2VsZi5cbiAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQuc3RhdGUgPSAnZmFpbGVkJztcbiAgICAgICAgICAgIHNlbGYuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWNlR2F0aGVyZXI6IGljZUdhdGhlcmVyLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0OiBpY2VUcmFuc3BvcnQsXG4gICAgICAgICAgICBkdGxzVHJhbnNwb3J0OiBkdGxzVHJhbnNwb3J0XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgIC8vIFN0YXJ0IHRoZSBSVFAgU2VuZGVyIGFuZCBSZWNlaXZlciBmb3IgYSB0cmFuc2NlaXZlci5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl90cmFuc2NlaXZlID0gZnVuY3Rpb24odHJhbnNjZWl2ZXIsXG4gICAgICAgIHNlbmQsIHJlY3YpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB0aGlzLl9nZXRDb21tb25DYXBhYmlsaXRpZXModHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzKTtcbiAgICAgIGlmIChzZW5kICYmIHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgcGFyYW1zLnJ0Y3AgPSB7XG4gICAgICAgICAgY25hbWU6IFNEUFV0aWxzLmxvY2FsQ05hbWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgcGFyYW1zLnJ0Y3Auc3NyYyA9IHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYztcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc2VuZChwYXJhbXMpO1xuICAgICAgfVxuICAgICAgaWYgKHJlY3YgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICAgIHBhcmFtcy5ydGNwID0ge1xuICAgICAgICAgIGNuYW1lOiB0cmFuc2NlaXZlci5jbmFtZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBwYXJhbXMucnRjcC5zc3JjID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnJlY2VpdmUocGFyYW1zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID1cbiAgICAgICAgZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdmFyIHNlY3Rpb25zO1xuICAgICAgICAgIHZhciBzZXNzaW9ucGFydDtcbiAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgICAgICAgLy8gRklYTUU6IFdoYXQgd2FzIHRoZSBwdXJwb3NlIG9mIHRoaXMgZW1wdHkgaWYgc3RhdGVtZW50P1xuICAgICAgICAgICAgLy8gaWYgKCF0aGlzLl9wZW5kaW5nT2ZmZXIpIHtcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcGVuZGluZ09mZmVyKSB7XG4gICAgICAgICAgICAgIC8vIFZFUlkgbGltaXRlZCBzdXBwb3J0IGZvciBTRFAgbXVuZ2luZy4gTGltaXRlZCB0bzpcbiAgICAgICAgICAgICAgLy8gKiBjaGFuZ2luZyB0aGUgb3JkZXIgb2YgY29kZWNzXG4gICAgICAgICAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAgICAgICBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhcHMgPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9wZW5kaW5nT2ZmZXJbc2RwTUxpbmVJbmRleF0ubG9jYWxDYXBhYmlsaXRpZXMgPSBjYXBzO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhpcy50cmFuc2NlaXZlcnMgPSB0aGlzLl9wZW5kaW5nT2ZmZXI7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nT2ZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnYW5zd2VyJykge1xuICAgICAgICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKHNlbGYucmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgICAgIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgICAgICAgIHZhciB0cmFuc2NlaXZlciA9IHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdO1xuICAgICAgICAgICAgICB2YXIgaWNlR2F0aGVyZXIgPSB0cmFuc2NlaXZlci5pY2VHYXRoZXJlcjtcbiAgICAgICAgICAgICAgdmFyIGljZVRyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgdmFyIGR0bHNUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0O1xuICAgICAgICAgICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcztcbiAgICAgICAgICAgICAgdmFyIHJlbW90ZUNhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcztcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkID0gbWVkaWFTZWN0aW9uLnNwbGl0KCdcXG4nLCAxKVswXVxuICAgICAgICAgICAgICAgICAgLnNwbGl0KCcgJywgMilbMV0gPT09ICcwJztcblxuICAgICAgICAgICAgICBpZiAoIXJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKFxuICAgICAgICAgICAgICAgICAgICBtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQuc3RhcnQoaWNlR2F0aGVyZXIsIHJlbW90ZUljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICAgICdjb250cm9sbGVkJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG4gICAgICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaW50ZXJzZWN0aW9uIG9mIGNhcGFiaWxpdGllcy5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gc2VsZi5fZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKGxvY2FsQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgdGhlIFJUQ1J0cFNlbmRlci4gVGhlIFJUQ1J0cFJlY2VpdmVyIGZvciB0aGlzXG4gICAgICAgICAgICAgICAgLy8gdHJhbnNjZWl2ZXIgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIGluIHNldFJlbW90ZURlc2NyaXB0aW9uLlxuICAgICAgICAgICAgICAgIHNlbGYuX3RyYW5zY2VpdmUodHJhbnNjZWl2ZXIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5jb2RlY3MubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmxvY2FsRGVzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHBcbiAgICAgICAgICB9O1xuICAgICAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnb2ZmZXInOlxuICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnaGF2ZS1sb2NhbC1vZmZlcicpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Fuc3dlcic6XG4gICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdzdGFibGUnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCB0eXBlIFwiJyArIGRlc2NyaXB0aW9uLnR5cGUgK1xuICAgICAgICAgICAgICAgICAgJ1wiJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgYSBzdWNjZXNzIGNhbGxiYWNrIHdhcyBwcm92aWRlZCwgZW1pdCBJQ0UgY2FuZGlkYXRlcyBhZnRlciBpdFxuICAgICAgICAgIC8vIGhhcyBiZWVuIGV4ZWN1dGVkLiBPdGhlcndpc2UsIGVtaXQgY2FsbGJhY2sgYWZ0ZXIgdGhlIFByb21pc2UgaXNcbiAgICAgICAgICAvLyByZXNvbHZlZC5cbiAgICAgICAgICB2YXIgaGFzQ2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBjYiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICBpZiAoc2VsZi5pY2VHYXRoZXJpbmdTdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmljZUdhdGhlcmluZ1N0YXRlID0gJ2dhdGhlcmluZyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi5fZW1pdEJ1ZmZlcmVkQ2FuZGlkYXRlcygpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgcC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNDYWxsYmFjaykge1xuICAgICAgICAgICAgICBpZiAoc2VsZi5pY2VHYXRoZXJpbmdTdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmljZUdhdGhlcmluZ1N0YXRlID0gJ2dhdGhlcmluZyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gVXN1YWxseSBjYW5kaWRhdGVzIHdpbGwgYmUgZW1pdHRlZCBlYXJsaWVyLlxuICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChzZWxmLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzLmJpbmQoc2VsZiksIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH07XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICAgICAgZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBNZWRpYVN0cmVhbSgpO1xuICAgICAgICAgIHZhciByZWNlaXZlckxpc3QgPSBbXTtcbiAgICAgICAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgICAgdmFyIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICAgICAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICAgICAgICAgICAgdmFyIG1saW5lID0gbGluZXNbMF0uc3Vic3RyKDIpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICB2YXIga2luZCA9IG1saW5lWzBdO1xuICAgICAgICAgICAgdmFyIHJlamVjdGVkID0gbWxpbmVbMV0gPT09ICcwJztcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBTRFBVdGlscy5nZXREaXJlY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG5cbiAgICAgICAgICAgIHZhciB0cmFuc2NlaXZlcjtcbiAgICAgICAgICAgIHZhciBpY2VHYXRoZXJlcjtcbiAgICAgICAgICAgIHZhciBpY2VUcmFuc3BvcnQ7XG4gICAgICAgICAgICB2YXIgZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgICAgIHZhciBydHBTZW5kZXI7XG4gICAgICAgICAgICB2YXIgcnRwUmVjZWl2ZXI7XG4gICAgICAgICAgICB2YXIgc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgICAgIHZhciByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgdmFyIGxvY2FsQ2FwYWJpbGl0aWVzO1xuXG4gICAgICAgICAgICB2YXIgdHJhY2s7XG4gICAgICAgICAgICAvLyBGSVhNRTogZW5zdXJlIHRoZSBtZWRpYVNlY3Rpb24gaGFzIHJ0Y3AtbXV4IHNldC5cbiAgICAgICAgICAgIHZhciByZW1vdGVDYXBhYmlsaXRpZXMgPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgICAgICAgICAgIHZhciByZW1vdGVJY2VQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgdmFyIHJlbW90ZUR0bHNQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgaWYgKCFyZWplY3RlZCkge1xuICAgICAgICAgICAgICByZW1vdGVJY2VQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgICAgICAgICBzZXNzaW9ucGFydCk7XG4gICAgICAgICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0RHRsc1BhcmFtZXRlcnMobWVkaWFTZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgc2Vzc2lvbnBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVycyA9XG4gICAgICAgICAgICAgICAgU0RQVXRpbHMucGFyc2VSdHBFbmNvZGluZ1BhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcblxuICAgICAgICAgICAgdmFyIG1pZCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9bWlkOicpO1xuICAgICAgICAgICAgaWYgKG1pZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWlkID0gbWlkWzBdLnN1YnN0cig2KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1pZCA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY25hbWU7XG4gICAgICAgICAgICAvLyBHZXRzIHRoZSBmaXJzdCBTU1JDLiBOb3RlIHRoYXQgd2l0aCBSVFggdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGVcbiAgICAgICAgICAgIC8vIFNTUkNzLlxuICAgICAgICAgICAgdmFyIHJlbW90ZVNzcmMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmF0dHJpYnV0ZSA9PT0gJ2NuYW1lJztcbiAgICAgICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgIGlmIChyZW1vdGVTc3JjKSB7XG4gICAgICAgICAgICAgIGNuYW1lID0gcmVtb3RlU3NyYy52YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgICAgICAgJ2E9ZW5kLW9mLWNhbmRpZGF0ZXMnKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgdmFyIGNhbmRzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1jYW5kaWRhdGU6JylcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oY2FuZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbmQuY29tcG9uZW50ID09PSAnMSc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJyAmJiAhcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgdmFyIHRyYW5zcG9ydHMgPSBzZWxmLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyhtaWQsXG4gICAgICAgICAgICAgICAgICBzZHBNTGluZUluZGV4KTtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRzLmljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpO1xuICAgICAgICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gW3tcbiAgICAgICAgICAgICAgICBzc3JjOiAoMiAqIHNkcE1MaW5lSW5kZXggKyAyKSAqIDEwMDFcbiAgICAgICAgICAgICAgfV07XG5cbiAgICAgICAgICAgICAgcnRwUmVjZWl2ZXIgPSBuZXcgUlRDUnRwUmVjZWl2ZXIodHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0LCBraW5kKTtcblxuICAgICAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrO1xuICAgICAgICAgICAgICByZWNlaXZlckxpc3QucHVzaChbdHJhY2ssIHJ0cFJlY2VpdmVyXSk7XG4gICAgICAgICAgICAgIC8vIEZJWE1FOiBub3QgY29ycmVjdCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBzdHJlYW1zIGJ1dCB0aGF0IGlzXG4gICAgICAgICAgICAgIC8vIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIHRoaXMgc2hpbS5cbiAgICAgICAgICAgICAgc3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcblxuICAgICAgICAgICAgICAvLyBGSVhNRTogbG9vayBhdCBkaXJlY3Rpb24uXG4gICAgICAgICAgICAgIGlmIChzZWxmLmxvY2FsU3RyZWFtcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICBzZWxmLmxvY2FsU3RyZWFtc1swXS5nZXRUcmFja3MoKS5sZW5ndGggPj0gc2RwTUxpbmVJbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBhY3R1YWxseSBtb3JlIGNvbXBsaWNhdGVkLCBuZWVkcyB0byBtYXRjaCB0eXBlcyBldGNcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWx0cmFjayA9IHNlbGYubG9jYWxTdHJlYW1zWzBdXG4gICAgICAgICAgICAgICAgICAgIC5nZXRUcmFja3MoKVtzZHBNTGluZUluZGV4XTtcbiAgICAgICAgICAgICAgICBydHBTZW5kZXIgPSBuZXcgUlRDUnRwU2VuZGVyKGxvY2FsdHJhY2ssXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHtcbiAgICAgICAgICAgICAgICBpY2VHYXRoZXJlcjogdHJhbnNwb3J0cy5pY2VHYXRoZXJlcixcbiAgICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuaWNlVHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCxcbiAgICAgICAgICAgICAgICBsb2NhbENhcGFiaWxpdGllczogbG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzOiByZW1vdGVDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICAgICAgcnRwU2VuZGVyOiBydHBTZW5kZXIsXG4gICAgICAgICAgICAgICAgcnRwUmVjZWl2ZXI6IHJ0cFJlY2VpdmVyLFxuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICAgICAgbWlkOiBtaWQsXG4gICAgICAgICAgICAgICAgY25hbWU6IGNuYW1lLFxuICAgICAgICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVyczogcmVjdkVuY29kaW5nUGFyYW1ldGVyc1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAvLyBTdGFydCB0aGUgUlRDUnRwUmVjZWl2ZXIgbm93LiBUaGUgUlRQU2VuZGVyIGlzIHN0YXJ0ZWQgaW5cbiAgICAgICAgICAgICAgLy8gc2V0TG9jYWxEZXNjcmlwdGlvbi5cbiAgICAgICAgICAgICAgc2VsZi5fdHJhbnNjZWl2ZShzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInICYmICFyZWplY3RlZCkge1xuICAgICAgICAgICAgICB0cmFuc2NlaXZlciA9IHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdO1xuICAgICAgICAgICAgICBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyO1xuICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7XG4gICAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0O1xuICAgICAgICAgICAgICBydHBTZW5kZXIgPSB0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gICAgICAgICAgICAgIHJ0cFJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzO1xuXG4gICAgICAgICAgICAgIHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPVxuICAgICAgICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgICAgICAgc2VsZi50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVtb3RlQ2FwYWJpbGl0aWVzID1cbiAgICAgICAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllcztcbiAgICAgICAgICAgICAgc2VsZi50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uY25hbWUgPSBjbmFtZTtcblxuICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQuc3RhcnQoaWNlR2F0aGVyZXIsIHJlbW90ZUljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICAnY29udHJvbGxpbmcnKTtcbiAgICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgc2VsZi5fdHJhbnNjZWl2ZSh0cmFuc2NlaXZlcixcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdyZWN2b25seScsXG4gICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKTtcblxuICAgICAgICAgICAgICBpZiAocnRwUmVjZWl2ZXIgJiZcbiAgICAgICAgICAgICAgICAgIChkaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgZGlyZWN0aW9uID09PSAnc2VuZG9ubHknKSkge1xuICAgICAgICAgICAgICAgIHRyYWNrID0gcnRwUmVjZWl2ZXIudHJhY2s7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlcl0pO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5hZGRUcmFjayh0cmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IGFjdHVhbGx5IHRoZSByZWNlaXZlciBzaG91bGQgYmUgY3JlYXRlZCBsYXRlci5cbiAgICAgICAgICAgICAgICBkZWxldGUgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMucmVtb3RlRGVzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHBcbiAgICAgICAgICB9O1xuICAgICAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnb2ZmZXInOlxuICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnaGF2ZS1yZW1vdGUtb2ZmZXInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbnN3ZXInOlxuICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgdHlwZSBcIicgKyBkZXNjcmlwdGlvbi50eXBlICtcbiAgICAgICAgICAgICAgICAgICdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RyZWFtLmdldFRyYWNrcygpLmxlbmd0aCkge1xuICAgICAgICAgICAgc2VsZi5yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHN0cmVhbScpO1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgIGlmIChzZWxmLm9uYWRkc3RyZWFtICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9uYWRkc3RyZWFtKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlY2VpdmVyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2sgPSBpdGVtWzBdO1xuICAgICAgICAgICAgICAgIHZhciByZWNlaXZlciA9IGl0ZW1bMV07XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrRXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgICAgdHJhY2tFdmVudC50cmFjayA9IHRyYWNrO1xuICAgICAgICAgICAgICAgIHRyYWNrRXZlbnQucmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICAgICAgICAgICAgICB0cmFja0V2ZW50LnN0cmVhbXMgPSBbc3RyZWFtXTtcbiAgICAgICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm9udHJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9udHJhY2sodHJhY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMV0sIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIC8qIG5vdCB5ZXRcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCkge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBGSVhNRTogY2xlYW4gdXAgdHJhY2tzLCBsb2NhbCBzdHJlYW1zLCByZW1vdGUgc3RyZWFtcywgZXRjXG4gICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnY2xvc2VkJyk7XG4gICAgfTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc2lnbmFsaW5nIHN0YXRlLlxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlID1cbiAgICAgICAgZnVuY3Rpb24obmV3U3RhdGUpIHtcbiAgICAgICAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdzaWduYWxpbmdzdGF0ZWNoYW5nZScpO1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgaWYgKHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBmaXJlIHRoZSBuZWdvdGlhdGlvbm5lZWRlZCBldmVudC5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCA9XG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIEZpcmUgYXdheSAoZm9yIG5vdykuXG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCduZWdvdGlhdGlvbm5lZWRlZCcpO1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgaWYgKHRoaXMub25uZWdvdGlhdGlvbm5lZWRlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAvLyBVcGRhdGUgdGhlIGNvbm5lY3Rpb24gc3RhdGUuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgbmV3U3RhdGU7XG4gICAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgICAnbmV3JzogMCxcbiAgICAgICAgY2xvc2VkOiAwLFxuICAgICAgICBjb25uZWN0aW5nOiAwLFxuICAgICAgICBjaGVja2luZzogMCxcbiAgICAgICAgY29ubmVjdGVkOiAwLFxuICAgICAgICBjb21wbGV0ZWQ6IDAsXG4gICAgICAgIGZhaWxlZDogMFxuICAgICAgfTtcbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZV0rKztcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RhdGVdKys7XG4gICAgICB9KTtcbiAgICAgIC8vIElDRVRyYW5zcG9ydC5jb21wbGV0ZWQgYW5kIGNvbm5lY3RlZCBhcmUgdGhlIHNhbWUgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgIHN0YXRlcy5jb25uZWN0ZWQgKz0gc3RhdGVzLmNvbXBsZXRlZDtcblxuICAgICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICAgIGlmIChzdGF0ZXMuZmFpbGVkID4gMCkge1xuICAgICAgICBuZXdTdGF0ZSA9ICdmYWlsZWQnO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGluZyA+IDAgfHwgc3RhdGVzLmNoZWNraW5nID4gMCkge1xuICAgICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLmRpc2Nvbm5lY3RlZCA+IDApIHtcbiAgICAgICAgbmV3U3RhdGUgPSAnZGlzY29ubmVjdGVkJztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLm5ldyA+IDApIHtcbiAgICAgICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RlZCA+IDAgfHwgc3RhdGVzLmNvbXBsZXRlZCA+IDApIHtcbiAgICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGVkJztcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1N0YXRlICE9PSBzZWxmLmljZUNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgICBzZWxmLmljZUNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGlmICh0aGlzLl9wZW5kaW5nT2ZmZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVPZmZlciBjYWxsZWQgd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIG9mZmVyLicpO1xuICAgICAgfVxuICAgICAgdmFyIG9mZmVyT3B0aW9ucztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2ZmZXJPcHRpb25zID0gYXJndW1lbnRzWzBdO1xuICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIG9mZmVyT3B0aW9ucyA9IGFyZ3VtZW50c1syXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgICAgdmFyIG51bUF1ZGlvVHJhY2tzID0gMDtcbiAgICAgIHZhciBudW1WaWRlb1RyYWNrcyA9IDA7XG4gICAgICAvLyBEZWZhdWx0IHRvIHNlbmRyZWN2LlxuICAgICAgaWYgKHRoaXMubG9jYWxTdHJlYW1zLmxlbmd0aCkge1xuICAgICAgICBudW1BdWRpb1RyYWNrcyA9IHRoaXMubG9jYWxTdHJlYW1zWzBdLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoO1xuICAgICAgICBudW1WaWRlb1RyYWNrcyA9IHRoaXMubG9jYWxTdHJlYW1zWzBdLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgLy8gRGV0ZXJtaW5lIG51bWJlciBvZiBhdWRpbyBhbmQgdmlkZW8gdHJhY2tzIHdlIG5lZWQgdG8gc2VuZC9yZWN2LlxuICAgICAgaWYgKG9mZmVyT3B0aW9ucykge1xuICAgICAgICAvLyBSZWplY3QgQ2hyb21lIGxlZ2FjeSBjb25zdHJhaW50cy5cbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5tYW5kYXRvcnkgfHwgb2ZmZXJPcHRpb25zLm9wdGlvbmFsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgJ0xlZ2FjeSBtYW5kYXRvcnkvb3B0aW9uYWwgY29uc3RyYWludHMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcyA9IG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5sb2NhbFN0cmVhbXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIFB1c2ggbG9jYWwgc3RyZWFtcy5cbiAgICAgICAgdGhpcy5sb2NhbFN0cmVhbXNbMF0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgIHRyYWNrcy5wdXNoKHtcbiAgICAgICAgICAgIGtpbmQ6IHRyYWNrLmtpbmQsXG4gICAgICAgICAgICB0cmFjazogdHJhY2ssXG4gICAgICAgICAgICB3YW50UmVjZWl2ZTogdHJhY2sua2luZCA9PT0gJ2F1ZGlvJyA/XG4gICAgICAgICAgICAgICAgbnVtQXVkaW9UcmFja3MgPiAwIDogbnVtVmlkZW9UcmFja3MgPiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgIG51bUF1ZGlvVHJhY2tzLS07XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFjay5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICBudW1WaWRlb1RyYWNrcy0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBDcmVhdGUgTS1saW5lcyBmb3IgcmVjdm9ubHkgc3RyZWFtcy5cbiAgICAgIHdoaWxlIChudW1BdWRpb1RyYWNrcyA+IDAgfHwgbnVtVmlkZW9UcmFja3MgPiAwKSB7XG4gICAgICAgIGlmIChudW1BdWRpb1RyYWNrcyA+IDApIHtcbiAgICAgICAgICB0cmFja3MucHVzaCh7XG4gICAgICAgICAgICBraW5kOiAnYXVkaW8nLFxuICAgICAgICAgICAgd2FudFJlY2VpdmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBudW1BdWRpb1RyYWNrcy0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1WaWRlb1RyYWNrcyA+IDApIHtcbiAgICAgICAgICB0cmFja3MucHVzaCh7XG4gICAgICAgICAgICBraW5kOiAndmlkZW8nLFxuICAgICAgICAgICAgd2FudFJlY2VpdmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcy0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSgpO1xuICAgICAgdmFyIHRyYW5zY2VpdmVycyA9IFtdO1xuICAgICAgdHJhY2tzLmZvckVhY2goZnVuY3Rpb24obWxpbmUsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgICAgLy8gRm9yIGVhY2ggdHJhY2ssIGNyZWF0ZSBhbiBpY2UgZ2F0aGVyZXIsIGljZSB0cmFuc3BvcnQsXG4gICAgICAgIC8vIGR0bHMgdHJhbnNwb3J0LCBwb3RlbnRpYWxseSBydHBzZW5kZXIgYW5kIHJ0cHJlY2VpdmVyLlxuICAgICAgICB2YXIgdHJhY2sgPSBtbGluZS50cmFjaztcbiAgICAgICAgdmFyIGtpbmQgPSBtbGluZS5raW5kO1xuICAgICAgICB2YXIgbWlkID0gU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7XG5cbiAgICAgICAgdmFyIHRyYW5zcG9ydHMgPSBzZWxmLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyhtaWQsIHNkcE1MaW5lSW5kZXgpO1xuXG4gICAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcyA9IFJUQ1J0cFNlbmRlci5nZXRDYXBhYmlsaXRpZXMoa2luZCk7XG4gICAgICAgIHZhciBydHBTZW5kZXI7XG4gICAgICAgIHZhciBydHBSZWNlaXZlcjtcblxuICAgICAgICAvLyBnZW5lcmF0ZSBhbiBzc3JjIG5vdywgdG8gYmUgdXNlZCBsYXRlciBpbiBydHBTZW5kZXIuc2VuZFxuICAgICAgICB2YXIgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IFt7XG4gICAgICAgICAgc3NyYzogKDIgKiBzZHBNTGluZUluZGV4ICsgMSkgKiAxMDAxXG4gICAgICAgIH1dO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICBydHBTZW5kZXIgPSBuZXcgUlRDUnRwU2VuZGVyKHRyYWNrLCB0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1saW5lLndhbnRSZWNlaXZlKSB7XG4gICAgICAgICAgcnRwUmVjZWl2ZXIgPSBuZXcgUlRDUnRwUmVjZWl2ZXIodHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0LCBraW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHtcbiAgICAgICAgICBpY2VHYXRoZXJlcjogdHJhbnNwb3J0cy5pY2VHYXRoZXJlcixcbiAgICAgICAgICBpY2VUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuaWNlVHJhbnNwb3J0LFxuICAgICAgICAgIGR0bHNUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCxcbiAgICAgICAgICBsb2NhbENhcGFiaWxpdGllczogbG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzOiBudWxsLFxuICAgICAgICAgIHJ0cFNlbmRlcjogcnRwU2VuZGVyLFxuICAgICAgICAgIHJ0cFJlY2VpdmVyOiBydHBSZWNlaXZlcixcbiAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgIG1pZDogbWlkLFxuICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMsXG4gICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVyczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJhbnNjZWl2ZXIgPSB0cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlcixcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzLCAnb2ZmZXInLCBzZWxmLmxvY2FsU3RyZWFtc1swXSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fcGVuZGluZ09mZmVyID0gdHJhbnNjZWl2ZXJzO1xuICAgICAgdmFyIGRlc2MgPSBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgICAgdHlwZTogJ29mZmVyJyxcbiAgICAgICAgc2RwOiBzZHBcbiAgICAgIH0pO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMF0sIDAsIGRlc2MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTtcbiAgICB9O1xuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKCk7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBpbnRlcnNlY3Rpb24gb2YgY2FwYWJpbGl0aWVzLlxuICAgICAgICB2YXIgY29tbW9uQ2FwYWJpbGl0aWVzID0gc2VsZi5fZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKFxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgY29tbW9uQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgJ2Fuc3dlcicsIHNlbGYubG9jYWxTdHJlYW1zWzBdKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZGVzYyA9IG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgICB0eXBlOiAnYW5zd2VyJyxcbiAgICAgICAgc2RwOiBzZHBcbiAgICAgIH0pO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMF0sIDAsIGRlc2MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTtcbiAgICB9O1xuXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgIHZhciBtTGluZUluZGV4ID0gY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXg7XG4gICAgICBpZiAoY2FuZGlkYXRlLnNkcE1pZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHJhbnNjZWl2ZXJzW2ldLm1pZCA9PT0gY2FuZGlkYXRlLnNkcE1pZCkge1xuICAgICAgICAgICAgbUxpbmVJbmRleCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzW21MaW5lSW5kZXhdO1xuICAgICAgaWYgKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIHZhciBjYW5kID0gT2JqZWN0LmtleXMoY2FuZGlkYXRlLmNhbmRpZGF0ZSkubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kaWRhdGUuY2FuZGlkYXRlKSA6IHt9O1xuICAgICAgICAvLyBJZ25vcmUgQ2hyb21lJ3MgaW52YWxpZCBjYW5kaWRhdGVzIHNpbmNlIEVkZ2UgZG9lcyBub3QgbGlrZSB0aGVtLlxuICAgICAgICBpZiAoY2FuZC5wcm90b2NvbCA9PT0gJ3RjcCcgJiYgY2FuZC5wb3J0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElnbm9yZSBSVENQIGNhbmRpZGF0ZXMsIHdlIGFzc3VtZSBSVENQLU1VWC5cbiAgICAgICAgaWYgKGNhbmQuY29tcG9uZW50ICE9PSAnMScpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQSBkaXJ0eSBoYWNrIHRvIG1ha2Ugc2FtcGxlcyB3b3JrLlxuICAgICAgICBpZiAoY2FuZC50eXBlID09PSAnZW5kT2ZDYW5kaWRhdGVzJykge1xuICAgICAgICAgIGNhbmQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKGNhbmQpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgcmVtb3RlRGVzY3JpcHRpb24uXG4gICAgICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnModGhpcy5yZW1vdGVEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICBzZWN0aW9uc1ttTGluZUluZGV4ICsgMV0gKz0gKGNhbmQudHlwZSA/IGNhbmRpZGF0ZS5jYW5kaWRhdGUudHJpbSgpXG4gICAgICAgICAgICA6ICdhPWVuZC1vZi1jYW5kaWRhdGVzJykgKyAnXFxyXFxuJztcbiAgICAgICAgdGhpcy5yZW1vdGVEZXNjcmlwdGlvbi5zZHAgPSBzZWN0aW9ucy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1sxXSwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcblxuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgICBbJ3J0cFNlbmRlcicsICdydHBSZWNlaXZlcicsICdpY2VHYXRoZXJlcicsICdpY2VUcmFuc3BvcnQnLFxuICAgICAgICAgICAgJ2R0bHNUcmFuc3BvcnQnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXJbbWV0aG9kXSkge1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godHJhbnNjZWl2ZXJbbWV0aG9kXS5nZXRTdGF0cygpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBhcmd1bWVudHNbMV07XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IHt9O1xuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXMuZm9yRWFjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICByZXN1bHRzW2lkXSA9IHJlc3VsdFtpZF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNiLCAwLCByZXN1bHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LFxuXG4gIC8vIEF0dGFjaCBhIG1lZGlhIHN0cmVhbSB0byBhbiBlbGVtZW50LlxuICBhdHRhY2hNZWRpYVN0cmVhbTogZnVuY3Rpb24oZWxlbWVudCwgc3RyZWFtKSB7XG4gICAgbG9nZ2luZygnREVQUkVDQVRFRCwgYXR0YWNoTWVkaWFTdHJlYW0gd2lsbCBzb29uIGJlIHJlbW92ZWQuJyk7XG4gICAgZWxlbWVudC5zcmNPYmplY3QgPSBzdHJlYW07XG4gIH0sXG5cbiAgcmVhdHRhY2hNZWRpYVN0cmVhbTogZnVuY3Rpb24odG8sIGZyb20pIHtcbiAgICBsb2dnaW5nKCdERVBSRUNBVEVELCByZWF0dGFjaE1lZGlhU3RyZWFtIHdpbGwgc29vbiBiZSByZW1vdmVkLicpO1xuICAgIHRvLnNyY09iamVjdCA9IGZyb20uc3JjT2JqZWN0O1xuICB9XG59O1xuXG4vLyBFeHBvc2UgcHVibGljIG1ldGhvZHMuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2hpbVBlZXJDb25uZWN0aW9uOiBlZGdlU2hpbS5zaGltUGVlckNvbm5lY3Rpb24sXG4gIGF0dGFjaE1lZGlhU3RyZWFtOiBlZGdlU2hpbS5hdHRhY2hNZWRpYVN0cmVhbSxcbiAgcmVhdHRhY2hNZWRpYVN0cmVhbTogZWRnZVNoaW0ucmVhdHRhY2hNZWRpYVN0cmVhbVxufTtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nZ2luZyA9IHJlcXVpcmUoJy4uL3V0aWxzJykubG9nO1xudmFyIGJyb3dzZXJEZXRhaWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5icm93c2VyRGV0YWlscztcblxudmFyIGZpcmVmb3hTaGltID0ge1xuICBzaGltT25UcmFjazogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpblxuICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdvbnRyYWNrJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICBpZiAodGhpcy5fb250cmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrID0gZik7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpO1xuICAgICAgICAgICAgICBldmVudC50cmFjayA9IHRyYWNrO1xuICAgICAgICAgICAgICBldmVudC5yZWNlaXZlciA9IHt0cmFjazogdHJhY2t9O1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHNoaW1Tb3VyY2VPYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIC8vIEZpcmVmb3ggaGFzIHN1cHBvcnRlZCBtb3pTcmNPYmplY3Qgc2luY2UgRkYyMiwgdW5wcmVmaXhlZCBpbiA0Mi5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudCAmJlxuICAgICAgICAhKCdzcmNPYmplY3QnIGluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSkpIHtcbiAgICAgICAgLy8gU2hpbSB0aGUgc3JjT2JqZWN0IHByb3BlcnR5LCBvbmNlLCB3aGVuIEhUTUxNZWRpYUVsZW1lbnQgaXMgZm91bmQuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsICdzcmNPYmplY3QnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1velNyY09iamVjdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgICB0aGlzLm1velNyY09iamVjdCA9IHN0cmVhbTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzaGltUGVlckNvbm5lY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoZSBSVENQZWVyQ29ubmVjdGlvbiBvYmplY3QuXG4gICAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKSB7XG4gICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHtcbiAgICAgICAgICAvLyAudXJscyBpcyBub3Qgc3VwcG9ydGVkIGluIEZGIDwgMzguXG4gICAgICAgICAgLy8gY3JlYXRlIFJUQ0ljZVNlcnZlcnMgd2l0aCBhIHNpbmdsZSB1cmwuXG4gICAgICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgICAgIHZhciBuZXdJY2VTZXJ2ZXJzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBjQ29uZmlnLmljZVNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIHNlcnZlciA9IHBjQ29uZmlnLmljZVNlcnZlcnNbaV07XG4gICAgICAgICAgICAgIGlmIChzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybHMnKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VydmVyLnVybHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdTZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc2VydmVyLnVybHNbal1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBpZiAoc2VydmVyLnVybHNbal0uaW5kZXhPZigndHVybicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NlcnZlci51c2VybmFtZSA9IHNlcnZlci51c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VydmVyLmNyZWRlbnRpYWwgPSBzZXJ2ZXIuY3JlZGVudGlhbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG5ld0ljZVNlcnZlcnMucHVzaChuZXdTZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gocGNDb25maWcuaWNlU2VydmVyc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBjQ29uZmlnLmljZVNlcnZlcnMgPSBuZXdJY2VTZXJ2ZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IG1velJUQ1BlZXJDb25uZWN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKTtcbiAgICAgIH07XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlID0gbW96UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuXG4gICAgICAvLyB3cmFwIHN0YXRpYyBtZXRob2RzLiBDdXJyZW50bHkganVzdCBnZW5lcmF0ZUNlcnRpZmljYXRlLlxuICAgICAgaWYgKG1velJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwgJ2dlbmVyYXRlQ2VydGlmaWNhdGUnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBtb3pSVENTZXNzaW9uRGVzY3JpcHRpb247XG4gICAgICB3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlID0gbW96UlRDSWNlQ2FuZGlkYXRlO1xuICAgIH1cblxuICAgIC8vIHNoaW0gYXdheSBuZWVkIGZvciBvYnNvbGV0ZSBSVENJY2VDYW5kaWRhdGUvUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLlxuICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICAgICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IG5ldyAoKG1ldGhvZCA9PT0gJ2FkZEljZUNhbmRpZGF0ZScpP1xuICAgICAgICAgICAgICAgIFJUQ0ljZUNhbmRpZGF0ZSA6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfSxcblxuICBzaGltR2V0VXNlck1lZGlhOiBmdW5jdGlvbigpIHtcbiAgICAvLyBnZXRVc2VyTWVkaWEgY29uc3RyYWludHMgc2hpbS5cbiAgICB2YXIgZ2V0VXNlck1lZGlhXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICAgIHZhciBjb25zdHJhaW50c1RvRkYzN18gPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5yZXF1aXJlKSB7XG4gICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcXVpcmUgPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8XG4gICAgICAgICAgICAgIGtleSA9PT0gJ21lZGlhU291cmNlJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgciA9IGNba2V5XSA9ICh0eXBlb2YgY1trZXldID09PSAnb2JqZWN0JykgP1xuICAgICAgICAgICAgICBjW2tleV0gOiB7aWRlYWw6IGNba2V5XX07XG4gICAgICAgICAgaWYgKHIubWluICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgci5tYXggIT09IHVuZGVmaW5lZCB8fCByLmV4YWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlcXVpcmUucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIuZXhhY3QgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHIuIG1pbiA9IHIubWF4ID0gci5leGFjdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNba2V5XSA9IHIuZXhhY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgci5leGFjdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYy5hZHZhbmNlZCA9IGMuYWR2YW5jZWQgfHwgW107XG4gICAgICAgICAgICB2YXIgb2MgPSB7fTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygci5pZGVhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgb2Nba2V5XSA9IHttaW46IHIuaWRlYWwsIG1heDogci5pZGVhbH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvY1trZXldID0gci5pZGVhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMuYWR2YW5jZWQucHVzaChvYyk7XG4gICAgICAgICAgICBkZWxldGUgci5pZGVhbDtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMocikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBjW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlcXVpcmUubGVuZ3RoKSB7XG4gICAgICAgICAgYy5yZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICAgIH07XG4gICAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHtcbiAgICAgICAgbG9nZ2luZygnc3BlYzogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgICAgIGlmIChjb25zdHJhaW50cy5hdWRpbykge1xuICAgICAgICAgIGNvbnN0cmFpbnRzLmF1ZGlvID0gY29uc3RyYWludHNUb0ZGMzdfKGNvbnN0cmFpbnRzLmF1ZGlvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc3RyYWludHMudmlkZW8pIHtcbiAgICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9GRjM3Xyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2luZygnZmYzNzogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYShjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKTtcbiAgICB9O1xuXG4gICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYV87XG5cbiAgICAvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgZ2V0VXNlck1lZGlhIGFzIGEgUHJvbWlzZS5cbiAgICB2YXIgZ2V0VXNlck1lZGlhUHJvbWlzZV8gPSBmdW5jdGlvbihjb25zdHJhaW50cykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIFNoaW0gZm9yIG1lZGlhRGV2aWNlcyBvbiBvbGRlciB2ZXJzaW9ucy5cbiAgICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMgPSB7Z2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWFQcm9taXNlXyxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7IH0sXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkgeyB9XG4gICAgICB9O1xuICAgIH1cbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPVxuICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHZhciBpbmZvcyA9IFtcbiAgICAgICAgICAgICAge2tpbmQ6ICdhdWRpb2lucHV0JywgZGV2aWNlSWQ6ICdkZWZhdWx0JywgbGFiZWw6ICcnLCBncm91cElkOiAnJ30sXG4gICAgICAgICAgICAgIHtraW5kOiAndmlkZW9pbnB1dCcsIGRldmljZUlkOiAnZGVmYXVsdCcsIGxhYmVsOiAnJywgZ3JvdXBJZDogJyd9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmVzb2x2ZShpbmZvcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDQxKSB7XG4gICAgICAvLyBXb3JrIGFyb3VuZCBodHRwOi8vYnVnemlsLmxhLzExNjk2NjVcbiAgICAgIHZhciBvcmdFbnVtZXJhdGVEZXZpY2VzID1cbiAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3JnRW51bWVyYXRlRGV2aWNlcygpLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ05vdEZvdW5kRXJyb3InKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQXR0YWNoIGEgbWVkaWEgc3RyZWFtIHRvIGFuIGVsZW1lbnQuXG4gIGF0dGFjaE1lZGlhU3RyZWFtOiBmdW5jdGlvbihlbGVtZW50LCBzdHJlYW0pIHtcbiAgICBsb2dnaW5nKCdERVBSRUNBVEVELCBhdHRhY2hNZWRpYVN0cmVhbSB3aWxsIHNvb24gYmUgcmVtb3ZlZC4nKTtcbiAgICBlbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTtcbiAgfSxcblxuICByZWF0dGFjaE1lZGlhU3RyZWFtOiBmdW5jdGlvbih0bywgZnJvbSkge1xuICAgIGxvZ2dpbmcoJ0RFUFJFQ0FURUQsIHJlYXR0YWNoTWVkaWFTdHJlYW0gd2lsbCBzb29uIGJlIHJlbW92ZWQuJyk7XG4gICAgdG8uc3JjT2JqZWN0ID0gZnJvbS5zcmNPYmplY3Q7XG4gIH1cbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaGltT25UcmFjazogZmlyZWZveFNoaW0uc2hpbU9uVHJhY2ssXG4gIHNoaW1Tb3VyY2VPYmplY3Q6IGZpcmVmb3hTaGltLnNoaW1Tb3VyY2VPYmplY3QsXG4gIHNoaW1QZWVyQ29ubmVjdGlvbjogZmlyZWZveFNoaW0uc2hpbVBlZXJDb25uZWN0aW9uLFxuICBzaGltR2V0VXNlck1lZGlhOiByZXF1aXJlKCcuL2dldHVzZXJtZWRpYScpLFxuICBhdHRhY2hNZWRpYVN0cmVhbTogZmlyZWZveFNoaW0uYXR0YWNoTWVkaWFTdHJlYW0sXG4gIHJlYXR0YWNoTWVkaWFTdHJlYW06IGZpcmVmb3hTaGltLnJlYXR0YWNoTWVkaWFTdHJlYW1cbn07XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuLi91dGlscycpLmxvZztcbnZhciBicm93c2VyRGV0YWlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYnJvd3NlckRldGFpbHM7XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldFVzZXJNZWRpYSBjb25zdHJhaW50cyBzaGltLlxuICB2YXIgZ2V0VXNlck1lZGlhXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICB2YXIgY29uc3RyYWludHNUb0ZGMzdfID0gZnVuY3Rpb24oYykge1xuICAgICAgaWYgKHR5cGVvZiBjICE9PSAnb2JqZWN0JyB8fCBjLnJlcXVpcmUpIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICB2YXIgcmVxdWlyZSA9IFtdO1xuICAgICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3JlcXVpcmUnIHx8IGtleSA9PT0gJ2FkdmFuY2VkJyB8fCBrZXkgPT09ICdtZWRpYVNvdXJjZScpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBjW2tleV0gPSAodHlwZW9mIGNba2V5XSA9PT0gJ29iamVjdCcpID9cbiAgICAgICAgICAgIGNba2V5XSA6IHtpZGVhbDogY1trZXldfTtcbiAgICAgICAgaWYgKHIubWluICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHIubWF4ICE9PSB1bmRlZmluZWQgfHwgci5leGFjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVxdWlyZS5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygci5leGFjdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHIuIG1pbiA9IHIubWF4ID0gci5leGFjdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY1trZXldID0gci5leGFjdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHIuZXhhY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGMuYWR2YW5jZWQgPSBjLmFkdmFuY2VkIHx8IFtdO1xuICAgICAgICAgIHZhciBvYyA9IHt9O1xuICAgICAgICAgIGlmICh0eXBlb2Ygci5pZGVhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG9jW2tleV0gPSB7bWluOiByLmlkZWFsLCBtYXg6IHIuaWRlYWx9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvY1trZXldID0gci5pZGVhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy5hZHZhbmNlZC5wdXNoKG9jKTtcbiAgICAgICAgICBkZWxldGUgci5pZGVhbDtcbiAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHIpLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIGNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHJlcXVpcmUubGVuZ3RoKSB7XG4gICAgICAgIGMucmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYztcbiAgICB9O1xuICAgIGNvbnN0cmFpbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHtcbiAgICAgIGxvZ2dpbmcoJ3NwZWM6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgICAgaWYgKGNvbnN0cmFpbnRzLmF1ZGlvKSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLmF1ZGlvID0gY29uc3RyYWludHNUb0ZGMzdfKGNvbnN0cmFpbnRzLmF1ZGlvKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25zdHJhaW50cy52aWRlbykge1xuICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9GRjM3Xyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdmZjM3OiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcik7XG4gIH07XG5cbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYV87XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGdldFVzZXJNZWRpYSBhcyBhIFByb21pc2UuXG4gIHZhciBnZXRVc2VyTWVkaWFQcm9taXNlXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBTaGltIGZvciBtZWRpYURldmljZXMgb24gb2xkZXIgdmVyc2lvbnMuXG4gIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMgPSB7Z2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWFQcm9taXNlXyxcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7IH1cbiAgICB9O1xuICB9XG4gIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyA9XG4gICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgdmFyIGluZm9zID0gW1xuICAgICAgICAgICAge2tpbmQ6ICdhdWRpb2lucHV0JywgZGV2aWNlSWQ6ICdkZWZhdWx0JywgbGFiZWw6ICcnLCBncm91cElkOiAnJ30sXG4gICAgICAgICAgICB7a2luZDogJ3ZpZGVvaW5wdXQnLCBkZXZpY2VJZDogJ2RlZmF1bHQnLCBsYWJlbDogJycsIGdyb3VwSWQ6ICcnfVxuICAgICAgICAgIF07XG4gICAgICAgICAgcmVzb2x2ZShpbmZvcyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDQxKSB7XG4gICAgLy8gV29yayBhcm91bmQgaHR0cDovL2J1Z3ppbC5sYS8xMTY5NjY1XG4gICAgdmFyIG9yZ0VudW1lcmF0ZURldmljZXMgPVxuICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBvcmdFbnVtZXJhdGVEZXZpY2VzKCkudGhlbih1bmRlZmluZWQsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ05vdEZvdW5kRXJyb3InKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG52YXIgc2FmYXJpU2hpbSA9IHtcbiAgLy8gVE9ETzogRHJBbGV4LCBzaG91bGQgYmUgaGVyZSwgZG91YmxlIGNoZWNrIGFnYWluc3QgTGF5b3V0VGVzdHNcbiAgLy8gc2hpbU9uVHJhY2s6IGZ1bmN0aW9uKCkgeyB9LFxuXG4gIC8vIFRPRE86IERyQWxleFxuICAvLyBhdHRhY2hNZWRpYVN0cmVhbTogZnVuY3Rpb24oZWxlbWVudCwgc3RyZWFtKSB7IH0sXG4gIC8vIHJlYXR0YWNoTWVkaWFTdHJlYW06IGZ1bmN0aW9uKHRvLCBmcm9tKSB7IH0sXG5cbiAgLy8gVE9ETzogb25jZSB0aGUgYmFjay1lbmQgZm9yIHRoZSBtYWMgcG9ydCBpcyBkb25lLCBhZGQuXG4gIC8vIFRPRE86IGNoZWNrIGZvciB3ZWJraXRHVEsrXG4gIC8vIHNoaW1QZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24oKSB7IH0sXG5cbiAgc2hpbUdldFVzZXJNZWRpYTogZnVuY3Rpb24oKSB7XG4gICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWE7XG4gIH1cbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaGltR2V0VXNlck1lZGlhOiBzYWZhcmlTaGltLnNoaW1HZXRVc2VyTWVkaWFcbiAgLy8gVE9ET1xuICAvLyBzaGltT25UcmFjazogc2FmYXJpU2hpbS5zaGltT25UcmFjayxcbiAgLy8gc2hpbVBlZXJDb25uZWN0aW9uOiBzYWZhcmlTaGltLnNoaW1QZWVyQ29ubmVjdGlvbixcbiAgLy8gYXR0YWNoTWVkaWFTdHJlYW06IHNhZmFyaVNoaW0uYXR0YWNoTWVkaWFTdHJlYW0sXG4gIC8vIHJlYXR0YWNoTWVkaWFTdHJlYW06IHNhZmFyaVNoaW0ucmVhdHRhY2hNZWRpYVN0cmVhbVxufTtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuIC8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nRGlzYWJsZWRfID0gZmFsc2U7XG5cbi8vIFV0aWxpdHkgbWV0aG9kcy5cbnZhciB1dGlscyA9IHtcbiAgZGlzYWJsZUxvZzogZnVuY3Rpb24oYm9vbCkge1xuICAgIGlmICh0eXBlb2YgYm9vbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdBcmd1bWVudCB0eXBlOiAnICsgdHlwZW9mIGJvb2wgK1xuICAgICAgICAgICcuIFBsZWFzZSB1c2UgYSBib29sZWFuLicpO1xuICAgIH1cbiAgICBsb2dEaXNhYmxlZF8gPSBib29sO1xuICAgIHJldHVybiAoYm9vbCkgPyAnYWRhcHRlci5qcyBsb2dnaW5nIGRpc2FibGVkJyA6XG4gICAgICAgICdhZGFwdGVyLmpzIGxvZ2dpbmcgZW5hYmxlZCc7XG4gIH0sXG5cbiAgbG9nOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChsb2dEaXNhYmxlZF8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5sb2cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgYnJvd3NlciB2ZXJzaW9uIG91dCBvZiB0aGUgcHJvdmlkZWQgdXNlciBhZ2VudCBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gdWFzdHJpbmcgdXNlckFnZW50IHN0cmluZy5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBleHByIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIGFzIG1hdGNoIGNyaXRlcmlhLlxuICAgKiBAcGFyYW0geyFudW1iZXJ9IHBvcyBwb3NpdGlvbiBpbiB0aGUgdmVyc2lvbiBzdHJpbmcgdG8gYmUgcmV0dXJuZWQuXG4gICAqIEByZXR1cm4geyFudW1iZXJ9IGJyb3dzZXIgdmVyc2lvbi5cbiAgICovXG4gIGV4dHJhY3RWZXJzaW9uOiBmdW5jdGlvbih1YXN0cmluZywgZXhwciwgcG9zKSB7XG4gICAgdmFyIG1hdGNoID0gdWFzdHJpbmcubWF0Y2goZXhwcik7XG4gICAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+PSBwb3MgJiYgcGFyc2VJbnQobWF0Y2hbcG9zXSwgMTApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCcm93c2VyIGRldGVjdG9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHJlc3VsdCBjb250YWluaW5nIGJyb3dzZXIsIHZlcnNpb24gYW5kIG1pblZlcnNpb25cbiAgICogICAgIHByb3BlcnRpZXMuXG4gICAqL1xuICBkZXRlY3RCcm93c2VyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBSZXR1cm5lZCByZXN1bHQgb2JqZWN0LlxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICByZXN1bHQuYnJvd3NlciA9IG51bGw7XG4gICAgcmVzdWx0LnZlcnNpb24gPSBudWxsO1xuICAgIHJlc3VsdC5taW5WZXJzaW9uID0gbnVsbDtcblxuICAgIC8vIEZhaWwgZWFybHkgaWYgaXQncyBub3QgYSBicm93c2VyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBicm93c2VyLic7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEZpcmVmb3guXG4gICAgaWYgKG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEpIHtcbiAgICAgIHJlc3VsdC5icm93c2VyID0gJ2ZpcmVmb3gnO1xuICAgICAgcmVzdWx0LnZlcnNpb24gPSB0aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgL0ZpcmVmb3hcXC8oWzAtOV0rKVxcLi8sIDEpO1xuICAgICAgcmVzdWx0Lm1pblZlcnNpb24gPSAzMTtcblxuICAgIC8vIGFsbCB3ZWJraXQtYmFzZWQgYnJvd3NlcnNcbiAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEpIHtcbiAgICAgIC8vIENocm9tZSwgQ2hyb21pdW0sIFdlYnZpZXcsIE9wZXJhLCBhbGwgdXNlIHRoZSBjaHJvbWUgc2hpbSBmb3Igbm93XG4gICAgICBpZiAod2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdC5icm93c2VyID0gJ2Nocm9tZSc7XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gdGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgIC9DaHJvbShlfGl1bSlcXC8oWzAtOV0rKVxcLi8sIDIpO1xuICAgICAgICByZXN1bHQubWluVmVyc2lvbiA9IDM4O1xuXG4gICAgICAvLyBTYWZhcmkgb3IgdW5rbm93biB3ZWJraXQtYmFzZWRcbiAgICAgIC8vIGZvciB0aGUgdGltZSBiZWluZyBTYWZhcmkgaGFzIHN1cHBvcnQgZm9yIE1lZGlhU3RyZWFtcyBidXQgbm90IHdlYlJUQ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2FmYXJpIFVBIHN1YnN0cmluZ3Mgb2YgaW50ZXJlc3QgZm9yIHJlZmVyZW5jZTpcbiAgICAgICAgLy8gLSB3ZWJraXQgdmVyc2lvbjogICAgICAgICAgIEFwcGxlV2ViS2l0LzYwMi4xLjI1IChhbHNvIHVzZWQgaW4gT3AsQ3IpXG4gICAgICAgIC8vIC0gc2FmYXJpIFVJIHZlcnNpb246ICAgICAgICBWZXJzaW9uLzkuMC4zICh1bmlxdWUgdG8gU2FmYXJpKVxuICAgICAgICAvLyAtIHNhZmFyaSBVSSB3ZWJraXQgdmVyc2lvbjogU2FmYXJpLzYwMS40LjQgKGFsc28gdXNlZCBpbiBPcCxDcilcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaWYgdGhlIHdlYmtpdCB2ZXJzaW9uIGFuZCBzYWZhcmkgVUkgd2Via2l0IHZlcnNpb25zIGFyZSBlcXVhbHMsXG4gICAgICAgIC8vIC4uLiB0aGlzIGlzIGEgc3RhYmxlIHZlcnNpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIG9ubHkgdGhlIGludGVybmFsIHdlYmtpdCB2ZXJzaW9uIGlzIGltcG9ydGFudCB0b2RheSB0byBrbm93IGlmXG4gICAgICAgIC8vIG1lZGlhIHN0cmVhbXMgYXJlIHN1cHBvcnRlZFxuICAgICAgICAvL1xuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVmVyc2lvblxcLyhcXGQrKS4oXFxkKykvKSkge1xuICAgICAgICAgIHJlc3VsdC5icm93c2VyID0gJ3NhZmFyaSc7XG4gICAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB0aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAvQXBwbGVXZWJLaXRcXC8oWzAtOV0rKVxcLi8sIDEpO1xuICAgICAgICAgIHJlc3VsdC5taW5WZXJzaW9uID0gNjAyO1xuXG4gICAgICAgIC8vIHVua25vd24gd2Via2l0LWJhc2VkIGJyb3dzZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuYnJvd3NlciA9ICdVbnN1cHBvcnRlZCB3ZWJraXQtYmFzZWQgYnJvd3NlciAnICtcbiAgICAgICAgICAgICAgJ3dpdGggR1VNIHN1cHBvcnQgYnV0IG5vIFdlYlJUQyBzdXBwb3J0Lic7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gRWRnZS5cbiAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS4oXFxkKykkLykpIHtcbiAgICAgIHJlc3VsdC5icm93c2VyID0gJ2VkZ2UnO1xuICAgICAgcmVzdWx0LnZlcnNpb24gPSB0aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgL0VkZ2VcXC8oXFxkKykuKFxcZCspJC8sIDIpO1xuICAgICAgcmVzdWx0Lm1pblZlcnNpb24gPSAxMDU0NztcblxuICAgIC8vIERlZmF1bHQgZmFsbHRocm91Z2g6IG5vdCBzdXBwb3J0ZWQuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5icm93c2VyID0gJ05vdCBhIHN1cHBvcnRlZCBicm93c2VyLic7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIFdhcm4gaWYgdmVyc2lvbiBpcyBsZXNzIHRoYW4gbWluVmVyc2lvbi5cbiAgICBpZiAocmVzdWx0LnZlcnNpb24gPCByZXN1bHQubWluVmVyc2lvbikge1xuICAgICAgdXRpbHMubG9nKCdCcm93c2VyOiAnICsgcmVzdWx0LmJyb3dzZXIgKyAnIFZlcnNpb246ICcgKyByZXN1bHQudmVyc2lvbiArXG4gICAgICAgICAgJyA8IG1pbmltdW0gc3VwcG9ydGVkIHZlcnNpb246ICcgKyByZXN1bHQubWluVmVyc2lvbiArXG4gICAgICAgICAgJ1xcbiBzb21lIHRoaW5ncyBtaWdodCBub3Qgd29yayEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG4vLyBFeHBvcnQuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nOiB1dGlscy5sb2csXG4gIGRpc2FibGVMb2c6IHV0aWxzLmRpc2FibGVMb2csXG4gIGJyb3dzZXJEZXRhaWxzOiB1dGlscy5kZXRlY3RCcm93c2VyKCksXG4gIGV4dHJhY3RWZXJzaW9uOiB1dGlscy5leHRyYWN0VmVyc2lvblxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlLWV2ZW50LWVtaXR0ZXInKTtcbnZhciBEaXlhU2VsZWN0b3IgPSByZXF1aXJlKCcuL0RpeWFTZWxlY3Rvci5qcycpLkRpeWFTZWxlY3RvcjtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5kYnVzT2JqZWN0ID0gZnVuY3Rpb24gKHNlcnZpY2UsIHBhdGgsIHBhcnRpYWxPYmplY3QsIHNpZ25hbHMpIHtcblx0dmFyIF90aGlzID0gdGhpcztcblxuXHR2YXIgb2JqZWN0cyA9IFtdO1xuXG5cdHRoaXMuZWFjaChmdW5jdGlvbiAocGVlcklkKSB7XG5cdFx0dmFyIHN0b3JlID0gX3RoaXMuX2Nvbm5lY3Rpb24uc3RvcmUuZ2V0KHBlZXJJZCk7XG5cdFx0aWYgKHN0b3JlLmdldCgnZGJ1cycpID09IG51bGwpIHtcblx0XHRcdHN0b3JlLnNldCgnZGJ1cycsIG5ldyBNYXAoKSk7XG5cdFx0fVxuXHRcdHZhciBkYnVzID0gc3RvcmUuZ2V0KCdkYnVzJyk7XG5cblx0XHRpZiAoZGJ1cy5nZXQoc2VydmljZSkgPT0gbnVsbCkge1xuXHRcdFx0ZGJ1cy5zZXQoc2VydmljZSwgbmV3IE1hcCgpKTtcblx0XHR9XG5cdFx0dmFyIGRidXNTZXJ2aWNlID0gZGJ1cy5nZXQoc2VydmljZSk7XG5cblx0XHRpZiAoZGJ1c1NlcnZpY2UuZ2V0KHBhdGgpID09IG51bGwpIHtcblx0XHRcdGRidXNTZXJ2aWNlLnNldChwYXRoLCBuZXcgREJ1c09iamVjdEhhbmRsZXIoX3RoaXMuX2Nvbm5lY3Rpb24uX2QxaW5zdCwgcGVlcklkLCBzZXJ2aWNlLCBwYXRoLCBzaWduYWxzKSk7XG5cdFx0fVxuXHRcdHZhciBvYmplY3QgPSBkYnVzU2VydmljZS5nZXQocGF0aCk7XG5cblx0XHRvYmplY3QuaW1wb3J0UGFydGlhbE9iamVjdChwYXJ0aWFsT2JqZWN0KTtcblx0XHRvYmplY3QuaW1wb3J0U2lnbmFscyhzaWduYWxzKTtcblxuXHRcdG9iamVjdHMucHVzaChvYmplY3QpO1xuXHR9KTtcblxuXHRyZXR1cm4gb2JqZWN0cztcbn07XG5cbnZhciBEQnVzT2JqZWN0SGFuZGxlciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG5cdF9pbmhlcml0cyhEQnVzT2JqZWN0SGFuZGxlciwgX0V2ZW50RW1pdHRlcik7XG5cblx0ZnVuY3Rpb24gREJ1c09iamVjdEhhbmRsZXIoZDFpbnN0LCBwZWVySWQsIHNlcnZpY2UsIHBhdGgsIHNpZ25hbHMpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgREJ1c09iamVjdEhhbmRsZXIpO1xuXG5cdFx0dmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEQnVzT2JqZWN0SGFuZGxlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERCdXNPYmplY3RIYW5kbGVyKSkuY2FsbCh0aGlzKSk7XG5cblx0XHRfdGhpczIub2JqUGF0aCA9IHBhdGg7XG5cdFx0X3RoaXMyLnNlcnZpY2UgPSBzZXJ2aWNlO1xuXHRcdF90aGlzMi5fc2lnbmFscyA9IHNpZ25hbHM7XG5cdFx0X3RoaXMyLl9kMWluc3QgPSBkMWluc3Q7XG5cdFx0X3RoaXMyLl9wZWVySWQgPSBwZWVySWQ7XG5cblx0XHRfdGhpczIuX2dldEFsbERvbmUgPSB7fTtcblx0XHRyZXR1cm4gX3RoaXMyO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKERCdXNPYmplY3RIYW5kbGVyLCBbe1xuXHRcdGtleTogJ2Nsb3NlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG5cdFx0XHRpZiAodGhpcy5fc3ViUHJvcGVydGllcyAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX3N1YlByb3BlcnRpZXMuY2xvc2UoKTtcblx0XHRcdFx0dGhpcy5fc3ViUHJvcGVydGllcyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnaW1wb3J0UGFydGlhbE9iamVjdCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGltcG9ydFBhcnRpYWxPYmplY3QocGFydGlhbE9iamVjdCkge1xuXHRcdFx0aWYgKHBhcnRpYWxPYmplY3QgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGlmYWNlIGluIHBhcnRpYWxPYmplY3QpIHtcblx0XHRcdFx0dGhpcy5fb25Qcm9wZXJ0aWVzQ2hhbmdlZChbaWZhY2UsIHBhcnRpYWxPYmplY3RbaWZhY2VdLCBbXV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2ltcG9ydFNpZ25hbHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpbXBvcnRTaWduYWxzKHNpZ25hbHMpIHtcblx0XHRcdGlmIChzaWduYWxzID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc2lnbmFscyA9IHNpZ25hbHM7XG5cdFx0XHR0aGlzLnN1YnNjcmliZVRvU2lnbmFscygpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NhbGwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjYWxsKG1ldGhvZCwgYXJncywgY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZmFjZSA9IG1ldGhvZC5zcGxpdCgnLicpO1xuXHRcdFx0bWV0aG9kID0gaWZhY2VbaWZhY2UubGVuZ3RoIC0gMV07XG5cdFx0XHRpZmFjZS5wb3AoKTtcblx0XHRcdGlmYWNlID0gaWZhY2Uuam9pbignLicpO1xuXG5cdFx0XHR0aGlzLl9kMWluc3QodGhpcy5fcGVlcklkKS5yZXF1ZXN0KHtcblx0XHRcdFx0c2VydmljZTogdGhpcy5zZXJ2aWNlLFxuXHRcdFx0XHRmdW5jOiBtZXRob2QsXG5cdFx0XHRcdG9iajoge1xuXHRcdFx0XHRcdHBhdGg6IHRoaXMub2JqUGF0aCxcblx0XHRcdFx0XHRpbnRlcmZhY2U6IGlmYWNlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IGFyZ3Ncblx0XHRcdH0sIGNhbGxiYWNrKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXQoaWZhY2UsIHByb3BOYW1lKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0dGhpcy5fZDFpbnN0KHRoaXMuX3BlZXJJZCkucmVxdWVzdCh7XG5cdFx0XHRcdHNlcnZpY2U6IHRoaXMuc2VydmljZSxcblx0XHRcdFx0ZnVuYzogJ0dldCcsXG5cdFx0XHRcdG9iajoge1xuXHRcdFx0XHRcdGludGVyZmFjZTogJ29yZy5mcmVlZGVza3RvcC5EQnVzLlByb3BlcnRpZXMnLFxuXHRcdFx0XHRcdHBhdGg6IHRoaXMub2JqUGF0aFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0aW50ZXJmYWNlOiBpZmFjZSwgLy9zeXN0ZW1kIGRldnMgYXJlIGZ1Y2t0YXJkIHRoYXQgZG9uJ3QgZm9sbG93IHRoZWlyIG93biBmdWNraW5nIHN0YW5kYXJkICFcblx0XHRcdFx0XHRpbnRlcmZhY2VfbmFtZTogaWZhY2UsXG5cdFx0XHRcdFx0cHJvcGVydHk6IHByb3BOYW1lXG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0Ly9UT0RPIDogaGFuZGxlIGVycm9yXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciByZXMgPSB7fTtcblx0XHRcdFx0XHRyZXNbcHJvcE5hbWVdID0gZGF0YTtcblx0XHRcdFx0XHRfdGhpczMuX29uR2V0QWxsKGlmYWNlLCByZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRBbGwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRBbGwoaWZhY2UsIGZvcmNlKSB7XG5cdFx0XHR2YXIgX3RoaXM0ID0gdGhpcztcblxuXHRcdFx0Ly9ieSBkZWZhdWx0LCBwcmV2ZW50IG9uZSB0byBydW4gZ2V0IGFsbCBtb3JlIHRoYW4gb25jZSAodGhhdCBzaG91bGRuJ3QgYmUgdXNlZnVsIGlmIFByb3BlcnRpZXNDaGFuZ2VkIGRvZXMgaXRzIGpvYlxuXHRcdFx0aWYgKCFmb3JjZSAmJiB0aGlzLl9nZXRBbGxEb25lW2lmYWNlXSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9nZXRBbGxEb25lW2lmYWNlXSA9IHRydWU7XG5cblx0XHRcdHRoaXMuX2QxaW5zdCh0aGlzLl9wZWVySWQpLnJlcXVlc3Qoe1xuXHRcdFx0XHRzZXJ2aWNlOiB0aGlzLnNlcnZpY2UsXG5cdFx0XHRcdGZ1bmM6ICdHZXRBbGwnLFxuXHRcdFx0XHRvYmo6IHtcblx0XHRcdFx0XHRpbnRlcmZhY2U6ICdvcmcuZnJlZWRlc2t0b3AuREJ1cy5Qcm9wZXJ0aWVzJyxcblx0XHRcdFx0XHRwYXRoOiB0aGlzLm9ialBhdGhcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdGludGVyZmFjZTogaWZhY2UsIC8vc3lzdGVtZCBkZXZzIGFyZSBmdWNrdGFyZCB0aGF0IGRvbid0IGZvbGxvdyB0aGVpciBvd24gZnVja2luZyBzdGFuZGFyZCAhXG5cdFx0XHRcdFx0aW50ZXJmYWNlX25hbWU6IGlmYWNlXG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0Ly9UT0RPIDogaGFuZGxlIGVycm9yXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF90aGlzNC5fb25HZXRBbGwoaWZhY2UsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25HZXRBbGwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25HZXRBbGwoaWZhY2UsIGRhdGEpIHtcblx0XHRcdGlmIChkYXRhID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9vblByb3BlcnRpZXNDaGFuZ2VkKFtpZmFjZSwgZGF0YSwgW11dKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdpbml0UHJvcGVydGllc0NoYW5nZWRTaWduYWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0UHJvcGVydGllc0NoYW5nZWRTaWduYWwoKSB7XG5cdFx0XHR2YXIgX3RoaXM1ID0gdGhpcztcblxuXHRcdFx0aWYgKHRoaXMuX3N1YlByb3BlcnRpZXMgIT0gbnVsbCkgcmV0dXJuO1xuXHRcdFx0dGhpcy5fc3ViUHJvcGVydGllcyA9IHRoaXMuX2QxaW5zdCh0aGlzLl9wZWVySWQpLnN1YnNjcmliZSh7XG5cdFx0XHRcdHNlcnZpY2U6IHRoaXMuc2VydmljZSxcblx0XHRcdFx0ZnVuYzogJ1Byb3BlcnRpZXNDaGFuZ2VkJyxcblx0XHRcdFx0b2JqOiB7XG5cdFx0XHRcdFx0aW50ZXJmYWNlOiAnb3JnLmZyZWVkZXNrdG9wLkRCdXMuUHJvcGVydGllcycsXG5cdFx0XHRcdFx0cGF0aDogdGhpcy5vYmpQYXRoXG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0Ly9UT0RPIDogaGFuZGxlIGVycm9yXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3RoaXM1Ll9vblByb3BlcnRpZXNDaGFuZ2VkKGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25Qcm9wZXJ0aWVzQ2hhbmdlZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9vblByb3BlcnRpZXNDaGFuZ2VkKGRhdGEpIHtcblx0XHRcdHZhciBfdGhpczYgPSB0aGlzO1xuXG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgfHwgZGF0YS5sZW5ndGggIT09IDMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaWZhY2UgPSBkYXRhWzBdO1xuXHRcdFx0dmFyIGNoYW5nZWRQcm9wZXJ0aWVzID0gZGF0YVsxXTtcblx0XHRcdHZhciBpbnZhbGlkYXRlZFByb3BlcnRpZXMgPSBkYXRhWzJdO1xuXG5cdFx0XHR2YXIgc2ltcGxlSWZhY2UgPSBpZmFjZS5zcGxpdCgnLicpO1xuXHRcdFx0c2ltcGxlSWZhY2UgPSBzaW1wbGVJZmFjZVtzaW1wbGVJZmFjZS5sZW5ndGggLSAxXTtcblxuXHRcdFx0aWYgKHRoaXNbc2ltcGxlSWZhY2VdID09IG51bGwpIHtcblx0XHRcdFx0dGhpc1tzaW1wbGVJZmFjZV0gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgcHJvcE5hbWUgaW4gY2hhbmdlZFByb3BlcnRpZXMpIHtcblx0XHRcdFx0dGhpc1tzaW1wbGVJZmFjZV1bcHJvcE5hbWVdID0gY2hhbmdlZFByb3BlcnRpZXNbcHJvcE5hbWVdO1xuXHRcdFx0fVxuXG5cdFx0XHRpbnZhbGlkYXRlZFByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcblx0XHRcdFx0X3RoaXM2W3NpbXBsZUlmYWNlXVtwcm9wTmFtZV0gPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZW1pdCgncHJvcGVydGllcy1jaGFuZ2VkJywgc2ltcGxlSWZhY2UsIGNoYW5nZWRQcm9wZXJ0aWVzLCBpbnZhbGlkYXRlZFByb3BlcnRpZXMpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3N1YnNjcmliZVRvU2lnbmFscycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZVRvU2lnbmFscygpIHtcblx0XHRcdHZhciBfdGhpczcgPSB0aGlzO1xuXG5cdFx0XHRpZiAodGhpcy5fc2lnbmFscyA9PSBudWxsKSByZXR1cm47XG5cdFx0XHRpZiAodGhpcy5fc3Vic2NyaXB0aW9ucyA9PSBudWxsKSB0aGlzLl9zdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuXHRcdFx0dGhpcy5fc2lnbmFscy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdFx0aWYgKF90aGlzNy5fc3Vic2NyaXB0aW9ucy5nZXQob2JqLmlkKSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS53YXJuKGBBbHJlYWR5IHN1YnNjcmliZWQsIHNpZ25hbCAke29iai5pZH1gKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSAvLyByZWZ1c2UgZHVwbGljYXRlIHN1YnNjcmlwdGlvbnNcblx0XHRcdFx0dmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzNy5fZDFpbnN0KF90aGlzNy5fcGVlcklkKS5zdWJzY3JpYmUoe1xuXHRcdFx0XHRcdHNlcnZpY2U6IF90aGlzNy5zZXJ2aWNlLFxuXHRcdFx0XHRcdGZ1bmM6IG9iai5uYW1lLFxuXHRcdFx0XHRcdG9iajoge1xuXHRcdFx0XHRcdFx0aW50ZXJmYWNlOiBvYmouaWZhY2UsXG5cdFx0XHRcdFx0XHRwYXRoOiBvYmoub2JqZWN0UGF0aFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBkYXRhKSB7XG5cdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcignc3Vic2NyaWJlVG9TaWduYWxzJywgb2JqLCBlcnIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRfdGhpczcuZW1pdChvYmouaWQsIEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhWzBdIDogZGF0YSk7IC8vIGV2ZW50ICdpZCcgaXMgZW1pdHRlZCBpbnN0ZWFkIG9mICduYW1lJyBiZWNhdXNlIHNpZ25hbCdzIG5hbWVzIG1heSBiZSBkdXBsaWNhdGVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF90aGlzNy5fc3Vic2NyaXB0aW9ucy5zZXQob2JqLmlkLCBzdWJzY3JpcHRpb24pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIERCdXNPYmplY3RIYW5kbGVyO1xufShFdmVudEVtaXR0ZXIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtSQ2RYTlBZbXBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHNpUlhabGJuUkZiV2wwZEdWeUlpd2ljbVZ4ZFdseVpTSXNJa1JwZVdGVFpXeGxZM1J2Y2lJc0luQnliM1J2ZEhsd1pTSXNJbVJpZFhOUFltcGxZM1FpTENKelpYSjJhV05sSWl3aWNHRjBhQ0lzSW5CaGNuUnBZV3hQWW1wbFkzUWlMQ0p6YVdkdVlXeHpJaXdpYjJKcVpXTjBjeUlzSW1WaFkyZ2lMQ0p6ZEc5eVpTSXNJbDlqYjI1dVpXTjBhVzl1SWl3aVoyVjBJaXdpY0dWbGNrbGtJaXdpYzJWMElpd2lUV0Z3SWl3aVpHSjFjeUlzSW1SaWRYTlRaWEoyYVdObElpd2lSRUoxYzA5aWFtVmpkRWhoYm1Sc1pYSWlMQ0pmWkRGcGJuTjBJaXdpYjJKcVpXTjBJaXdpYVcxd2IzSjBVR0Z5ZEdsaGJFOWlhbVZqZENJc0ltbHRjRzl5ZEZOcFoyNWhiSE1pTENKd2RYTm9JaXdpWkRGcGJuTjBJaXdpYjJKcVVHRjBhQ0lzSWw5emFXZHVZV3h6SWl3aVgzQmxaWEpKWkNJc0lsOW5aWFJCYkd4RWIyNWxJaXdpWDNOMVlsQnliM0JsY25ScFpYTWlMQ0pqYkc5elpTSXNJbWxtWVdObElpd2lYMjl1VUhKdmNHVnlkR2xsYzBOb1lXNW5aV1FpTENKemRXSnpZM0pwWW1WVWIxTnBaMjVoYkhNaUxDSnRaWFJvYjJRaUxDSmhjbWR6SWl3aVkyRnNiR0poWTJzaUxDSnpjR3hwZENJc0lteGxibWQwYUNJc0luQnZjQ0lzSW1wdmFXNGlMQ0p5WlhGMVpYTjBJaXdpWm5WdVl5SXNJbTlpYWlJc0ltbHVkR1Z5Wm1GalpTSXNJbVJoZEdFaUxDSndjbTl3VG1GdFpTSXNJbWx1ZEdWeVptRmpaVjl1WVcxbElpd2ljSEp2Y0dWeWRIa2lMQ0psY25JaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSnlaWE1pTENKZmIyNUhaWFJCYkd3aUxDSm1iM0pqWlNJc0luTjFZbk5qY21saVpTSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbU5vWVc1blpXUlFjbTl3WlhKMGFXVnpJaXdpYVc1MllXeHBaR0YwWldSUWNtOXdaWEowYVdWeklpd2ljMmx0Y0d4bFNXWmhZMlVpTENKbWIzSkZZV05vSWl3aVpXMXBkQ0lzSWw5emRXSnpZM0pwY0hScGIyNXpJaXdpYVdRaUxDSnpkV0p6WTNKcGNIUnBiMjRpTENKdVlXMWxJaXdpYjJKcVpXTjBVR0YwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN1FVRkZRU3hKUVVGSlFTeGxRVUZsUXl4UlFVRlJMRzlDUVVGU0xFTkJRVzVDTzBGQlEwRXNTVUZCU1VNc1pVRkJaVVFzVVVGQlVTeHRRa0ZCVWl4RlFVRTJRa01zV1VGQmFFUTdPMEZCUlVGQkxHRkJRV0ZETEZOQlFXSXNRMEZCZFVKRExGVkJRWFpDTEVkQlFXOURMRlZCUVZWRExFOUJRVllzUlVGQmJVSkRMRWxCUVc1Q0xFVkJRWGxDUXl4aFFVRjZRaXhGUVVGM1EwTXNUMEZCZUVNc1JVRkJhVVE3UVVGQlFUczdRVUZEY0VZc1MwRkJTVU1zVlVGQlZTeEZRVUZrT3p0QlFVVkJMRTFCUVV0RExFbEJRVXdzUTBGQlZTeHJRa0ZCVlR0QlFVTnVRaXhOUVVGSlF5eFJRVUZSTEUxQlFVdERMRmRCUVV3c1EwRkJhVUpFTEV0QlFXcENMRU5CUVhWQ1JTeEhRVUYyUWl4RFFVRXlRa01zVFVGQk0wSXNRMEZCV2p0QlFVTkJMRTFCUVVsSUxFMUJRVTFGTEVkQlFVNHNRMEZCVlN4TlFVRldMRXRCUVhGQ0xFbEJRWHBDTEVWQlFTdENPMEZCUXpsQ1JpeFRRVUZOU1N4SFFVRk9MRU5CUVZVc1RVRkJWaXhGUVVGclFpeEpRVUZKUXl4SFFVRktMRVZCUVd4Q08wRkJRMEU3UVVGRFJDeE5RVUZKUXl4UFFVRlBUaXhOUVVGTlJTeEhRVUZPTEVOQlFWVXNUVUZCVml4RFFVRllPenRCUVVWQkxFMUJRVWxKTEV0QlFVdEtMRWRCUVV3c1EwRkJVMUlzVDBGQlZDeExRVUZ4UWl4SlFVRjZRaXhGUVVFclFqdEJRVU01UWxrc1VVRkJTMFlzUjBGQlRDeERRVUZUVml4UFFVRlVMRVZCUVd0Q0xFbEJRVWxYTEVkQlFVb3NSVUZCYkVJN1FVRkRRVHRCUVVORUxFMUJRVWxGTEdOQlFXTkVMRXRCUVV0S0xFZEJRVXdzUTBGQlUxSXNUMEZCVkN4RFFVRnNRanM3UVVGRlFTeE5RVUZKWVN4WlFVRlpUQ3hIUVVGYUxFTkJRV2RDVUN4SlFVRm9RaXhMUVVGNVFpeEpRVUUzUWl4RlFVRnRRenRCUVVOc1Exa3NaVUZCV1Vnc1IwRkJXaXhEUVVGblFsUXNTVUZCYUVJc1JVRkJjMElzU1VGQlNXRXNhVUpCUVVvc1EwRkJjMElzVFVGQlMxQXNWMEZCVEN4RFFVRnBRbEVzVDBGQmRrTXNSVUZCWjBST0xFMUJRV2hFTEVWQlFYZEVWQ3hQUVVGNFJDeEZRVUZwUlVNc1NVRkJha1VzUlVGQmRVVkZMRTlCUVhaRkxFTkJRWFJDTzBGQlEwRTdRVUZEUkN4TlFVRkpZU3hUUVVGVFNDeFpRVUZaVEN4SFFVRmFMRU5CUVdkQ1VDeEpRVUZvUWl4RFFVRmlPenRCUVVWQlpTeFRRVUZQUXl4dFFrRkJVQ3hEUVVFeVFtWXNZVUZCTTBJN1FVRkRRV01zVTBGQlQwVXNZVUZCVUN4RFFVRnhRbVlzVDBGQmNrSTdPMEZCUlVGRExGVkJRVkZsTEVsQlFWSXNRMEZCWVVnc1RVRkJZanRCUVVOQkxFVkJja0pFT3p0QlFYVkNRU3hSUVVGUFdpeFBRVUZRTzBGQlEwRXNRMEV6UWtRN08wbEJOa0pOVlN4cFFqczdPMEZCUlV3c05FSkJRV0ZOTEUxQlFXSXNSVUZCY1VKWUxFMUJRWEpDTEVWQlFUWkNWQ3hQUVVFM1FpeEZRVUZ6UTBNc1NVRkJkRU1zUlVGQk5FTkZMRTlCUVRWRExFVkJRWEZFTzBGQlFVRTdPMEZCUVVFN08wRkJSM0JFTEZOQlFVdHJRaXhQUVVGTUxFZEJRV1Z3UWl4SlFVRm1PMEZCUTBFc1UwRkJTMFFzVDBGQlRDeEhRVUZsUVN4UFFVRm1PMEZCUTBFc1UwRkJTM05DTEZGQlFVd3NSMEZCWjBKdVFpeFBRVUZvUWp0QlFVTkJMRk5CUVV0WkxFOUJRVXdzUjBGQlpVc3NUVUZCWmp0QlFVTkJMRk5CUVV0SExFOUJRVXdzUjBGQlpXUXNUVUZCWmpzN1FVRkZRU3hUUVVGTFpTeFhRVUZNTEVkQlFXMUNMRVZCUVc1Q08wRkJWRzlFTzBGQlZYQkVPenM3T3pCQ1FVVlJPMEZCUTFJc1QwRkJTU3hMUVVGTFF5eGpRVUZNTEVsQlFYVkNMRWxCUVROQ0xFVkJRV2xETzBGQlEyaERMRk5CUVV0QkxHTkJRVXdzUTBGQmIwSkRMRXRCUVhCQ08wRkJRMEVzVTBGQlMwUXNZMEZCVEN4SFFVRnpRaXhKUVVGMFFqdEJRVU5CTzBGQlEwUTdPenR6UTBGRmIwSjJRaXhoTEVWQlFXVTdRVUZEYmtNc1QwRkJTVUVzYVVKQlFXbENMRWxCUVhKQ0xFVkJRVEpDTzBGQlF6RkNPMEZCUTBFN08wRkJSVVFzVVVGQlN5eEpRVUZKZVVJc1MwRkJWQ3hKUVVGclFucENMR0ZCUVd4Q0xFVkJRV2xETzBGQlEyaERMRk5CUVVzd1FpeHZRa0ZCVEN4RFFVRXlRaXhEUVVGRFJDeExRVUZFTEVWQlFWRjZRaXhqUVVGamVVSXNTMEZCWkN4RFFVRlNMRVZCUVRoQ0xFVkJRVGxDTEVOQlFUTkNPMEZCUTBFN1FVRkRSRHM3TzJkRFFVVmplRUlzVHl4RlFVRlRPMEZCUTNaQ0xFOUJRVWxCTEZkQlFWY3NTVUZCWml4RlFVRnhRanRCUVVOd1FqdEJRVU5CTzBGQlEwUXNVVUZCUzIxQ0xGRkJRVXdzUjBGQlowSnVRaXhQUVVGb1FqdEJRVU5CTEZGQlFVc3dRaXhyUWtGQlREdEJRVU5CT3pzN2RVSkJSVXRETEUwc1JVRkJVVU1zU1N4RlFVRk5ReXhSTEVWQlFWVTdRVUZETjBJc1QwRkJTVXdzVVVGQlVVY3NUMEZCVDBjc1MwRkJVQ3hEUVVGaExFZEJRV0lzUTBGQldqdEJRVU5CU0N4WlFVRlRTQ3hOUVVGTlFTeE5RVUZOVHl4TlFVRk9MRWRCUVdVc1EwRkJja0lzUTBGQlZEdEJRVU5CVUN4VFFVRk5VU3hIUVVGT08wRkJRMEZTTEZkQlFWRkJMRTFCUVUxVExFbEJRVTRzUTBGQlZ5eEhRVUZZTEVOQlFWSTdPMEZCUlVFc1VVRkJTM0pDTEU5QlFVd3NRMEZCWVN4TFFVRkxVU3hQUVVGc1FpeEZRVUV5UW1Nc1QwRkJNMElzUTBGQmJVTTdRVUZEYkVOeVF5eGhRVUZUTEV0QlFVdEJMRTlCUkc5Q08wRkJSV3hEYzBNc1ZVRkJUVklzVFVGR05FSTdRVUZIYkVOVExGTkJRVXM3UVVGRFNuUkRMRmRCUVUwc1MwRkJTMjlDTEU5QlJGQTdRVUZGU20xQ0xHZENRVUZYWWp0QlFVWlFMRXRCU0RaQ08wRkJUMnhEWXl4VlFVRk5WanRCUVZBMFFpeEpRVUZ1UXl4RlFWRkhReXhSUVZKSU8wRkJVMEU3T3p0elFrRkZTVXdzU3l4RlFVRlBaU3hSTEVWQlFWVTdRVUZCUVRzN1FVRkRja0lzVVVGQlN6TkNMRTlCUVV3c1EwRkJZU3hMUVVGTFVTeFBRVUZzUWl4RlFVRXlRbU1zVDBGQk0wSXNRMEZCYlVNN1FVRkRiRU55UXl4aFFVRlRMRXRCUVV0QkxFOUJSRzlDTzBGQlJXeERjME1zVlVGQlRTeExRVVkwUWp0QlFVZHNRME1zVTBGQlN6dEJRVU5LUXl4blFrRkJWeXhwUTBGRVVEdEJRVVZLZGtNc1YwRkJUU3hMUVVGTGIwSTdRVUZHVUN4TFFVZzJRanRCUVU5c1EyOUNMRlZCUVUwN1FVRkRURVFzWjBKQlFWZGlMRXRCUkU0c1JVRkRZVHRCUVVOc1FtZENMSEZDUVVGblFtaENMRXRCUmxnN1FVRkhUR2xDTEdWQlFWVkdPMEZCU0V3N1FVRlFORUlzU1VGQmJrTXNSVUZaUnl4VlFVRkRha01zVFVGQlJDeEZRVUZUYjBNc1IwRkJWQ3hGUVVGalNpeEpRVUZrTEVWQlFYVkNPMEZCUTNwQ0xGRkJRVWxKTEVkQlFVb3NSVUZCVXp0QlFVTlNPMEZCUTBGRExHRkJRVkZETEV0QlFWSXNRMEZCWTBZc1IwRkJaRHRCUVVOQkxFdEJTRVFzVFVGSFR6dEJRVU5PTEZOQlFVbEhMRTFCUVUwc1JVRkJWanRCUVVOQlFTeFRRVUZKVGl4UlFVRktMRWxCUVdkQ1JDeEpRVUZvUWp0QlFVTkJMRmxCUVV0UkxGTkJRVXdzUTBGQlpYUkNMRXRCUVdZc1JVRkJjMEp4UWl4SFFVRjBRanRCUVVOQk8wRkJRMFFzU1VGeVFrUTdRVUYxUWtFN096dDVRa0ZGVDNKQ0xFc3NSVUZCVDNWQ0xFc3NSVUZCVHp0QlFVRkJPenRCUVVOeVFqdEJRVU5CTEU5QlFVa3NRMEZCUTBFc1MwRkJSQ3hKUVVGVkxFdEJRVXN4UWl4WFFVRk1MRU5CUVdsQ1J5eExRVUZxUWl4RFFVRmtMRVZCUVhWRE8wRkJRM1JETzBGQlEwRTdRVUZEUkN4UlFVRkxTQ3hYUVVGTUxFTkJRV2xDUnl4TFFVRnFRaXhKUVVFd1FpeEpRVUV4UWpzN1FVRkZRU3hSUVVGTFdpeFBRVUZNTEVOQlFXRXNTMEZCUzFFc1QwRkJiRUlzUlVGQk1rSmpMRTlCUVROQ0xFTkJRVzFETzBGQlEyeERja01zWVVGQlV5eExRVUZMUVN4UFFVUnZRanRCUVVWc1EzTkRMRlZCUVUwc1VVRkdORUk3UVVGSGJFTkRMRk5CUVVzN1FVRkRTa01zWjBKQlFWY3NhVU5CUkZBN1FVRkZTblpETEZkQlFVMHNTMEZCUzI5Q08wRkJSbEFzUzBGSU5rSTdRVUZQYkVOdlFpeFZRVUZOTzBGQlEweEVMR2RDUVVGWFlpeExRVVJPTEVWQlEyRTdRVUZEYkVKblFpeHhRa0ZCWjBKb1FqdEJRVVpZTzBGQlVEUkNMRWxCUVc1RExFVkJWMGNzVlVGQlEyeENMRTFCUVVRc1JVRkJVMjlETEVkQlFWUXNSVUZCWTBvc1NVRkJaQ3hGUVVGMVFqdEJRVU42UWl4UlFVRkpTU3hIUVVGS0xFVkJRVk03UVVGRFVqdEJRVU5CUXl4aFFVRlJReXhMUVVGU0xFTkJRV05HTEVkQlFXUTdRVUZEUVN4TFFVaEVMRTFCUjA4N1FVRkRUaXhaUVVGTFNTeFRRVUZNTEVOQlFXVjBRaXhMUVVGbUxFVkJRWE5DWXl4SlFVRjBRanRCUVVOQk8wRkJRMFFzU1VGc1FrUTdRVUZ0UWtFN096czBRa0ZGVldRc1N5eEZRVUZQWXl4SkxFVkJRVTA3UVVGRGRrSXNUMEZCU1VFc1VVRkJVU3hKUVVGYUxFVkJRV3RDTzBGQlEycENPMEZCUTBFN08wRkJSVVFzVVVGQlMySXNiMEpCUVV3c1EwRkJNRUlzUTBGQlEwUXNTMEZCUkN4RlFVRlJZeXhKUVVGU0xFVkJRV01zUlVGQlpDeERRVUV4UWp0QlFVTkJPenM3WjBSQlJUaENPMEZCUVVFN08wRkJRemxDTEU5QlFVa3NTMEZCUzJoQ0xHTkJRVXdzU1VGQmRVSXNTVUZCTTBJc1JVRkJhVU03UVVGRGFrTXNVVUZCUzBFc1kwRkJUQ3hIUVVGelFpeExRVUZMVml4UFFVRk1MRU5CUVdFc1MwRkJTMUVzVDBGQmJFSXNSVUZCTWtJMFFpeFRRVUV6UWl4RFFVRnhRenRCUVVNeFJHNUVMR0ZCUVZNc1MwRkJTMEVzVDBGRU5FTTdRVUZGTVVSelF5eFZRVUZOTEcxQ1FVWnZSRHRCUVVjeFJFTXNVMEZCU3p0QlFVTktReXhuUWtGQlZ5eHBRMEZFVUR0QlFVVktka01zVjBGQlRTeExRVUZMYjBJN1FVRkdVRHRCUVVoeFJDeEpRVUZ5UXl4RlFVOXVRaXhWUVVGRFdpeE5RVUZFTEVWQlFWTnZReXhIUVVGVUxFVkJRV05LTEVsQlFXUXNSVUZCZFVJN1FVRkRla0lzVVVGQlNVa3NSMEZCU2l4RlFVRlRPMEZCUTFJN1FVRkRRU3hMUVVaRUxFMUJSVTg3UVVGRFRpeFpRVUZMYWtJc2IwSkJRVXdzUTBGQk1FSmhMRWxCUVRGQ08wRkJRMEU3UVVGRFJDeEpRV0p4UWl4RFFVRjBRanRCUVdOQk96czdkVU5CUlhGQ1FTeEpMRVZCUVUwN1FVRkJRVHM3UVVGRE0wSXNUMEZCU1N4RFFVRkRWeXhOUVVGTlF5eFBRVUZPTEVOQlFXTmFMRWxCUVdRc1EwRkJSQ3hKUVVGM1FrRXNTMEZCUzFBc1RVRkJUQ3hMUVVGblFpeERRVUUxUXl4RlFVRXJRenRCUVVNNVF6dEJRVU5CT3p0QlFVVkVMRTlCUVVsUUxGRkJRVkZqTEV0QlFVc3NRMEZCVEN4RFFVRmFPMEZCUTBFc1QwRkJTV0VzYjBKQlFXOUNZaXhMUVVGTExFTkJRVXdzUTBGQmVFSTdRVUZEUVN4UFFVRkpZeXgzUWtGQmQwSmtMRXRCUVVzc1EwRkJUQ3hEUVVFMVFqczdRVUZGUVN4UFFVRkpaU3hqUVVGak4wSXNUVUZCVFUwc1MwRkJUaXhEUVVGWkxFZEJRVm9zUTBGQmJFSTdRVUZEUVhWQ0xHbENRVUZqUVN4WlFVRlpRU3haUVVGWmRFSXNUVUZCV2l4SFFVRnhRaXhEUVVGcVF5eERRVUZrT3p0QlFVVkJMRTlCUVVrc1MwRkJTM05DTEZkQlFVd3NTMEZCY1VJc1NVRkJla0lzUlVGQkswSTdRVUZET1VJc1UwRkJTMEVzVjBGQlRDeEpRVUZ2UWl4RlFVRndRanRCUVVOQk96dEJRVVZFTEZGQlFVc3NTVUZCU1dRc1VVRkJWQ3hKUVVGeFFsa3NhVUpCUVhKQ0xFVkJRWGRETzBGQlEzWkRMRk5CUVV0RkxGZEJRVXdzUlVGQmEwSmtMRkZCUVd4Q0xFbEJRVGhDV1N4clFrRkJhMEphTEZGQlFXeENMRU5CUVRsQ08wRkJRMEU3TzBGQlJVUmhMSGxDUVVGelFrVXNUMEZCZEVJc1EwRkJPRUlzYjBKQlFWazdRVUZEZWtNc1YwRkJTMFFzVjBGQlRDeEZRVUZyUW1Rc1VVRkJiRUlzU1VGQk9FSXNTVUZCT1VJN1FVRkRRU3hKUVVaRU96dEJRVWxCTEZGQlFVdG5RaXhKUVVGTUxFTkJRVlVzYjBKQlFWWXNSVUZCWjBOR0xGZEJRV2hETEVWQlFUWkRSaXhwUWtGQk4wTXNSVUZCWjBWRExIRkNRVUZvUlR0QlFVTkJPenM3ZFVOQlJXOUNPMEZCUVVFN08wRkJRM0JDTEU5QlFVa3NTMEZCUzJwRExGRkJRVXdzU1VGQmFVSXNTVUZCY2tJc1JVRkJNa0k3UVVGRE0wSXNUMEZCU1N4TFFVRkxjVU1zWTBGQlRDeEpRVUYxUWl4SlFVRXpRaXhGUVVGcFF5eExRVUZMUVN4alFVRk1MRWRCUVhOQ0xFbEJRVWxvUkN4SFFVRktMRVZCUVhSQ08wRkJRMnBETEZGQlFVdFhMRkZCUVV3c1EwRkJZMjFETEU5QlFXUXNRMEZCYzBJc1pVRkJUenRCUVVNMVFpeFJRVUZKTEU5QlFVdEZMR05CUVV3c1EwRkJiMEp1UkN4SFFVRndRaXhEUVVGM1FpdENMRWxCUVVseFFpeEZRVUUxUWl4TFFVRnRReXhKUVVGMlF5eEZRVUUyUXp0QlFVTTFRenRCUVVOQk8wRkJRMEVzUzBGS01rSXNRMEZKTVVJN1FVRkRSaXhSUVVGSlF5eGxRVUZsTEU5QlFVczVReXhQUVVGTUxFTkJRV0VzVDBGQlMxRXNUMEZCYkVJc1JVRkJNa0kwUWl4VFFVRXpRaXhEUVVGeFF6dEJRVU4yUkc1RUxHTkJRVk1zVDBGQlMwRXNUMEZFZVVNN1FVRkZka1J6UXl4WFFVRk5ReXhKUVVGSmRVSXNTVUZHTmtNN1FVRkhka1IyUWl4VlFVRkxPMEZCUTBwRExHbENRVUZYUkN4SlFVRkpXaXhMUVVSWU8wRkJSVW94UWl4WlFVRk5jME1zU1VGQlNYZENPMEZCUms0N1FVRklhMFFzUzBGQmNrTXNSVUZQYUVJc1ZVRkJRM1JFTEUxQlFVUXNSVUZCVTI5RExFZEJRVlFzUlVGQlkwb3NTVUZCWkN4RlFVRjFRanRCUVVONlFpeFRRVUZKU1N4SFFVRktMRVZCUVZNN1FVRkRVa01zWTBGQlVVTXNTMEZCVWl4RFFVRmpMRzlDUVVGa0xFVkJRVzlEVWl4SFFVRndReXhGUVVGNVEwMHNSMEZCZWtNN1FVRkRRVHRCUVVOQk8wRkJRMFFzV1VGQlMyRXNTVUZCVEN4RFFVRlZia0lzU1VGQlNYRkNMRVZCUVdRc1JVRkJhMEpTTEUxQlFVMURMRTlCUVU0c1EwRkJZMW9zU1VGQlpDeEpRVUZ6UWtFc1MwRkJTeXhEUVVGTUxFTkJRWFJDTEVkQlFXZERRU3hKUVVGc1JDeEZRVXg1UWl4RFFVc3JRanRCUVVONFJDeExRV0pyUWl4RFFVRnVRanRCUVdOQkxGZEJRVXRyUWl4alFVRk1MRU5CUVc5Q2FrUXNSMEZCY0VJc1EwRkJkMEkyUWl4SlFVRkpjVUlzUlVGQk5VSXNSVUZCWjBORExGbEJRV2hETzBGQlEwRXNTVUZ3UWtRN1FVRnpRa0U3T3pzN1JVRTFURGhDYkVVc1dTSXNJbVpwYkdVaU9pSkVRblZ6VDJKcVpXTjBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JteGxkQ0JGZG1WdWRFVnRhWFIwWlhJZ1BTQnlaWEYxYVhKbEtDZHViMlJsTFdWMlpXNTBMV1Z0YVhSMFpYSW5LVnh1YkdWMElFUnBlV0ZUWld4bFkzUnZjaUE5SUhKbGNYVnBjbVVvSnk0dlJHbDVZVk5sYkdWamRHOXlMbXB6SnlrdVJHbDVZVk5sYkdWamRHOXlYRzVjYmtScGVXRlRaV3hsWTNSdmNpNXdjbTkwYjNSNWNHVXVaR0oxYzA5aWFtVmpkQ0E5SUdaMWJtTjBhVzl1SUNoelpYSjJhV05sTENCd1lYUm9MQ0J3WVhKMGFXRnNUMkpxWldOMExDQnphV2R1WVd4ektTQjdYRzVjZEd4bGRDQnZZbXBsWTNSeklEMGdXMTFjYmx4dVhIUjBhR2x6TG1WaFkyZ29jR1ZsY2tsa0lEMCtJSHRjYmx4MFhIUnNaWFFnYzNSdmNtVWdQU0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbk4wYjNKbExtZGxkQ2h3WldWeVNXUXBYRzVjZEZ4MGFXWWdLSE4wYjNKbExtZGxkQ2duWkdKMWN5Y3BJRDA5SUc1MWJHd3BJSHRjYmx4MFhIUmNkSE4wYjNKbExuTmxkQ2duWkdKMWN5Y3NJRzVsZHlCTllYQW9LU2xjYmx4MFhIUjlYRzVjZEZ4MGJHVjBJR1JpZFhNZ1BTQnpkRzl5WlM1blpYUW9KMlJpZFhNbktWeHVYSFJjZEZ4dVhIUmNkR2xtSUNoa1luVnpMbWRsZENoelpYSjJhV05sS1NBOVBTQnVkV3hzS1NCN1hHNWNkRngwWEhSa1luVnpMbk5sZENoelpYSjJhV05sTENCdVpYY2dUV0Z3S0NrcFhHNWNkRngwZlZ4dVhIUmNkR3hsZENCa1luVnpVMlZ5ZG1salpTQTlJR1JpZFhNdVoyVjBLSE5sY25acFkyVXBYRzVjYmx4MFhIUnBaaUFvWkdKMWMxTmxjblpwWTJVdVoyVjBLSEJoZEdncElEMDlJRzUxYkd3cElIdGNibHgwWEhSY2RHUmlkWE5UWlhKMmFXTmxMbk5sZENod1lYUm9MQ0J1WlhjZ1JFSjFjMDlpYW1WamRFaGhibVJzWlhJb2RHaHBjeTVmWTI5dWJtVmpkR2x2Ymk1ZlpERnBibk4wTENCd1pXVnlTV1FzSUhObGNuWnBZMlVzSUhCaGRHZ3NJSE5wWjI1aGJITXBLVnh1WEhSY2RIMWNibHgwWEhSc1pYUWdiMkpxWldOMElEMGdaR0oxYzFObGNuWnBZMlV1WjJWMEtIQmhkR2dwWEc1Y2JseDBYSFJ2WW1wbFkzUXVhVzF3YjNKMFVHRnlkR2xoYkU5aWFtVmpkQ2h3WVhKMGFXRnNUMkpxWldOMEtWeHVYSFJjZEc5aWFtVmpkQzVwYlhCdmNuUlRhV2R1WVd4ektITnBaMjVoYkhNcFhHNWNibHgwWEhSdlltcGxZM1J6TG5CMWMyZ29iMkpxWldOMEtWeHVYSFI5S1Z4dVhHNWNkSEpsZEhWeWJpQnZZbXBsWTNSelhHNTlYRzVjYm1Oc1lYTnpJRVJDZFhOUFltcGxZM1JJWVc1a2JHVnlJR1Y0ZEdWdVpITWdSWFpsYm5SRmJXbDBkR1Z5SUh0Y2JseHVYSFJqYjI1emRISjFZM1J2Y2lBb1pERnBibk4wTENCd1pXVnlTV1FzSUhObGNuWnBZMlVzSUhCaGRHZ3NJSE5wWjI1aGJITXBJSHRjYmx4MFhIUnpkWEJsY2lncFhHNWNibHgwWEhSMGFHbHpMbTlpYWxCaGRHZ2dQU0J3WVhSb1hHNWNkRngwZEdocGN5NXpaWEoyYVdObElEMGdjMlZ5ZG1salpWeHVYSFJjZEhSb2FYTXVYM05wWjI1aGJITWdQU0J6YVdkdVlXeHpYRzVjZEZ4MGRHaHBjeTVmWkRGcGJuTjBJRDBnWkRGcGJuTjBYRzVjZEZ4MGRHaHBjeTVmY0dWbGNrbGtJRDBnY0dWbGNrbGtYRzVjYmx4MFhIUjBhR2x6TGw5blpYUkJiR3hFYjI1bElEMGdlMzFjYmx4MGZWeHVYRzVjZEdOc2IzTmxJQ2dwSUh0Y2JseDBYSFJwWmlBb2RHaHBjeTVmYzNWaVVISnZjR1Z5ZEdsbGN5QWhQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUjBhR2x6TGw5emRXSlFjbTl3WlhKMGFXVnpMbU5zYjNObEtDbGNibHgwWEhSY2RIUm9hWE11WDNOMVlsQnliM0JsY25ScFpYTWdQU0J1ZFd4c1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MGFXMXdiM0owVUdGeWRHbGhiRTlpYW1WamRDQW9jR0Z5ZEdsaGJFOWlhbVZqZENrZ2UxeHVYSFJjZEdsbUlDaHdZWEowYVdGc1QySnFaV04wSUQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJjYmx4MFhIUjlYRzVjYmx4MFhIUm1iM0lnS0d4bGRDQnBabUZqWlNCcGJpQndZWEowYVdGc1QySnFaV04wS1NCN1hHNWNkRngwWEhSMGFHbHpMbDl2YmxCeWIzQmxjblJwWlhORGFHRnVaMlZrSUNoYmFXWmhZMlVzSUhCaGNuUnBZV3hQWW1wbFkzUmJhV1poWTJWZExDQmJYVjBwWEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwYVcxd2IzSjBVMmxuYm1Gc2N5QW9jMmxuYm1Gc2N5a2dlMXh1WEhSY2RHbG1JQ2h6YVdkdVlXeHpJRDA5SUc1MWJHd3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJseHVYSFJjZEgxY2JseDBYSFIwYUdsekxsOXphV2R1WVd4eklEMGdjMmxuYm1Gc2MxeHVYSFJjZEhSb2FYTXVjM1ZpYzJOeWFXSmxWRzlUYVdkdVlXeHpLQ2xjYmx4MGZWeHVYRzVjZEdOaGJHd2dLRzFsZEdodlpDd2dZWEpuY3l3Z1kyRnNiR0poWTJzcElIdGNibHgwWEhSc1pYUWdhV1poWTJVZ1BTQnRaWFJvYjJRdWMzQnNhWFFvSnk0bktWeHVYSFJjZEcxbGRHaHZaQ0E5SUdsbVlXTmxXMmxtWVdObExteGxibWQwYUNBdElERmRYRzVjZEZ4MGFXWmhZMlV1Y0c5d0tDbGNibHgwWEhScFptRmpaU0E5SUdsbVlXTmxMbXB2YVc0b0p5NG5LVnh1WEc1Y2RGeDBkR2hwY3k1ZlpERnBibk4wS0hSb2FYTXVYM0JsWlhKSlpDa3VjbVZ4ZFdWemRDaDdYRzVjZEZ4MFhIUnpaWEoyYVdObE9pQjBhR2x6TG5ObGNuWnBZMlVzWEc1Y2RGeDBYSFJtZFc1ak9pQnRaWFJvYjJRc1hHNWNkRngwWEhSdlltbzZJSHRjYmx4MFhIUmNkRngwY0dGMGFEb2dkR2hwY3k1dlltcFFZWFJvTEZ4dVhIUmNkRngwWEhScGJuUmxjbVpoWTJVNklHbG1ZV05sWEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwWkdGMFlUb2dZWEpuYzF4dVhIUmNkSDBzSUdOaGJHeGlZV05yS1Z4dVhIUjlYRzVjYmx4MFoyVjBJQ2hwWm1GalpTd2djSEp2Y0U1aGJXVXBJSHRjYmx4MFhIUjBhR2x6TGw5a01XbHVjM1FvZEdocGN5NWZjR1ZsY2tsa0tTNXlaWEYxWlhOMEtIdGNibHgwWEhSY2RITmxjblpwWTJVNklIUm9hWE11YzJWeWRtbGpaU3hjYmx4MFhIUmNkR1oxYm1NNklDZEhaWFFuTEZ4dVhIUmNkRngwYjJKcU9pQjdYRzVjZEZ4MFhIUmNkR2x1ZEdWeVptRmpaVG9nSjI5eVp5NW1jbVZsWkdWemEzUnZjQzVFUW5WekxsQnliM0JsY25ScFpYTW5MRnh1WEhSY2RGeDBYSFJ3WVhSb09pQjBhR2x6TG05aWFsQmhkR2hjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJrWVhSaE9pQjdYRzVjZEZ4MFhIUmNkR2x1ZEdWeVptRmpaVG9nYVdaaFkyVXNJQzh2YzNsemRHVnRaQ0JrWlhaeklHRnlaU0JtZFdOcmRHRnlaQ0IwYUdGMElHUnZiaWQwSUdadmJHeHZkeUIwYUdWcGNpQnZkMjRnWm5WamEybHVaeUJ6ZEdGdVpHRnlaQ0FoWEc1Y2RGeDBYSFJjZEdsdWRHVnlabUZqWlY5dVlXMWxPaUJwWm1GalpTeGNibHgwWEhSY2RGeDBjSEp2Y0dWeWRIazZJSEJ5YjNCT1lXMWxYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTd2dLSEJsWlhKSlpDd2daWEp5TENCa1lYUmhLU0E5UGlCN1hHNWNkRngwWEhScFppQW9aWEp5S1NCN1hHNWNkRngwWEhSY2RDOHZWRTlFVHlBNklHaGhibVJzWlNCbGNuSnZjbHh1WEhSY2RGeDBYSFJqYjI1emIyeGxMbVZ5Y205eUtHVnljaWxjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkR3hsZENCeVpYTWdQU0I3ZlZ4dVhIUmNkRngwWEhSeVpYTmJjSEp2Y0U1aGJXVmRJRDBnWkdGMFlWeHVYSFJjZEZ4MFhIUjBhR2x6TGw5dmJrZGxkRUZzYkNocFptRmpaU3dnY21WektWeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcFhHNWNibHgwZlZ4dVhHNWNkR2RsZEVGc2JDQW9hV1poWTJVc0lHWnZjbU5sS1NCN1hHNWNkRngwTHk5aWVTQmtaV1poZFd4MExDQndjbVYyWlc1MElHOXVaU0IwYnlCeWRXNGdaMlYwSUdGc2JDQnRiM0psSUhSb1lXNGdiMjVqWlNBb2RHaGhkQ0J6YUc5MWJHUnVKM1FnWW1VZ2RYTmxablZzSUdsbUlGQnliM0JsY25ScFpYTkRhR0Z1WjJWa0lHUnZaWE1nYVhSeklHcHZZbHh1WEhSY2RHbG1JQ2doWm05eVkyVWdKaVlnZEdocGN5NWZaMlYwUVd4c1JHOXVaVnRwWm1GalpWMHBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmNibHgwWEhSOVhHNWNkRngwZEdocGN5NWZaMlYwUVd4c1JHOXVaVnRwWm1GalpWMGdQU0IwY25WbFhHNWNibHgwWEhSMGFHbHpMbDlrTVdsdWMzUW9kR2hwY3k1ZmNHVmxja2xrS1M1eVpYRjFaWE4wS0h0Y2JseDBYSFJjZEhObGNuWnBZMlU2SUhSb2FYTXVjMlZ5ZG1salpTeGNibHgwWEhSY2RHWjFibU02SUNkSFpYUkJiR3duTEZ4dVhIUmNkRngwYjJKcU9pQjdYRzVjZEZ4MFhIUmNkR2x1ZEdWeVptRmpaVG9nSjI5eVp5NW1jbVZsWkdWemEzUnZjQzVFUW5WekxsQnliM0JsY25ScFpYTW5MQ0JjYmx4MFhIUmNkRngwY0dGMGFEb2dkR2hwY3k1dlltcFFZWFJvWEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwWkdGMFlUb2dlMXh1WEhSY2RGeDBYSFJwYm5SbGNtWmhZMlU2SUdsbVlXTmxMQ0F2TDNONWMzUmxiV1FnWkdWMmN5QmhjbVVnWm5WamEzUmhjbVFnZEdoaGRDQmtiMjRuZENCbWIyeHNiM2NnZEdobGFYSWdiM2R1SUdaMVkydHBibWNnYzNSaGJtUmhjbVFnSVZ4dVhIUmNkRngwWEhScGJuUmxjbVpoWTJWZmJtRnRaVG9nYVdaaFkyVXNYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTd2dLSEJsWlhKSlpDd2daWEp5TENCa1lYUmhLU0E5UGlCN1hHNWNkRngwWEhScFppQW9aWEp5S1NCN1hHNWNkRngwWEhSY2RDOHZWRTlFVHlBNklHaGhibVJzWlNCbGNuSnZjbHh1WEhSY2RGeDBYSFJqYjI1emIyeGxMbVZ5Y205eUtHVnljaWxjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVSMlYwUVd4c0tHbG1ZV05sTENCa1lYUmhLVnh1WEhSY2RGeDBmVnh1WEhSY2RIMHBYRzVjZEgxY2JseHVYSFJmYjI1SFpYUkJiR3dnS0dsbVlXTmxMQ0JrWVhSaEtTQjdYRzVjZEZ4MGFXWWdLR1JoZEdFZ1BUMGdiblZzYkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1WEc1Y2RGeDBmVnh1WEhSY2JseDBYSFIwYUdsekxsOXZibEJ5YjNCbGNuUnBaWE5EYUdGdVoyVmtLRnRwWm1GalpTd2daR0YwWVN3Z1cxMWRLVnh1WEhSOVhHNWNibHgwYVc1cGRGQnliM0JsY25ScFpYTkRhR0Z1WjJWa1UybG5ibUZzSUNncElIdGNibHgwWEhScFppQW9kR2hwY3k1ZmMzVmlVSEp2Y0dWeWRHbGxjeUFoUFNCdWRXeHNLU0J5WlhSMWNtNWNibHgwWEhSMGFHbHpMbDl6ZFdKUWNtOXdaWEowYVdWeklEMGdkR2hwY3k1ZlpERnBibk4wS0hSb2FYTXVYM0JsWlhKSlpDa3VjM1ZpYzJOeWFXSmxLSHRjYmx4MFhIUmNkSE5sY25acFkyVTZJSFJvYVhNdWMyVnlkbWxqWlN4Y2JseDBYSFJjZEdaMWJtTTZJQ2RRY205d1pYSjBhV1Z6UTJoaGJtZGxaQ2NzWEc1Y2RGeDBYSFJ2WW1vNklIdGNibHgwWEhSY2RGeDBhVzUwWlhKbVlXTmxPaUFuYjNKbkxtWnlaV1ZrWlhOcmRHOXdMa1JDZFhNdVVISnZjR1Z5ZEdsbGN5Y3NYRzVjZEZ4MFhIUmNkSEJoZEdnNklIUm9hWE11YjJKcVVHRjBhRnh1WEhSY2RGeDBmVnh1WEhSY2RIMHNJQ2h3WldWeVNXUXNJR1Z5Y2l3Z1pHRjBZU2tnUFQ0Z2UxeHVYSFJjZEZ4MGFXWWdLR1Z5Y2lrZ2UxeHVYSFJjZEZ4MFhIUXZMMVJQUkU4Z09pQm9ZVzVrYkdVZ1pYSnliM0pjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVVSEp2Y0dWeWRHbGxjME5vWVc1blpXUW9aR0YwWVNsY2JseDBYSFJjZEgxY2JseDBYSFI5S1Z4dVhIUjlYRzVjYmx4MFgyOXVVSEp2Y0dWeWRHbGxjME5vWVc1blpXUWdLR1JoZEdFcElIdGNibHgwWEhScFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBZU2tnZkh3Z1pHRjBZUzVzWlc1bmRHZ2dJVDA5SURNcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCY2JseDBYSFI5WEc1Y2JseDBYSFJzWlhRZ2FXWmhZMlVnUFNCa1lYUmhXekJkWEc1Y2RGeDBiR1YwSUdOb1lXNW5aV1JRY205d1pYSjBhV1Z6SUQwZ1pHRjBZVnN4WFZ4dVhIUmNkR3hsZENCcGJuWmhiR2xrWVhSbFpGQnliM0JsY25ScFpYTWdQU0JrWVhSaFd6SmRYRzVjZEZ4MFhHNWNkRngwYkdWMElITnBiWEJzWlVsbVlXTmxJRDBnYVdaaFkyVXVjM0JzYVhRb0p5NG5LVnh1WEhSY2RITnBiWEJzWlVsbVlXTmxJRDBnYzJsdGNHeGxTV1poWTJWYmMybHRjR3hsU1daaFkyVXViR1Z1WjNSb0lDMGdNVjFjYmx4dVhIUmNkR2xtSUNoMGFHbHpXM05wYlhCc1pVbG1ZV05sWFNBOVBTQnVkV3hzS1NCN1hHNWNkRngwWEhSMGFHbHpXM05wYlhCc1pVbG1ZV05sWFNBOUlIdDlYRzVjZEZ4MGZWeHVYRzVjZEZ4MFptOXlJQ2hzWlhRZ2NISnZjRTVoYldVZ2FXNGdZMmhoYm1kbFpGQnliM0JsY25ScFpYTXBJSHRjYmx4MFhIUmNkSFJvYVhOYmMybHRjR3hsU1daaFkyVmRXM0J5YjNCT1lXMWxYU0E5SUdOb1lXNW5aV1JRY205d1pYSjBhV1Z6VzNCeWIzQk9ZVzFsWFZ4dVhIUmNkSDFjYmx4dVhIUmNkR2x1ZG1Gc2FXUmhkR1ZrVUhKdmNHVnlkR2xsY3k1bWIzSkZZV05vS0hCeWIzQk9ZVzFsSUQwK0lIdGNibHgwWEhSY2RIUm9hWE5iYzJsdGNHeGxTV1poWTJWZFczQnliM0JPWVcxbFhTQTlJRzUxYkd4Y2JseDBYSFI5S1Z4dVhHNWNkRngwZEdocGN5NWxiV2wwS0Nkd2NtOXdaWEowYVdWekxXTm9ZVzVuWldRbkxDQnphVzF3YkdWSlptRmpaU3dnWTJoaGJtZGxaRkJ5YjNCbGNuUnBaWE1zSUdsdWRtRnNhV1JoZEdWa1VISnZjR1Z5ZEdsbGN5bGNibHgwZlZ4dVhHNWNkSE4xWW5OamNtbGlaVlJ2VTJsbmJtRnNjeWdwSUh0Y2JseDBYSFJwWmlBb2RHaHBjeTVmYzJsbmJtRnNjeUE5UFNCdWRXeHNLU0J5WlhSMWNtNWNibHgwWEhScFppQW9kR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjeUE5UFNCdWRXeHNLU0IwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6SUQwZ2JtVjNJRTFoY0NncFhHNWNkRngwZEdocGN5NWZjMmxuYm1Gc2N5NW1iM0pGWVdOb0tHOWlhaUE5UGlCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjeTVuWlhRb2IySnFMbWxrS1NBaFBTQnVkV3hzS1NCN1hHNWNkRngwWEhSY2RDOHZJR052Ym5OdmJHVXVkMkZ5YmloZ1FXeHlaV0ZrZVNCemRXSnpZM0pwWW1Wa0xDQnphV2R1WVd3Z0pIdHZZbW91YVdSOVlDbGNibHgwWEhSY2RGeDBjbVYwZFhKdVhHNWNkRngwWEhSOUlDOHZJSEpsWm5WelpTQmtkWEJzYVdOaGRHVWdjM1ZpYzJOeWFYQjBhVzl1YzF4dVhIUmNkRngwYkdWMElITjFZbk5qY21sd2RHbHZiaUE5SUhSb2FYTXVYMlF4YVc1emRDaDBhR2x6TGw5d1pXVnlTV1FwTG5OMVluTmpjbWxpWlNoN1hHNWNkRngwWEhSY2RITmxjblpwWTJVNklIUm9hWE11YzJWeWRtbGpaU3hjYmx4MFhIUmNkRngwWm5WdVl6b2diMkpxTG01aGJXVXNYRzVjZEZ4MFhIUmNkRzlpYWpvZ2UxeHVYSFJjZEZ4MFhIUmNkR2x1ZEdWeVptRmpaVG9nYjJKcUxtbG1ZV05sTEZ4dVhIUmNkRngwWEhSY2RIQmhkR2c2SUc5aWFpNXZZbXBsWTNSUVlYUm9MRnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5TENBb2NHVmxja2xrTENCbGNuSXNJR1JoZEdFcElEMCtJSHRjYmx4MFhIUmNkRngwYVdZZ0tHVnljaWtnZTF4dVhIUmNkRngwWEhSY2RHTnZibk52YkdVdVpYSnliM0lvSjNOMVluTmpjbWxpWlZSdlUybG5ibUZzY3ljc0lHOWlhaXdnWlhKeUtWeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJseHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSFJvYVhNdVpXMXBkQ2h2WW1vdWFXUXNJRUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBZU2tnUHlCa1lYUmhXekJkSURvZ1pHRjBZU2tnTHk4Z1pYWmxiblFnSjJsa0p5QnBjeUJsYldsMGRHVmtJR2x1YzNSbFlXUWdiMllnSjI1aGJXVW5JR0psWTJGMWMyVWdjMmxuYm1Gc0ozTWdibUZ0WlhNZ2JXRjVJR0psSUdSMWNHeHBZMkYwWlZ4dVhIUmNkRngwZlNsY2JseDBYSFJjZEhSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5NdWMyVjBLRzlpYWk1cFpDd2djM1ZpYzJOeWFYQjBhVzl1S1Z4dVhIUmNkSDBwWEc1Y2JseDBmVnh1WEc1OVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNCcm93c2VyID0gISh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyk7XG52YXIgVU5JWFNvY2tldEhhbmRsZXIgPSB2b2lkIDA7XG5pZiAoIWlzQnJvd3Nlcikge1xuXHR2YXIgUSA9IHJlcXVpcmUoJ3EnKTtcblx0VU5JWFNvY2tldEhhbmRsZXIgPSByZXF1aXJlKCcuL1VOSVhTb2NrZXRIYW5kbGVyJyk7XG59IGVsc2Uge1xuXHR2YXIgUSA9IHdpbmRvdy5RO1xufVxuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnbm9kZS1ldmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIERpeWFTb2NrZXQgPSByZXF1aXJlKCcuL0RpeWFTb2NrZXQnKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8gTG9nZ2luZyB1dGlsaXR5IG1ldGhvZHMgLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG52YXIgREVCVUcgPSBmYWxzZTtcbnZhciBMb2dnZXIgPSB7XG5cdGxvZzogZnVuY3Rpb24gbG9nKG1lc3NhZ2UpIHtcblx0XHRpZiAoREVCVUcpIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXHR9LFxuXG5cdGVycm9yOiBmdW5jdGlvbiBlcnJvcihtZXNzYWdlKSB7XG5cdFx0aWYgKERFQlVHKSBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuXHR9XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuZnVuY3Rpb24gRGl5YU5vZGUoKSB7XG5cdEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG5cdHRoaXMuX3VzZXIgPSBudWxsO1xuXHR0aGlzLl9hdXRoZW50aWNhdGVkID0gbnVsbDtcblx0dGhpcy5fcGFzcyA9IG51bGw7XG5cblx0dGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCc7XG5cdHRoaXMuX2FkZHIgPSBudWxsO1xuXHR0aGlzLl9zb2NrZXQgPSBudWxsO1xuXHR0aGlzLl9uZXh0SWQgPSAwO1xuXHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsO1xuXHR0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsO1xuXHR0aGlzLl9wZW5kaW5nTWVzc2FnZXMgPSBbXTtcblx0dGhpcy5fcGVlcnMgPSBbXTtcblx0dGhpcy5fcmVjb25uZWN0VGltZW91dCA9IDEwMDA7XG5cdHRoaXMuX2Nvbm5lY3RUaW1lb3V0ID0gNTAwMDtcblx0dGhpcy5zdG9yZSA9IG5ldyBNYXAoKTtcblx0dGhpcy5fZGl5YVNvY2tldCA9IG5ldyBNYXAoKTtcbn1cbmluaGVyaXRzKERpeWFOb2RlLCBFdmVudEVtaXR0ZXIpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8gUHVibGljIEFQSSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFOb2RlLnByb3RvdHlwZS51c2VyID0gZnVuY3Rpb24gKHVzZXIpIHtcblx0aWYgKHVzZXIpIHRoaXMuX3VzZXIgPSB1c2VyO2Vsc2UgcmV0dXJuIHRoaXMuX3VzZXI7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLmF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbiAoYXV0aGVudGljYXRlZCkge1xuXHRpZiAoYXV0aGVudGljYXRlZCAhPT0gdW5kZWZpbmVkKSB0aGlzLl9hdXRoZW50aWNhdGVkID0gYXV0aGVudGljYXRlZDtlbHNlIHJldHVybiB0aGlzLl9hdXRoZW50aWNhdGVkO1xufTtcbkRpeWFOb2RlLnByb3RvdHlwZS5wYXNzID0gZnVuY3Rpb24gKHBhc3MpIHtcblx0aWYgKHBhc3MgIT09IHVuZGVmaW5lZCkgdGhpcy5fcGFzcyA9IHBhc3M7ZWxzZSByZXR1cm4gdGhpcy5fcGFzcztcbn07XG5EaXlhTm9kZS5wcm90b3R5cGUuYWRkciA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuX2FkZHI7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLnBlZXJzID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5fcGVlcnM7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLnNlbGYgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLl9zZWxmO1xufTtcbkRpeWFOb2RlLnByb3RvdHlwZS5zZXRTZWN1cmVkID0gZnVuY3Rpb24gKGJTZWN1cmVkKSB7XG5cdHRoaXMuX3NlY3VyZWQgPSBiU2VjdXJlZCAhPT0gZmFsc2U7XG59O1xuRGl5YU5vZGUucHJvdG90eXBlLnNldFdTb2NrZXQgPSBmdW5jdGlvbiAoV1NvY2tldCkge1xuXHR0aGlzLl9XU29ja2V0ID0gV1NvY2tldDtcbn07XG5cbi8qKiBAcmV0dXJuIHtQcm9taXNlPFN0cmluZz59IHRoZSBjb25uZWN0ZWQgcGVlciBuYW1lICovXG5EaXlhTm9kZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChhZGRyLCBXU29ja2V0KSB7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dGhpcy5iRG9udFJlY29ubmVjdCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBsb2NhbCBjbGllbnRzIG9uIFVOSVggc29ja2V0c1xuXHRpZiAoYWRkci5zdGFydHNXaXRoKCd1bml4Oi8vJykpIHtcblx0XHQvLyBJZiB3ZSd2ZSB0cnlpbmcgdG8gY29ubmVjdCB0byB0aGUgc2FtZSBhZGRyZXNzIHdlJ3JlIGFscmVhZHkgY29ubmVjdGVkIHRvXG5cdFx0aWYgKHRoaXMuX2FkZHIgPT09IGFkZHIpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdbU0RLL0RpeWFOb2RlXSBBZGRyZXNzIGlzIGlkZW50aWNhbCB0byBvdXIgYWRkcmVzcy4uLicpO1xuXHRcdFx0aWYgKHRoaXMuX3N0YXR1cyA9PT0gJ29wZW5lZCcpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1tTREsvRGl5YU5vZGVdIC4uLiBhbmQgdGhlIGNvbm5lY3Rpb24gaXMgc3RpbGwgb3BlbmVuZWQsIHJldHVybmluZyBpdC4nKTtcblx0XHRcdFx0cmV0dXJuIFEodGhpcy5zZWxmKCkpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgJiYgdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UgJiYgdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UuaXNQZW5kaW5nKCkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1tTREsvRGl5YU5vZGVdLi4uIGFuZCB0aGUgY29ubmVjdGlvbiBpcyBwZW5kaW5nLCBzbyByZXR1cm5pbmcgdGhlIHBlbmRpbmcgY29ubmVjdGlvbi4nKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoXykge1xuXHRcdFx0X3RoaXMuX2FkZHIgPSBhZGRyO1xuXHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IFEuZGVmZXIoKTtcblx0XHRcdExvZ2dlci5sb2coJ2QxOiBjb25uZWN0IHRvICcgKyBfdGhpcy5fYWRkcik7XG5cdFx0XHR2YXIgc29jayA9IG5ldyBVTklYU29ja2V0SGFuZGxlcihfdGhpcy5fYWRkci5zdWJzdHIoJ3VuaXg6Ly8nLmxlbmd0aCksIF90aGlzLl9jb25uZWN0VGltZW91dCk7XG5cblx0XHRcdGlmICghX3RoaXMuX3NvY2tldEhhbmRsZXIpIF90aGlzLl9zb2NrZXRIYW5kbGVyID0gc29jaztcblxuXHRcdFx0X3RoaXMuX29ub3BlbmluZygpO1xuXG5cdFx0XHRzb2NrLm9uKCdvcGVuJywgZnVuY3Rpb24gKF8pIHtcblx0XHRcdFx0aWYgKF90aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1tTREsvRGl5YU5vZGVdIFNvY2tldCByZXNwb25kZWQgYnV0IGFscmVhZHkgY29ubmVjdGVkIHRvIGEgZGlmZmVyZW50IG9uZScpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRfdGhpcy5fc3RhdHVzID0gJ29wZW5lZCc7XG5cdFx0XHRcdF90aGlzLl9zZXR1cFBpbmdSZXNwb25zZSgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHNvY2sub24oJ2Nsb3NpbmcnLCBmdW5jdGlvbiAoXykge1xuXHRcdFx0XHRpZiAoX3RoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spIHJldHVybjtcblx0XHRcdFx0X3RoaXMuX29uY2xvc2luZygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHNvY2sub24oJ2Nsb3NlJywgZnVuY3Rpb24gKF8pIHtcblx0XHRcdFx0aWYgKF90aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKSByZXR1cm47XG5cdFx0XHRcdF90aGlzLl9zb2NrZXRIYW5kbGVyID0gbnVsbDtcblx0XHRcdFx0X3RoaXMuX3N0YXR1cyA9ICdjbG9zZWQnO1xuXHRcdFx0XHRfdGhpcy5fc3RvcFBpbmdSZXNwb25zZSgpO1xuXHRcdFx0XHRfdGhpcy5fb25jbG9zZSgpO1xuXG5cdFx0XHRcdGlmIChfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkKSB7XG5cdFx0XHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5yZWplY3QoXCJjbG9zZWRcIik7XG5cdFx0XHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRzb2NrLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRpZiAoX3RoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spIHJldHVybjtcblx0XHRcdFx0X3RoaXMuX29uZXJyb3IoZXJyb3IpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHNvY2sub24oJ3RpbWVvdXQnLCBmdW5jdGlvbiAoXykge1xuXHRcdFx0XHRpZiAoX3RoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spIHJldHVybjtcblx0XHRcdFx0X3RoaXMuX3NvY2tldEhhbmRsZXIgPSBudWxsO1xuXHRcdFx0XHRfdGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCc7XG5cdFx0XHRcdGlmIChfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkKSB7XG5cdFx0XHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5yZWplY3QoXCJjbG9zZWRcIik7XG5cdFx0XHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRzb2NrLm9uKCdtZXNzYWdlJywgX3RoaXMuX29ubWVzc2FnZS5iaW5kKF90aGlzKSk7XG5cblx0XHRcdHJldHVybiBfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2U7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoV1NvY2tldCAhPT0gdW5kZWZpbmVkKSB0aGlzLl9XU29ja2V0ID0gV1NvY2tldDtlbHNlIGlmICh0aGlzLl9XU29ja2V0ID09PSB1bmRlZmluZWQpIHRoaXMuX1dTb2NrZXQgPSB3aW5kb3cuV2ViU29ja2V0O1xuXG5cdFdTb2NrZXQgPSB0aGlzLl9XU29ja2V0O1xuXG5cdC8vIENoZWNrIGFuZCBGb3JtYXQgVVJJIChGUUROKVxuXHRpZiAoYWRkci5zdGFydHNXaXRoKFwid3M6Ly9cIikgJiYgdGhpcy5fc2VjdXJlZCkgcmV0dXJuIFEucmVqZWN0KFwiUGxlYXNlIHVzZSBhIHNlY3VyZWQgY29ubmVjdGlvbiAoXCIgKyBhZGRyICsgXCIpXCIpO1xuXG5cdGlmIChhZGRyLnN0YXJ0c1dpdGgoXCJ3c3M6Ly9cIikgJiYgdGhpcy5fc2VjdXJlZCA9PT0gZmFsc2UpIHJldHVybiBRLnJlamVjdChcIlBsZWFzZSB1c2UgYSBub24tc2VjdXJlZCBjb25uZWN0aW9uIChcIiArIGFkZHIgKyBcIilcIik7XG5cblx0aWYgKCFhZGRyLnN0YXJ0c1dpdGgoXCJ3czovL1wiKSAmJiAhYWRkci5zdGFydHNXaXRoKFwid3NzOi8vXCIpKSB7XG5cdFx0aWYgKHRoaXMuX3NlY3VyZWQpIGFkZHIgPSBcIndzczovL1wiICsgYWRkcjtlbHNlIGFkZHIgPSBcIndzOi8vXCIgKyBhZGRyO1xuXHR9XG5cblx0aWYgKHRoaXMuX2FkZHIgPT09IGFkZHIpIHtcblx0XHRpZiAodGhpcy5fc3RhdHVzID09PSAnb3BlbmVkJykgcmV0dXJuIFEodGhpcy5zZWxmKCkpO2Vsc2UgaWYgKHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZCAmJiB0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZSAmJiB0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZS5pc1BlbmRpbmcoKSkgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlO1xuXHR9XG5cblx0cmV0dXJuIHRoaXMuY2xvc2UoKS50aGVuKGZ1bmN0aW9uIChfKSB7XG5cdFx0X3RoaXMuX2FkZHIgPSBhZGRyO1xuXHRcdF90aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cdFx0TG9nZ2VyLmxvZygnZDE6IGNvbm5lY3QgdG8gJyArIF90aGlzLl9hZGRyKTtcblx0XHR2YXIgc29jayA9IG5ldyBTb2NrZXRIYW5kbGVyKFdTb2NrZXQsIF90aGlzLl9hZGRyLCBfdGhpcy5fY29ubmVjdFRpbWVvdXQpO1xuXG5cdFx0aWYgKCFfdGhpcy5fc29ja2V0SGFuZGxlcikgX3RoaXMuX3NvY2tldEhhbmRsZXIgPSBzb2NrO1xuXG5cdFx0X3RoaXMuX29ub3BlbmluZygpO1xuXG5cdFx0c29jay5vbignb3BlbicsIGZ1bmN0aW9uIChfKSB7XG5cdFx0XHRpZiAoX3RoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJbZDFdIFdlYnNvY2tldCByZXNwb25kZWQgYnV0IGFscmVhZHkgY29ubmVjdGVkIHRvIGEgZGlmZmVyZW50IG9uZVwiKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0X3RoaXMuX3NvY2tldEhhbmRsZXIgPSBzb2NrO1xuXHRcdFx0X3RoaXMuX3N0YXR1cyA9ICdvcGVuZWQnO1xuXHRcdFx0X3RoaXMuX3NldHVwUGluZ1Jlc3BvbnNlKCk7XG5cdFx0fSk7XG5cblx0XHRzb2NrLm9uKCdjbG9zaW5nJywgZnVuY3Rpb24gKF8pIHtcblx0XHRcdGlmIChfdGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaykgcmV0dXJuO1xuXHRcdFx0X3RoaXMuX29uY2xvc2luZygpO1xuXHRcdH0pO1xuXG5cdFx0c29jay5vbignY2xvc2UnLCBmdW5jdGlvbiAoXykge1xuXHRcdFx0aWYgKF90aGlzLl9zb2NrZXRIYW5kbGVyICE9PSBzb2NrKSByZXR1cm47XG5cdFx0XHRfdGhpcy5fc29ja2V0SGFuZGxlciA9IG51bGw7XG5cdFx0XHRfdGhpcy5fc3RhdHVzID0gJ2Nsb3NlZCc7XG5cdFx0XHRfdGhpcy5fc3RvcFBpbmdSZXNwb25zZSgpO1xuXHRcdFx0X3RoaXMuX29uY2xvc2UoKTtcblxuXHRcdFx0aWYgKF90aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQpIHtcblx0XHRcdFx0X3RoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5yZWplY3QoXCJjbG9zZWRcIik7XG5cdFx0XHRcdF90aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0c29jay5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdGlmIChfdGhpcy5fc29ja2V0SGFuZGxlciAhPT0gc29jaykgcmV0dXJuO1xuXHRcdFx0X3RoaXMuX29uZXJyb3IoZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0c29jay5vbigndGltZW91dCcsIGZ1bmN0aW9uIChfKSB7XG5cdFx0XHRpZiAoX3RoaXMuX3NvY2tldEhhbmRsZXIgIT09IHNvY2spIHJldHVybjtcblx0XHRcdF90aGlzLl9zb2NrZXRIYW5kbGVyID0gbnVsbDtcblx0XHRcdF90aGlzLl9zdGF0dXMgPSAnY2xvc2VkJztcblx0XHRcdGlmIChfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkKSB7XG5cdFx0XHRcdF90aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQucmVqZWN0KFwiY2xvc2VkXCIpO1xuXHRcdFx0XHRfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHNvY2sub24oJ21lc3NhZ2UnLCBfdGhpcy5fb25tZXNzYWdlLmJpbmQoX3RoaXMpKTtcblxuXHRcdHJldHVybiBfdGhpcy5fY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2U7XG5cdH0pO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMuYkRvbnRSZWNvbm5lY3QgPSB0cnVlO1xuXHRyZXR1cm4gdGhpcy5jbG9zZSgpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9zdG9wUGluZ1Jlc3BvbnNlKCk7XG5cdGlmICh0aGlzLl9zb2NrZXRIYW5kbGVyKSByZXR1cm4gdGhpcy5fc29ja2V0SGFuZGxlci5jbG9zZSgpO2Vsc2UgcmV0dXJuIFEoKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuX3NvY2tldEhhbmRsZXIgJiYgdGhpcy5fc29ja2V0SGFuZGxlci5pc0Nvbm5lY3RlZCgpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaywgdGltZW91dCwgb3B0aW9ucykge1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cdGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG5cdGlmIChwYXJhbXMuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuXHRcdHZhciBfcGFyYW1zID0gcGFyYW1zLnNwbGl0KFwiLlwiKTtcblx0XHRpZiAoX3BhcmFtcy5sZW5ndGggIT0gMikgdGhyb3cgJ01hbGZvcm1lZFJlcXVlc3QnO1xuXHRcdHBhcmFtcyA9IHsgc2VydmljZTogX3BhcmFtc1swXSwgZnVuYzogX3BhcmFtc1sxXSB9O1xuXHR9XG5cblx0aWYgKCFwYXJhbXMuc2VydmljZSkge1xuXHRcdExvZ2dlci5lcnJvcignTm8gc2VydmljZSBkZWZpbmVkIGZvciByZXF1ZXN0ICEnKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgbWVzc2FnZSA9IHRoaXMuX2NyZWF0ZU1lc3NhZ2UocGFyYW1zLCBcIlJlcXVlc3RcIik7XG5cdHRoaXMuX2FwcGVuZE1lc3NhZ2UobWVzc2FnZSwgY2FsbGJhY2spO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2tfcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcGVuZGluZ01lc3NhZ2VzW21lc3NhZ2UuaWRdLmNhbGxiYWNrX3BhcnRpYWwgPSBvcHRpb25zLmNhbGxiYWNrX3BhcnRpYWw7XG5cdG1lc3NhZ2Uub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0aWYgKCFpc05hTih0aW1lb3V0KSAmJiB0aW1lb3V0ID4gMCkge1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGhhbmRsZXIgPSB0aGF0Ll9yZW1vdmVNZXNzYWdlKG1lc3NhZ2UuaWQpO1xuXHRcdFx0aWYgKGhhbmRsZXIpIHRoYXQuX25vdGlmeUxpc3RlbmVyKGhhbmRsZXIsICdUaW1lb3V0IGV4Y2VlZGVkICgnICsgdGltZW91dCArICdtcykgIScpO1xuXHRcdH0sIHRpbWVvdXQpO1xuXHR9XG5cblx0aWYgKCF0aGlzLl9zZW5kKG1lc3NhZ2UpKSB7XG5cdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlLmlkKTtcblx0XHRjb25zb2xlLmVycm9yKCdDYW5ub3Qgc2VuZCByZXF1ZXN0ICEnKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuXHRpZiAocGFyYW1zLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcblx0XHR2YXIgX3BhcmFtcyA9IHBhcmFtcy5zcGxpdChcIi5cIik7XG5cdFx0aWYgKF9wYXJhbXMubGVuZ3RoICE9IDIpIHRocm93ICdNYWxmb3JtZWRSZXF1ZXN0Jztcblx0XHRwYXJhbXMgPSB7IHNlcnZpY2U6IF9wYXJhbXNbMF0sIGZ1bmM6IF9wYXJhbXNbMV0gfTtcblx0fVxuXG5cdGlmICghcGFyYW1zLnNlcnZpY2UpIHtcblx0XHRMb2dnZXIuZXJyb3IoJ05vIHNlcnZpY2UgZGVmaW5lZCBmb3Igc3Vic2NyaXB0aW9uICEnKTtcblx0XHRyZXR1cm4gLTE7XG5cdH1cblxuXHR2YXIgbWVzc2FnZSA9IHRoaXMuX2NyZWF0ZU1lc3NhZ2UocGFyYW1zLCBcIlN1YnNjcmlwdGlvblwiKTtcblx0dGhpcy5fYXBwZW5kTWVzc2FnZShtZXNzYWdlLCBjYWxsYmFjayk7XG5cblx0aWYgKCF0aGlzLl9zZW5kKG1lc3NhZ2UpKSB7XG5cdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlLmlkKTtcblx0XHRMb2dnZXIuZXJyb3IoJ0Nhbm5vdCBzZW5kIHN1YnNjcmlwdGlvbiAhJyk7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2UuaWQ7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUub3BlblNvY2tldCA9IGZ1bmN0aW9uIChkMWluc3QsIHBhcmFtcywgY2FsbGJhY2spIHtcblx0dGhpcy5fZGl5YVNvY2tldC5zZXQocGFyYW1zLnNvY2tldElkLCBuZXcgRGl5YVNvY2tldChkMWluc3QsIHBhcmFtcykpO1xuXHR0aGlzLl9kaXlhU29ja2V0LmdldChwYXJhbXMuc29ja2V0SWQpLnN1YnNjcmliZVNvY2tldENsb3NlZChwYXJhbXMuc29ja2V0SWQpO1xuXHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayh0aGlzLl9kaXlhU29ja2V0LmdldChwYXJhbXMuc29ja2V0SWQpKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5vblNvY2tldENsb3NlZCA9IGZ1bmN0aW9uIChzb2NrZXRJZCkge1xuXHRpZiAodGhpcy5fZGl5YVNvY2tldC5oYXMoc29ja2V0SWQpKSB7XG5cdFx0dGhpcy5fZGl5YVNvY2tldC5nZXQoc29ja2V0SWQpLmVtaXQoJ2Nsb3NlJyk7XG5cdFx0dGhpcy5fZGl5YVNvY2tldC5kZWxldGUoc29ja2V0SWQpO1xuXHR9XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuc2VuZFNvY2tldERhdGEgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdHZhciBtZXNzYWdlID0gdGhpcy5fY3JlYXRlTWVzc2FnZShwYXJhbXMsIFwiU29ja2V0Q2xpZW50RGF0YVwiKTtcblx0aWYgKCF0aGlzLl9zZW5kKG1lc3NhZ2UpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2VuZCBzb2NrZXQhJyk7XG5cdH1cblx0cmV0dXJuIG1lc3NhZ2UuaWQ7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3ViSWQpIHtcblx0aWYgKHRoaXMuX3BlbmRpbmdNZXNzYWdlc1tzdWJJZF0gJiYgdGhpcy5fcGVuZGluZ01lc3NhZ2VzW3N1YklkXS50eXBlID09PSBcIlN1YnNjcmlwdGlvblwiKSB7XG5cdFx0dmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3JlbW92ZU1lc3NhZ2Uoc3ViSWQpO1xuXG5cdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLl9jcmVhdGVNZXNzYWdlKHtcblx0XHRcdHRhcmdldDogc3Vic2NyaXB0aW9uLnRhcmdldCxcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0c3ViSWQ6IHN1YklkXG5cdFx0XHR9XG5cdFx0fSwgXCJVbnN1YnNjcmliZVwiKTtcblxuXHRcdGlmICghdGhpcy5fc2VuZChtZXNzYWdlKSkge1xuXHRcdFx0TG9nZ2VyLmVycm9yKCdDYW5ub3Qgc2VuZCB1bnN1YnNjcmliZSAhJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vIEludGVybmFsIG1ldGhvZHMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2FwcGVuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgY2FsbGJhY2spIHtcblx0dGhpcy5fcGVuZGluZ01lc3NhZ2VzW21lc3NhZ2UuaWRdID0ge1xuXHRcdGNhbGxiYWNrOiBjYWxsYmFjayxcblx0XHR0eXBlOiBtZXNzYWdlLnR5cGUsXG5cdFx0dGFyZ2V0OiBtZXNzYWdlLnRhcmdldFxuXHR9O1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9yZW1vdmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCkge1xuXHR2YXIgaGFuZGxlciA9IHRoaXMuX3BlbmRpbmdNZXNzYWdlc1ttZXNzYWdlSWRdO1xuXHRpZiAoaGFuZGxlcikge1xuXHRcdGRlbGV0ZSB0aGlzLl9wZW5kaW5nTWVzc2FnZXNbbWVzc2FnZUlkXTtcblx0XHRyZXR1cm4gaGFuZGxlcjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9jbGVhck1lc3NhZ2VzID0gZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRmb3IgKHZhciBtZXNzYWdlSWQgaW4gdGhpcy5fcGVuZGluZ01lc3NhZ2VzKSB7XG5cdFx0dmFyIGhhbmRsZXIgPSB0aGlzLl9yZW1vdmVNZXNzYWdlKG1lc3NhZ2VJZCk7XG5cdFx0dGhpcy5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgZXJyLCBkYXRhKTtcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9jbGVhclBlZXJzID0gZnVuY3Rpb24gKCkge1xuXHR3aGlsZSAodGhpcy5fcGVlcnMubGVuZ3RoKSB7XG5cdFx0dmFyIHBlZXIgPSB0aGlzLl9wZWVycy5wb3AoKTtcblx0XHR0aGlzLnN0b3JlLmRlbGV0ZShwZWVyKTtcblx0XHR0aGlzLmVtaXQoJ3BlZXItZGlzY29ubmVjdGVkJywgcGVlcik7XG5cdH1cbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fZ2V0TWVzc2FnZUhhbmRsZXIgPSBmdW5jdGlvbiAobWVzc2FnZUlkKSB7XG5cdHZhciBoYW5kbGVyID0gdGhpcy5fcGVuZGluZ01lc3NhZ2VzW21lc3NhZ2VJZF07XG5cdHJldHVybiBoYW5kbGVyID8gaGFuZGxlciA6IG51bGw7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX25vdGlmeUxpc3RlbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIGVycm9yLCBkYXRhKSB7XG5cdGlmIChoYW5kbGVyICYmIHR5cGVvZiBoYW5kbGVyLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0ZXJyb3IgPSBlcnJvciA/IGVycm9yIDogbnVsbDtcblx0XHRkYXRhID0gZGF0YSA/IGRhdGEgOiBudWxsO1xuXHRcdHRyeSB7XG5cdFx0XHRoYW5kbGVyLmNhbGxiYWNrKGVycm9yLCBkYXRhKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnW0Vycm9yIGluIFJlcXVlc3QgY2FsbGJhY2tdICcgKyBlLnN0YWNrID8gZS5zdGFjayA6IGUpO1xuXHRcdH1cblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9zZW5kID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0cmV0dXJuIHRoaXMuX3NvY2tldEhhbmRsZXIgJiYgdGhpcy5fc29ja2V0SGFuZGxlci5zZW5kKG1lc3NhZ2UpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9zZXR1cFBpbmdSZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdHRoaXMuX3BpbmdUaW1lb3V0ID0gMTUwMDA7XG5cdHRoaXMuX2xhc3RQaW5nID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cblx0ZnVuY3Rpb24gY2hlY2tQaW5nKCkge1xuXHRcdHZhciBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0aWYgKGN1clRpbWUgLSB0aGF0Ll9sYXN0UGluZyA+IHRoYXQuX3BpbmdUaW1lb3V0KSB7XG5cdFx0XHR0aGF0Ll9mb3JjZUNsb3NlKCk7XG5cdFx0XHRMb2dnZXIubG9nKFwiZDE6ICB0aW1lZCBvdXQhXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRMb2dnZXIubG9nKFwiZDE6IGxhc3QgcGluZyBva1wiKTtcblx0XHRcdHRoYXQuX3BpbmdTZXRUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGNoZWNrUGluZywgTWF0aC5yb3VuZCh0aGF0Ll9waW5nVGltZW91dCAvIDIuMSkpO1xuXHRcdH1cblx0fVxuXG5cdGNoZWNrUGluZygpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9zdG9wUGluZ1Jlc3BvbnNlID0gZnVuY3Rpb24gKCkge1xuXHRjbGVhclRpbWVvdXQodGhpcy5fcGluZ1NldFRpbWVvdXRJZCk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2ZvcmNlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMuX3NvY2tldEhhbmRsZXIuY2xvc2UoKTtcblx0dGhpcy5fb25jbG9zZSgpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vIFNvY2tldCBldmVudCBoYW5kbGVycyAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fb25tZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0aWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJTb2NrZXRTZXJ2ZXJEYXRhXCIpIHRoaXMuX2hhbmRsZVNvY2tldFNlcnZlckRhdGEobWVzc2FnZSk7XG5cdGlmIChpc05hTihtZXNzYWdlLmlkKSkgcmV0dXJuIHRoaXMuX2hhbmRsZUludGVybmFsTWVzc2FnZShtZXNzYWdlKTtcblx0dmFyIGhhbmRsZXIgPSB0aGlzLl9nZXRNZXNzYWdlSGFuZGxlcihtZXNzYWdlLmlkKTtcblx0aWYgKCFoYW5kbGVyKSByZXR1cm47XG5cdHN3aXRjaCAoaGFuZGxlci50eXBlKSB7XG5cdFx0Y2FzZSBcIlJlcXVlc3RcIjpcblx0XHRcdHRoaXMuX2hhbmRsZVJlcXVlc3QoaGFuZGxlciwgbWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiU3Vic2NyaXB0aW9uXCI6XG5cdFx0XHR0aGlzLl9oYW5kbGVTdWJzY3JpcHRpb24oaGFuZGxlciwgbWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9vbm9wZW5pbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMuZW1pdCgnb3BlbmluZycsIHRoaXMpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoZXJyb3IpKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fb25jbG9zaW5nID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLmVtaXQoJ2Nsb3NpbmcnLCB0aGlzKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5fb25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdHRoaXMuX2NsZWFyTWVzc2FnZXMoJ1BlZXJEaXNjb25uZWN0ZWQnKTtcblx0dGhpcy5fY2xlYXJQZWVycygpO1xuXG5cdGlmICghdGhpcy5iRG9udFJlY29ubmVjdCkge1xuXHRcdExvZ2dlci5sb2coJ2QxOiBjb25uZWN0aW9uIGxvc3QsIHRyeSByZWNvbm5lY3RpbmcnKTtcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoYXQuY29ubmVjdCh0aGF0Ll9hZGRyLCB0aGF0Ll9XU29ja2V0KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7fSk7XG5cdFx0fSwgdGhhdC5fcmVjb25uZWN0VGltZW91dCk7XG5cdH1cblx0dGhpcy5lbWl0KCdjbG9zZScsIHRoaXMuX2FkZHIpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vIFByb3RvY29sIGV2ZW50IGhhbmRsZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2hhbmRsZUludGVybmFsTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG5cdFx0Y2FzZSBcIlBlZXJDb25uZWN0ZWRcIjpcblx0XHRcdHRoaXMuX2hhbmRsZVBlZXJDb25uZWN0ZWQobWVzc2FnZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiUGVlckRpc2Nvbm5lY3RlZFwiOlxuXHRcdFx0dGhpcy5faGFuZGxlUGVlckRpc2Nvbm5lY3RlZChtZXNzYWdlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJIYW5kc2hha2VcIjpcblx0XHRcdHRoaXMuX2hhbmRsZUhhbmRzaGFrZShtZXNzYWdlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJQaW5nXCI6XG5cdFx0XHR0aGlzLl9oYW5kbGVQaW5nKG1lc3NhZ2UpO1xuXHRcdFx0YnJlYWs7XG5cdH1cbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5faGFuZGxlUGluZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdG1lc3NhZ2UudHlwZSA9IFwiUG9uZ1wiO1xuXHR0aGlzLl9sYXN0UGluZyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR0aGlzLl9zZW5kKG1lc3NhZ2UpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVIYW5kc2hha2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXG5cdGlmIChtZXNzYWdlLnBlZXJzID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1lc3NhZ2Uuc2VsZiAhPT0gJ3N0cmluZycpIHtcblx0XHRMb2dnZXIuZXJyb3IoXCJNaXNzaW5nIGFyZ3VtZW50cyBmb3IgSGFuZHNoYWtlIG1lc3NhZ2UsIGRyb3BwaW5nLi4uXCIpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRoaXMuX3NlbGYgPSBtZXNzYWdlLnNlbGY7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLnBlZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dGhpcy5fcGVlcnMucHVzaChtZXNzYWdlLnBlZXJzW2ldKTtcblx0XHR0aGlzLnN0b3JlLnNldChtZXNzYWdlLnBlZXJzW2ldLCBuZXcgTWFwKCkpO1xuXHRcdHRoaXMuZW1pdCgncGVlci1jb25uZWN0ZWQnLCBtZXNzYWdlLnBlZXJzW2ldKTtcblx0fVxuXG5cdHRoaXMuX2Nvbm5lY3Rpb25EZWZlcnJlZC5yZXNvbHZlKHRoaXMuc2VsZigpKTtcblx0dGhpcy5lbWl0KCdvcGVuJywgdGhpcy5fYWRkcik7XG5cdHRoaXMuX3N0YXR1cyA9ICdvcGVuZWQnO1xuXHR0aGlzLl9jb25uZWN0aW9uRGVmZXJyZWQgPSBudWxsO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVQZWVyQ29ubmVjdGVkID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0aWYgKG1lc3NhZ2UucGVlcklkID09PSB1bmRlZmluZWQpIHtcblx0XHRMb2dnZXIuZXJyb3IoXCJNaXNzaW5nIGFyZ3VtZW50cyBmb3IgUGVlckNvbm5lY3RlZCBtZXNzYWdlLCBkcm9wcGluZy4uLlwiKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvL0FkZCBwZWVyIHRvIHRoZSBsaXN0IG9mIHJlYWNoYWJsZSBwZWVyc1xuXHR0aGlzLl9wZWVycy5wdXNoKG1lc3NhZ2UucGVlcklkKTtcblx0dGhpcy5zdG9yZS5zZXQobWVzc2FnZS5wZWVySWQsIG5ldyBNYXAoKSk7XG5cblx0dGhpcy5lbWl0KCdwZWVyLWNvbm5lY3RlZCcsIG1lc3NhZ2UucGVlcklkKTtcbn07XG5cbkRpeWFOb2RlLnByb3RvdHlwZS5faGFuZGxlUGVlckRpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdGlmIChtZXNzYWdlLnBlZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0TG9nZ2VyLmVycm9yKFwiTWlzc2luZyBhcmd1bWVudHMgZm9yIFBlZXJEaXNjb25uZWN0ZWQgTWVzc2FnZSwgZHJvcHBpbmcuLi5cIik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly9SZW1vdmUgcGVlciBmcm9tIGxpc3Qgb2YgcmVhY2hhYmxlIHBlZXJzXG5cdGZvciAodmFyIGkgPSB0aGlzLl9wZWVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdGlmICh0aGlzLl9wZWVyc1tpXSA9PT0gbWVzc2FnZS5wZWVySWQpIHtcblx0XHRcdHRoaXMuX3BlZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHQvL3JlbW92ZSBhc3NvY2lhdGVkIHN0b3JlXG5cdHRoaXMuc3RvcmUuZGVsZXRlKG1lc3NhZ2UucGVlcklkKTtcblxuXHQvL0dvIHRocm91Z2ggYWxsIHBlbmRpbmcgbWVzc2FnZXMgYW5kIG5vdGlmeSB0aGUgb25lcyB0aGF0IGFyZSB0YXJnZXRlZFxuXHQvL2F0IHRoZSBkaXNjb25uZWN0ZWQgcGVlciB0aGF0IGl0IGRpc2Nvbm5lY3RlZCBhbmQgdGhlcmVmb3JlIHRoZSBjb21tYW5kXG5cdC8vY2Fubm90IGJlIGZ1bGZpbGxlZFxuXHRmb3IgKHZhciBtZXNzYWdlSWQgaW4gdGhpcy5fcGVuZGluZ01lc3NhZ2VzKSB7XG5cdFx0dmFyIGhhbmRsZXIgPSB0aGlzLl9nZXRNZXNzYWdlSGFuZGxlcihtZXNzYWdlSWQpO1xuXHRcdGlmIChoYW5kbGVyICYmIGhhbmRsZXIudGFyZ2V0ID09PSBtZXNzYWdlLnBlZXJJZCkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlSWQpO1xuXHRcdFx0dGhpcy5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgJ1BlZXJEaXNjb25uZWN0ZWQnLCBudWxsKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzLmVtaXQoJ3BlZXItZGlzY29ubmVjdGVkJywgbWVzc2FnZS5wZWVySWQpO1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVSZXF1ZXN0ID0gZnVuY3Rpb24gKGhhbmRsZXIsIG1lc3NhZ2UpIHtcblx0aWYgKG1lc3NhZ2UudHlwZSA9PT0gJ1BhcnRpYWxBbnN3ZXInKSB7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9wZW5kaW5nTWVzc2FnZXNbbWVzc2FnZS5pZF0uY2FsbGJhY2tfcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dmFyIGVycm9yID0gbWVzc2FnZS5lcnJvciA/IG1lc3NhZ2UuZXJyb3IgOiBudWxsO1xuXHRcdFx0dmFyIGRhdGEgPSBtZXNzYWdlLmRhdGEgPyBtZXNzYWdlLmRhdGEgOiBudWxsO1xuXHRcdFx0dGhpcy5fcGVuZGluZ01lc3NhZ2VzW21lc3NhZ2UuaWRdLmNhbGxiYWNrX3BhcnRpYWwoZXJyb3IsIGRhdGEpO1xuXHRcdH1cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMuX3JlbW92ZU1lc3NhZ2UobWVzc2FnZS5pZCk7XG5cdFx0dGhpcy5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgbWVzc2FnZS5lcnJvciwgbWVzc2FnZS5kYXRhKTtcblx0fVxufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9oYW5kbGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoaGFuZGxlciwgbWVzc2FnZSkge1xuXHQvL3JlbW92ZSBzdWJzY3JpcHRpb24gaWYgaXQgd2FzIGNsb3NlZCBmcm9tIG5vZGVcblx0aWYgKG1lc3NhZ2UucmVzdWx0ID09PSBcImNsb3NlZFwiKSB7XG5cdFx0dGhpcy5fcmVtb3ZlTWVzc2FnZShtZXNzYWdlLmlkKTtcblx0XHRtZXNzYWdlLmVycm9yID0gJ1N1YnNjcmlwdGlvbkNsb3NlZCc7XG5cdH1cblx0dGhpcy5fbm90aWZ5TGlzdGVuZXIoaGFuZGxlciwgbWVzc2FnZS5lcnJvciwgbWVzc2FnZS5kYXRhID8gbWVzc2FnZS5kYXRhIDogbnVsbCk7XG59O1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2hhbmRsZVNvY2tldFNlcnZlckRhdGEgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHR0aGlzLl9kaXlhU29ja2V0LmdldChtZXNzYWdlLmRhdGEuc29ja2V0SWQpLnB1c2gobmV3IEJ1ZmZlcihtZXNzYWdlLmRhdGEuYnVmZmVyLCAnYmFzZTY0JykpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU29ja2V0SGFuZGxlciAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBTb2NrZXRIYW5kbGVyKFdTb2NrZXQsIGFkZHIsIHRpbWVvdXQpIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXG5cdGlmIChXU29ja2V0KSB0aGlzLl9XU29ja2V0ID0gV1NvY2tldDtlbHNlIGlmICghdGhpcy5fV1NvY2tldCkgdGhpcy5fV1NvY2tldCA9IHdpbmRvdy5XZWJTb2NrZXQ7XG5cdFdTb2NrZXQgPSB0aGlzLl9XU29ja2V0O1xuXG5cdHRoaXMuX3N0YXR1cyA9ICdvcGVuaW5nJztcblxuXHR0cnkge1xuXHRcdHRoaXMuX3NvY2tldCA9IGFkZHIuaW5kZXhPZihcIndzczovL1wiKSA9PT0gMCA/IG5ldyBXU29ja2V0KGFkZHIsIHVuZGVmaW5lZCwgeyByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlIH0pIDogbmV3IFdTb2NrZXQoYWRkcik7XG5cblx0XHR0aGlzLl9zb2NrZXRPcGVuQ2FsbGJhY2sgPSB0aGlzLl9vbm9wZW4uYmluZCh0aGlzKTtcblx0XHR0aGlzLl9zb2NrZXRDbG9zZUNhbGxiYWNrID0gdGhpcy5fb25jbG9zZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuX3NvY2tldE1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuX29ubWVzc2FnZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuX3NvY2tldEVycm9yQ2FsbGJhY2sgPSB0aGlzLl9vbmVycm9yLmJpbmQodGhpcyk7XG5cblx0XHR0aGlzLl9zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIHRoaXMuX3NvY2tldE9wZW5DYWxsYmFjayk7XG5cdFx0dGhpcy5fc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgdGhpcy5fc29ja2V0Q2xvc2VDYWxsYmFjayk7XG5cdFx0dGhpcy5fc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9zb2NrZXRNZXNzYWdlQ2FsbGJhY2spO1xuXHRcdHRoaXMuX3NvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX3NvY2tldEVycm9yQ2FsbGJhY2spO1xuXG5cdFx0dGhpcy5fc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0TG9nZ2VyLmVycm9yKFwiW1dTXSBlcnJvciA6IFwiICsgZXJyLnRvU3RyaW5nKCkpO1xuXHRcdFx0dGhhdC5fc29ja2V0LmNsb3NlKCk7XG5cdFx0fSk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICh0aGF0Ll9zdGF0dXMgPT09ICdvcGVuZWQnKSByZXR1cm47XG5cdFx0XHRpZiAodGhhdC5fc3RhdHVzICE9PSAnY2xvc2VkJykge1xuXHRcdFx0XHRMb2dnZXIubG9nKCdkMTogJyArIHRoYXQuYWRkciArICcgdGltZWQgb3V0IHdoaWxlIGNvbm5lY3RpbmcnKTtcblx0XHRcdFx0dGhhdC5jbG9zZSgpO1xuXHRcdFx0XHR0aGF0LmVtaXQoJ3RpbWVvdXQnLCB0aGF0Ll9zb2NrZXQpO1xuXHRcdFx0fVxuXHRcdH0sIHRpbWVvdXQpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0TG9nZ2VyLmVycm9yKGUuc3RhY2spO1xuXHRcdHRoYXQuY2xvc2UoKTtcblx0XHR0aHJvdyBlO1xuXHR9XG59O1xuaW5oZXJpdHMoU29ja2V0SGFuZGxlciwgRXZlbnRFbWl0dGVyKTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQgJiYgdGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UpIHJldHVybiB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZTtcblx0dGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkID0gUS5kZWZlcigpO1xuXHR0aGlzLl9zdGF0dXMgPSAnY2xvc2luZyc7XG5cdHRoaXMuZW1pdCgnY2xvc2luZycsIHRoaXMuX3NvY2tldCk7XG5cdGlmICh0aGlzLl9zb2NrZXQpIHRoaXMuX3NvY2tldC5jbG9zZSgpO1xuXHRyZXR1cm4gdGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2U7XG59O1xuXG5Tb2NrZXRIYW5kbGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0dHJ5IHtcblx0XHR2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKCdDYW5ub3Qgc2VyaWFsaXplIG1lc3NhZ2UnKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR0cnkge1xuXHRcdHRoaXMuX3NvY2tldC5zZW5kKGRhdGEpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKCdDYW5ub3Qgc2VuZCBtZXNzYWdlJyk7XG5cdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuaXNDb25uZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLl9zb2NrZXQucmVhZHlTdGF0ZSA9PSB0aGlzLl9XU29ja2V0Lk9QRU4gJiYgdGhpcy5fc3RhdHVzID09PSAnb3BlbmVkJztcbn07XG5cblNvY2tldEhhbmRsZXIucHJvdG90eXBlLl9vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMuX3N0YXR1cyA9ICdvcGVuZWQnO1xuXHR0aGlzLmVtaXQoJ29wZW4nLCB0aGlzLl9zb2NrZXQpO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuX29uY2xvc2UgPSBmdW5jdGlvbiAoZXZ0KSB7XG5cdHRoaXMuX3N0YXR1cyA9ICdjbG9zZWQnO1xuXHR0aGlzLnVucmVnaXN0ZXJDYWxsYmFja3MoKTtcblx0dGhpcy5lbWl0KCdjbG9zZScsIHRoaXMuX3NvY2tldCk7XG5cdGlmICh0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQgJiYgdGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkLnByb21pc2UpIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5yZXNvbHZlKCk7XG59O1xuXG5Tb2NrZXRIYW5kbGVyLnByb3RvdHlwZS5fb25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkge1xuXHR0cnkge1xuXHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSk7XG5cdFx0dGhpcy5lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdExvZ2dlci5lcnJvcihcIltXU10gY2Fubm90IHBhcnNlIG1lc3NhZ2UsIGRyb3BwaW5nLi4uXCIpO1xuXHRcdHRocm93IGVycjtcblx0fVxufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUuX29uZXJyb3IgPSBmdW5jdGlvbiAoZXZ0KSB7XG5cdHRoaXMuZW1pdCgnZXJyb3InLCBldnQpO1xufTtcblxuU29ja2V0SGFuZGxlci5wcm90b3R5cGUudW5yZWdpc3RlckNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX3NvY2tldCAmJiB0eXBlb2YgdGhpcy5fc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHR0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3BlbicsIHRoaXMuX3NvY2tldE9wZW5DYWxsYmFjayk7XG5cdFx0dGhpcy5fc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgdGhpcy5fc29ja2V0Q2xvc2VDYWxsYmFjayk7XG5cdFx0dGhpcy5fc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9zb2NrZXRNZXNzYWdlQ2FsbGJhY2spO1xuXHR9IGVsc2UgaWYgKHRoaXMuX3NvY2tldCAmJiB0eXBlb2YgdGhpcy5fc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRoaXMuX3NvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblx0fVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFV0aWxpdHkgbWV0aG9kcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5EaXlhTm9kZS5wcm90b3R5cGUuX2NyZWF0ZU1lc3NhZ2UgPSBmdW5jdGlvbiAocGFyYW1zLCB0eXBlKSB7XG5cdGlmICghcGFyYW1zIHx8ICF0eXBlIHx8IHR5cGUgIT09IFwiUmVxdWVzdFwiICYmIHR5cGUgIT09IFwiU3Vic2NyaXB0aW9uXCIgJiYgdHlwZSAhPT0gXCJVbnN1YnNjcmliZVwiICYmIHR5cGUgIT09IFwiU29ja2V0Q2xpZW50RGF0YVwiKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHR5cGUsXG5cdFx0aWQ6IHRoaXMuX2dlbmVyYXRlSWQoKSxcblx0XHRzZXJ2aWNlOiBwYXJhbXMuc2VydmljZSxcblx0XHR0YXJnZXQ6IHBhcmFtcy50YXJnZXQsXG5cdFx0ZnVuYzogcGFyYW1zLmZ1bmMsXG5cdFx0b2JqOiBwYXJhbXMub2JqLFxuXHRcdGRhdGE6IHBhcmFtcy5kYXRhLFxuXHRcdGJ1czogcGFyYW1zLmJ1c1xuXHR9O1xufTtcblxuRGl5YU5vZGUucHJvdG90eXBlLl9nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgaWQgPSB0aGlzLl9uZXh0SWQ7XG5cdHRoaXMuX25leHRJZCsrO1xuXHRyZXR1cm4gaWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpeWFOb2RlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5RWFYbGhUbTlrWlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4SlFVRkpMRmxCUVZrc1JVRkJSU3hQUVVGUExFMUJRVkFzUzBGQmEwSXNWMEZCY0VJc1EwRkJhRUk3UVVGRFFTeEpRVUZKTERCQ1FVRktPMEZCUTBFc1NVRkJSeXhEUVVGRExGTkJRVW9zUlVGQlpUdEJRVU5rTEV0QlFVa3NTVUZCU1N4UlFVRlJMRWRCUVZJc1EwRkJVanRCUVVOQkxIRkNRVUZ2UWl4UlFVRlJMSEZDUVVGU0xFTkJRWEJDTzBGQlEwRXNRMEZJUkN4TlFVbExPMEZCUVVVc1MwRkJTU3hKUVVGSkxFOUJRVThzUTBGQlpqdEJRVUZ0UWpzN1FVRkZNVUlzU1VGQlNTeGxRVUZsTEZGQlFWRXNiMEpCUVZJc1EwRkJia0k3UVVGRFFTeEpRVUZKTEZkQlFWY3NVVUZCVVN4VlFVRlNMRU5CUVdZN1FVRkRRU3hKUVVGSkxHRkJRV0VzVVVGQlVTeGpRVUZTTEVOQlFXcENPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4SlFVRkpMRkZCUVZFc1MwRkJXanRCUVVOQkxFbEJRVWtzVTBGQlV6dEJRVU5hTEUxQlFVc3NZVUZCVXl4UFFVRlVMRVZCUVdsQ08wRkJRM0pDTEUxQlFVY3NTMEZCU0N4RlFVRlZMRkZCUVZFc1IwRkJVaXhEUVVGWkxFOUJRVm83UVVGRFZpeEZRVWhYT3p0QlFVdGFMRkZCUVU4c1pVRkJVeXhQUVVGVUxFVkJRV2xDTzBGQlEzWkNMRTFCUVVjc1MwRkJTQ3hGUVVGVkxGRkJRVkVzUzBGQlVpeERRVUZqTEU5QlFXUTdRVUZEVmp0QlFWQlhMRU5CUVdJN08wRkJWVUU3UVVGRFFUdEJRVU5CT3pzN1FVRkhRU3hUUVVGVExGRkJRVlFzUjBGQmJVSTdRVUZEYkVJc1kwRkJZU3hKUVVGaUxFTkJRV3RDTEVsQlFXeENPenRCUVVWQkxFMUJRVXNzUzBGQlRDeEhRVUZoTEVsQlFXSTdRVUZEUVN4TlFVRkxMR05CUVV3c1IwRkJjMElzU1VGQmRFSTdRVUZEUVN4TlFVRkxMRXRCUVV3c1IwRkJZU3hKUVVGaU96dEJRVVZCTEUxQlFVc3NUMEZCVEN4SFFVRmxMRkZCUVdZN1FVRkRRU3hOUVVGTExFdEJRVXdzUjBGQllTeEpRVUZpTzBGQlEwRXNUVUZCU3l4UFFVRk1MRWRCUVdVc1NVRkJaanRCUVVOQkxFMUJRVXNzVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4TlFVRkxMRzFDUVVGTUxFZEJRVEpDTEVsQlFUTkNPMEZCUTBFc1RVRkJTeXh6UWtGQlRDeEhRVUU0UWl4SlFVRTVRanRCUVVOQkxFMUJRVXNzWjBKQlFVd3NSMEZCZDBJc1JVRkJlRUk3UVVGRFFTeE5RVUZMTEUxQlFVd3NSMEZCWXl4RlFVRmtPMEZCUTBFc1RVRkJTeXhwUWtGQlRDeEhRVUY1UWl4SlFVRjZRanRCUVVOQkxFMUJRVXNzWlVGQlRDeEhRVUYxUWl4SlFVRjJRanRCUVVOQkxFMUJRVXNzUzBGQlRDeEhRVUZoTEVsQlFVa3NSMEZCU2l4RlFVRmlPMEZCUTBFc1RVRkJTeXhYUVVGTUxFZEJRVzFDTEVsQlFVa3NSMEZCU2l4RlFVRnVRanRCUVVOQk8wRkJRMFFzVTBGQlV5eFJRVUZVTEVWQlFXMUNMRmxCUVc1Q096dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNTVUZCYmtJc1IwRkJNRUlzVlVGQlV5eEpRVUZVTEVWQlFXVTdRVUZEZUVNc1MwRkJSeXhKUVVGSUxFVkJRVk1zUzBGQlN5eExRVUZNTEVkQlFXRXNTVUZCWWl4RFFVRlVMRXRCUTBzc1QwRkJUeXhMUVVGTExFdEJRVm83UVVGRFRDeERRVWhFTzBGQlNVRXNVMEZCVXl4VFFVRlVMRU5CUVcxQ0xHRkJRVzVDTEVkQlFXMURMRlZCUVZNc1lVRkJWQ3hGUVVGM1FqdEJRVU14UkN4TFFVRkhMR3RDUVVGclFpeFRRVUZ5UWl4RlFVRm5ReXhMUVVGTExHTkJRVXdzUjBGQmMwSXNZVUZCZEVJc1EwRkJhRU1zUzBGRFN5eFBRVUZQTEV0QlFVc3NZMEZCV2p0QlFVTk1MRU5CU0VRN1FVRkpRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNTVUZCYmtJc1IwRkJNRUlzVlVGQlV5eEpRVUZVTEVWQlFXVTdRVUZEZUVNc1MwRkJSeXhUUVVGVExGTkJRVm9zUlVGQmRVSXNTMEZCU3l4TFFVRk1MRWRCUVdFc1NVRkJZaXhEUVVGMlFpeExRVU5MTEU5QlFVOHNTMEZCU3l4TFFVRmFPMEZCUTB3c1EwRklSRHRCUVVsQkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4SlFVRnVRaXhIUVVFd1FpeFpRVUZYTzBGQlFVVXNVVUZCVHl4TFFVRkxMRXRCUVZvN1FVRkJiMElzUTBGQk0wUTdRVUZEUVN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzUzBGQmJrSXNSMEZCTWtJc1dVRkJWVHRCUVVGRkxGRkJRVThzUzBGQlN5eE5RVUZhTzBGQlFYRkNMRU5CUVRWRU8wRkJRMEVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRWxCUVc1Q0xFZEJRVEJDTEZsQlFWYzdRVUZCUlN4UlFVRlBMRXRCUVVzc1MwRkJXanRCUVVGdlFpeERRVUV6UkR0QlFVTkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeFZRVUZ1UWl4SFFVRm5ReXhWUVVGVExGRkJRVlFzUlVGQmJVSTdRVUZCUlN4TlFVRkxMRkZCUVV3c1IwRkJaMElzWVVGQllTeExRVUUzUWp0QlFVRnhReXhEUVVFeFJqdEJRVU5CTEZOQlFWTXNVMEZCVkN4RFFVRnRRaXhWUVVGdVFpeEhRVUZuUXl4VlFVRlRMRTlCUVZRc1JVRkJhMEk3UVVGQlF5eE5RVUZMTEZGQlFVd3NSMEZCWjBJc1QwRkJhRUk3UVVGQmVVSXNRMEZCTlVVN08wRkJSVUU3UVVGRFFTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1QwRkJia0lzUjBGQk5rSXNWVUZCVlN4SlFVRldMRVZCUVdkQ0xFOUJRV2hDTEVWQlFYbENPMEZCUVVFN08wRkJRM0pFTEUxQlFVc3NZMEZCVEN4SFFVRnpRaXhMUVVGMFFqczdRVUZGUVR0QlFVTkJMRXRCUVVrc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEZOQlFXaENMRU5CUVVvc1JVRkJaME03UVVGREwwSTdRVUZEUVN4TlFVRkpMRXRCUVVzc1MwRkJUQ3hMUVVGbExFbEJRVzVDTEVWQlFYbENPMEZCUTNoQ0xGZEJRVkVzUjBGQlVqdEJRVU5CTEU5QlFVa3NTMEZCU3l4UFFVRk1MRXRCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUXpsQ0xGbEJRVkVzUjBGQlVqdEJRVU5CTEZkQlFVOHNSVUZCUlN4TFFVRkxMRWxCUVV3c1JVRkJSaXhEUVVGUU8wRkJRMEVzU1VGSVJDeE5RVWxMTEVsQlFVa3NTMEZCU3l4dFFrRkJUQ3hKUVVFMFFpeExRVUZMTEcxQ1FVRk1MRU5CUVhsQ0xFOUJRWEpFTEVsQlFXZEZMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zVTBGQmFrTXNSVUZCY0VVc1JVRkJhMGc3UVVGRGRFZ3NXVUZCVVN4SFFVRlNPMEZCUTBFc1YwRkJUeXhMUVVGTExHMUNRVUZNTEVOQlFYbENMRTlCUVdoRE8wRkJRMEU3UVVGRFJEczdRVUZGUkN4VFFVRlBMRXRCUVVzc1MwRkJUQ3hIUVVOT0xFbEJSRTBzUTBGRFFTeGhRVUZMTzBGQlExZ3NVMEZCU3l4TFFVRk1MRWRCUVdFc1NVRkJZanRCUVVOQkxGTkJRVXNzYlVKQlFVd3NSMEZCTWtJc1JVRkJSU3hMUVVGR0xFVkJRVE5DTzBGQlEwRXNWVUZCVHl4SFFVRlFMRU5CUVZjc2IwSkJRVzlDTEUxQlFVc3NTMEZCY0VNN1FVRkRRU3hQUVVGSkxFOUJRVThzU1VGQlNTeHBRa0ZCU2l4RFFVRnpRaXhOUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUZZTEVOQlFXdENMRlZCUVZVc1RVRkJOVUlzUTBGQmRFSXNSVUZCTWtRc1RVRkJTeXhsUVVGb1JTeERRVUZZT3p0QlFVVkJMRTlCUVVrc1EwRkJReXhOUVVGTExHTkJRVllzUlVGRFF5eE5RVUZMTEdOQlFVd3NSMEZCYzBJc1NVRkJkRUk3TzBGQlJVUXNVMEZCU3l4VlFVRk1PenRCUVVWQkxGRkJRVXNzUlVGQlRDeERRVUZSTEUxQlFWSXNSVUZCWjBJc1lVRkJTenRCUVVOd1FpeFJRVUZKTEUxQlFVc3NZMEZCVEN4TFFVRjNRaXhKUVVFMVFpeEZRVUZyUXp0QlFVTnFReXhoUVVGUkxFZEJRVklzUTBGQldTd3dSVUZCV2p0QlFVTkJPMEZCUTBFN1FVRkRSQ3hWUVVGTExFOUJRVXdzUjBGQlpTeFJRVUZtTzBGQlEwRXNWVUZCU3l4clFrRkJURHRCUVVOQkxFbEJVRVE3TzBGQlUwRXNVVUZCU3l4RlFVRk1MRU5CUVZFc1UwRkJVaXhGUVVGdFFpeGhRVUZMTzBGQlEzWkNMRkZCUVVrc1RVRkJTeXhqUVVGTUxFdEJRWGRDTEVsQlFUVkNMRVZCUTBNN1FVRkRSQ3hWUVVGTExGVkJRVXc3UVVGRFFTeEpRVXBFT3p0QlFVMUJMRkZCUVVzc1JVRkJUQ3hEUVVGUkxFOUJRVklzUlVGQmFVSXNZVUZCU3p0QlFVTnlRaXhSUVVGSkxFMUJRVXNzWTBGQlRDeExRVUYzUWl4SlFVRTFRaXhGUVVORE8wRkJRMFFzVlVGQlN5eGpRVUZNTEVkQlFYTkNMRWxCUVhSQ08wRkJRMEVzVlVGQlN5eFBRVUZNTEVkQlFXVXNVVUZCWmp0QlFVTkJMRlZCUVVzc2FVSkJRVXc3UVVGRFFTeFZRVUZMTEZGQlFVdzdPMEZCUlVFc1VVRkJTU3hOUVVGTExHMUNRVUZVTEVWQlFUaENPMEZCUXpkQ0xGZEJRVXNzYlVKQlFVd3NRMEZCZVVJc1RVRkJla0lzUTBGQlowTXNVVUZCYUVNN1FVRkRRU3hYUVVGTExHMUNRVUZNTEVkQlFUSkNMRWxCUVROQ08wRkJRMEU3UVVGRFJDeEpRVnBFT3p0QlFXTkJMRkZCUVVzc1JVRkJUQ3hEUVVGUkxFOUJRVklzUlVGQmFVSXNhVUpCUVZNN1FVRkRla0lzVVVGQlNTeE5RVUZMTEdOQlFVd3NTMEZCZDBJc1NVRkJOVUlzUlVGRFF6dEJRVU5FTEZWQlFVc3NVVUZCVEN4RFFVRmpMRXRCUVdRN1FVRkRRU3hKUVVwRU96dEJRVTFCTEZGQlFVc3NSVUZCVEN4RFFVRlJMRk5CUVZJc1JVRkJiVUlzWVVGQlN6dEJRVU4yUWl4UlFVRkpMRTFCUVVzc1kwRkJUQ3hMUVVGM1FpeEpRVUUxUWl4RlFVTkRPMEZCUTBRc1ZVRkJTeXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBFc1ZVRkJTeXhQUVVGTUxFZEJRV1VzVVVGQlpqdEJRVU5CTEZGQlFVa3NUVUZCU3l4dFFrRkJWQ3hGUVVFNFFqdEJRVU0zUWl4WFFVRkxMRzFDUVVGTUxFTkJRWGxDTEUxQlFYcENMRU5CUVdkRExGRkJRV2hETzBGQlEwRXNWMEZCU3l4dFFrRkJUQ3hIUVVFeVFpeEpRVUV6UWp0QlFVTkJPMEZCUTBRc1NVRlVSRHM3UVVGWFFTeFJRVUZMTEVWQlFVd3NRMEZCVVN4VFFVRlNMRVZCUVcxQ0xFMUJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhQUVVGdVFqczdRVUZGUVN4VlFVRlBMRTFCUVVzc2JVSkJRVXdzUTBGQmVVSXNUMEZCYUVNN1FVRkRRU3hIUVRkRVRTeERRVUZRTzBGQk9FUkJPenRCUVVWRUxFdEJRVWtzV1VGQldTeFRRVUZvUWl4RlFVTkRMRXRCUVVzc1VVRkJUQ3hIUVVGblFpeFBRVUZvUWl4RFFVUkVMRXRCUlVzc1NVRkJTU3hMUVVGTExGRkJRVXdzUzBGQmEwSXNVMEZCZEVJc1JVRkRTaXhMUVVGTExGRkJRVXdzUjBGQlowSXNUMEZCVHl4VFFVRjJRanM3UVVGRlJDeFhRVUZWTEV0QlFVc3NVVUZCWmpzN1FVRkZRVHRCUVVOQkxFdEJRVWtzUzBGQlN5eFZRVUZNTEVOQlFXZENMRTlCUVdoQ0xFdEJRVFJDTEV0QlFVc3NVVUZCY2tNc1JVRkRReXhQUVVGUExFVkJRVVVzVFVGQlJpeERRVUZUTEhORFFVRnpReXhKUVVGMFF5eEhRVUUyUXl4SFFVRjBSQ3hEUVVGUU96dEJRVVZFTEV0QlFVa3NTMEZCU3l4VlFVRk1MRU5CUVdkQ0xGRkJRV2hDTEV0QlFUWkNMRXRCUVVzc1VVRkJUQ3hMUVVGclFpeExRVUZ1UkN4RlFVTkRMRTlCUVU4c1JVRkJSU3hOUVVGR0xFTkJRVk1zTUVOQlFUQkRMRWxCUVRGRExFZEJRV2xFTEVkQlFURkVMRU5CUVZBN08wRkJSVVFzUzBGQlNTeERRVUZETEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeERRVUZFTEVsQlFUWkNMRU5CUVVNc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEZGQlFXaENMRU5CUVd4RExFVkJRVFpFTzBGQlF6VkVMRTFCUVVrc1MwRkJTeXhSUVVGVUxFVkJRME1zVDBGQlR5eFhRVUZYTEVsQlFXeENMRU5CUkVRc1MwRkhReXhQUVVGUExGVkJRVlVzU1VGQmFrSTdRVUZEUkRzN1FVRkZSQ3hMUVVGSkxFdEJRVXNzUzBGQlRDeExRVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM2hDTEUxQlFVa3NTMEZCU3l4UFFVRk1MRXRCUVdsQ0xGRkJRWEpDTEVWQlEwTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1NVRkJUQ3hGUVVGR0xFTkJRVkFzUTBGRVJDeExRVVZMTEVsQlFVa3NTMEZCU3l4dFFrRkJUQ3hKUVVFMFFpeExRVUZMTEcxQ1FVRk1MRU5CUVhsQ0xFOUJRWEpFTEVsQlFXZEZMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zVTBGQmFrTXNSVUZCY0VVc1JVRkRTaXhQUVVGUExFdEJRVXNzYlVKQlFVd3NRMEZCZVVJc1QwRkJhRU03UVVGRFJEczdRVUZGUkN4UlFVRlBMRXRCUVVzc1MwRkJUQ3hIUVVOT0xFbEJSRTBzUTBGRFFTeGhRVUZMTzBGQlExZ3NVVUZCU3l4TFFVRk1MRWRCUVdFc1NVRkJZanRCUVVOQkxGRkJRVXNzYlVKQlFVd3NSMEZCTWtJc1JVRkJSU3hMUVVGR0xFVkJRVE5DTzBGQlEwRXNVMEZCVHl4SFFVRlFMRU5CUVZjc2IwSkJRVzlDTEUxQlFVc3NTMEZCY0VNN1FVRkRRU3hOUVVGSkxFOUJRVThzU1VGQlNTeGhRVUZLTEVOQlFXdENMRTlCUVd4Q0xFVkJRVEpDTEUxQlFVc3NTMEZCYUVNc1JVRkJkVU1zVFVGQlN5eGxRVUUxUXl4RFFVRllPenRCUVVWQkxFMUJRVWtzUTBGQlF5eE5RVUZMTEdOQlFWWXNSVUZEUXl4TlFVRkxMR05CUVV3c1IwRkJjMElzU1VGQmRFSTdPMEZCUlVRc1VVRkJTeXhWUVVGTU96dEJRVVZCTEU5QlFVc3NSVUZCVEN4RFFVRlJMRTFCUVZJc1JVRkJaMElzWVVGQlN6dEJRVU53UWl4UFFVRkpMRTFCUVVzc1kwRkJUQ3hMUVVGM1FpeEpRVUUxUWl4RlFVRnJRenRCUVVOcVF5eFpRVUZSTEVkQlFWSXNRMEZCV1N4dFJVRkJXanRCUVVOQk8wRkJRMEU3UVVGRFJDeFRRVUZMTEdOQlFVd3NSMEZCYzBJc1NVRkJkRUk3UVVGRFFTeFRRVUZMTEU5QlFVd3NSMEZCWlN4UlFVRm1PMEZCUTBFc1UwRkJTeXhyUWtGQlREdEJRVU5CTEVkQlVrUTdPMEZCVlVFc1QwRkJTeXhGUVVGTUxFTkJRVkVzVTBGQlVpeEZRVUZ0UWl4aFFVRkxPMEZCUTNaQ0xFOUJRVWtzVFVGQlN5eGpRVUZNTEV0QlFYZENMRWxCUVRWQ0xFVkJRME03UVVGRFJDeFRRVUZMTEZWQlFVdzdRVUZEUVN4SFFVcEVPenRCUVUxQkxFOUJRVXNzUlVGQlRDeERRVUZSTEU5QlFWSXNSVUZCYVVJc1lVRkJTenRCUVVOeVFpeFBRVUZKTEUxQlFVc3NZMEZCVEN4TFFVRjNRaXhKUVVFMVFpeEZRVU5ETzBGQlEwUXNVMEZCU3l4alFVRk1MRWRCUVhOQ0xFbEJRWFJDTzBGQlEwRXNVMEZCU3l4UFFVRk1MRWRCUVdVc1VVRkJaanRCUVVOQkxGTkJRVXNzYVVKQlFVdzdRVUZEUVN4VFFVRkxMRkZCUVV3N08wRkJSVUVzVDBGQlNTeE5RVUZMTEcxQ1FVRlVMRVZCUVRoQ08wRkJRemRDTEZWQlFVc3NiVUpCUVV3c1EwRkJlVUlzVFVGQmVrSXNRMEZCWjBNc1VVRkJhRU03UVVGRFFTeFZRVUZMTEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DTzBGQlEwRTdRVUZEUkN4SFFWcEVPenRCUVdOQkxFOUJRVXNzUlVGQlRDeERRVUZSTEU5QlFWSXNSVUZCYVVJc2FVSkJRVk03UVVGRGVrSXNUMEZCU1N4TlFVRkxMR05CUVV3c1MwRkJkMElzU1VGQk5VSXNSVUZEUXp0QlFVTkVMRk5CUVVzc1VVRkJUQ3hEUVVGakxFdEJRV1E3UVVGRFFTeEhRVXBFT3p0QlFVMUJMRTlCUVVzc1JVRkJUQ3hEUVVGUkxGTkJRVklzUlVGQmJVSXNZVUZCU3p0QlFVTjJRaXhQUVVGSkxFMUJRVXNzWTBGQlRDeExRVUYzUWl4SlFVRTFRaXhGUVVORE8wRkJRMFFzVTBGQlN5eGpRVUZNTEVkQlFYTkNMRWxCUVhSQ08wRkJRMEVzVTBGQlN5eFBRVUZNTEVkQlFXVXNVVUZCWmp0QlFVTkJMRTlCUVVrc1RVRkJTeXh0UWtGQlZDeEZRVUU0UWp0QlFVTTNRaXhWUVVGTExHMUNRVUZNTEVOQlFYbENMRTFCUVhwQ0xFTkJRV2RETEZGQlFXaERPMEZCUTBFc1ZVRkJTeXh0UWtGQlRDeEhRVUV5UWl4SlFVRXpRanRCUVVOQk8wRkJRMFFzUjBGVVJEczdRVUZYUVN4UFFVRkxMRVZCUVV3c1EwRkJVU3hUUVVGU0xFVkJRVzFDTEUxQlFVc3NWVUZCVEN4RFFVRm5RaXhKUVVGb1FpeFBRVUZ1UWpzN1FVRkZRU3hUUVVGUExFMUJRVXNzYlVKQlFVd3NRMEZCZVVJc1QwRkJhRU03UVVGRFFTeEZRVGxFVFN4RFFVRlFPMEZCSzBSQkxFTkJOMHRFT3p0QlFTdExRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNWVUZCYmtJc1IwRkJaME1zV1VGQlZ6dEJRVU14UXl4TlFVRkxMR05CUVV3c1IwRkJjMElzU1VGQmRFSTdRVUZEUVN4UlFVRlBMRXRCUVVzc1MwRkJUQ3hGUVVGUU8wRkJRMEVzUTBGSVJEczdRVUZMUVN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzUzBGQmJrSXNSMEZCTWtJc1dVRkJWVHRCUVVOd1F5eE5RVUZMTEdsQ1FVRk1PMEZCUTBFc1MwRkJSeXhMUVVGTExHTkJRVklzUlVGQmQwSXNUMEZCVHl4TFFVRkxMR05CUVV3c1EwRkJiMElzUzBGQmNFSXNSVUZCVUN4RFFVRjRRaXhMUVVOTExFOUJRVThzUjBGQlVEdEJRVU5NTEVOQlNrUTdPMEZCVFVFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEZkQlFXNUNMRWRCUVdsRExGbEJRVlU3UVVGRE1VTXNVVUZCVVN4TFFVRkxMR05CUVV3c1NVRkJkVUlzUzBGQlN5eGpRVUZNTEVOQlFXOUNMRmRCUVhCQ0xFVkJRUzlDTzBGQlEwRXNRMEZHUkRzN1FVRkpRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNUMEZCYmtJc1IwRkJOa0lzVlVGQlV5eE5RVUZVTEVWQlFXbENMRkZCUVdwQ0xFVkJRVEpDTEU5QlFUTkNMRVZCUVc5RExFOUJRWEJETEVWQlFUUkRPMEZCUTNoRkxFdEJRVWtzVDBGQlR5eEpRVUZZTzBGQlEwRXNTMEZCUnl4RFFVRkRMRTlCUVVvc1JVRkJZU3hWUVVGVkxFVkJRVlk3TzBGQlJXSXNTMEZCUnl4UFFVRlBMRmRCUVZBc1MwRkJkVUlzVFVGQk1VSXNSVUZCYTBNN1FVRkRha01zVFVGQlNTeFZRVUZWTEU5QlFVOHNTMEZCVUN4RFFVRmhMRWRCUVdJc1EwRkJaRHRCUVVOQkxFMUJRVWNzVVVGQlVTeE5RVUZTTEVsQlFXZENMRU5CUVc1Q0xFVkJRWE5DTEUxQlFVMHNhMEpCUVU0N1FVRkRkRUlzVjBGQlV5eEZRVUZETEZOQlFWRXNVVUZCVVN4RFFVRlNMRU5CUVZRc1JVRkJjVUlzVFVGQlN5eFJRVUZSTEVOQlFWSXNRMEZCTVVJc1JVRkJWRHRCUVVOQk96dEJRVVZFTEV0QlFVY3NRMEZCUXl4UFFVRlBMRTlCUVZnc1JVRkJiMEk3UVVGRGJrSXNVMEZCVHl4TFFVRlFMRU5CUVdFc2EwTkJRV0k3UVVGRFFTeFRRVUZQTEV0QlFWQTdRVUZEUVRzN1FVRkZSQ3hMUVVGSkxGVkJRVlVzUzBGQlN5eGpRVUZNTEVOQlFXOUNMRTFCUVhCQ0xFVkJRVFJDTEZOQlFUVkNMRU5CUVdRN1FVRkRRU3hOUVVGTExHTkJRVXdzUTBGQmIwSXNUMEZCY0VJc1JVRkJOa0lzVVVGQk4wSTdRVUZEUVN4TFFVRkhMRTlCUVU4c1VVRkJVU3huUWtGQlppeExRVUZ2UXl4VlFVRjJReXhGUVVGdFJDeExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xGRkJRVkVzUlVGQk9VSXNSVUZCYTBNc1owSkJRV3hETEVkQlFYRkVMRkZCUVZFc1owSkJRVGRFTzBGQlEyNUVMRk5CUVZFc1QwRkJVaXhIUVVGclFpeFBRVUZzUWpzN1FVRkZRU3hMUVVGSExFTkJRVU1zVFVGQlRTeFBRVUZPTEVOQlFVUXNTVUZCYlVJc1ZVRkJWU3hEUVVGb1F5eEZRVUZyUXp0QlFVTnFReXhoUVVGWExGbEJRVlU3UVVGRGNFSXNUMEZCU1N4VlFVRlZMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeFJRVUZSTEVWQlFUVkNMRU5CUVdRN1FVRkRRU3hQUVVGSExFOUJRVWdzUlVGQldTeExRVUZMTEdWQlFVd3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNkVUpCUVhGQ0xFOUJRWEpDTEVkQlFUWkNMRTlCUVRORU8wRkJRMW9zUjBGSVJDeEZRVWRITEU5QlNFZzdRVUZKUVRzN1FVRkZSQ3hMUVVGSExFTkJRVU1zUzBGQlN5eExRVUZNTEVOQlFWY3NUMEZCV0N4RFFVRktMRVZCUVhkQ08wRkJRM1pDTEU5QlFVc3NZMEZCVEN4RFFVRnZRaXhSUVVGUkxFVkJRVFZDTzBGQlEwRXNWVUZCVVN4TFFVRlNMRU5CUVdNc2RVSkJRV1E3UVVGRFFTeFRRVUZQTEV0QlFWQTdRVUZEUVRzN1FVRkZSQ3hSUVVGUExFbEJRVkE3UVVGRFFTeERRV3hEUkRzN1FVRnZRMEVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRk5CUVc1Q0xFZEJRU3RDTEZWQlFWTXNUVUZCVkN4RlFVRnBRaXhSUVVGcVFpeEZRVUV3UWp0QlFVTjRSQ3hMUVVGSExFOUJRVThzVjBGQlVDeExRVUYxUWl4TlFVRXhRaXhGUVVGclF6dEJRVU5xUXl4TlFVRkpMRlZCUVZVc1QwRkJUeXhMUVVGUUxFTkJRV0VzUjBGQllpeERRVUZrTzBGQlEwRXNUVUZCUnl4UlFVRlJMRTFCUVZJc1NVRkJaMElzUTBGQmJrSXNSVUZCYzBJc1RVRkJUU3hyUWtGQlRqdEJRVU4wUWl4WFFVRlRMRVZCUVVNc1UwRkJVU3hSUVVGUkxFTkJRVklzUTBGQlZDeEZRVUZ4UWl4TlFVRkxMRkZCUVZFc1EwRkJVaXhEUVVFeFFpeEZRVUZVTzBGQlEwRTdPMEZCUlVRc1MwRkJSeXhEUVVGRExFOUJRVThzVDBGQldDeEZRVUZ0UWp0QlFVTnNRaXhUUVVGUExFdEJRVkFzUTBGQllTeDFRMEZCWWp0QlFVTkJMRk5CUVU4c1EwRkJReXhEUVVGU08wRkJRMEU3TzBGQlJVUXNTMEZCU1N4VlFVRlZMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeE5RVUZ3UWl4RlFVRTBRaXhqUVVFMVFpeERRVUZrTzBGQlEwRXNUVUZCU3l4alFVRk1MRU5CUVc5Q0xFOUJRWEJDTEVWQlFUWkNMRkZCUVRkQ096dEJRVVZCTEV0QlFVY3NRMEZCUXl4TFFVRkxMRXRCUVV3c1EwRkJWeXhQUVVGWUxFTkJRVW9zUlVGQmQwSTdRVUZEZGtJc1QwRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFWRXNSVUZCTlVJN1FVRkRRU3hUUVVGUExFdEJRVkFzUTBGQllTdzBRa0ZCWWp0QlFVTkJMRk5CUVU4c1EwRkJReXhEUVVGU08wRkJRMEU3TzBGQlJVUXNVVUZCVHl4UlFVRlJMRVZCUVdZN1FVRkRRU3hEUVhSQ1JEczdRVUYzUWtFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEZWQlFXNUNMRWRCUVdkRExGVkJRVk1zVFVGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeFJRVUY2UWl4RlFVRnJRenRCUVVOcVJTeE5RVUZMTEZkQlFVd3NRMEZCYVVJc1IwRkJha0lzUTBGQmNVSXNUMEZCVHl4UlFVRTFRaXhGUVVGelF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TlFVRm1MRVZCUVhWQ0xFMUJRWFpDTEVOQlFYUkRPMEZCUTBFc1RVRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFXcENMRU5CUVhGQ0xFOUJRVThzVVVGQk5VSXNSVUZCYzBNc2NVSkJRWFJETEVOQlFUUkVMRTlCUVU4c1VVRkJia1U3UVVGRFFTeExRVUZKTEU5QlFVOHNVVUZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UXl4VFFVRlRMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeEhRVUZxUWl4RFFVRnhRaXhQUVVGUExGRkJRVFZDTEVOQlFWUTdRVUZEY0VNc1EwRktSRHM3UVVGTlFTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1kwRkJia0lzUjBGQmIwTXNWVUZCVXl4UlFVRlVMRVZCUVd0Q08wRkJRM0pFTEV0QlFVa3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFZEJRV3BDTEVOQlFYRkNMRkZCUVhKQ0xFTkJRVW9zUlVGQmJVTTdRVUZEYkVNc1QwRkJTeXhYUVVGTUxFTkJRV2xDTEVkQlFXcENMRU5CUVhGQ0xGRkJRWEpDTEVWQlFTdENMRWxCUVM5Q0xFTkJRVzlETEU5QlFYQkRPMEZCUTBFc1QwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRU5CUVhkQ0xGRkJRWGhDTzBGQlEwRTdRVUZEUkN4RFFVeEVPenRCUVU5QkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4alFVRnVRaXhIUVVGdlF5eFZRVUZUTEUxQlFWUXNSVUZCWjBJN1FVRkRia1FzUzBGQlNTeFZRVUZWTEV0QlFVc3NZMEZCVEN4RFFVRnZRaXhOUVVGd1FpeEZRVUUwUWl4clFrRkJOVUlzUTBGQlpEdEJRVU5CTEV0QlFVY3NRMEZCUXl4TFFVRkxMRXRCUVV3c1EwRkJWeXhQUVVGWUxFTkJRVW9zUlVGQmQwSTdRVUZEZGtJc1VVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHhRa0ZCVml4RFFVRk9PMEZCUTBFN1FVRkRSQ3hSUVVGUExGRkJRVkVzUlVGQlpqdEJRVU5CTEVOQlRrUTdPMEZCVVVFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEZkQlFXNUNMRWRCUVdsRExGVkJRVk1zUzBGQlZDeEZRVUZsTzBGQlF5OURMRXRCUVVjc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4TFFVRjBRaXhMUVVGblF5eExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFdEJRWFJDTEVWQlFUWkNMRWxCUVRkQ0xFdEJRWE5ETEdOQlFYcEZMRVZCUVhkR08wRkJRM1pHTEUxQlFVa3NaVUZCWlN4TFFVRkxMR05CUVV3c1EwRkJiMElzUzBGQmNFSXNRMEZCYmtJN08wRkJSVUVzVFVGQlNTeFZRVUZWTEV0QlFVc3NZMEZCVEN4RFFVRnZRanRCUVVOcVF5eFhRVUZSTEdGQlFXRXNUVUZFV1R0QlFVVnFReXhUUVVGTk8wRkJRMHdzVjBGQlR6dEJRVVJHTzBGQlJqSkNMRWRCUVhCQ0xFVkJTMWdzWVVGTVZ5eERRVUZrT3p0QlFVOUJMRTFCUVVjc1EwRkJReXhMUVVGTExFdEJRVXdzUTBGQlZ5eFBRVUZZTEVOQlFVb3NSVUZCZDBJN1FVRkRka0lzVlVGQlR5eExRVUZRTEVOQlFXRXNNa0pCUVdJN1FVRkRRU3hWUVVGUExFdEJRVkE3UVVGRFFUczdRVUZGUkN4VFFVRlBMRWxCUVZBN1FVRkRRVHRCUVVORUxGRkJRVThzUzBGQlVEdEJRVU5CTEVOQmJrSkVPenRCUVhWQ1FUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEdOQlFXNUNMRWRCUVc5RExGVkJRVk1zVDBGQlZDeEZRVUZyUWl4UlFVRnNRaXhGUVVFeVFqdEJRVU01UkN4TlFVRkxMR2RDUVVGTUxFTkJRWE5DTEZGQlFWRXNSVUZCT1VJc1NVRkJiME03UVVGRGJrTXNXVUZCVlN4UlFVUjVRanRCUVVWdVF5eFJRVUZOTEZGQlFWRXNTVUZHY1VJN1FVRkhia01zVlVGQlVTeFJRVUZSTzBGQlNHMUNMRVZCUVhCRE8wRkJTMEVzUTBGT1JEczdRVUZSUVN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzWTBGQmJrSXNSMEZCYjBNc1ZVRkJVeXhUUVVGVUxFVkJRVzFDTzBGQlEzUkVMRXRCUVVrc1ZVRkJWU3hMUVVGTExHZENRVUZNTEVOQlFYTkNMRk5CUVhSQ0xFTkJRV1E3UVVGRFFTeExRVUZITEU5QlFVZ3NSVUZCVnp0QlFVTldMRk5CUVU4c1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4VFFVRjBRaXhEUVVGUU8wRkJRMEVzVTBGQlR5eFBRVUZRTzBGQlEwRXNSVUZJUkN4TlFVZExPMEZCUTBvc1UwRkJUeXhKUVVGUU8wRkJRMEU3UVVGRFJDeERRVkpFT3p0QlFWVkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeGpRVUZ1UWl4SFFVRnZReXhWUVVGVExFZEJRVlFzUlVGQll5eEpRVUZrTEVWQlFXMUNPMEZCUTNSRUxFMUJRVWtzU1VGQlNTeFRRVUZTTEVsQlFYRkNMRXRCUVVzc1owSkJRVEZDTEVWQlFUSkRPMEZCUXpGRExFMUJRVWtzVlVGQlZTeExRVUZMTEdOQlFVd3NRMEZCYjBJc1UwRkJjRUlzUTBGQlpEdEJRVU5CTEU5QlFVc3NaVUZCVEN4RFFVRnhRaXhQUVVGeVFpeEZRVUU0UWl4SFFVRTVRaXhGUVVGdFF5eEpRVUZ1UXp0QlFVTkJPMEZCUTBRc1EwRk1SRHM3UVVGUFFTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1YwRkJia0lzUjBGQmFVTXNXVUZCVnp0QlFVTXpReXhSUVVGTkxFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFXeENMRVZCUVRCQ08wRkJRM3BDTEUxQlFVa3NUMEZCVHl4TFFVRkxMRTFCUVV3c1EwRkJXU3hIUVVGYUxFVkJRVmc3UVVGRFFTeFBRVUZMTEV0QlFVd3NRMEZCVnl4TlFVRllMRU5CUVd0Q0xFbEJRV3hDTzBGQlEwRXNUMEZCU3l4SlFVRk1MRU5CUVZVc2JVSkJRVllzUlVGQkswSXNTVUZCTDBJN1FVRkRRVHRCUVVORUxFTkJUa1E3TzBGQlVVRXNVMEZCVXl4VFFVRlVMRU5CUVcxQ0xHdENRVUZ1UWl4SFFVRjNReXhWUVVGVExGTkJRVlFzUlVGQmJVSTdRVUZETVVRc1MwRkJTU3hWUVVGVkxFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1UwRkJkRUlzUTBGQlpEdEJRVU5CTEZGQlFVOHNWVUZCVlN4UFFVRldMRWRCUVc5Q0xFbEJRVE5DTzBGQlEwRXNRMEZJUkRzN1FVRk5RU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNaVUZCYmtJc1IwRkJjVU1zVlVGQlV5eFBRVUZVTEVWQlFXdENMRXRCUVd4Q0xFVkJRWGxDTEVsQlFYcENMRVZCUVRoQ08wRkJRMnhGTEV0QlFVY3NWMEZCVnl4UFFVRlBMRkZCUVZFc1VVRkJaaXhMUVVFMFFpeFZRVUV4UXl4RlFVRnpSRHRCUVVOeVJDeFZRVUZSTEZGQlFWRXNTMEZCVWl4SFFVRm5RaXhKUVVGNFFqdEJRVU5CTEZOQlFVOHNUMEZCVHl4SlFVRlFMRWRCUVdNc1NVRkJja0k3UVVGRFFTeE5RVUZKTzBGQlEwZ3NWMEZCVVN4UlFVRlNMRU5CUVdsQ0xFdEJRV3BDTEVWQlFYZENMRWxCUVhoQ08wRkJRMEVzUjBGR1JDeERRVVZGTEU5QlFVMHNRMEZCVGl4RlFVRlRPMEZCUVVVc1YwRkJVU3hIUVVGU0xFTkJRVmtzYVVOQlFXbERMRVZCUVVVc1MwRkJia01zUjBGQk1rTXNSVUZCUlN4TFFVRTNReXhIUVVGeFJDeERRVUZxUlR0QlFVRnhSVHRCUVVOc1JqdEJRVU5FTEVOQlVrUTdPMEZCVlVFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEV0QlFXNUNMRWRCUVRKQ0xGVkJRVlVzVDBGQlZpeEZRVUZ0UWp0QlFVTTNReXhSUVVGUExFdEJRVXNzWTBGQlRDeEpRVUYxUWl4TFFVRkxMR05CUVV3c1EwRkJiMElzU1VGQmNFSXNRMEZCZVVJc1QwRkJla0lzUTBGQk9VSTdRVUZEUVN4RFFVWkVPenRCUVVsQkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4clFrRkJia0lzUjBGQmQwTXNXVUZCVlR0QlFVTnFSQ3hMUVVGSkxFOUJRVThzU1VGQldEczdRVUZGUVN4TlFVRkxMRmxCUVV3c1IwRkJiMElzUzBGQmNFSTdRVUZEUVN4TlFVRkxMRk5CUVV3c1IwRkJhVUlzU1VGQlNTeEpRVUZLTEVkQlFWY3NUMEZCV0N4RlFVRnFRanM3UVVGRlFTeFZRVUZUTEZOQlFWUXNSMEZCYjBJN1FVRkRia0lzVFVGQlNTeFZRVUZWTEVsQlFVa3NTVUZCU2l4SFFVRlhMRTlCUVZnc1JVRkJaRHRCUVVOQkxFMUJRVWNzVlVGQlZTeExRVUZMTEZOQlFXWXNSMEZCTWtJc1MwRkJTeXhaUVVGdVF5eEZRVUZuUkR0QlFVTXZReXhSUVVGTExGZEJRVXc3UVVGRFFTeFZRVUZQTEVkQlFWQXNRMEZCVnl4cFFrRkJXRHRCUVVOQkxFZEJTRVFzVFVGSFN6dEJRVU5LTEZWQlFVOHNSMEZCVUN4RFFVRlhMR3RDUVVGWU8wRkJRMEVzVVVGQlN5eHBRa0ZCVEN4SFFVRjVRaXhYUVVGWExGTkJRVmdzUlVGQmMwSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhaUVVGTUxFZEJRVzlDTEVkQlFTOUNMRU5CUVhSQ0xFTkJRWHBDTzBGQlEwRTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxFTkJiRUpFT3p0QlFXOUNRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNhVUpCUVc1Q0xFZEJRWFZETEZsQlFWVTdRVUZEYUVRc1kwRkJZU3hMUVVGTExHbENRVUZzUWp0QlFVTkJMRU5CUmtRN08wRkJTVUVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRmRCUVc1Q0xFZEJRV2xETEZsQlFWVTdRVUZETVVNc1RVRkJTeXhqUVVGTUxFTkJRVzlDTEV0QlFYQkNPMEZCUTBFc1RVRkJTeXhSUVVGTU8wRkJRMEVzUTBGSVJEczdRVUZMUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTEZOQlFWTXNVMEZCVkN4RFFVRnRRaXhWUVVGdVFpeEhRVUZuUXl4VlFVRlRMRTlCUVZRc1JVRkJhVUk3UVVGRGFFUXNTMEZCUnl4UlFVRlJMRWxCUVZJc1MwRkJhVUlzYTBKQlFYQkNMRVZCUVhkRExFdEJRVXNzZFVKQlFVd3NRMEZCTmtJc1QwRkJOMEk3UVVGRGVFTXNTMEZCUnl4TlFVRk5MRkZCUVZFc1JVRkJaQ3hEUVVGSUxFVkJRWE5DTEU5QlFVOHNTMEZCU3l4elFrRkJUQ3hEUVVFMFFpeFBRVUUxUWl4RFFVRlFPMEZCUTNSQ0xFdEJRVWtzVlVGQlZTeExRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xGRkJRVkVzUlVGQmFFTXNRMEZCWkR0QlFVTkJMRXRCUVVjc1EwRkJReXhQUVVGS0xFVkJRV0U3UVVGRFlpeFRRVUZQTEZGQlFWRXNTVUZCWmp0QlFVTkRMRTlCUVVzc1UwRkJURHRCUVVORExGRkJRVXNzWTBGQlRDeERRVUZ2UWl4UFFVRndRaXhGUVVFMlFpeFBRVUUzUWp0QlFVTkJPMEZCUTBRc1QwRkJTeXhqUVVGTU8wRkJRME1zVVVGQlN5eHRRa0ZCVEN4RFFVRjVRaXhQUVVGNlFpeEZRVUZyUXl4UFFVRnNRenRCUVVOQk8wRkJUa1k3UVVGUlFTeERRV0pFT3p0QlFXVkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeFZRVUZ1UWl4SFFVRm5ReXhaUVVGWE8wRkJRekZETEUxQlFVc3NTVUZCVEN4RFFVRlZMRk5CUVZZc1JVRkJjVUlzU1VGQmNrSTdRVUZEUVN4RFFVWkVPenRCUVVsQkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4UlFVRnVRaXhIUVVFNFFpeFZRVUZUTEV0QlFWUXNSVUZCWjBJN1FVRkROME1zVFVGQlN5eEpRVUZNTEVOQlFWVXNUMEZCVml4RlFVRnRRaXhKUVVGSkxFdEJRVW9zUTBGQlZTeExRVUZXTEVOQlFXNUNPMEZCUTBFc1EwRkdSRHM3UVVGSlFTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1ZVRkJia0lzUjBGQlowTXNXVUZCVnp0QlFVTXhReXhOUVVGTExFbEJRVXdzUTBGQlZTeFRRVUZXTEVWQlFYRkNMRWxCUVhKQ08wRkJRMEVzUTBGR1JEczdRVUZKUVN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzVVVGQmJrSXNSMEZCT0VJc1dVRkJWVHRCUVVOMlF5eExRVUZKTEU5QlFVOHNTVUZCV0RzN1FVRkZRU3hOUVVGTExHTkJRVXdzUTBGQmIwSXNhMEpCUVhCQ08wRkJRMEVzVFVGQlN5eFhRVUZNT3p0QlFVVkJMRXRCUVVjc1EwRkJReXhMUVVGTExHTkJRVlFzUlVGQmVVSTdRVUZEZUVJc1UwRkJUeXhIUVVGUUxFTkJRVmNzZFVOQlFWZzdRVUZEUVN4aFFVRlhMRmxCUVZVN1FVRkRjRUlzVVVGQlN5eFBRVUZNTEVOQlFXRXNTMEZCU3l4TFFVRnNRaXhGUVVGNVFpeExRVUZMTEZGQlFUbENMRVZCUVhkRExFdEJRWGhETEVOQlFUaERMRlZCUVZNc1IwRkJWQ3hGUVVGaExFTkJRVVVzUTBGQk4wUTdRVUZEUVN4SFFVWkVMRVZCUlVjc1MwRkJTeXhwUWtGR1VqdEJRVWRCTzBGQlEwUXNUVUZCU3l4SlFVRk1MRU5CUVZVc1QwRkJWaXhGUVVGdFFpeExRVUZMTEV0QlFYaENPMEZCUTBFc1EwRmlSRHM3UVVGbFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEhOQ1FVRnVRaXhIUVVFMFF5eFZRVUZUTEU5QlFWUXNSVUZCYVVJN1FVRkROVVFzVTBGQlR5eFJRVUZSTEVsQlFXWTdRVUZEUXl4UFFVRkxMR1ZCUVV3N1FVRkRReXhSUVVGTExHOUNRVUZNTEVOQlFUQkNMRTlCUVRGQ08wRkJRMEU3UVVGRFJDeFBRVUZMTEd0Q1FVRk1PMEZCUTBNc1VVRkJTeXgxUWtGQlRDeERRVUUyUWl4UFFVRTNRanRCUVVOQk8wRkJRMFFzVDBGQlN5eFhRVUZNTzBGQlEwTXNVVUZCU3l4blFrRkJUQ3hEUVVGelFpeFBRVUYwUWp0QlFVTkJPMEZCUTBRc1QwRkJTeXhOUVVGTU8wRkJRME1zVVVGQlN5eFhRVUZNTEVOQlFXbENMRTlCUVdwQ08wRkJRMEU3UVVGYVJqdEJRV05CTEVOQlprUTdPMEZCYVVKQkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4WFFVRnVRaXhIUVVGcFF5eFZRVUZWTEU5QlFWWXNSVUZCYlVJN1FVRkRia1FzVTBGQlVTeEpRVUZTTEVkQlFXVXNUVUZCWmp0QlFVTkJMRTFCUVVzc1UwRkJUQ3hIUVVGcFFpeEpRVUZKTEVsQlFVb3NSMEZCVnl4UFFVRllMRVZCUVdwQ08wRkJRMEVzVFVGQlN5eExRVUZNTEVOQlFWY3NUMEZCV0R0QlFVTkJMRU5CU2tRN08wRkJUVUVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMR2RDUVVGdVFpeEhRVUZ6UXl4VlFVRlRMRTlCUVZRc1JVRkJhVUk3TzBGQlJYUkVMRXRCUVVjc1VVRkJVU3hMUVVGU0xFdEJRV3RDTEZOQlFXeENMRWxCUVN0Q0xFOUJRVThzVVVGQlVTeEpRVUZtTEV0QlFYZENMRkZCUVRGRUxFVkJRVzFGTzBGQlEyeEZMRk5CUVU4c1MwRkJVQ3hEUVVGaExITkVRVUZpTzBGQlEwRTdRVUZEUVRzN1FVRkhSQ3hOUVVGTExFdEJRVXdzUjBGQllTeFJRVUZSTEVsQlFYSkNPenRCUVVWQkxFMUJRVWtzU1VGQlNTeEpRVUZGTEVOQlFWWXNSVUZCV1N4SlFVRkZMRkZCUVZFc1MwRkJVaXhEUVVGakxFMUJRVFZDTEVWQlFXOURMRWRCUVhCRExFVkJRWGRETzBGQlEzWkRMRTlCUVVzc1RVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGQmFVSXNVVUZCVVN4TFFVRlNMRU5CUVdNc1EwRkJaQ3hEUVVGcVFqdEJRVU5CTEU5QlFVc3NTMEZCVEN4RFFVRlhMRWRCUVZnc1EwRkJaU3hSUVVGUkxFdEJRVklzUTBGQll5eERRVUZrTEVOQlFXWXNSVUZCYVVNc1NVRkJTU3hIUVVGS0xFVkJRV3BETzBGQlEwRXNUMEZCU3l4SlFVRk1MRU5CUVZVc1owSkJRVllzUlVGQk5FSXNVVUZCVVN4TFFVRlNMRU5CUVdNc1EwRkJaQ3hEUVVFMVFqdEJRVU5CT3p0QlFVVkVMRTFCUVVzc2JVSkJRVXdzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zUzBGQlN5eEpRVUZNTEVWQlFXcERPMEZCUTBFc1RVRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlZpeEZRVUZyUWl4TFFVRkxMRXRCUVhaQ08wRkJRMEVzVFVGQlN5eFBRVUZNTEVkQlFXVXNVVUZCWmp0QlFVTkJMRTFCUVVzc2JVSkJRVXdzUjBGQk1rSXNTVUZCTTBJN1FVRkRRU3hEUVhCQ1JEczdRVUZ6UWtFc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEc5Q1FVRnVRaXhIUVVFd1F5eFZRVUZUTEU5QlFWUXNSVUZCYVVJN1FVRkRNVVFzUzBGQlJ5eFJRVUZSTEUxQlFWSXNTMEZCYlVJc1UwRkJkRUlzUlVGQlowTTdRVUZETDBJc1UwRkJUeXhMUVVGUUxFTkJRV0VzTUVSQlFXSTdRVUZEUVR0QlFVTkJPenRCUVVWRU8wRkJRMEVzVFVGQlN5eE5RVUZNTEVOQlFWa3NTVUZCV2l4RFFVRnBRaXhSUVVGUkxFMUJRWHBDTzBGQlEwRXNUVUZCU3l4TFFVRk1MRU5CUVZjc1IwRkJXQ3hEUVVGbExGRkJRVkVzVFVGQmRrSXNSVUZCSzBJc1NVRkJTU3hIUVVGS0xFVkJRUzlDT3p0QlFVVkJMRTFCUVVzc1NVRkJUQ3hEUVVGVkxHZENRVUZXTEVWQlFUUkNMRkZCUVZFc1RVRkJjRU03UVVGRFFTeERRVmhFT3p0QlFXRkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeDFRa0ZCYmtJc1IwRkJOa01zVlVGQlV5eFBRVUZVTEVWQlFXbENPMEZCUXpkRUxFdEJRVWNzVVVGQlVTeE5RVUZTTEV0QlFXMUNMRk5CUVhSQ0xFVkJRV2RETzBGQlF5OUNMRk5CUVU4c1MwRkJVQ3hEUVVGaExEWkVRVUZpTzBGQlEwRTdRVUZEUVRzN1FVRkZSRHRCUVVOQkxFMUJRVWtzU1VGQlNTeEpRVUZGTEV0QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVZvc1IwRkJjVUlzUTBGQkwwSXNSVUZCYTBNc1MwRkJTeXhEUVVGMlF5eEZRVUV3UXl4SFFVRXhReXhGUVVFNFF6dEJRVU0zUXl4TlFVRkhMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFTkJRVm9zVFVGQmJVSXNVVUZCVVN4TlFVRTVRaXhGUVVGeFF6dEJRVU53UXl4UlFVRkxMRTFCUVV3c1EwRkJXU3hOUVVGYUxFTkJRVzFDTEVOQlFXNUNMRVZCUVhOQ0xFTkJRWFJDTzBGQlEwRTdRVUZEUVR0QlFVTkVPMEZCUTBRN1FVRkRRU3hOUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUZZTEVOQlFXdENMRkZCUVZFc1RVRkJNVUk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJTU3hKUVVGSkxGTkJRVklzU1VGQmNVSXNTMEZCU3l4blFrRkJNVUlzUlVGQk1rTTdRVUZETVVNc1RVRkJTU3hWUVVGVkxFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1UwRkJlRUlzUTBGQlpEdEJRVU5CTEUxQlFVY3NWMEZCVnl4UlFVRlJMRTFCUVZJc1MwRkJiVUlzVVVGQlVTeE5RVUY2UXl4RlFVRnBSRHRCUVVOb1JDeFJRVUZMTEdOQlFVd3NRMEZCYjBJc1UwRkJjRUk3UVVGRFFTeFJRVUZMTEdWQlFVd3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNhMEpCUVRsQ0xFVkJRV3RFTEVsQlFXeEVPMEZCUTBFN1FVRkRSRHM3UVVGRlJDeE5RVUZMTEVsQlFVd3NRMEZCVlN4dFFrRkJWaXhGUVVFclFpeFJRVUZSTEUxQlFYWkRPMEZCUTBFc1EwRTFRa1E3TzBGQk9FSkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeGpRVUZ1UWl4SFFVRnZReXhWUVVGVExFOUJRVlFzUlVGQmEwSXNUMEZCYkVJc1JVRkJNRUk3UVVGRE4wUXNTMEZCUnl4UlFVRlJMRWxCUVZJc1MwRkJhVUlzWlVGQmNFSXNSVUZCY1VNN1FVRkRjRU1zVFVGQlJ5eFBRVUZQTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzVVVGQlVTeEZRVUU1UWl4RlFVRnJReXhuUWtGQmVrTXNTMEZCT0VRc1ZVRkJha1VzUlVGQk5rVTdRVUZETlVVc1QwRkJTU3hSUVVGUkxGRkJRVkVzUzBGQlVpeEhRVUZuUWl4UlFVRlJMRXRCUVhoQ0xFZEJRV2RETEVsQlFUVkRPMEZCUTBFc1QwRkJTU3hQUVVGUExGRkJRVkVzU1VGQlVpeEhRVUZsTEZGQlFWRXNTVUZCZGtJc1IwRkJPRUlzU1VGQmVrTTdRVUZEUVN4UlFVRkxMR2RDUVVGTUxFTkJRWE5DTEZGQlFWRXNSVUZCT1VJc1JVRkJhME1zWjBKQlFXeERMRU5CUVcxRUxFdEJRVzVFTEVWQlFUQkVMRWxCUVRGRU8wRkJRMEU3UVVGRFJDeEZRVTVFTEUxQlRVODdPMEZCUlU0c1QwRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFWRXNSVUZCTlVJN1FVRkRRU3hQUVVGTExHVkJRVXdzUTBGQmNVSXNUMEZCY2tJc1JVRkJPRUlzVVVGQlVTeExRVUYwUXl4RlFVRTJReXhSUVVGUkxFbEJRWEpFTzBGQlEwRTdRVUZEUkN4RFFWcEVPenRCUVdOQkxGTkJRVk1zVTBGQlZDeERRVUZ0UWl4dFFrRkJia0lzUjBGQmVVTXNWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFOUJRV3hDTEVWQlFUQkNPMEZCUTJ4Rk8wRkJRMEVzUzBGQlJ5eFJRVUZSTEUxQlFWSXNTMEZCYlVJc1VVRkJkRUlzUlVGQlowTTdRVUZETDBJc1QwRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFWRXNSVUZCTlVJN1FVRkRRU3hWUVVGUkxFdEJRVklzUjBGQlowSXNiMEpCUVdoQ08wRkJRMEU3UVVGRFJDeE5RVUZMTEdWQlFVd3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNVVUZCVVN4TFFVRjBReXhGUVVFMlF5eFJRVUZSTEVsQlFWSXNSMEZCWlN4UlFVRlJMRWxCUVhaQ0xFZEJRVGhDTEVsQlFUTkZPMEZCUTBFc1EwRlFSRHM3UVVGVFFTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc2RVSkJRVzVDTEVkQlFUWkRMRlZCUVZNc1QwRkJWQ3hGUVVGcFFqdEJRVU0xUkN4TlFVRkxMRmRCUVV3c1EwRkJhVUlzUjBGQmFrSXNRMEZCY1VJc1VVRkJVU3hKUVVGU0xFTkJRV0VzVVVGQmJFTXNSVUZCTkVNc1NVRkJOVU1zUTBGQmFVUXNTVUZCU1N4TlFVRktMRU5CUVZjc1VVRkJVU3hKUVVGU0xFTkJRV0VzVFVGQmVFSXNSVUZCWjBNc1VVRkJhRU1zUTBGQmFrUTdRVUZEUkN4RFFVWkVPenRCUVVsQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzVDBGQmRrSXNSVUZCWjBNc1NVRkJhRU1zUlVGQmMwTXNUMEZCZEVNc1JVRkJLME03UVVGRE9VTXNTMEZCU1N4UFFVRlBMRWxCUVZnN1FVRkRRU3hOUVVGTExFbEJRVXdzUjBGQldTeEpRVUZhT3p0QlFVVkJMRXRCUVVjc1QwRkJTQ3hGUVVGWkxFdEJRVXNzVVVGQlRDeEhRVUZuUWl4UFFVRm9RaXhEUVVGYUxFdEJRMHNzU1VGQlJ5eERRVUZETEV0QlFVc3NVVUZCVkN4RlFVRnRRaXhMUVVGTExGRkJRVXdzUjBGQlowSXNUMEZCVHl4VFFVRjJRanRCUVVONFFpeFhRVUZWTEV0QlFVc3NVVUZCWmpzN1FVRkZRU3hOUVVGTExFOUJRVXdzUjBGQlpTeFRRVUZtT3p0QlFVVkJMRXRCUVVrN1FVRkRTQ3hQUVVGTExFOUJRVXdzUjBGQlpTeExRVUZMTEU5QlFVd3NRMEZCWVN4UlFVRmlMRTFCUVhsQ0xFTkJRWHBDTEVkQlFUWkNMRWxCUVVrc1QwRkJTaXhEUVVGWkxFbEJRVm9zUlVGQmEwSXNVMEZCYkVJc1JVRkJOa0lzUlVGQlF5eHZRa0ZCYlVJc1MwRkJjRUlzUlVGQk4wSXNRMEZCTjBJc1IwRkJkMFlzU1VGQlNTeFBRVUZLTEVOQlFWa3NTVUZCV2l4RFFVRjJSenM3UVVGRlFTeFBRVUZMTEcxQ1FVRk1MRWRCUVRKQ0xFdEJRVXNzVDBGQlRDeERRVUZoTEVsQlFXSXNRMEZCYTBJc1NVRkJiRUlzUTBGQk0wSTdRVUZEUVN4UFFVRkxMRzlDUVVGTUxFZEJRVFJDTEV0QlFVc3NVVUZCVEN4RFFVRmpMRWxCUVdRc1EwRkJiVUlzU1VGQmJrSXNRMEZCTlVJN1FVRkRRU3hQUVVGTExITkNRVUZNTEVkQlFUaENMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeEpRVUZvUWl4RFFVRnhRaXhKUVVGeVFpeERRVUU1UWp0QlFVTkJMRTlCUVVzc2IwSkJRVXdzUjBGQk5FSXNTMEZCU3l4UlFVRk1MRU5CUVdNc1NVRkJaQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVRTFRanM3UVVGRlFTeFBRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJZaXhEUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhMUVVGTExHMUNRVUV6UXp0QlFVTkJMRTlCUVVzc1QwRkJUQ3hEUVVGaExHZENRVUZpTEVOQlFUaENMRTlCUVRsQ0xFVkJRWE5ETEV0QlFVc3NiMEpCUVRORE8wRkJRMEVzVDBGQlN5eFBRVUZNTEVOQlFXRXNaMEpCUVdJc1EwRkJPRUlzVTBGQk9VSXNSVUZCZVVNc1MwRkJTeXh6UWtGQk9VTTdRVUZEUVN4UFFVRkxMRTlCUVV3c1EwRkJZU3huUWtGQllpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eExRVUZMTEc5Q1FVRTFRenM3UVVGRlFTeFBRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJZaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhWUVVGVExFZEJRVlFzUlVGQllUdEJRVU51UkN4VlFVRlBMRXRCUVZBc1EwRkJZU3hyUWtGQmEwSXNTVUZCU1N4UlFVRktMRVZCUVM5Q08wRkJRMEVzVVVGQlN5eFBRVUZNTEVOQlFXRXNTMEZCWWp0QlFVTkJMRWRCU0VRN08wRkJTMEVzWVVGQlZ5eFpRVUZWTzBGQlEzQkNMRTlCUVVjc1MwRkJTeXhQUVVGTUxFdEJRV2xDTEZGQlFYQkNMRVZCUVRoQ08wRkJRemxDTEU5QlFVY3NTMEZCU3l4UFFVRk1MRXRCUVdsQ0xGRkJRWEJDTEVWQlFUWkNPMEZCUXpWQ0xGZEJRVThzUjBGQlVDeERRVUZYTEZOQlFWTXNTMEZCU3l4SlFVRmtMRWRCUVhGQ0xEWkNRVUZvUXp0QlFVTkJMRk5CUVVzc1MwRkJURHRCUVVOQkxGTkJRVXNzU1VGQlRDeERRVUZWTEZOQlFWWXNSVUZCY1VJc1MwRkJTeXhQUVVFeFFqdEJRVU5CTzBGQlEwUXNSMEZRUkN4RlFVOUhMRTlCVUVnN1FVRlRRU3hGUVROQ1JDeERRVEpDUlN4UFFVRk5MRU5CUVU0c1JVRkJVenRCUVVOV0xGTkJRVThzUzBGQlVDeERRVUZoTEVWQlFVVXNTMEZCWmp0QlFVTkJMRTlCUVVzc1MwRkJURHRCUVVOQkxGRkJRVTBzUTBGQlRqdEJRVU5CTzBGQlEwUTdRVUZEUkN4VFFVRlRMR0ZCUVZRc1JVRkJkMElzV1VGQmVFSTdPMEZCUlVFc1kwRkJZeXhUUVVGa0xFTkJRWGRDTEV0QlFYaENMRWRCUVdkRExGbEJRVmM3UVVGRE1VTXNTMEZCUnl4TFFVRkxMSE5DUVVGTUxFbEJRU3RDTEV0QlFVc3NjMEpCUVV3c1EwRkJORUlzVDBGQk9VUXNSVUZCZFVVc1QwRkJUeXhMUVVGTExITkNRVUZNTEVOQlFUUkNMRTlCUVc1RE8wRkJRM1pGTEUxQlFVc3NjMEpCUVV3c1IwRkJPRUlzUlVGQlJTeExRVUZHTEVWQlFUbENPMEZCUTBFc1RVRkJTeXhQUVVGTUxFZEJRV1VzVTBGQlpqdEJRVU5CTEUxQlFVc3NTVUZCVEN4RFFVRlZMRk5CUVZZc1JVRkJjVUlzUzBGQlN5eFBRVUV4UWp0QlFVTkJMRXRCUVVjc1MwRkJTeXhQUVVGU0xFVkJRV2xDTEV0QlFVc3NUMEZCVEN4RFFVRmhMRXRCUVdJN1FVRkRha0lzVVVGQlR5eExRVUZMTEhOQ1FVRk1MRU5CUVRSQ0xFOUJRVzVETzBGQlEwRXNRMEZRUkRzN1FVRlRRU3hqUVVGakxGTkJRV1FzUTBGQmQwSXNTVUZCZUVJc1IwRkJLMElzVlVGQlV5eFBRVUZVTEVWQlFXdENPMEZCUTJoRUxFdEJRVWs3UVVGRFNDeE5RVUZKTEU5QlFVOHNTMEZCU3l4VFFVRk1MRU5CUVdVc1QwRkJaaXhEUVVGWU8wRkJRMEVzUlVGR1JDeERRVVZGTEU5QlFVMHNSMEZCVGl4RlFVRlhPMEZCUTFvc1ZVRkJVU3hMUVVGU0xFTkJRV01zTUVKQlFXUTdRVUZEUVN4VFFVRlBMRXRCUVZBN1FVRkRRVHM3UVVGRlJDeExRVUZKTzBGQlEwZ3NUMEZCU3l4UFFVRk1MRU5CUVdFc1NVRkJZaXhEUVVGclFpeEpRVUZzUWp0QlFVTkJMRVZCUmtRc1EwRkZSU3hQUVVGTkxFZEJRVTRzUlVGQlZUdEJRVU5ZTEZWQlFWRXNTMEZCVWl4RFFVRmpMSEZDUVVGa08wRkJRMEVzVlVGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMRk5CUVU4c1MwRkJVRHRCUVVOQk96dEJRVVZFTEZGQlFVOHNTVUZCVUR0QlFVTkJMRU5CYWtKRU96dEJRVzFDUVN4alFVRmpMRk5CUVdRc1EwRkJkMElzVjBGQmVFSXNSMEZCYzBNc1dVRkJWenRCUVVOb1JDeFJRVUZQTEV0QlFVc3NUMEZCVEN4RFFVRmhMRlZCUVdJc1NVRkJNa0lzUzBGQlN5eFJRVUZNTEVOQlFXTXNTVUZCZWtNc1NVRkJhVVFzUzBGQlN5eFBRVUZNTEV0QlFXbENMRkZCUVhwRk8wRkJRMEVzUTBGR1JEczdRVUZKUVN4alFVRmpMRk5CUVdRc1EwRkJkMElzVDBGQmVFSXNSMEZCYTBNc1dVRkJWenRCUVVNMVF5eE5RVUZMTEU5QlFVd3NSMEZCWlN4UlFVRm1PMEZCUTBFc1RVRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlZpeEZRVUZyUWl4TFFVRkxMRTlCUVhaQ08wRkJRMEVzUTBGSVJEczdRVUZMUVN4alFVRmpMRk5CUVdRc1EwRkJkMElzVVVGQmVFSXNSMEZCYlVNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGFFUXNUVUZCU3l4UFFVRk1MRWRCUVdVc1VVRkJaanRCUVVOQkxFMUJRVXNzYlVKQlFVdzdRVUZEUVN4TlFVRkxMRWxCUVV3c1EwRkJWU3hQUVVGV0xFVkJRVzFDTEV0QlFVc3NUMEZCZUVJN1FVRkRRU3hMUVVGSExFdEJRVXNzYzBKQlFVd3NTVUZCSzBJc1MwRkJTeXh6UWtGQlRDeERRVUUwUWl4UFFVRTVSQ3hGUVVGMVJTeExRVUZMTEhOQ1FVRk1MRU5CUVRSQ0xFOUJRVFZDTzBGQlEzWkZMRU5CVEVRN08wRkJUMEVzWTBGQll5eFRRVUZrTEVOQlFYZENMRlZCUVhoQ0xFZEJRWEZETEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTJ4RUxFdEJRVWs3UVVGRFNDeE5RVUZKTEZWQlFWVXNTMEZCU3l4TFFVRk1MRU5CUVZjc1NVRkJTU3hKUVVGbUxFTkJRV1E3UVVGRFFTeFBRVUZMTEVsQlFVd3NRMEZCVlN4VFFVRldMRVZCUVhGQ0xFOUJRWEpDTzBGQlEwRXNSVUZJUkN4RFFVZEZMRTlCUVUwc1IwRkJUaXhGUVVGVk8wRkJRMWdzVTBGQlR5eExRVUZRTEVOQlFXRXNkME5CUVdJN1FVRkRRU3hSUVVGTkxFZEJRVTQ3UVVGRFFUdEJRVU5FTEVOQlVrUTdPMEZCVlVFc1kwRkJZeXhUUVVGa0xFTkJRWGRDTEZGQlFYaENMRWRCUVcxRExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEyaEVMRTFCUVVzc1NVRkJUQ3hEUVVGVkxFOUJRVllzUlVGQmJVSXNSMEZCYmtJN1FVRkRRU3hEUVVaRU96dEJRVWxCTEdOQlFXTXNVMEZCWkN4RFFVRjNRaXh0UWtGQmVFSXNSMEZCT0VNc1dVRkJWenRCUVVONFJDeExRVUZITEV0QlFVc3NUMEZCVEN4SlFVRnBRaXhQUVVGUExFdEJRVXNzVDBGQlRDeERRVUZoTEcxQ1FVRndRaXhMUVVFMFF5eFZRVUZvUlN4RlFVRTBSVHRCUVVNelJTeFBRVUZMTEU5QlFVd3NRMEZCWVN4dFFrRkJZaXhEUVVGcFF5eE5RVUZxUXl4RlFVRjVReXhMUVVGTExHMUNRVUU1UXp0QlFVTkJMRTlCUVVzc1QwRkJUQ3hEUVVGaExHMUNRVUZpTEVOQlFXbERMRTlCUVdwRExFVkJRVEJETEV0QlFVc3NiMEpCUVM5RE8wRkJRMEVzVDBGQlN5eFBRVUZNTEVOQlFXRXNiVUpCUVdJc1EwRkJhVU1zVTBGQmFrTXNSVUZCTkVNc1MwRkJTeXh6UWtGQmFrUTdRVUZEUVN4RlFVcEVMRTFCU1U4c1NVRkJSeXhMUVVGTExFOUJRVXdzU1VGQmFVSXNUMEZCVHl4TFFVRkxMRTlCUVV3c1EwRkJZU3hyUWtGQmNFSXNTMEZCTWtNc1ZVRkJMMFFzUlVGQk1rVTdRVUZEYWtZc1QwRkJTeXhQUVVGTUxFTkJRV0VzYTBKQlFXSTdRVUZEUVR0QlFVTkVMRU5CVWtRN08wRkJWVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeGpRVUZ1UWl4SFFVRnZReXhWUVVGVExFMUJRVlFzUlVGQmFVSXNTVUZCYWtJc1JVRkJjMEk3UVVGRGVrUXNTMEZCUnl4RFFVRkRMRTFCUVVRc1NVRkJWeXhEUVVGRExFbEJRVm9zU1VGQmNVSXNVMEZCVXl4VFFVRlVMRWxCUVhOQ0xGTkJRVk1zWTBGQkwwSXNTVUZCYVVRc1UwRkJVeXhoUVVFeFJDeEpRVUV5UlN4VFFVRlRMR3RDUVVFMVJ5eEZRVUZuU1R0QlFVTXZTQ3hUUVVGUExFbEJRVkE3UVVGRFFUczdRVUZGUkN4UlFVRlBPMEZCUTA0c1VVRkJUU3hKUVVSQk8wRkJSVTRzVFVGQlNTeExRVUZMTEZkQlFVd3NSVUZHUlR0QlFVZE9MRmRCUVZNc1QwRkJUeXhQUVVoV08wRkJTVTRzVlVGQlVTeFBRVUZQTEUxQlNsUTdRVUZMVGl4UlFVRk5MRTlCUVU4c1NVRk1VRHRCUVUxT0xFOUJRVXNzVDBGQlR5eEhRVTVPTzBGQlQwNHNVVUZCVFN4UFFVRlBMRWxCVUZBN1FVRlJUaXhQUVVGTExFOUJRVTg3UVVGU1RpeEZRVUZRTzBGQlZVRXNRMEZtUkRzN1FVRnBRa0VzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRmRCUVc1Q0xFZEJRV2xETEZsQlFWVTdRVUZETVVNc1MwRkJTU3hMUVVGTExFdEJRVXNzVDBGQlpEdEJRVU5CTEUxQlFVc3NUMEZCVER0QlFVTkJMRkZCUVU4c1JVRkJVRHRCUVVOQkxFTkJTa1E3TzBGQlVVRXNUMEZCVHl4UFFVRlFMRWRCUVdsQ0xGRkJRV3BDSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnYVhOQ2NtOTNjMlZ5SUQwZ0lTaDBlWEJsYjJZZ2QybHVaRzkzSUQwOVBTQW5kVzVrWldacGJtVmtKeWs3WEc1c1pYUWdWVTVKV0ZOdlkydGxkRWhoYm1Sc1pYSmNibWxtS0NGcGMwSnliM2R6WlhJcElIdGNibHgwZG1GeUlGRWdQU0J5WlhGMWFYSmxLQ2R4SnlrN1hHNWNkRlZPU1ZoVGIyTnJaWFJJWVc1a2JHVnlJRDBnY21WeGRXbHlaU2duTGk5VlRrbFlVMjlqYTJWMFNHRnVaR3hsY2ljcFhHNTlYRzVsYkhObElIc2dkbUZ5SUZFZ1BTQjNhVzVrYjNjdVVUc2dmVnh1WEc1MllYSWdSWFpsYm5SRmJXbDBkR1Z5SUQwZ2NtVnhkV2x5WlNnbmJtOWtaUzFsZG1WdWRDMWxiV2wwZEdWeUp5azdYRzUyWVhJZ2FXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1ZG1GeUlFUnBlV0ZUYjJOclpYUWdQU0J5WlhGMWFYSmxLQ2N1TDBScGVXRlRiMk5yWlhRbktWeHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THlCTWIyZG5hVzVuSUhWMGFXeHBkSGtnYldWMGFHOWtjeUF2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc1Y2JuWmhjaUJFUlVKVlJ5QTlJR1poYkhObE8xeHVkbUZ5SUV4dloyZGxjaUE5SUh0Y2JseDBiRzluT2lCbWRXNWpkR2x2YmlodFpYTnpZV2RsS1h0Y2JseDBYSFJwWmloRVJVSlZSeWtnWTI5dWMyOXNaUzVzYjJjb2JXVnpjMkZuWlNrN1hHNWNkSDBzWEc1Y2JseDBaWEp5YjNJNklHWjFibU4wYVc5dUtHMWxjM05oWjJVcGUxeHVYSFJjZEdsbUtFUkZRbFZIS1NCamIyNXpiMnhsTG1WeWNtOXlLRzFsYzNOaFoyVXBPMXh1WEhSOVhHNTlPMXh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNWNibHh1Wm5WdVkzUnBiMjRnUkdsNVlVNXZaR1VvS1h0Y2JseDBSWFpsYm5SRmJXbDBkR1Z5TG1OaGJHd29kR2hwY3lrN1hHNWNibHgwZEdocGN5NWZkWE5sY2lBOUlHNTFiR3c3WEc1Y2RIUm9hWE11WDJGMWRHaGxiblJwWTJGMFpXUWdQU0J1ZFd4c08xeHVYSFIwYUdsekxsOXdZWE56SUQwZ2JuVnNiRHRjYmx4dVhIUjBhR2x6TGw5emRHRjBkWE1nUFNBblkyeHZjMlZrSnp0Y2JseDBkR2hwY3k1ZllXUmtjaUE5SUc1MWJHdzdYRzVjZEhSb2FYTXVYM052WTJ0bGRDQTlJRzUxYkd3N1hHNWNkSFJvYVhNdVgyNWxlSFJKWkNBOUlEQTdYRzVjZEhSb2FYTXVYMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQ0E5SUc1MWJHdzdYRzVjZEhSb2FYTXVYMlJwYzJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkNBOUlHNTFiR3c3WEc1Y2RIUm9hWE11WDNCbGJtUnBibWROWlhOellXZGxjeUE5SUZ0ZE8xeHVYSFIwYUdsekxsOXdaV1Z5Y3lBOUlGdGRPMXh1WEhSMGFHbHpMbDl5WldOdmJtNWxZM1JVYVcxbGIzVjBJRDBnTVRBd01EdGNibHgwZEdocGN5NWZZMjl1Ym1WamRGUnBiV1Z2ZFhRZ1BTQTFNREF3TzF4dVhIUjBhR2x6TG5OMGIzSmxJRDBnYm1WM0lFMWhjQ2dwWEc1Y2RIUm9hWE11WDJScGVXRlRiMk5yWlhRZ1BTQnVaWGNnVFdGd0tDazdYRzU5WEc1cGJtaGxjbWwwY3loRWFYbGhUbTlrWlN3Z1JYWmxiblJGYldsMGRHVnlLVHRjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dklGQjFZbXhwWXlCQlVFa2dMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVkWE5sY2lBOUlHWjFibU4wYVc5dUtIVnpaWElwSUh0Y2JseDBhV1lvZFhObGNpa2dkR2hwY3k1ZmRYTmxjaUE5SUhWelpYSTdYRzVjZEdWc2MyVWdjbVYwZFhKdUlIUm9hWE11WDNWelpYSTdYRzU5TzF4dVJHbDVZVTV2WkdVdWNISnZkRzkwZVhCbExtRjFkR2hsYm5ScFkyRjBaV1FnUFNCbWRXNWpkR2x2YmloaGRYUm9aVzUwYVdOaGRHVmtLU0I3WEc1Y2RHbG1LR0YxZEdobGJuUnBZMkYwWldRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZEdocGN5NWZZWFYwYUdWdWRHbGpZWFJsWkNBOUlHRjFkR2hsYm5ScFkyRjBaV1E3WEc1Y2RHVnNjMlVnY21WMGRYSnVJSFJvYVhNdVgyRjFkR2hsYm5ScFkyRjBaV1E3WEc1OU8xeHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMbkJoYzNNZ1BTQm1kVzVqZEdsdmJpaHdZWE56S1NCN1hHNWNkR2xtS0hCaGMzTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2RHaHBjeTVmY0dGemN5QTlJSEJoYzNNN1hHNWNkR1ZzYzJVZ2NtVjBkWEp1SUhSb2FYTXVYM0JoYzNNN1hHNTlPMXh1UkdsNVlVNXZaR1V1Y0hKdmRHOTBlWEJsTG1Ga1pISWdQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYMkZrWkhJN0lIMDdYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1Y0dWbGNuTWdQU0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGN5NWZjR1ZsY25NN0lIMDdYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1YzJWc1ppQTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZjMlZzWmpzZ2ZUdGNia1JwZVdGT2IyUmxMbkJ5YjNSdmRIbHdaUzV6WlhSVFpXTjFjbVZrSUQwZ1puVnVZM1JwYjI0b1lsTmxZM1Z5WldRcElIc2dkR2hwY3k1ZmMyVmpkWEpsWkNBOUlHSlRaV04xY21Wa0lDRTlQU0JtWVd4elpUc2dmVHRjYmtScGVXRk9iMlJsTG5CeWIzUnZkSGx3WlM1elpYUlhVMjlqYTJWMElEMGdablZ1WTNScGIyNG9WMU52WTJ0bGRDa2dlM1JvYVhNdVgxZFRiMk5yWlhRZ1BTQlhVMjlqYTJWME8zMWNibHh1THlvcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVOFUzUnlhVzVuUG4wZ2RHaGxJR052Ym01bFkzUmxaQ0J3WldWeUlHNWhiV1VnS2k5Y2JrUnBlV0ZPYjJSbExuQnliM1J2ZEhsd1pTNWpiMjV1WldOMElEMGdablZ1WTNScGIyNGdLR0ZrWkhJc0lGZFRiMk5yWlhRcElIdGNibHgwZEdocGN5NWlSRzl1ZEZKbFkyOXVibVZqZENBOUlHWmhiSE5sWEc1Y2JseDBMeThnU0dGdVpHeGxJR3h2WTJGc0lHTnNhV1Z1ZEhNZ2IyNGdWVTVKV0NCemIyTnJaWFJ6WEc1Y2RHbG1JQ2hoWkdSeUxuTjBZWEowYzFkcGRHZ29KM1Z1YVhnNkx5OG5LU2tnZTF4dVhIUmNkQzh2SUVsbUlIZGxKM1psSUhSeWVXbHVaeUIwYnlCamIyNXVaV04wSUhSdklIUm9aU0J6WVcxbElHRmtaSEpsYzNNZ2QyVW5jbVVnWVd4eVpXRmtlU0JqYjI1dVpXTjBaV1FnZEc5Y2JseDBYSFJwWmlBb2RHaHBjeTVmWVdSa2NpQTlQVDBnWVdSa2Npa2dlMXh1WEhSY2RGeDBZMjl1YzI5c1pTNXNiMmNvWUZ0VFJFc3ZSR2w1WVU1dlpHVmRJRUZrWkhKbGMzTWdhWE1nYVdSbGJuUnBZMkZzSUhSdklHOTFjaUJoWkdSeVpYTnpMaTR1WUNsY2JseDBYSFJjZEdsbUlDaDBhR2x6TGw5emRHRjBkWE1nUFQwOUlDZHZjR1Z1WldRbktTQjdYRzVjZEZ4MFhIUmNkR052Ym5OdmJHVXViRzluS0dCYlUwUkxMMFJwZVdGT2IyUmxYU0F1TGk0Z1lXNWtJSFJvWlNCamIyNXVaV04wYVc5dUlHbHpJSE4wYVd4c0lHOXdaVzVsYm1Wa0xDQnlaWFIxY201cGJtY2dhWFF1WUNsY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUZFb2RHaHBjeTV6Wld4bUtDa3BYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUmxiSE5sSUdsbUlDaDBhR2x6TGw5amIyNXVaV04wYVc5dVJHVm1aWEp5WldRZ0ppWWdkR2hwY3k1ZlkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0xuQnliMjFwYzJVZ0ppWWdkR2hwY3k1ZlkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0xuQnliMjFwYzJVdWFYTlFaVzVrYVc1bktDa3BJSHRjYmx4MFhIUmNkRngwWTI5dWMyOXNaUzVzYjJjb1lGdFRSRXN2UkdsNVlVNXZaR1ZkTGk0dUlHRnVaQ0IwYUdVZ1kyOXVibVZqZEdsdmJpQnBjeUJ3Wlc1a2FXNW5MQ0J6YnlCeVpYUjFjbTVwYm1jZ2RHaGxJSEJsYm1ScGJtY2dZMjl1Ym1WamRHbHZiaTVnS1Z4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWZZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtMbkJ5YjIxcGMyVmNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWpiRzl6WlNncFhHNWNkRngwTG5Sb1pXNG9JRjhnUFQ0Z2UxeHVYSFJjZEZ4MGRHaHBjeTVmWVdSa2NpQTlJR0ZrWkhKY2JseDBYSFJjZEhSb2FYTXVYMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQ0E5SUZFdVpHVm1aWElvS1Z4dVhIUmNkRngwVEc5bloyVnlMbXh2WnlnblpERTZJR052Ym01bFkzUWdkRzhnSnlBcklIUm9hWE11WDJGa1pISXBYRzVjZEZ4MFhIUnNaWFFnYzI5amF5QTlJRzVsZHlCVlRrbFlVMjlqYTJWMFNHRnVaR3hsY2loMGFHbHpMbDloWkdSeUxuTjFZbk4wY2lnbmRXNXBlRG92THljdWJHVnVaM1JvS1N3Z2RHaHBjeTVmWTI5dWJtVmpkRlJwYldWdmRYUXBYRzVjYmx4MFhIUmNkR2xtSUNnaGRHaHBjeTVmYzI5amEyVjBTR0Z1Wkd4bGNpbGNibHgwWEhSY2RGeDBkR2hwY3k1ZmMyOWphMlYwU0dGdVpHeGxjaUE5SUhOdlkydGNibHh1WEhSY2RGeDBkR2hwY3k1ZmIyNXZjR1Z1YVc1bktDbGNibHh1WEhSY2RGeDBjMjlqYXk1dmJpZ25iM0JsYmljc0lGOGdQVDRnZTF4dVhIUmNkRngwWEhScFppQW9kR2hwY3k1ZmMyOWphMlYwU0dGdVpHeGxjaUFoUFQwZ2MyOWpheWtnZTF4dVhIUmNkRngwWEhSY2RHTnZibk52YkdVdWJHOW5LQ2RiVTBSTEwwUnBlV0ZPYjJSbFhTQlRiMk5yWlhRZ2NtVnpjRzl1WkdWa0lHSjFkQ0JoYkhKbFlXUjVJR052Ym01bFkzUmxaQ0IwYnlCaElHUnBabVpsY21WdWRDQnZibVVuS1Z4dVhIUmNkRngwWEhSY2RISmxkSFZ5Ymx4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIUm9hWE11WDNOMFlYUjFjeUE5SUNkdmNHVnVaV1FuWEc1Y2RGeDBYSFJjZEhSb2FYTXVYM05sZEhWd1VHbHVaMUpsYzNCdmJuTmxLQ2xjYmx4MFhIUmNkSDBwWEc1Y2JseDBYSFJjZEhOdlkyc3ViMjRvSjJOc2IzTnBibWNuTENCZklEMCtJSHRjYmx4MFhIUmNkRngwYVdZZ0tIUm9hWE11WDNOdlkydGxkRWhoYm1Sc1pYSWdJVDA5SUhOdlkyc3BYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVZMnh2YzJsdVp5Z3BYRzVjZEZ4MFhIUjlLVnh1WEc1Y2RGeDBYSFJ6YjJOckxtOXVLQ2RqYkc5elpTY3NJRjhnUFQ0Z2UxeHVYSFJjZEZ4MFhIUnBaaUFvZEdocGN5NWZjMjlqYTJWMFNHRnVaR3hsY2lBaFBUMGdjMjlqYXlsY2JseDBYSFJjZEZ4MFhIUnlaWFIxY201Y2JseDBYSFJjZEZ4MGRHaHBjeTVmYzI5amEyVjBTR0Z1Wkd4bGNpQTlJRzUxYkd4Y2JseDBYSFJjZEZ4MGRHaHBjeTVmYzNSaGRIVnpJRDBnSjJOc2IzTmxaQ2RjYmx4MFhIUmNkRngwZEdocGN5NWZjM1J2Y0ZCcGJtZFNaWE53YjI1elpTZ3BYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVZMnh2YzJVb0tWeHVYRzVjZEZ4MFhIUmNkR2xtSUNoMGFHbHpMbDlqYjI1dVpXTjBhVzl1UkdWbVpYSnlaV1FwSUh0Y2JseDBYSFJjZEZ4MFhIUjBhR2x6TGw5amIyNXVaV04wYVc5dVJHVm1aWEp5WldRdWNtVnFaV04wS0Z3aVkyeHZjMlZrWENJcFhHNWNkRngwWEhSY2RGeDBkR2hwY3k1ZlkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0lEMGdiblZzYkZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUtWeHVYRzVjZEZ4MFhIUnpiMk5yTG05dUtDZGxjbkp2Y2ljc0lHVnljbTl5SUQwK0lIdGNibHgwWEhSY2RGeDBhV1lnS0hSb2FYTXVYM052WTJ0bGRFaGhibVJzWlhJZ0lUMDlJSE52WTJzcFhHNWNkRngwWEhSY2RGeDBjbVYwZFhKdVhHNWNkRngwWEhSY2RIUm9hWE11WDI5dVpYSnliM0lvWlhKeWIzSXBYRzVjZEZ4MFhIUjlLVnh1WEc1Y2RGeDBYSFJ6YjJOckxtOXVLQ2QwYVcxbGIzVjBKeXdnWHlBOVBpQjdYRzVjZEZ4MFhIUmNkR2xtSUNoMGFHbHpMbDl6YjJOclpYUklZVzVrYkdWeUlDRTlQU0J6YjJOcktWeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJseHVYSFJjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFJJWVc1a2JHVnlJRDBnYm5Wc2JGeHVYSFJjZEZ4MFhIUjBhR2x6TGw5emRHRjBkWE1nUFNBblkyeHZjMlZrSjF4dVhIUmNkRngwWEhScFppQW9kR2hwY3k1ZlkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0tTQjdYRzVjZEZ4MFhIUmNkRngwZEdocGN5NWZZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtMbkpsYW1WamRDaGNJbU5zYjNObFpGd2lLVnh1WEhSY2RGeDBYSFJjZEhSb2FYTXVYMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQ0E5SUc1MWJHeGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU2xjYmx4dVhIUmNkRngwYzI5amF5NXZiaWduYldWemMyRm5aU2NzSUhSb2FYTXVYMjl1YldWemMyRm5aUzVpYVc1a0tIUm9hWE1wS1Z4dVhHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWZZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtMbkJ5YjIxcGMyVmNibHgwWEhSOUtWeHVYSFI5WEc1Y2JseDBhV1lnS0ZkVGIyTnJaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDbGNibHgwWEhSMGFHbHpMbDlYVTI5amEyVjBJRDBnVjFOdlkydGxkRnh1WEhSbGJITmxJR2xtSUNoMGFHbHpMbDlYVTI5amEyVjBJRDA5UFNCMWJtUmxabWx1WldRcFhHNWNkRngwZEdocGN5NWZWMU52WTJ0bGRDQTlJSGRwYm1SdmR5NVhaV0pUYjJOclpYUmNibHh1WEhSWFUyOWphMlYwSUQwZ2RHaHBjeTVmVjFOdlkydGxkRnh1WEc1Y2RDOHZJRU5vWldOcklHRnVaQ0JHYjNKdFlYUWdWVkpKSUNoR1VVUk9LVnh1WEhScFppQW9ZV1JrY2k1emRHRnlkSE5YYVhSb0tGd2lkM002THk5Y0lpa2dKaVlnZEdocGN5NWZjMlZqZFhKbFpDbGNibHgwWEhSeVpYUjFjbTRnVVM1eVpXcGxZM1FvWENKUWJHVmhjMlVnZFhObElHRWdjMlZqZFhKbFpDQmpiMjV1WldOMGFXOXVJQ2hjSWlBcklHRmtaSElnS3lCY0lpbGNJaWxjYmx4dVhIUnBaaUFvWVdSa2NpNXpkR0Z5ZEhOWGFYUm9LRndpZDNOek9pOHZYQ0lwSUNZbUlIUm9hWE11WDNObFkzVnlaV1FnUFQwOUlHWmhiSE5sS1Z4dVhIUmNkSEpsZEhWeWJpQlJMbkpsYW1WamRDaGNJbEJzWldGelpTQjFjMlVnWVNCdWIyNHRjMlZqZFhKbFpDQmpiMjV1WldOMGFXOXVJQ2hjSWlBcklHRmtaSElnS3lCY0lpbGNJaWxjYmx4dVhIUnBaaUFvSVdGa1pISXVjM1JoY25SelYybDBhQ2hjSW5kek9pOHZYQ0lwSUNZbUlDRmhaR1J5TG5OMFlYSjBjMWRwZEdnb1hDSjNjM002THk5Y0lpa3BJSHRjYmx4MFhIUnBaaUFvZEdocGN5NWZjMlZqZFhKbFpDbGNibHgwWEhSY2RHRmtaSElnUFNCY0luZHpjem92TDF3aUlDc2dZV1JrY2x4dVhIUmNkR1ZzYzJWY2JseDBYSFJjZEdGa1pISWdQU0JjSW5kek9pOHZYQ0lnS3lCaFpHUnlYRzVjZEgxY2JseHVYSFJwWmlBb2RHaHBjeTVmWVdSa2NpQTlQVDBnWVdSa2Npa2dlMXh1WEhSY2RHbG1JQ2gwYUdsekxsOXpkR0YwZFhNZ1BUMDlJQ2R2Y0dWdVpXUW5LVnh1WEhSY2RGeDBjbVYwZFhKdUlGRW9kR2hwY3k1elpXeG1LQ2twWEc1Y2RGeDBaV3h6WlNCcFppQW9kR2hwY3k1ZlkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0lDWW1JSFJvYVhNdVgyTnZibTVsWTNScGIyNUVaV1psY25KbFpDNXdjbTl0YVhObElDWW1JSFJvYVhNdVgyTnZibTVsWTNScGIyNUVaV1psY25KbFpDNXdjbTl0YVhObExtbHpVR1Z1WkdsdVp5Z3BLVnh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11WDJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkM1d2NtOXRhWE5sWEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnZEdocGN5NWpiRzl6WlNncFhHNWNkQzUwYUdWdUtDQmZJRDArSUh0Y2JseDBYSFIwYUdsekxsOWhaR1J5SUQwZ1lXUmtjbHh1WEhSY2RIUm9hWE11WDJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkNBOUlGRXVaR1ZtWlhJb0tWeHVYSFJjZEV4dloyZGxjaTVzYjJjb0oyUXhPaUJqYjI1dVpXTjBJSFJ2SUNjZ0t5QjBhR2x6TGw5aFpHUnlLVnh1WEhSY2RIWmhjaUJ6YjJOcklEMGdibVYzSUZOdlkydGxkRWhoYm1Sc1pYSW9WMU52WTJ0bGRDd2dkR2hwY3k1ZllXUmtjaXdnZEdocGN5NWZZMjl1Ym1WamRGUnBiV1Z2ZFhRcFhHNWNibHgwWEhScFppQW9JWFJvYVhNdVgzTnZZMnRsZEVoaGJtUnNaWElwWEc1Y2RGeDBYSFIwYUdsekxsOXpiMk5yWlhSSVlXNWtiR1Z5SUQwZ2MyOWphMXh1WEc1Y2RGeDBkR2hwY3k1ZmIyNXZjR1Z1YVc1bktDbGNibHh1WEhSY2RITnZZMnN1YjI0b0oyOXdaVzRuTENCZklEMCtJSHRjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbDl6YjJOclpYUklZVzVrYkdWeUlDRTlQU0J6YjJOcktTQjdYRzVjZEZ4MFhIUmNkR052Ym5OdmJHVXViRzluS0Z3aVcyUXhYU0JYWldKemIyTnJaWFFnY21WemNHOXVaR1ZrSUdKMWRDQmhiSEpsWVdSNUlHTnZibTVsWTNSbFpDQjBieUJoSUdScFptWmxjbVZ1ZENCdmJtVmNJaWxjYmx4MFhIUmNkRngwY21WMGRYSnVYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFJJWVc1a2JHVnlJRDBnYzI5amExeHVYSFJjZEZ4MGRHaHBjeTVmYzNSaGRIVnpJRDBnSjI5d1pXNWxaQ2RjYmx4MFhIUmNkSFJvYVhNdVgzTmxkSFZ3VUdsdVoxSmxjM0J2Ym5ObEtDbGNibHgwWEhSOUtWeHVYRzVjZEZ4MGMyOWpheTV2YmlnblkyeHZjMmx1Wnljc0lGOGdQVDRnZTF4dVhIUmNkRngwYVdZZ0tIUm9hWE11WDNOdlkydGxkRWhoYm1Sc1pYSWdJVDA5SUhOdlkyc3BYRzVjZEZ4MFhIUmNkSEpsZEhWeWJseHVYSFJjZEZ4MGRHaHBjeTVmYjI1amJHOXphVzVuS0NsY2JseDBYSFI5S1Z4dVhHNWNkRngwYzI5amF5NXZiaWduWTJ4dmMyVW5MQ0JmSUQwK0lIdGNibHgwWEhSY2RHbG1JQ2gwYUdsekxsOXpiMk5yWlhSSVlXNWtiR1Z5SUNFOVBTQnpiMk5yS1Z4dVhIUmNkRngwWEhSeVpYUjFjbTVjYmx4MFhIUmNkSFJvYVhNdVgzTnZZMnRsZEVoaGJtUnNaWElnUFNCdWRXeHNYRzVjZEZ4MFhIUjBhR2x6TGw5emRHRjBkWE1nUFNBblkyeHZjMlZrSjF4dVhIUmNkRngwZEdocGN5NWZjM1J2Y0ZCcGJtZFNaWE53YjI1elpTZ3BYRzVjZEZ4MFhIUjBhR2x6TGw5dmJtTnNiM05sS0NsY2JseHVYSFJjZEZ4MGFXWWdLSFJvYVhNdVgyTnZibTVsWTNScGIyNUVaV1psY25KbFpDa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxsOWpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUXVjbVZxWldOMEtGd2lZMnh2YzJWa1hDSXBYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyTnZibTVsWTNScGIyNUVaV1psY25KbFpDQTlJRzUxYkd4Y2JseDBYSFJjZEgxY2JseDBYSFI5S1Z4dVhHNWNkRngwYzI5amF5NXZiaWduWlhKeWIzSW5MQ0JsY25KdmNpQTlQaUI3WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTVmYzI5amEyVjBTR0Z1Wkd4bGNpQWhQVDBnYzI5amF5bGNibHgwWEhSY2RGeDBjbVYwZFhKdVhHNWNkRngwWEhSMGFHbHpMbDl2Ym1WeWNtOXlLR1Z5Y205eUtWeHVYSFJjZEgwcFhHNWNibHgwWEhSemIyTnJMbTl1S0NkMGFXMWxiM1YwSnl3Z1h5QTlQaUI3WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTVmYzI5amEyVjBTR0Z1Wkd4bGNpQWhQVDBnYzI5amF5bGNibHgwWEhSY2RGeDBjbVYwZFhKdVhHNWNkRngwWEhSMGFHbHpMbDl6YjJOclpYUklZVzVrYkdWeUlEMGdiblZzYkZ4dVhIUmNkRngwZEdocGN5NWZjM1JoZEhWeklEMGdKMk5zYjNObFpDZGNibHgwWEhSY2RHbG1JQ2gwYUdsekxsOWpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUXBJSHRjYmx4MFhIUmNkRngwZEdocGN5NWZZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtMbkpsYW1WamRDaGNJbU5zYjNObFpGd2lLVnh1WEhSY2RGeDBYSFIwYUdsekxsOWpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUWdQU0J1ZFd4c1hHNWNkRngwWEhSOVhHNWNkRngwZlNsY2JseHVYSFJjZEhOdlkyc3ViMjRvSjIxbGMzTmhaMlVuTENCMGFHbHpMbDl2Ym0xbGMzTmhaMlV1WW1sdVpDaDBhR2x6S1NsY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxsOWpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUXVjSEp2YldselpWeHVYSFI5S1Z4dWZWeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1WkdselkyOXVibVZqZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSMGFHbHpMbUpFYjI1MFVtVmpiMjV1WldOMElEMGdkSEoxWlZ4dVhIUnlaWFIxY200Z2RHaHBjeTVqYkc5elpTZ3BYRzU5WEc1Y2JrUnBlV0ZPYjJSbExuQnliM1J2ZEhsd1pTNWpiRzl6WlNBOUlHWjFibU4wYVc5dUtDbDdYRzVjZEhSb2FYTXVYM04wYjNCUWFXNW5VbVZ6Y0c5dWMyVW9LVHRjYmx4MGFXWW9kR2hwY3k1ZmMyOWphMlYwU0dGdVpHeGxjaWtnY21WMGRYSnVJSFJvYVhNdVgzTnZZMnRsZEVoaGJtUnNaWEl1WTJ4dmMyVW9LVHRjYmx4MFpXeHpaU0J5WlhSMWNtNGdVU2dwTzF4dWZUdGNibHh1UkdsNVlVNXZaR1V1Y0hKdmRHOTBlWEJsTG1selEyOXVibVZqZEdWa0lEMGdablZ1WTNScGIyNG9LWHRjYmx4MGNtVjBkWEp1SUNoMGFHbHpMbDl6YjJOclpYUklZVzVrYkdWeUlDWW1JSFJvYVhNdVgzTnZZMnRsZEVoaGJtUnNaWEl1YVhORGIyNXVaV04wWldRb0tTazdYRzU5TzF4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVjbVZ4ZFdWemRDQTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5d2dZMkZzYkdKaFkyc3NJSFJwYldWdmRYUXNJRzl3ZEdsdmJuTXBlMXh1WEhSMllYSWdkR2hoZENBOUlIUm9hWE03WEc1Y2RHbG1LQ0Z2Y0hScGIyNXpLU0J2Y0hScGIyNXpJRDBnZTMwN1hHNWNibHgwYVdZb2NHRnlZVzF6TG1OdmJuTjBjblZqZEc5eUlEMDlQU0JUZEhKcGJtY3BJSHRjYmx4MFhIUjJZWElnWDNCaGNtRnRjeUE5SUhCaGNtRnRjeTV6Y0d4cGRDaGNJaTVjSWlrN1hHNWNkRngwYVdZb1gzQmhjbUZ0Y3k1c1pXNW5kR2doUFRJcElIUm9jbTkzSUNkTllXeG1iM0p0WldSU1pYRjFaWE4wSnp0Y2JseDBYSFJ3WVhKaGJYTWdQU0I3YzJWeWRtbGpaVHBmY0dGeVlXMXpXekJkTENCbWRXNWpPbDl3WVhKaGJYTmJNVjE5TzF4dVhIUjlYRzVjYmx4MGFXWW9JWEJoY21GdGN5NXpaWEoyYVdObEtTQjdYRzVjZEZ4MFRHOW5aMlZ5TG1WeWNtOXlLQ2RPYnlCelpYSjJhV05sSUdSbFptbHVaV1FnWm05eUlISmxjWFZsYzNRZ0lTY3BPMXh1WEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MGZWeHVYRzVjZEhaaGNpQnRaWE56WVdkbElEMGdkR2hwY3k1ZlkzSmxZWFJsVFdWemMyRm5aU2h3WVhKaGJYTXNJRndpVW1WeGRXVnpkRndpS1R0Y2JseDBkR2hwY3k1ZllYQndaVzVrVFdWemMyRm5aU2h0WlhOellXZGxMQ0JqWVd4c1ltRmpheWs3WEc1Y2RHbG1LSFI1Y0dWdlppQnZjSFJwYjI1ekxtTmhiR3hpWVdOclgzQmhjblJwWVd3Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhSb2FYTXVYM0JsYm1ScGJtZE5aWE56WVdkbGMxdHRaWE56WVdkbExtbGtYUzVqWVd4c1ltRmphMTl3WVhKMGFXRnNJRDBnYjNCMGFXOXVjeTVqWVd4c1ltRmphMTl3WVhKMGFXRnNPMXh1WEhSdFpYTnpZV2RsTG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dVhHNWNkR2xtS0NGcGMwNWhUaWgwYVcxbGIzVjBLU0FtSmlCMGFXMWxiM1YwSUQ0Z01DbDdYRzVjZEZ4MGMyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1WEhSY2RGeDBkbUZ5SUdoaGJtUnNaWElnUFNCMGFHRjBMbDl5WlcxdmRtVk5aWE56WVdkbEtHMWxjM05oWjJVdWFXUXBPMXh1WEhSY2RGeDBhV1lvYUdGdVpHeGxjaWtnZEdoaGRDNWZibTkwYVdaNVRHbHpkR1Z1WlhJb2FHRnVaR3hsY2l3Z0oxUnBiV1Z2ZFhRZ1pYaGpaV1ZrWldRZ0tDY3JkR2x0Wlc5MWRDc25iWE1wSUNFbktUdGNibHgwWEhSOUxDQjBhVzFsYjNWMEtUdGNibHgwZlZ4dVhHNWNkR2xtS0NGMGFHbHpMbDl6Wlc1a0tHMWxjM05oWjJVcEtYdGNibHgwWEhSMGFHbHpMbDl5WlcxdmRtVk5aWE56WVdkbEtHMWxjM05oWjJVdWFXUXBPMXh1WEhSY2RHTnZibk52YkdVdVpYSnliM0lvSjBOaGJtNXZkQ0J6Wlc1a0lISmxjWFZsYzNRZ0lTY3BPMXh1WEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUIwY25WbE8xeHVmVHRjYmx4dVJHbDVZVTV2WkdVdWNISnZkRzkwZVhCbExuTjFZbk5qY21saVpTQTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5d2dZMkZzYkdKaFkyc3BlMXh1WEhScFppaHdZWEpoYlhNdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUZOMGNtbHVaeWtnZTF4dVhIUmNkSFpoY2lCZmNHRnlZVzF6SUQwZ2NHRnlZVzF6TG5Od2JHbDBLRndpTGx3aUtUdGNibHgwWEhScFppaGZjR0Z5WVcxekxteGxibWQwYUNFOU1pa2dkR2h5YjNjZ0owMWhiR1p2Y20xbFpGSmxjWFZsYzNRbk8xeHVYSFJjZEhCaGNtRnRjeUE5SUh0elpYSjJhV05sT2w5d1lYSmhiWE5iTUYwc0lHWjFibU02WDNCaGNtRnRjMXN4WFgwN1hHNWNkSDFjYmx4dVhIUnBaaWdoY0dGeVlXMXpMbk5sY25acFkyVXBlMXh1WEhSY2RFeHZaMmRsY2k1bGNuSnZjaWduVG04Z2MyVnlkbWxqWlNCa1pXWnBibVZrSUdadmNpQnpkV0p6WTNKcGNIUnBiMjRnSVNjcE8xeHVYSFJjZEhKbGRIVnliaUF0TVR0Y2JseDBmVnh1WEc1Y2RIWmhjaUJ0WlhOellXZGxJRDBnZEdocGN5NWZZM0psWVhSbFRXVnpjMkZuWlNod1lYSmhiWE1zSUZ3aVUzVmljMk55YVhCMGFXOXVYQ0lwTzF4dVhIUjBhR2x6TGw5aGNIQmxibVJOWlhOellXZGxLRzFsYzNOaFoyVXNJR05oYkd4aVlXTnJLVHRjYmx4dVhIUnBaaWdoZEdocGN5NWZjMlZ1WkNodFpYTnpZV2RsS1NsN1hHNWNkRngwZEdocGN5NWZjbVZ0YjNabFRXVnpjMkZuWlNodFpYTnpZV2RsTG1sa0tUdGNibHgwWEhSTWIyZG5aWEl1WlhKeWIzSW9KME5oYm01dmRDQnpaVzVrSUhOMVluTmpjbWx3ZEdsdmJpQWhKeWs3WEc1Y2RGeDBjbVYwZFhKdUlDMHhPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJRzFsYzNOaFoyVXVhV1E3WEc1OU8xeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1YjNCbGJsTnZZMnRsZENBOUlHWjFibU4wYVc5dUtHUXhhVzV6ZEN3Z2NHRnlZVzF6TENCallXeHNZbUZqYXlsN1hHNWNkSFJvYVhNdVgyUnBlV0ZUYjJOclpYUXVjMlYwS0hCaGNtRnRjeTV6YjJOclpYUkpaQ3dnYm1WM0lFUnBlV0ZUYjJOclpYUW9aREZwYm5OMExDQndZWEpoYlhNcEtUdGNibHgwZEdocGN5NWZaR2w1WVZOdlkydGxkQzVuWlhRb2NHRnlZVzF6TG5OdlkydGxkRWxrS1M1emRXSnpZM0pwWW1WVGIyTnJaWFJEYkc5elpXUW9jR0Z5WVcxekxuTnZZMnRsZEVsa0tUdGNibHgwYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtnWTJGc2JHSmhZMnNvZEdocGN5NWZaR2w1WVZOdlkydGxkQzVuWlhRb2NHRnlZVzF6TG5OdlkydGxkRWxrS1NrN1hHNTlPMXh1WEc1RWFYbGhUbTlrWlM1d2NtOTBiM1I1Y0dVdWIyNVRiMk5yWlhSRGJHOXpaV1FnUFNCbWRXNWpkR2x2YmloemIyTnJaWFJKWkNsN1hHNWNkR2xtSUNoMGFHbHpMbDlrYVhsaFUyOWphMlYwTG1oaGN5aHpiMk5yWlhSSlpDa3BlMXh1WEhSY2RIUm9hWE11WDJScGVXRlRiMk5yWlhRdVoyVjBLSE52WTJ0bGRFbGtLUzVsYldsMEtDZGpiRzl6WlNjcFhHNWNkRngwZEdocGN5NWZaR2w1WVZOdlkydGxkQzVrWld4bGRHVW9jMjlqYTJWMFNXUXBPMXh1WEhSOVhHNTlYRzVjYmtScGVXRk9iMlJsTG5CeWIzUnZkSGx3WlM1elpXNWtVMjlqYTJWMFJHRjBZU0E5SUdaMWJtTjBhVzl1S0hCaGNtRnRjeWw3WEc1Y2RHeGxkQ0J0WlhOellXZGxJRDBnZEdocGN5NWZZM0psWVhSbFRXVnpjMkZuWlNod1lYSmhiWE1zSUZ3aVUyOWphMlYwUTJ4cFpXNTBSR0YwWVZ3aUtUdGNibHgwYVdZb0lYUm9hWE11WDNObGJtUW9iV1Z6YzJGblpTa3BlMXh1WEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblEyRnVibTkwSUhObGJtUWdjMjlqYTJWMElTY3BPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQnRaWE56WVdkbExtbGtPMXh1ZlR0Y2JseHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMblZ1YzNWaWMyTnlhV0psSUQwZ1puVnVZM1JwYjI0b2MzVmlTV1FwZTF4dVhIUnBaaWgwYUdsekxsOXdaVzVrYVc1blRXVnpjMkZuWlhOYmMzVmlTV1JkSUNZbUlIUm9hWE11WDNCbGJtUnBibWROWlhOellXZGxjMXR6ZFdKSlpGMHVkSGx3WlNBOVBUMGdYQ0pUZFdKelkzSnBjSFJwYjI1Y0lpbDdYRzVjZEZ4MGRtRnlJSE4xWW5OamNtbHdkR2x2YmlBOUlIUm9hWE11WDNKbGJXOTJaVTFsYzNOaFoyVW9jM1ZpU1dRcE8xeHVYRzVjZEZ4MGRtRnlJRzFsYzNOaFoyVWdQU0IwYUdsekxsOWpjbVZoZEdWTlpYTnpZV2RsS0h0Y2JseDBYSFJjZEhSaGNtZGxkRG9nYzNWaWMyTnlhWEIwYVc5dUxuUmhjbWRsZEN4Y2JseDBYSFJjZEdSaGRHRTZJSHRjYmx4MFhIUmNkRngwYzNWaVNXUTZJSE4xWWtsa1hHNWNkRngwWEhSOVhHNWNkRngwZlN3Z1hDSlZibk4xWW5OamNtbGlaVndpS1R0Y2JseHVYSFJjZEdsbUtDRjBhR2x6TGw5elpXNWtLRzFsYzNOaFoyVXBLWHRjYmx4MFhIUmNkRXh2WjJkbGNpNWxjbkp2Y2lnblEyRnVibTkwSUhObGJtUWdkVzV6ZFdKelkzSnBZbVVnSVNjcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OGdTVzUwWlhKdVlXd2diV1YwYUc5a2N5QXZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYmtScGVXRk9iMlJsTG5CeWIzUnZkSGx3WlM1ZllYQndaVzVrVFdWemMyRm5aU0E5SUdaMWJtTjBhVzl1S0cxbGMzTmhaMlVzSUdOaGJHeGlZV05yS1h0Y2JseDBkR2hwY3k1ZmNHVnVaR2x1WjAxbGMzTmhaMlZ6VzIxbGMzTmhaMlV1YVdSZElEMGdlMXh1WEhSY2RHTmhiR3hpWVdOck9pQmpZV3hzWW1GamF5eGNibHgwWEhSMGVYQmxPaUJ0WlhOellXZGxMblI1Y0dVc1hHNWNkRngwZEdGeVoyVjBPaUJ0WlhOellXZGxMblJoY21kbGRGeHVYSFI5TzF4dWZUdGNibHh1UkdsNVlVNXZaR1V1Y0hKdmRHOTBlWEJsTGw5eVpXMXZkbVZOWlhOellXZGxJRDBnWm5WdVkzUnBiMjRvYldWemMyRm5aVWxrS1h0Y2JseDBkbUZ5SUdoaGJtUnNaWElnUFNCMGFHbHpMbDl3Wlc1a2FXNW5UV1Z6YzJGblpYTmJiV1Z6YzJGblpVbGtYVHRjYmx4MGFXWW9hR0Z1Wkd4bGNpbDdYRzVjZEZ4MFpHVnNaWFJsSUhSb2FYTXVYM0JsYm1ScGJtZE5aWE56WVdkbGMxdHRaWE56WVdkbFNXUmRPMXh1WEhSY2RISmxkSFZ5YmlCb1lXNWtiR1Z5TzF4dVhIUjlaV3h6Wlh0Y2JseDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBmVnh1ZlR0Y2JseHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMbDlqYkdWaGNrMWxjM05oWjJWeklEMGdablZ1WTNScGIyNG9aWEp5TENCa1lYUmhLWHRjYmx4MFptOXlLSFpoY2lCdFpYTnpZV2RsU1dRZ2FXNGdkR2hwY3k1ZmNHVnVaR2x1WjAxbGMzTmhaMlZ6S1h0Y2JseDBYSFIyWVhJZ2FHRnVaR3hsY2lBOUlIUm9hWE11WDNKbGJXOTJaVTFsYzNOaFoyVW9iV1Z6YzJGblpVbGtLVHRjYmx4MFhIUjBhR2x6TGw5dWIzUnBabmxNYVhOMFpXNWxjaWhvWVc1a2JHVnlMQ0JsY25Jc0lHUmhkR0VwTzF4dVhIUjlYRzU5TzF4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVYMk5zWldGeVVHVmxjbk1nUFNCbWRXNWpkR2x2YmlncElIdGNibHgwZDJocGJHVW9kR2hwY3k1ZmNHVmxjbk11YkdWdVozUm9LU0I3WEc1Y2RGeDBiR1YwSUhCbFpYSWdQU0IwYUdsekxsOXdaV1Z5Y3k1d2IzQW9LVnh1WEhSY2RIUm9hWE11YzNSdmNtVXVaR1ZzWlhSbEtIQmxaWElwWEc1Y2RGeDBkR2hwY3k1bGJXbDBLQ2R3WldWeUxXUnBjMk52Ym01bFkzUmxaQ2NzSUhCbFpYSXBPMXh1WEhSOVhHNTlPMXh1WEc1RWFYbGhUbTlrWlM1d2NtOTBiM1I1Y0dVdVgyZGxkRTFsYzNOaFoyVklZVzVrYkdWeUlEMGdablZ1WTNScGIyNG9iV1Z6YzJGblpVbGtLWHRjYmx4MGRtRnlJR2hoYm1Sc1pYSWdQU0IwYUdsekxsOXdaVzVrYVc1blRXVnpjMkZuWlhOYmJXVnpjMkZuWlVsa1hUdGNibHgwY21WMGRYSnVJR2hoYm1Sc1pYSWdQeUJvWVc1a2JHVnlJRG9nYm5Wc2JEdGNibjA3WEc1Y2JseHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMbDl1YjNScFpubE1hWE4wWlc1bGNpQTlJR1oxYm1OMGFXOXVLR2hoYm1Sc1pYSXNJR1Z5Y205eUxDQmtZWFJoS1h0Y2JseDBhV1lvYUdGdVpHeGxjaUFtSmlCMGVYQmxiMllnYUdGdVpHeGxjaTVqWVd4c1ltRmpheUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1WEhSY2RHVnljbTl5SUQwZ1pYSnliM0lnUHlCbGNuSnZjaUE2SUc1MWJHdzdYRzVjZEZ4MFpHRjBZU0E5SUdSaGRHRWdQeUJrWVhSaElEb2diblZzYkR0Y2JseDBYSFIwY25rZ2UxeHVYSFJjZEZ4MGFHRnVaR3hsY2k1allXeHNZbUZqYXlobGNuSnZjaXdnWkdGMFlTazdYRzVjZEZ4MGZTQmpZWFJqYUNobEtTQjdJR052Ym5OdmJHVXViRzluS0NkYlJYSnliM0lnYVc0Z1VtVnhkV1Z6ZENCallXeHNZbUZqYTEwZ0p5QXJJR1V1YzNSaFkyc2dQeUJsTG5OMFlXTnJJRG9nWlNrN2ZWeHVYSFI5WEc1OU8xeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1WDNObGJtUWdQU0JtZFc1amRHbHZiaUFvYldWemMyRm5aU2tnZTF4dVhIUnlaWFIxY200Z2RHaHBjeTVmYzI5amEyVjBTR0Z1Wkd4bGNpQW1KaUIwYUdsekxsOXpiMk5yWlhSSVlXNWtiR1Z5TG5ObGJtUW9iV1Z6YzJGblpTbGNibjFjYmx4dVJHbDVZVTV2WkdVdWNISnZkRzkwZVhCbExsOXpaWFIxY0ZCcGJtZFNaWE53YjI1elpTQTlJR1oxYm1OMGFXOXVLQ2w3WEc1Y2RIWmhjaUIwYUdGMElEMGdkR2hwY3p0Y2JseHVYSFIwYUdsekxsOXdhVzVuVkdsdFpXOTFkQ0E5SURFMU1EQXdPMXh1WEhSMGFHbHpMbDlzWVhOMFVHbHVaeUE5SUc1bGR5QkVZWFJsS0NrdVoyVjBWR2x0WlNncE8xeHVYRzVjZEdaMWJtTjBhVzl1SUdOb1pXTnJVR2x1WnlncGUxeHVYSFJjZEhaaGNpQmpkWEpVYVcxbElEMGdibVYzSUVSaGRHVW9LUzVuWlhSVWFXMWxLQ2s3WEc1Y2RGeDBhV1lvWTNWeVZHbHRaU0F0SUhSb1lYUXVYMnhoYzNSUWFXNW5JRDRnZEdoaGRDNWZjR2x1WjFScGJXVnZkWFFwZTF4dVhIUmNkRngwZEdoaGRDNWZabTl5WTJWRGJHOXpaU2dwTzF4dVhIUmNkRngwVEc5bloyVnlMbXh2WnloY0ltUXhPaUFnZEdsdFpXUWdiM1YwSVZ3aUtUdGNibHgwWEhSOVpXeHpaWHRjYmx4MFhIUmNkRXh2WjJkbGNpNXNiMmNvWENKa01Ub2diR0Z6ZENCd2FXNW5JRzlyWENJcE8xeHVYSFJjZEZ4MGRHaGhkQzVmY0dsdVoxTmxkRlJwYldWdmRYUkpaQ0E5SUhObGRGUnBiV1Z2ZFhRb1kyaGxZMnRRYVc1bkxDQk5ZWFJvTG5KdmRXNWtLSFJvWVhRdVgzQnBibWRVYVcxbGIzVjBJQzhnTWk0eEtTazdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBZMmhsWTJ0UWFXNW5LQ2s3WEc1OU8xeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1WDNOMGIzQlFhVzVuVW1WemNHOXVjMlVnUFNCbWRXNWpkR2x2YmlncGUxeHVYSFJqYkdWaGNsUnBiV1Z2ZFhRb2RHaHBjeTVmY0dsdVoxTmxkRlJwYldWdmRYUkpaQ2s3WEc1OU8xeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1WDJadmNtTmxRMnh2YzJVZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1WEhSMGFHbHpMbDl6YjJOclpYUklZVzVrYkdWeUxtTnNiM05sS0NrN1hHNWNkSFJvYVhNdVgyOXVZMnh2YzJVb0tUdGNibjA3WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeUJUYjJOclpYUWdaWFpsYm5RZ2FHRnVaR3hsY25NZ0x5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVYMjl1YldWemMyRm5aU0E5SUdaMWJtTjBhVzl1S0cxbGMzTmhaMlVwZTF4dVhIUnBaaWh0WlhOellXZGxMblI1Y0dVZ1BUMDlJRndpVTI5amEyVjBVMlZ5ZG1WeVJHRjBZVndpS1NCMGFHbHpMbDlvWVc1a2JHVlRiMk5yWlhSVFpYSjJaWEpFWVhSaEtHMWxjM05oWjJVcE8xeHVYSFJwWmlocGMwNWhUaWh0WlhOellXZGxMbWxrS1NrZ2NtVjBkWEp1SUhSb2FYTXVYMmhoYm1Sc1pVbHVkR1Z5Ym1Gc1RXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2JseDBkbUZ5SUdoaGJtUnNaWElnUFNCMGFHbHpMbDluWlhSTlpYTnpZV2RsU0dGdVpHeGxjaWh0WlhOellXZGxMbWxrS1R0Y2JseDBhV1lvSVdoaGJtUnNaWElwSUhKbGRIVnlianRjYmx4MGMzZHBkR05vS0doaGJtUnNaWEl1ZEhsd1pTbDdYRzVjZEZ4MFkyRnpaU0JjSWxKbGNYVmxjM1JjSWpwY2JseDBYSFJjZEhSb2FYTXVYMmhoYm1Sc1pWSmxjWFZsYzNRb2FHRnVaR3hsY2l3Z2JXVnpjMkZuWlNrN1hHNWNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmpZWE5sSUZ3aVUzVmljMk55YVhCMGFXOXVYQ0k2WEc1Y2RGeDBYSFIwYUdsekxsOW9ZVzVrYkdWVGRXSnpZM0pwY0hScGIyNG9hR0Z1Wkd4bGNpd2diV1Z6YzJGblpTazdYRzVjZEZ4MFhIUmljbVZoYXp0Y2JseDBmVnh1ZlR0Y2JseHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMbDl2Ym05d1pXNXBibWNnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwZEdocGN5NWxiV2wwS0NkdmNHVnVhVzVuSnl3Z2RHaHBjeWs3WEc1OU8xeHVYRzVFYVhsaFRtOWtaUzV3Y205MGIzUjVjR1V1WDI5dVpYSnliM0lnUFNCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dVhIUjBhR2x6TG1WdGFYUW9KMlZ5Y205eUp5d2dibVYzSUVWeWNtOXlLR1Z5Y205eUtTazdYRzU5TzF4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVYMjl1WTJ4dmMybHVaeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIwYUdsekxtVnRhWFFvSjJOc2IzTnBibWNuTENCMGFHbHpLVHRjYm4wN1hHNWNia1JwZVdGT2IyUmxMbkJ5YjNSdmRIbHdaUzVmYjI1amJHOXpaU0E5SUdaMWJtTjBhVzl1S0NsN1hHNWNkSFpoY2lCMGFHRjBJRDBnZEdocGN6dGNibHh1WEhSMGFHbHpMbDlqYkdWaGNrMWxjM05oWjJWektDZFFaV1Z5UkdselkyOXVibVZqZEdWa0p5azdYRzVjZEhSb2FYTXVYMk5zWldGeVVHVmxjbk1vS1R0Y2JseHVYSFJwWmlnaGRHaHBjeTVpUkc5dWRGSmxZMjl1Ym1WamRDa2dlMXh1WEhSY2RFeHZaMmRsY2k1c2IyY29KMlF4T2lCamIyNXVaV04wYVc5dUlHeHZjM1FzSUhSeWVTQnlaV052Ym01bFkzUnBibWNuS1R0Y2JseDBYSFJ6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNWNkRngwWEhSMGFHRjBMbU52Ym01bFkzUW9kR2hoZEM1ZllXUmtjaXdnZEdoaGRDNWZWMU52WTJ0bGRDa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLWHQ5S1R0Y2JseDBYSFI5TENCMGFHRjBMbDl5WldOdmJtNWxZM1JVYVcxbGIzVjBLVHRjYmx4MGZWeHVYSFIwYUdsekxtVnRhWFFvSjJOc2IzTmxKeXdnZEdocGN5NWZZV1JrY2lrN1hHNTlPMXh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeThnVUhKdmRHOWpiMndnWlhabGJuUWdhR0Z1Wkd4bGNuTWdMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc1Y2JrUnBlV0ZPYjJSbExuQnliM1J2ZEhsd1pTNWZhR0Z1Wkd4bFNXNTBaWEp1WVd4TlpYTnpZV2RsSUQwZ1puVnVZM1JwYjI0b2JXVnpjMkZuWlNsN1hHNWNkSE4zYVhSamFDaHRaWE56WVdkbExuUjVjR1VwZTF4dVhIUmNkR05oYzJVZ1hDSlFaV1Z5UTI5dWJtVmpkR1ZrWENJNlhHNWNkRngwWEhSMGFHbHpMbDlvWVc1a2JHVlFaV1Z5UTI5dWJtVmpkR1ZrS0cxbGMzTmhaMlVwTzF4dVhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFkyRnpaU0JjSWxCbFpYSkVhWE5qYjI1dVpXTjBaV1JjSWpwY2JseDBYSFJjZEhSb2FYTXVYMmhoYm1Sc1pWQmxaWEpFYVhOamIyNXVaV04wWldRb2JXVnpjMkZuWlNrN1hHNWNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmpZWE5sSUZ3aVNHRnVaSE5vWVd0bFhDSTZYRzVjZEZ4MFhIUjBhR2x6TGw5b1lXNWtiR1ZJWVc1a2MyaGhhMlVvYldWemMyRm5aU2s3WEc1Y2RGeDBYSFJpY21WaGF6dGNibHgwWEhSallYTmxJRndpVUdsdVoxd2lPbHh1WEhSY2RGeDBkR2hwY3k1ZmFHRnVaR3hsVUdsdVp5aHRaWE56WVdkbEtUdGNibHgwWEhSY2RHSnlaV0ZyTzF4dVhIUjlYRzU5TzF4dVhHNUVhWGxoVG05a1pTNXdjbTkwYjNSNWNHVXVYMmhoYm1Sc1pWQnBibWNnUFNCbWRXNWpkR2x2YmlBb2JXVnpjMkZuWlNrZ2UxeHVYSFJ0WlhOellXZGxMblI1Y0dVZ1BTQmNJbEJ2Ym1kY0lseHVYSFIwYUdsekxsOXNZWE4wVUdsdVp5QTlJRzVsZHlCRVlYUmxLQ2t1WjJWMFZHbHRaU2dwWEc1Y2RIUm9hWE11WDNObGJtUW9iV1Z6YzJGblpTbGNibjFjYmx4dVJHbDVZVTV2WkdVdWNISnZkRzkwZVhCbExsOW9ZVzVrYkdWSVlXNWtjMmhoYTJVZ1BTQm1kVzVqZEdsdmJpaHRaWE56WVdkbEtYdGNibHh1WEhScFppaHRaWE56WVdkbExuQmxaWEp6SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZEhsd1pXOW1JRzFsYzNOaFoyVXVjMlZzWmlBaFBUMGdKM04wY21sdVp5Y3BlMXh1WEhSY2RFeHZaMmRsY2k1bGNuSnZjaWhjSWsxcGMzTnBibWNnWVhKbmRXMWxiblJ6SUdadmNpQklZVzVrYzJoaGEyVWdiV1Z6YzJGblpTd2daSEp2Y0hCcGJtY3VMaTVjSWlrN1hHNWNkRngwY21WMGRYSnVJRHRjYmx4MGZWeHVYRzVjYmx4MGRHaHBjeTVmYzJWc1ppQTlJRzFsYzNOaFoyVXVjMlZzWmp0Y2JseHVYSFJtYjNJb2RtRnlJR2s5TUR0cFBHMWxjM05oWjJVdWNHVmxjbk11YkdWdVozUm9PeUJwS3lzcGUxeHVYSFJjZEhSb2FYTXVYM0JsWlhKekxuQjFjMmdvYldWemMyRm5aUzV3WldWeWMxdHBYU2s3WEc1Y2RGeDBkR2hwY3k1emRHOXlaUzV6WlhRb2JXVnpjMkZuWlM1d1pXVnljMXRwWFN3Z2JtVjNJRTFoY0NncEtWeHVYSFJjZEhSb2FYTXVaVzFwZENnbmNHVmxjaTFqYjI1dVpXTjBaV1FuTENCdFpYTnpZV2RsTG5CbFpYSnpXMmxkS1R0Y2JseDBmVnh1WEc1Y2RIUm9hWE11WDJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkM1eVpYTnZiSFpsS0hSb2FYTXVjMlZzWmlncEtUdGNibHgwZEdocGN5NWxiV2wwS0NkdmNHVnVKeXdnZEdocGN5NWZZV1JrY2lrN1hHNWNkSFJvYVhNdVgzTjBZWFIxY3lBOUlDZHZjR1Z1WldRbk8xeHVYSFIwYUdsekxsOWpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUWdQU0J1ZFd4c08xeHVmVHRjYmx4dVJHbDVZVTV2WkdVdWNISnZkRzkwZVhCbExsOW9ZVzVrYkdWUVpXVnlRMjl1Ym1WamRHVmtJRDBnWm5WdVkzUnBiMjRvYldWemMyRm5aU2w3WEc1Y2RHbG1LRzFsYzNOaFoyVXVjR1ZsY2tsa0lEMDlQU0IxYm1SbFptbHVaV1FwZTF4dVhIUmNkRXh2WjJkbGNpNWxjbkp2Y2loY0lrMXBjM05wYm1jZ1lYSm5kVzFsYm5SeklHWnZjaUJRWldWeVEyOXVibVZqZEdWa0lHMWxjM05oWjJVc0lHUnliM0J3YVc1bkxpNHVYQ0lwTzF4dVhIUmNkSEpsZEhWeWJpQTdYRzVjZEgxY2JseHVYSFF2TDBGa1pDQndaV1Z5SUhSdklIUm9aU0JzYVhOMElHOW1JSEpsWVdOb1lXSnNaU0J3WldWeWMxeHVYSFIwYUdsekxsOXdaV1Z5Y3k1d2RYTm9LRzFsYzNOaFoyVXVjR1ZsY2tsa0tUdGNibHgwZEdocGN5NXpkRzl5WlM1elpYUW9iV1Z6YzJGblpTNXdaV1Z5U1dRc0lHNWxkeUJOWVhBb0tTbGNibHh1WEhSMGFHbHpMbVZ0YVhRb0ozQmxaWEl0WTI5dWJtVmpkR1ZrSnl3Z2JXVnpjMkZuWlM1d1pXVnlTV1FwTzF4dWZUdGNibHh1UkdsNVlVNXZaR1V1Y0hKdmRHOTBlWEJsTGw5b1lXNWtiR1ZRWldWeVJHbHpZMjl1Ym1WamRHVmtJRDBnWm5WdVkzUnBiMjRvYldWemMyRm5aU2w3WEc1Y2RHbG1LRzFsYzNOaFoyVXVjR1ZsY2tsa0lEMDlQU0IxYm1SbFptbHVaV1FwZTF4dVhIUmNkRXh2WjJkbGNpNWxjbkp2Y2loY0lrMXBjM05wYm1jZ1lYSm5kVzFsYm5SeklHWnZjaUJRWldWeVJHbHpZMjl1Ym1WamRHVmtJRTFsYzNOaFoyVXNJR1J5YjNCd2FXNW5MaTR1WENJcE8xeHVYSFJjZEhKbGRIVnliaUE3WEc1Y2RIMWNibHgwWEc1Y2RDOHZVbVZ0YjNabElIQmxaWElnWm5KdmJTQnNhWE4wSUc5bUlISmxZV05vWVdKc1pTQndaV1Z5YzF4dVhIUm1iM0lvZG1GeUlHazlkR2hwY3k1ZmNHVmxjbk11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBlMXh1WEhSY2RHbG1LSFJvYVhNdVgzQmxaWEp6VzJsZElEMDlQU0J0WlhOellXZGxMbkJsWlhKSlpDbDdYRzVjZEZ4MFhIUjBhR2x6TGw5d1pXVnljeTV6Y0d4cFkyVW9hU3dnTVNrN1hHNWNkRngwWEhSaWNtVmhhenRjYmx4MFhIUjlYRzVjZEgxY2JseDBMeTl5WlcxdmRtVWdZWE56YjJOcFlYUmxaQ0J6ZEc5eVpWeHVYSFIwYUdsekxuTjBiM0psTG1SbGJHVjBaU2h0WlhOellXZGxMbkJsWlhKSlpDbGNibHh1WEhRdkwwZHZJSFJvY205MVoyZ2dZV3hzSUhCbGJtUnBibWNnYldWemMyRm5aWE1nWVc1a0lHNXZkR2xtZVNCMGFHVWdiMjVsY3lCMGFHRjBJR0Z5WlNCMFlYSm5aWFJsWkZ4dVhIUXZMMkYwSUhSb1pTQmthWE5qYjI1dVpXTjBaV1FnY0dWbGNpQjBhR0YwSUdsMElHUnBjMk52Ym01bFkzUmxaQ0JoYm1RZ2RHaGxjbVZtYjNKbElIUm9aU0JqYjIxdFlXNWtYRzVjZEM4dlkyRnVibTkwSUdKbElHWjFiR1pwYkd4bFpGeHVYSFJtYjNJb2RtRnlJRzFsYzNOaFoyVkpaQ0JwYmlCMGFHbHpMbDl3Wlc1a2FXNW5UV1Z6YzJGblpYTXBlMXh1WEhSY2RIWmhjaUJvWVc1a2JHVnlJRDBnZEdocGN5NWZaMlYwVFdWemMyRm5aVWhoYm1Sc1pYSW9iV1Z6YzJGblpVbGtLVHRjYmx4MFhIUnBaaWhvWVc1a2JHVnlJQ1ltSUdoaGJtUnNaWEl1ZEdGeVoyVjBJRDA5UFNCdFpYTnpZV2RsTG5CbFpYSkpaQ2tnZTF4dVhIUmNkRngwZEdocGN5NWZjbVZ0YjNabFRXVnpjMkZuWlNodFpYTnpZV2RsU1dRcE8xeHVYSFJjZEZ4MGRHaHBjeTVmYm05MGFXWjVUR2x6ZEdWdVpYSW9hR0Z1Wkd4bGNpd2dKMUJsWlhKRWFYTmpiMjV1WldOMFpXUW5MQ0J1ZFd4c0tUdGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUjBhR2x6TG1WdGFYUW9KM0JsWlhJdFpHbHpZMjl1Ym1WamRHVmtKeXdnYldWemMyRm5aUzV3WldWeVNXUXBPMXh1ZlR0Y2JseHVSR2w1WVU1dlpHVXVjSEp2ZEc5MGVYQmxMbDlvWVc1a2JHVlNaWEYxWlhOMElEMGdablZ1WTNScGIyNG9hR0Z1Wkd4bGNpd2diV1Z6YzJGblpTbDdYRzVjZEdsbUtHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0oxQmhjblJwWVd4QmJuTjNaWEluS1NCN1hHNWNkRngwYVdZb2RIbHdaVzltSUhSb2FYTXVYM0JsYm1ScGJtZE5aWE56WVdkbGMxdHRaWE56WVdkbExtbGtYUzVqWVd4c1ltRmphMTl3WVhKMGFXRnNJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzVjZEZ4MFhIUjJZWElnWlhKeWIzSWdQU0J0WlhOellXZGxMbVZ5Y205eUlEOGdiV1Z6YzJGblpTNWxjbkp2Y2lBNklHNTFiR3c3WEc1Y2RGeDBYSFIyWVhJZ1pHRjBZU0E5SUcxbGMzTmhaMlV1WkdGMFlTQS9JRzFsYzNOaFoyVXVaR0YwWVNBNklHNTFiR3c3WEc1Y2RGeDBYSFIwYUdsekxsOXdaVzVrYVc1blRXVnpjMkZuWlhOYmJXVnpjMkZuWlM1cFpGMHVZMkZzYkdKaFkydGZjR0Z5ZEdsaGJDaGxjbkp2Y2l3Z1pHRjBZU2s3WEc1Y2RGeDBmVnh1WEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwZEdocGN5NWZjbVZ0YjNabFRXVnpjMkZuWlNodFpYTnpZV2RsTG1sa0tUdGNibHgwWEhSMGFHbHpMbDl1YjNScFpubE1hWE4wWlc1bGNpaG9ZVzVrYkdWeUxDQnRaWE56WVdkbExtVnljbTl5TENCdFpYTnpZV2RsTG1SaGRHRXBPMXh1WEhSOVhHNTlPMXh1WEc1RWFYbGhUbTlrWlM1d2NtOTBiM1I1Y0dVdVgyaGhibVJzWlZOMVluTmpjbWx3ZEdsdmJpQTlJR1oxYm1OMGFXOXVLR2hoYm1Sc1pYSXNJRzFsYzNOaFoyVXBlMXh1WEhRdkwzSmxiVzkyWlNCemRXSnpZM0pwY0hScGIyNGdhV1lnYVhRZ2QyRnpJR05zYjNObFpDQm1jbTl0SUc1dlpHVmNibHgwYVdZb2JXVnpjMkZuWlM1eVpYTjFiSFFnUFQwOUlGd2lZMnh2YzJWa1hDSXBJSHRjYmx4MFhIUjBhR2x6TGw5eVpXMXZkbVZOWlhOellXZGxLRzFsYzNOaFoyVXVhV1FwTzF4dVhIUmNkRzFsYzNOaFoyVXVaWEp5YjNJZ1BTQW5VM1ZpYzJOeWFYQjBhVzl1UTJ4dmMyVmtKenRjYmx4MGZWeHVYSFIwYUdsekxsOXViM1JwWm5sTWFYTjBaVzVsY2lob1lXNWtiR1Z5TENCdFpYTnpZV2RsTG1WeWNtOXlMQ0J0WlhOellXZGxMbVJoZEdFZ1B5QnRaWE56WVdkbExtUmhkR0VnT2lCdWRXeHNLVHRjYm4wN1hHNWNia1JwZVdGT2IyUmxMbkJ5YjNSdmRIbHdaUzVmYUdGdVpHeGxVMjlqYTJWMFUyVnlkbVZ5UkdGMFlTQTlJR1oxYm1OMGFXOXVLRzFsYzNOaFoyVXBlMXh1WEhSY2RIUm9hWE11WDJScGVXRlRiMk5yWlhRdVoyVjBLRzFsYzNOaFoyVXVaR0YwWVM1emIyTnJaWFJKWkNrdWNIVnphQ2h1WlhjZ1FuVm1abVZ5S0cxbGMzTmhaMlV1WkdGMFlTNWlkV1ptWlhJc0lDZGlZWE5sTmpRbktTazdYRzU5TzF4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCVGIyTnJaWFJJWVc1a2JHVnlJQzh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNWNibVoxYm1OMGFXOXVJRk52WTJ0bGRFaGhibVJzWlhJb1YxTnZZMnRsZEN3Z1lXUmtjaXdnZEdsdFpXOTFkQ2tnZTF4dVhIUjJZWElnZEdoaGRDQTlJSFJvYVhNN1hHNWNkSFJvYVhNdVlXUmtjaUE5SUdGa1pISTdYRzVjYmx4MGFXWW9WMU52WTJ0bGRDa2dkR2hwY3k1ZlYxTnZZMnRsZENBOUlGZFRiMk5yWlhRN1hHNWNkR1ZzYzJVZ2FXWW9JWFJvYVhNdVgxZFRiMk5yWlhRcElIUm9hWE11WDFkVGIyTnJaWFFnUFNCM2FXNWtiM2N1VjJWaVUyOWphMlYwTzF4dVhIUlhVMjlqYTJWMElEMGdkR2hwY3k1ZlYxTnZZMnRsZER0Y2JseHVYSFIwYUdsekxsOXpkR0YwZFhNZ1BTQW5iM0JsYm1sdVp5YzdYRzVjYmx4MGRISjVJSHRjYmx4MFhIUjBhR2x6TGw5emIyTnJaWFFnUFNCaFpHUnlMbWx1WkdWNFQyWW9YQ0ozYzNNNkx5OWNJaWs5UFQwd0lEOGdibVYzSUZkVGIyTnJaWFFvWVdSa2Npd2dkVzVrWldacGJtVmtMQ0I3Y21WcVpXTjBWVzVoZFhSb2IzSnBlbVZrT21aaGJITmxmU2tnT2lCdVpYY2dWMU52WTJ0bGRDaGhaR1J5S1R0Y2JseHVYSFJjZEhSb2FYTXVYM052WTJ0bGRFOXdaVzVEWVd4c1ltRmpheUE5SUhSb2FYTXVYMjl1YjNCbGJpNWlhVzVrS0hSb2FYTXBPMXh1WEhSY2RIUm9hWE11WDNOdlkydGxkRU5zYjNObFEyRnNiR0poWTJzZ1BTQjBhR2x6TGw5dmJtTnNiM05sTG1KcGJtUW9kR2hwY3lrN1hHNWNkRngwZEdocGN5NWZjMjlqYTJWMFRXVnpjMkZuWlVOaGJHeGlZV05ySUQwZ2RHaHBjeTVmYjI1dFpYTnpZV2RsTG1KcGJtUW9kR2hwY3lrN1hHNWNkRngwZEdocGN5NWZjMjlqYTJWMFJYSnliM0pEWVd4c1ltRmpheUE5SUhSb2FYTXVYMjl1WlhKeWIzSXVZbWx1WkNoMGFHbHpLVHRjYmx4dVhIUmNkSFJvYVhNdVgzTnZZMnRsZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdmNHVnVKeXdnZEdocGN5NWZjMjlqYTJWMFQzQmxia05oYkd4aVlXTnJLVHRjYmx4MFhIUjBhR2x6TGw5emIyTnJaWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4dmMyVW5MSFJvYVhNdVgzTnZZMnRsZEVOc2IzTmxRMkZzYkdKaFkyc3BPMXh1WEhSY2RIUm9hWE11WDNOdlkydGxkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R0WlhOellXZGxKeXdnZEdocGN5NWZjMjlqYTJWMFRXVnpjMkZuWlVOaGJHeGlZV05yS1R0Y2JseDBYSFIwYUdsekxsOXpiMk5yWlhRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblpYSnliM0luTENCMGFHbHpMbDl6YjJOclpYUkZjbkp2Y2tOaGJHeGlZV05yS1R0Y2JseHVYSFJjZEhSb2FYTXVYM052WTJ0bGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGxjbkp2Y2ljc0lHWjFibU4wYVc5dUtHVnljaWw3WEc1Y2RGeDBYSFJNYjJkblpYSXVaWEp5YjNJb1hDSmJWMU5kSUdWeWNtOXlJRG9nWENJZ0t5Qmxjbkl1ZEc5VGRISnBibWNvS1NrN1hHNWNkRngwWEhSMGFHRjBMbDl6YjJOclpYUXVZMnh2YzJVb0tUdGNibHgwWEhSOUtUdGNibHh1WEhSY2RITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHRjYmx4MFhIUmNkR2xtS0hSb1lYUXVYM04wWVhSMWN5QTlQVDBnSjI5d1pXNWxaQ2NwSUhKbGRIVnlianRjYmx4MFhIUmNkR2xtS0hSb1lYUXVYM04wWVhSMWN5QWhQVDBnSjJOc2IzTmxaQ2NwZTF4dVhIUmNkRngwWEhSTWIyZG5aWEl1Ykc5bktDZGtNVG9nSnlBcklIUm9ZWFF1WVdSa2NpQXJJQ2NnZEdsdFpXUWdiM1YwSUhkb2FXeGxJR052Ym01bFkzUnBibWNuS1R0Y2JseDBYSFJjZEZ4MGRHaGhkQzVqYkc5elpTZ3BPMXh1WEhSY2RGeDBYSFIwYUdGMExtVnRhWFFvSjNScGJXVnZkWFFuTENCMGFHRjBMbDl6YjJOclpYUXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHNJSFJwYldWdmRYUXBPMXh1WEc1Y2RIMGdZMkYwWTJnb1pTa2dlMXh1WEhSY2RFeHZaMmRsY2k1bGNuSnZjaWhsTG5OMFlXTnJLVHRjYmx4MFhIUjBhR0YwTG1Oc2IzTmxLQ2s3WEc1Y2RGeDBkR2h5YjNjZ1pUdGNibHgwZlZ4dWZUdGNibWx1YUdWeWFYUnpLRk52WTJ0bGRFaGhibVJzWlhJc0lFVjJaVzUwUlcxcGRIUmxjaWs3WEc1Y2JsTnZZMnRsZEVoaGJtUnNaWEl1Y0hKdmRHOTBlWEJsTG1Oc2IzTmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkR2xtS0hSb2FYTXVYMlJwYzJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkNBbUppQjBhR2x6TGw5a2FYTmpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUXVjSEp2YldselpTa2djbVYwZFhKdUlIUm9hWE11WDJScGMyTnZibTVsWTNScGIyNUVaV1psY25KbFpDNXdjbTl0YVhObE8xeHVYSFIwYUdsekxsOWthWE5qYjI1dVpXTjBhVzl1UkdWbVpYSnlaV1FnUFNCUkxtUmxabVZ5S0NrN1hHNWNkSFJvYVhNdVgzTjBZWFIxY3lBOUlDZGpiRzl6YVc1bkp6dGNibHgwZEdocGN5NWxiV2wwS0NkamJHOXphVzVuSnl3Z2RHaHBjeTVmYzI5amEyVjBLVHRjYmx4MGFXWW9kR2hwY3k1ZmMyOWphMlYwS1NCMGFHbHpMbDl6YjJOclpYUXVZMnh2YzJVb0tUdGNibHgwY21WMGRYSnVJSFJvYVhNdVgyUnBjMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQzV3Y205dGFYTmxPMXh1ZlR0Y2JseHVVMjlqYTJWMFNHRnVaR3hsY2k1d2NtOTBiM1I1Y0dVdWMyVnVaQ0E5SUdaMWJtTjBhVzl1S0cxbGMzTmhaMlVwSUh0Y2JseDBkSEo1SUh0Y2JseDBYSFIyWVhJZ1pHRjBZU0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLRzFsYzNOaFoyVXBPMXh1WEhSOUlHTmhkR05vS0dWeWNpa2dlMXh1WEhSY2RHTnZibk52YkdVdVpYSnliM0lvSjBOaGJtNXZkQ0J6WlhKcFlXeHBlbVVnYldWemMyRm5aU2NwTzF4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RIUnllU0I3WEc1Y2RGeDBkR2hwY3k1ZmMyOWphMlYwTG5ObGJtUW9aR0YwWVNrN1hHNWNkSDBnWTJGMFkyZ29aWEp5S1h0Y2JseDBYSFJqYjI1emIyeGxMbVZ5Y205eUtDZERZVzV1YjNRZ2MyVnVaQ0J0WlhOellXZGxKeWs3WEc1Y2RGeDBZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSXBPMXh1WEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUIwY25WbE8xeHVmVnh1WEc1VGIyTnJaWFJJWVc1a2JHVnlMbkJ5YjNSdmRIbHdaUzVwYzBOdmJtNWxZM1JsWkNBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSeVpYUjFjbTRnZEdocGN5NWZjMjlqYTJWMExuSmxZV1I1VTNSaGRHVWdQVDBnZEdocGN5NWZWMU52WTJ0bGRDNVBVRVZPSUNZbUlIUm9hWE11WDNOMFlYUjFjeUE5UFQwZ0oyOXdaVzVsWkNjN1hHNTlPMXh1WEc1VGIyTnJaWFJJWVc1a2JHVnlMbkJ5YjNSdmRIbHdaUzVmYjI1dmNHVnVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFJvYVhNdVgzTjBZWFIxY3lBOUlDZHZjR1Z1WldRbk8xeHVYSFIwYUdsekxtVnRhWFFvSjI5d1pXNG5MQ0IwYUdsekxsOXpiMk5yWlhRcE8xeHVmVHRjYmx4dVUyOWphMlYwU0dGdVpHeGxjaTV3Y205MGIzUjVjR1V1WDI5dVkyeHZjMlVnUFNCbWRXNWpkR2x2YmlobGRuUXBJSHRjYmx4MGRHaHBjeTVmYzNSaGRIVnpJRDBnSjJOc2IzTmxaQ2M3WEc1Y2RIUm9hWE11ZFc1eVpXZHBjM1JsY2tOaGJHeGlZV05yY3lncE8xeHVYSFIwYUdsekxtVnRhWFFvSjJOc2IzTmxKeXdnZEdocGN5NWZjMjlqYTJWMEtUdGNibHgwYVdZb2RHaHBjeTVmWkdselkyOXVibVZqZEdsdmJrUmxabVZ5Y21Wa0lDWW1JSFJvYVhNdVgyUnBjMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQzV3Y205dGFYTmxLU0IwYUdsekxsOWthWE5qYjI1dVpXTjBhVzl1UkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTzF4dWZUdGNibHh1VTI5amEyVjBTR0Z1Wkd4bGNpNXdjbTkwYjNSNWNHVXVYMjl1YldWemMyRm5aU0E5SUdaMWJtTjBhVzl1S0dWMmRDa2dlMXh1WEhSMGNua2dlMXh1WEhSY2RIWmhjaUJ0WlhOellXZGxJRDBnU2xOUFRpNXdZWEp6WlNobGRuUXVaR0YwWVNrN1hHNWNkRngwZEdocGN5NWxiV2wwS0NkdFpYTnpZV2RsSnl3Z2JXVnpjMkZuWlNrN1hHNWNkSDBnWTJGMFkyZ29aWEp5S1h0Y2JseDBYSFJNYjJkblpYSXVaWEp5YjNJb1hDSmJWMU5kSUdOaGJtNXZkQ0J3WVhKelpTQnRaWE56WVdkbExDQmtjbTl3Y0dsdVp5NHVMbHdpS1R0Y2JseDBYSFIwYUhKdmR5Qmxjbkk3WEc1Y2RIMWNibjA3WEc1Y2JsTnZZMnRsZEVoaGJtUnNaWEl1Y0hKdmRHOTBlWEJsTGw5dmJtVnljbTl5SUQwZ1puVnVZM1JwYjI0b1pYWjBLU0I3WEc1Y2RIUm9hWE11WlcxcGRDZ25aWEp5YjNJbkxDQmxkblFwTzF4dWZUdGNibHh1VTI5amEyVjBTR0Z1Wkd4bGNpNXdjbTkwYjNSNWNHVXVkVzV5WldkcGMzUmxja05oYkd4aVlXTnJjeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJwWmloMGFHbHpMbDl6YjJOclpYUWdKaVlnS0hSNWNHVnZaaUIwYUdsekxsOXpiMk5yWlhRdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlrcGUxeHVYSFJjZEhSb2FYTXVYM052WTJ0bGRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R2Y0dWdUp5d2dkR2hwY3k1ZmMyOWphMlYwVDNCbGJrTmhiR3hpWVdOcktUdGNibHgwWEhSMGFHbHpMbDl6YjJOclpYUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0IwYUdsekxsOXpiMk5yWlhSRGJHOXpaVU5oYkd4aVlXTnJLVHRjYmx4MFhIUjBhR2x6TGw5emIyTnJaWFF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXVnpjMkZuWlNjc0lIUm9hWE11WDNOdlkydGxkRTFsYzNOaFoyVkRZV3hzWW1GamF5azdYRzVjZEgwZ1pXeHpaU0JwWmloMGFHbHpMbDl6YjJOclpYUWdKaVlnS0hSNWNHVnZaaUIwYUdsekxsOXpiMk5yWlhRdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKeklEMDlQU0FuWm5WdVkzUnBiMjRuS1NsN1hHNWNkRngwZEdocGN5NWZjMjlqYTJWMExuSmxiVzkyWlVGc2JFeHBjM1JsYm1WeWN5Z3BPMXh1WEhSOVhHNTlPMXh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeThnVlhScGJHbDBlU0J0WlhSb2IyUnpJQzh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYmtScGVXRk9iMlJsTG5CeWIzUnZkSGx3WlM1ZlkzSmxZWFJsVFdWemMyRm5aU0E5SUdaMWJtTjBhVzl1S0hCaGNtRnRjeXdnZEhsd1pTbDdYRzVjZEdsbUtDRndZWEpoYlhNZ2ZId2dJWFI1Y0dVZ2ZId2dLSFI1Y0dVZ0lUMDlJRndpVW1WeGRXVnpkRndpSUNZbUlIUjVjR1VnSVQwOUlGd2lVM1ZpYzJOeWFYQjBhVzl1WENJZ0ppWWdkSGx3WlNBaFBUMGdYQ0pWYm5OMVluTmpjbWxpWlZ3aUlDWW1JSFI1Y0dVZ0lUMDlJRndpVTI5amEyVjBRMnhwWlc1MFJHRjBZVndpS1NsN1hHNWNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2UxeHVYSFJjZEhSNWNHVTZJSFI1Y0dVc1hHNWNkRngwYVdRNklIUm9hWE11WDJkbGJtVnlZWFJsU1dRb0tTeGNibHgwWEhSelpYSjJhV05sT2lCd1lYSmhiWE11YzJWeWRtbGpaU3hjYmx4MFhIUjBZWEpuWlhRNklIQmhjbUZ0Y3k1MFlYSm5aWFFzWEc1Y2RGeDBablZ1WXpvZ2NHRnlZVzF6TG1aMWJtTXNYRzVjZEZ4MGIySnFPaUJ3WVhKaGJYTXViMkpxTEZ4dVhIUmNkR1JoZEdFNklIQmhjbUZ0Y3k1a1lYUmhMRnh1WEhSY2RHSjFjem9nY0dGeVlXMXpMbUoxY3l4Y2JseDBmVHRjYm4wN1hHNWNia1JwZVdGT2IyUmxMbkJ5YjNSdmRIbHdaUzVmWjJWdVpYSmhkR1ZKWkNBOUlHWjFibU4wYVc5dUtDbDdYRzVjZEhaaGNpQnBaQ0E5SUhSb2FYTXVYMjVsZUhSSlpEdGNibHgwZEdocGN5NWZibVY0ZEVsa0t5czdYRzVjZEhKbGRIVnliaUJwWkR0Y2JuMDdYRzVjYmx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFUnBlV0ZPYjJSbE8xeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNCcm93c2VyID0gISh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyk7XG5pZiAoIWlzQnJvd3Nlcikge1xuXHR2YXIgUSA9IHJlcXVpcmUoJ3EnKTtcbn0gZWxzZSB7XG5cdHZhciBRID0gd2luZG93LlE7XG59XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnbm9kZS1ldmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgRGl5YU5vZGUgPSByZXF1aXJlKCcuL0RpeWFOb2RlJyk7XG5cbnZhciBJUF9SRUdFWCA9IC9eKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLztcblxuLy8vLy8vLy8vLy8vLy9cbi8vICBEMSBBUEkgIC8vXG4vLy8vLy8vLy8vLy8vL1xuXG5cbmZ1bmN0aW9uIG5ld0luc3RhbmNlKCkge1xuXG5cdHZhciBjb25uZWN0aW9uID0gbmV3IERpeWFOb2RlKCk7XG5cblx0dmFyIGQxaW5zdCA9IGZ1bmN0aW9uIGQxaW5zdChzZWxlY3Rvcikge1xuXHRcdHJldHVybiBuZXcgRGl5YVNlbGVjdG9yKHNlbGVjdG9yLCBjb25uZWN0aW9uKTtcblx0fTtcblxuXHRjb25uZWN0aW9uLl9kMWluc3QgPSBkMWluc3Q7XG5cblx0ZDFpbnN0LkRpeWFOb2RlID0gRGl5YU5vZGU7XG5cdGQxaW5zdC5EaXlhU2VsZWN0b3IgPSBEaXlhU2VsZWN0b3I7XG5cblx0ZDFpbnN0LmNvbm5lY3QgPSBmdW5jdGlvbiAoYWRkciwgV1NvY2tldCkge1xuXHRcdHJldHVybiBjb25uZWN0aW9uLmNvbm5lY3QoYWRkciwgV1NvY2tldCk7XG5cdH07XG5cblx0ZDFpbnN0LmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbm5lY3Rpb24uZGlzY29ubmVjdCgpO1xuXHR9O1xuXG5cdGQxaW5zdC5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29ubmVjdGlvbi5pc0Nvbm5lY3RlZCgpO1xuXHR9O1xuXHRkMWluc3QucGVlcnMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbm5lY3Rpb24ucGVlcnMoKTtcblx0fTtcblx0ZDFpbnN0LnNlbGYgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbm5lY3Rpb24uc2VsZigpO1xuXHR9O1xuXHRkMWluc3QuYWRkciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29ubmVjdGlvbi5hZGRyKCk7XG5cdH07XG5cdGQxaW5zdC51c2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb25uZWN0aW9uLnVzZXIoKTtcblx0fTtcblx0ZDFpbnN0LnBhc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbm5lY3Rpb24ucGFzcygpO1xuXHR9O1xuXHRkMWluc3QuaXNBdXRoZW50aWNhdGVkID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb25uZWN0aW9uLmF1dGhlbnRpY2F0ZWQoKTtcblx0fTtcblxuXHRkMWluc3QucGFyc2VQZWVyID0gZnVuY3Rpb24gKGFkZHJTdHIpIHtcblx0XHR2YXIgcGVlciA9IHt9O1xuXG5cdFx0Ly8gPG5vdGhpbmc+IC0+IHdzczovL2xvY2FsaG9zdC9hcGlcblx0XHRpZiAoIWFkZHJTdHIgfHwgYWRkclN0ciA9PT0gXCJcIikge1xuXHRcdFx0cGVlci5hZGRyID0gXCJ3c3M6Ly9sb2NhbGhvc3QvYXBpXCI7XG5cdFx0XHRwZWVyLmFkZHJOZXQgPSBcIndzczovL2xvY2FsaG9zdC9uZXRcIjtcblx0XHR9XG5cdFx0Ly8gMTIzNCAtPiB3czovL2xvY2FsaG9zdDoxMjM0XG5cdFx0ZWxzZSBpZiAoL15bMC05XSokLy50ZXN0KGFkZHJTdHIpKSB7XG5cdFx0XHRcdHBlZXIuYWRkciA9IFwid3M6Ly9sb2NhbGhvc3Q6XCIgKyBhZGRyU3RyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gJ2xvY2FsaG9zdCcgYWxvbmUgLT4gVU5JWCBzb2NrZXQgL3Zhci9ydW4vZGl5YS9kaXlhLW5vZGUuc29ja1xuXHRcdFx0ZWxzZSBpZiAoYWRkclN0ciA9PT0gJ2xvY2FsaG9zdCcpIHtcblx0XHRcdFx0XHRwZWVyLmFkZHIgPSAndW5peDovLy92YXIvcnVuL2RpeWEvZGl5YS1ub2RlLnNvY2snO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIDEwLjQyLjAuMSAtPiB3c3M6Ly8xMC40Mi4wLjEvYXBpXG5cdFx0XHRcdC8vICAgICAgICAgIC0+IHdzczovLzEwLjI0LjAuMS9uZXRcblx0XHRcdFx0ZWxzZSBpZiAoSVBfUkVHRVgudGVzdChhZGRyU3RyKSkge1xuXHRcdFx0XHRcdFx0cGVlci5hZGRyID0gXCJ3c3M6Ly9cIiArIGFkZHJTdHIgKyBcIi9hcGlcIjtcblx0XHRcdFx0XHRcdHBlZXIuYWRkck5ldCA9IFwid3NzOi8vXCIgKyBhZGRyU3RyICsgXCIvbmV0XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIDEwLjQyLjAuMToxMjM0IC0+IHdzOi8vMTAuNDIuMC4xOjEyMzRcblx0XHRcdFx0XHRlbHNlIGlmIChJUF9SRUdFWC50ZXN0KGFkZHJTdHIuc3BsaXQoJzonKVswXSkgJiYgL15bMC05XSokLy50ZXN0KGFkZHJTdHIuc3BsaXQoJzonKVsxXSkpIHtcblx0XHRcdFx0XHRcdFx0cGVlci5hZGRyID0gXCJ3czovL1wiICsgYWRkclN0cjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHdzczovL3NvbWVhZGRyZXNzLmNvbS9zdHVmZiAtPiB3c3M6Ly9zb21lYWRkcmVzcy5jb20vc3R1ZmZcblx0XHRcdFx0XHRcdC8vIHdzOi8vc29tZWFkZHJlc3MuY29tL3N0dWZmIC0+IHdzOi8vc29tZWFkZHJlc3MuY29tL3N0dWZmXG5cdFx0XHRcdFx0XHRlbHNlIGlmIChhZGRyU3RyLmluZGV4T2YoXCJ3c3M6Ly9cIikgPT09IDAgfHwgYWRkclN0ci5pbmRleE9mKFwid3M6Ly9cIikgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRwZWVyLmFkZHIgPSBhZGRyU3RyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdC8vIHNvbWVkb21haW4vc29tZXNpdGUgLT4gXCJ3c3M6Ly9zb21lZG9tYWluL3NvbWVzaXRlL2FwaVxuXHRcdFx0XHRcdFx0XHQvLyAgICAgICAgICAgICAgICAgICAgIC0+IFwid3NzOi8vc29tZWRvbWFpbi9zb21lc2l0ZS9uZXRcblx0XHRcdFx0XHRcdFx0Ly8gICAgICAgICAgICAgICAgICAgICAtPiBzb21lc2l0ZVxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIChhZGRyU3RyLnNwbGl0KCcvJykubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwZWVyLmFkZHIgPSBcIndzczovL1wiICsgYWRkclN0ciArICcvYXBpJztcblx0XHRcdFx0XHRcdFx0XHRcdHBlZXIuYWRkck5ldCA9IFwid3NzOi8vXCIgKyBhZGRyU3RyICsgJy9uZXQnO1xuXHRcdFx0XHRcdFx0XHRcdFx0cGVlci5uYW1lID0gYWRkclN0ci5zcGxpdCgnLycpWzFdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBzb21lZG9tYWluL3NvbWVzaXRlL2FwaSAtPiBcIndzczovL3NvbWVkb21haW4vc29tZXNpdGUvYXBpXCJcblx0XHRcdFx0XHRcdFx0XHQvLyAgICAgICAgICAgICAgICAgICAgICAgICAtPiBcIndzczovL3NvbWVkb21haW4vc29tZXNpdGUvbmV0XCJcblx0XHRcdFx0XHRcdFx0XHQvLyAgICAgICAgICAgICAgICAgICAgICAgICAtPiBzb21lc2l0ZVxuXHRcdFx0XHRcdFx0XHRcdGVsc2UgaWYgKGFkZHJTdHIuc3BsaXQoJy8nKS5sZW5ndGggPT09IDMgJiYgYWRkclN0ci5zcGxpdCgnLycpWzJdID09PSBcImFwaVwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBlZXIuYWRkciA9IFwid3NzOi8vXCIgKyBhZGRyU3RyO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwZWVyLmFkZHJOZXQgPSBcIndzczovL1wiICsgYWRkclN0ci5zdWJzdHIoMCwgYWRkclN0ci5sZW5ndGggLSA0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGVlci5uYW1lID0gYWRkclN0ci5zcGxpdCgnLycpWzFdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gc29tZXNpdGUgLT4gXCJ3c3M6Ly9wYXJ0bmVyaW5nLWNsb3VkLmNvbS9zb21lc2l0ZS9hcGlcIlxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gICAgICAgICAgLT4gXCJ3c3M6Ly9wYXJ0bmVyaW5nLWNsb3VkLmNvbS9zb21lc2l0ZS9uZXRcIlxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gICAgICAgICAgLT4gc29tZXNpdGVcblx0XHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBlZXIuYWRkciA9IFwid3NzOi8vcGFydG5lcmluZy1jbG91ZC5jb20vXCIgKyBhZGRyU3RyICsgXCIvYXBpXCI7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGVlci5hZGRyTmV0ID0gXCJ3c3M6Ly9wYXJ0bmVyaW5nLWNsb3VkLmNvbS9cIiArIGFkZHJTdHIgKyBcIi9uZXRcIjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwZWVyLm5hbWUgPSBhZGRyU3RyO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRyZXR1cm4gcGVlcjtcblx0fTtcblxuXHQvKiogVHJ5IHRvIGNvbm5lY3QgdG8gdGhlIGdpdmVuIHNlcnZlcnMgbGlzdCBpbiB0aGUgbGlzdCBvcmRlciwgdW50aWwgZmluZGluZyBhbiBhdmFpbGFibGUgb25lICovXG5cdGQxaW5zdC50cnlDb25uZWN0ID0gZnVuY3Rpb24gKHNlcnZlcnMsIFdTb2NrZXQpIHtcblx0XHR2YXIgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cdFx0ZnVuY3Rpb24gdGMoaSkge1xuXHRcdFx0ZDFpbnN0LmNvbm5lY3Qoc2VydmVyc1tpXSwgV1NvY2tldCkudGhlbihmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShzZXJ2ZXJzW2ldKTtcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdGQxaW5zdC5kaXNjb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdGlmIChpIDwgc2VydmVycy5sZW5ndGgpIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0dGMoaSk7XG5cdFx0XHRcdFx0fSwgMTAwKTtlbHNlIHJldHVybiBkZWZlcnJlZC5yZWplY3QoXCJUaW1lb3V0XCIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR0YygwKTtcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblx0fTtcblxuXHRkMWluc3QuY3VycmVudFNlcnZlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29ubmVjdGlvbi5fYWRkcjtcblx0fTtcblxuXHRkMWluc3Qub24gPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG5cdFx0Y29ubmVjdGlvbi5vbihldmVudCwgY2FsbGJhY2spO1xuXHRcdHJldHVybiBkMWluc3Q7XG5cdH07XG5cblx0ZDFpbnN0LnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHRcdGNvbm5lY3Rpb24ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gZDFpbnN0O1xuXHR9O1xuXG5cdC8qKiBTaG9ydGhhbmQgZnVuY3Rpb24gdG8gY29ubmVjdCBhbmQgbG9naW4gd2l0aCB0aGUgZ2l2ZW4gKHVzZXIscGFzc3dvcmQpICovXG5cdGQxaW5zdC5jb25uZWN0QXNVc2VyID0gZnVuY3Rpb24gKGlwLCB1c2VyLCBwYXNzd29yZCwgV1NvY2tldCkge1xuXHRcdHJldHVybiBkMWluc3QuY29ubmVjdChpcCwgV1NvY2tldCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gZDFpbnN0KFwiI3NlbGZcIikuYXV0aCh1c2VyLCBwYXNzd29yZCk7XG5cdFx0fSk7XG5cdH07XG5cblx0ZDFpbnN0LmRlYXV0aGVudGljYXRlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbm5lY3Rpb24uYXV0aGVudGljYXRlZChmYWxzZSk7Y29ubmVjdGlvbi51c2VyKG51bGwpO2Nvbm5lY3Rpb24ucGFzcyhudWxsKTtcblx0fTtcblx0ZDFpbnN0LnNldFNlY3VyZWQgPSBmdW5jdGlvbiAoYlNlY3VyZWQpIHtcblx0XHRjb25uZWN0aW9uLnNldFNlY3VyZWQoYlNlY3VyZWQpO1xuXHR9O1xuXHRkMWluc3QuaXNTZWN1cmVkID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb25uZWN0aW9uLl9zZWN1cmVkO1xuXHR9O1xuXHRkMWluc3Quc2V0V1NvY2tldCA9IGZ1bmN0aW9uIChXU29ja2V0KSB7XG5cdFx0Y29ubmVjdGlvbi5zZXRXU29ja2V0KFdTb2NrZXQpO1xuXHR9O1xuXG5cdHJldHVybiBkMWluc3Q7XG59XG5cbnZhciBkMSA9IG5ld0luc3RhbmNlKCk7XG5kMS5uZXdJbnN0YW5jZSA9IG5ld0luc3RhbmNlO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERpeWFTZWxlY3RvciAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIERpeWFTZWxlY3RvcihzZWxlY3RvciwgY29ubmVjdGlvbikge1xuXHRFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuXHR0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcblx0dGhpcy5fc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0dGhpcy5fbGlzdGVuZXJDb3VudCA9IDA7XG5cdHRoaXMuX2xpc3RlbkNhbGxiYWNrID0gbnVsbDtcblx0dGhpcy5fY2FsbGJhY2tBdHRhY2hlZCA9IGZhbHNlO1xufVxuaW5oZXJpdHMoRGl5YVNlbGVjdG9yLCBFdmVudEVtaXR0ZXIpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFB1YmxpYyBBUEkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5fc2VsZWN0KCk7XG59O1xuXG4vKipcbiAqIEFwcGx5IGNhbGxiYWNrIGNiIHRvIGVhY2ggc2VsZWN0ZWQgcGVlci4gUGVlcnMgYXJlIHNlbGVjdGVkXG4gKiBhY2NvcmRpbmcgdG8gdGhlIHJ1bGUgJ3NlbGVjdG9yJyBnaXZlbiB0byBjb25zdHJ1Y3Rvci4gU2VsZWN0b3IgY2FuXG4gKiBiZSBhIHBlZXJJZCwgYSByZWdFeCBmb3IgcGVlcklkcyBvZiBhbiBhcnJheSBvZiBwZWVySWRzLlxuICogQHBhcmFtcyBcdGNiXHRcdGNhbGxiYWNrIHRvIGJlIGFwcGxpZWRcbiAqIEByZXR1cm4gXHR0aGlzIFx0PERpeWFTZWxlY3Rvcj5cbiAqL1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24gKGNiKSB7XG5cdHZhciBwZWVycyA9IHRoaXMuX3NlbGVjdCgpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBlZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2IuYmluZCh0aGlzKShwZWVyc1tpXSk7XG5cdH1yZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZCByZXF1ZXN0IHRvIHNlbGVjdGVkIHBlZXJzICggc2VlIGVhY2goKSApIHRocm91Z2ggdGhlIGN1cnJlbnQgY29ubmVjdGlvbiAoRGl5YU5vZGUpLlxuICogQHBhcmFtIHtTdHJpbmcgfCBPYmplY3R9IHBhcmFtcyA6IGNhbiBiZSBzZXJ2aWNlLmZ1bmN0aW9uIG9yIHtzZXJ2aWNlOnNlcnZpY2UsIGZ1bmM6ZnVuY3Rpb24sIC4uLn1cbiAqL1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2ssIHRpbWVvdXQsIG9wdGlvbnMpIHtcblx0aWYgKCF0aGlzLl9jb25uZWN0aW9uKSByZXR1cm4gdGhpcztcblx0aWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cdGlmIChwYXJhbXMuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuXHRcdHZhciBfcGFyYW1zID0gcGFyYW1zLnNwbGl0KFwiLlwiKTtcblx0XHRpZiAoX3BhcmFtcy5sZW5ndGggIT0gMikgdGhyb3cgJ01hbGZvcm1lZFJlcXVlc3QnO1xuXHRcdHBhcmFtcyA9IHsgc2VydmljZTogX3BhcmFtc1swXSwgZnVuYzogX3BhcmFtc1sxXSB9O1xuXHR9XG5cblx0dmFyIG5iQW5zd2VycyA9IDA7XG5cdHZhciBuYkV4cGVjdGVkID0gdGhpcy5fc2VsZWN0KCkubGVuZ3RoO1xuXHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChwZWVySWQpIHtcblx0XHRwYXJhbXMudGFyZ2V0ID0gcGVlcklkO1xuXG5cdFx0dmFyIG9wdHMgPSB7fTtcblx0XHRmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcblx0XHRcdG9wdHNbaV0gPSBvcHRpb25zW2ldO1xuXHRcdH1pZiAodHlwZW9mIG9wdHMuY2FsbGJhY2tfcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJykgb3B0cy5jYWxsYmFja19wYXJ0aWFsID0gZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRcdFx0b3B0aW9ucy5jYWxsYmFja19wYXJ0aWFsKHBlZXJJZCwgZXJyLCBkYXRhKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5fY29ubmVjdGlvbi5yZXF1ZXN0KHBhcmFtcywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2socGVlcklkLCBlcnIsIGRhdGEpO1xuXHRcdFx0bmJBbnN3ZXJzKys7XG5cdFx0XHRpZiAobmJBbnN3ZXJzID09IG5iRXhwZWN0ZWQgJiYgb3B0aW9ucy5iTm90aWZ5V2hlbkZpbmlzaGVkKSBjYWxsYmFjayhudWxsLCBlcnIsIFwiIyNFTkQjI1wiKTsgLy8gVE9ETyA6IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIG5vdGlmeSByZXF1ZXN0IEVORCAhIVxuXHRcdH0sIHRpbWVvdXQsIG9wdHMpO1xuXHR9KTtcbn07XG5cbi8vIElNUE9SVEFOVCAhISEgQnkgMzAvMTEvMTUsIHRoaXMgbWV0aG9kIGRvZXNuJ3QgcmV0dXJuICd0aGlzJyBhbnltb3JlLCBidXQgYSBTdWJzY3JpcHRpb24gb2JqZWN0IGluc3RlYWRcbi8qIEBwYXJhbSB7U3RyaW5nIHwgT2JqZWN0fSBwYXJhbXMgOiBjYW4gYmUgJ3NlcnZpY2UuZnVuY3Rpb24nIG9yIHtzZXJ2aWNlOnNlcnZpY2UsIGZ1bmM6ZnVuY3Rpb24sIC4uLn0gKi9cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcblx0aWYgKHBhcmFtcy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7XG5cdFx0dmFyIF9wYXJhbXMgPSBwYXJhbXMuc3BsaXQoXCIuXCIpO1xuXHRcdGlmIChfcGFyYW1zLmxlbmd0aCAhPSAyKSB0aHJvdyAnTWFsZm9ybWVkU3Vic2NyaXB0aW9uJztcblx0XHRwYXJhbXMgPSB7IHNlcnZpY2U6IF9wYXJhbXNbMF0sIGZ1bmM6IF9wYXJhbXNbMV0gfTtcblx0fVxuXG5cdHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHRoaXMsIHBhcmFtcywgY2FsbGJhY2ssIG9wdGlvbnMpO1xufTtcblxuLy8gSU1QT1JUQU5UICEhISBCWSAzMC8xMS8xNSwgdGhpcyBtZXRob2QgZG9lc24ndCB0YWtlIHN1YklkcyBhcyBpbnB1dCBhbnltb3JlLlxuLy8gUGxlYXNlIHByb3ZpZGUgYSBzdWJzY3JpcHRpb24gaW5zdGVhZCAhXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuXHRpZiAoQXJyYXkuaXNBcnJheShzdWJzY3JpcHRpb24pIHx8ICFzdWJzY3JpcHRpb24uY2xvc2UpIHJldHVybiB0aGlzLl9fb2xkX2RlcHJlY2F0ZWRfdW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcblx0cmV0dXJuIHN1YnNjcmlwdGlvbi5jbG9zZSgpO1xufTtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24gKHVzZXIsIHBhc3N3b3JkLCBjYWxsYmFjaywgdGltZW91dCkge1xuXHR2YXIgdGhhdCA9IHRoaXM7XG5cdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gY2FsbGJhY2suYmluZCh0aGlzKTtcblxuXHR2YXIgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cblx0dGhpcy5yZXF1ZXN0KHtcblx0XHRzZXJ2aWNlOiAnYXV0aCcsXG5cdFx0ZnVuYzogJ0F1dGhlbnRpY2F0ZScsXG5cdFx0ZGF0YToge1xuXHRcdFx0dXNlcjogdXNlciwgLy8gREVQUkVDQVRFRCwga2VwdCBmb3Igbm93IGZvciBiYWNrd2FyZCBjb21wYXRpYmxpdHkgKHdpbGwgYmUgZHJvcHBlZClcblx0XHRcdHVzZXJuYW1lOiB1c2VyLCAvLyBOZXcgc3ludGF4IHNpbmNlIHN3aXRjaGluZyB0byBEQnVzXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcblx0XHR9XG5cdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXG5cdFx0aWYgKGVyciA9PT0gJ1NlcnZpY2VOb3RGb3VuZCcpIHtcblx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKHBlZXJJZCwgdHJ1ZSk7ZWxzZSBkZWZlcnJlZC5yZWplY3QoZXJyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBkYXRhLmF1dGhlbnRpY2F0ZWQgaXMgREVQUkVDQVRFRCwga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRcdGlmICghZXJyICYmIGRhdGEgJiYgKGRhdGEgPT09IHRydWUgfHwgZGF0YS5hdXRoZW50aWNhdGVkID09PSB0cnVlKSkge1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi5hdXRoZW50aWNhdGVkKHRydWUpO1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi51c2VyKHVzZXIpO1xuXHRcdFx0dGhhdC5fY29ubmVjdGlvbi5wYXNzKHBhc3N3b3JkKTtcblx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKHBlZXJJZCwgdHJ1ZSk7ZWxzZSBkZWZlcnJlZC5yZXNvbHZlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoYXQuX2Nvbm5lY3Rpb24uYXV0aGVudGljYXRlZChmYWxzZSk7XG5cdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhwZWVySWQsIGZhbHNlKTtlbHNlIGRlZmVycmVkLnJlamVjdCgnQWNjZXNzRGVuaWVkJyk7XG5cdFx0fVxuXHR9LCB0aW1lb3V0KTtcblxuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUub3BlblNvY2tldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG5cdHZhciB0aGF0ID0gdGhpcztcblxuXHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQodGhpcyk7XG5cblx0dmFyIHNvY2tldE5hbWUgPSBwYXJhbXM7XG5cblx0dGhpcy5yZXF1ZXN0KHtcblx0XHRzZXJ2aWNlOiAnc29ja2V0SGFuZGxlcicsXG5cdFx0ZnVuYzogJ09wZW5Tb2NrZXQnLFxuXHRcdGRhdGE6IHtcblx0XHRcdHNvY2tldF9uYW1lOiBzb2NrZXROYW1lXG5cdFx0fVxuXHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRpZiAoZXJyID09IG51bGwgJiYgZGF0YS5zb2NrZXRfaWQgIT0gbnVsbCkge1xuXHRcdFx0cGFyYW1zID0ge1xuXHRcdFx0XHRlcnI6IGVycixcblx0XHRcdFx0c29ja2V0SWQ6IGRhdGEuc29ja2V0X2lkLFxuXHRcdFx0XHRzb2NrZXROYW1lOiBzb2NrZXROYW1lLFxuXHRcdFx0XHR0YXJnZXQ6IHBlZXJJZFxuXHRcdFx0fTtcblx0XHRcdHRoYXQuX2Nvbm5lY3Rpb24ub3BlblNvY2tldCh0aGF0LCBwYXJhbXMsIGZ1bmN0aW9uIChkaXlhU29ja2V0KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKHBlZXJJZCwgbnVsbCwgZGl5YVNvY2tldCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2socGVlcklkLCBlcnIsIG51bGwpO1xuXHRcdH1cblx0fSk7XG59O1xuXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLnNlbmRTb2NrZXREYXRhID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChwZWVySWQpIHtcblx0XHRwYXJhbXMudGFyZ2V0ID0gcGVlcklkO1xuXHRcdHRoaXMuX2Nvbm5lY3Rpb24uc2VuZFNvY2tldERhdGEocGFyYW1zKTtcblx0fSk7XG59O1xuXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLm9uU29ja2V0Q2xvc2VkID0gZnVuY3Rpb24gKHNvY2tldElkKSB7XG5cdHRoaXMuX2Nvbm5lY3Rpb24ub25Tb2NrZXRDbG9zZWQoc29ja2V0SWQpO1xufTtcblxuLy8gUHJpdmF0ZXNcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5fc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yRnVuY3Rpb24pIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdGlmICghdGhpcy5fY29ubmVjdGlvbikgcmV0dXJuIFtdO1xuXHRyZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5wZWVycygpLmZpbHRlcihmdW5jdGlvbiAocGVlcklkKSB7XG5cdFx0cmV0dXJuIHRoYXQuX21hdGNoKHRoYXQuX3NlbGVjdG9yLCBwZWVySWQpO1xuXHR9KTtcbn07XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX21hdGNoID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBzdHIpIHtcblx0aWYgKCFzZWxlY3RvcikgcmV0dXJuIGZhbHNlO1xuXHRpZiAoc2VsZWN0b3IgPT09IFwiI3NlbGZcIikge1xuXHRcdHJldHVybiB0aGlzLl9jb25uZWN0aW9uICYmIHN0ciA9PT0gdGhpcy5fY29ubmVjdGlvbi5zZWxmKCk7XG5cdH0gZWxzZSBpZiAoc2VsZWN0b3Iubm90KSByZXR1cm4gIXRoaXMuX21hdGNoKHNlbGVjdG9yLm5vdCwgc3RyKTtlbHNlIGlmIChzZWxlY3Rvci5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU3RyaW5nJykge1xuXHRcdHJldHVybiBtYXRjaFN0cmluZyhzZWxlY3Rvciwgc3RyKTtcblx0fSBlbHNlIGlmIChzZWxlY3Rvci5jb25zdHJ1Y3Rvci5uYW1lID09PSAnUmVnRXhwJykge1xuXHRcdHJldHVybiBtYXRjaFJlZ0V4cChzZWxlY3Rvciwgc3RyKTtcblx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuXHRcdHJldHVybiBtYXRjaEFycmF5KHNlbGVjdG9yLCBzdHIpO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIG1hdGNoU3RyaW5nKHNlbGVjdG9yLCBzdHIpIHtcblx0cmV0dXJuIHNlbGVjdG9yID09PSBzdHI7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUmVnRXhwKHNlbGVjdG9yLCBzdHIpIHtcblx0cmV0dXJuIHN0ci5tYXRjaChzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIG1hdGNoQXJyYXkoc2VsZWN0b3IsIHN0cikge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdG9yLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHNlbGVjdG9yW2ldID09PSBzdHIpIHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gT3ZlcnJpZGVzIEV2ZW50RW1pdHRlcidzIGJlaGF2aW9yIHRvIHByb3h5IGFuZCBmaWx0ZXIgZXZlbnRzIGZyb20gdGhlIGNvbm5lY3Rpb25cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX29uID0gRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5vbjtcbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXHRjYWxsYmFjay5fX19EaXlhU2VsZWN0b3JfaGlkZGVuX3dyYXBwZXIgPSBmdW5jdGlvbiAocGVlcklkKSB7XG5cdFx0aWYgKHRoYXQuX21hdGNoKHRoYXQuX3NlbGVjdG9yLCBwZWVySWQpKSB0aGF0LmVtaXQodHlwZSwgcGVlcklkKTtcblx0fTtcblx0dGhpcy5fY29ubmVjdGlvbi5vbih0eXBlLCBjYWxsYmFjay5fX19EaXlhU2VsZWN0b3JfaGlkZGVuX3dyYXBwZXIpO1xuXHR2YXIgcmV0ID0gdGhpcy5fb24odHlwZSwgY2FsbGJhY2spO1xuXG5cdC8vIEhhbmRsZSB0aGUgc3BlY2lmaWMgY2FzZSBvZiBcInBlZXItY29ubmVjdGVkXCIgZXZlbnRzLCBpLmUuLCBub3RpZnkgb2YgYWxyZWFkeSBjb25uZWN0ZWQgcGVlcnNcblx0aWYgKHR5cGUgPT09ICdwZWVyLWNvbm5lY3RlZCcgJiYgdGhpcy5fY29ubmVjdGlvbi5pc0Nvbm5lY3RlZCgpKSB7XG5cdFx0dmFyIHBlZXJzID0gdGhpcy5fY29ubmVjdGlvbi5wZWVycygpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGVlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLl9tYXRjaCh0aGlzLl9zZWxlY3RvciwgcGVlcnNbaV0pKSBjYWxsYmFjayhwZWVyc1tpXSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXQ7XG59O1xuXG4vLyBPdmVycmlkZXMgRXZlbnRFbWl0dGVyJ3MgYmVoYXZpb3IgdG8gcHJveHkgYW5kIGZpbHRlciBldmVudHMgZnJvbSB0aGUgY29ubmVjdGlvblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5fcmVtb3ZlTGlzdGVuZXIgPSBEaXlhU2VsZWN0b3IucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuXHRpZiAoY2FsbGJhY2suX19fRGl5YVNlbGVjdG9yX2hpZGRlbl93cmFwcGVyKSB0aGlzLl9jb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGNhbGxiYWNrLl9fX0RpeWFTZWxlY3Rvcl9oaWRkZW5fd3JhcHBlcik7XG5cdHRoaXMuX3JlbW92ZUxpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU1VCU0NSSVBUSU9OIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiogSGFuZGxlcyBhIHN1YnNjcmlwdGlvbiB0byBzb21lIERpeWFOb2RlIHNlcnZpY2UgZm9yIG11bHRpcGxlIG5vZGVzXG4qIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gc2VsZWN0b3JcbiovXG5mdW5jdGlvbiBTdWJzY3JpcHRpb24oc2VsZWN0b3IsIHBhcmFtcywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdHRoaXMucGFyYW1zID0gcGFyYW1zO1xuXHR0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdHRoaXMuc3ViSWRzID0gW107XG5cblx0dGhpcy5kb1N1YnNjcmliZSA9IGZ1bmN0aW9uIChwZWVySWQpIHtcblx0XHR0aGF0LnN1Yklkcy5wdXNoKHRoYXQuX2FkZFN1YnNjcmlwdGlvbihwZWVySWQpKTtcblx0XHR0aGF0LnN0YXRlID0gXCJvcGVuXCI7XG5cdH07XG5cblx0aWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuYXV0bykge1xuXHRcdHRoaXMuc2VsZWN0b3Iub24oJ3BlZXItY29ubmVjdGVkJywgdGhpcy5kb1N1YnNjcmliZSk7XG5cdH0gZWxzZSB7XG5cdFx0dGhpcy5zZWxlY3Rvci5lYWNoKHRoaXMuZG9TdWJzY3JpYmUpO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3ViSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dGhpcy5zZWxlY3Rvci5fY29ubmVjdGlvbi51bnN1YnNjcmliZSh0aGlzLnN1Yklkc1tpXSk7XG5cdH1cblx0dGhpcy5zdWJJZHMgPSBbXTtcblx0dGhpcy5zZWxlY3Rvci5yZW1vdmVMaXN0ZW5lcigncGVlci1jb25uZWN0ZWQnLCB0aGlzLmRvU3Vic2NyaWJlKTtcblx0dGhpcy5zdGF0ZSA9IFwiY2xvc2VkXCI7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAocGVlcklkKSB7XG5cdHZhciB0aGF0ID0gdGhpcztcblx0dmFyIHBhcmFtcyA9IHt9O1xuXHRmb3IgKHZhciBrIGluIHRoaXMucGFyYW1zKSB7XG5cdFx0cGFyYW1zW2tdID0gdGhpcy5wYXJhbXNba107XG5cdH1wYXJhbXMudGFyZ2V0ID0gcGVlcklkO1xuXHR2YXIgc3ViSWQgPSB0aGlzLnNlbGVjdG9yLl9jb25uZWN0aW9uLnN1YnNjcmliZShwYXJhbXMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcblx0XHR0aGF0LmNhbGxiYWNrKHBlZXJJZCwgZXJyLCBkYXRhKTtcblx0fSk7XG5cdGlmICh0aGlzLm9wdGlvbnMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuc3ViSWRzKSkgdGhpcy5vcHRpb25zLnN1Yklkc1twZWVySWRdID0gc3ViSWQ7XG5cdHJldHVybiBzdWJJZDtcbn07XG5cbi8vIExlZ2FjeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbi8qKiBAZGVwcmVjYXRlZCAgKi9cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKCkge307XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuX19vbGRfZGVwcmVjYXRlZF91bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJJZHMpIHtcblx0dGhpcy5lYWNoKGZ1bmN0aW9uIChwZWVySWQpIHtcblx0XHR2YXIgc3ViSWQgPSBzdWJJZHNbcGVlcklkXTtcblx0XHRpZiAoc3ViSWQpIHRoaXMuX2Nvbm5lY3Rpb24udW5zdWJzY3JpYmUoc3ViSWQpO1xuXHR9KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxubW9kdWxlLmV4cG9ydHMgPSBkMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUnBlV0ZUWld4bFkzUnZjaTVxY3lKZExDSnVZVzFsY3lJNld5SnBjMEp5YjNkelpYSWlMQ0ozYVc1a2IzY2lMQ0pSSWl3aWNtVnhkV2x5WlNJc0lrVjJaVzUwUlcxcGRIUmxjaUlzSW1sdWFHVnlhWFJ6SWl3aVJHbDVZVTV2WkdVaUxDSkpVRjlTUlVkRldDSXNJbTVsZDBsdWMzUmhibU5sSWl3aVkyOXVibVZqZEdsdmJpSXNJbVF4YVc1emRDSXNJbk5sYkdWamRHOXlJaXdpUkdsNVlWTmxiR1ZqZEc5eUlpd2lYMlF4YVc1emRDSXNJbU52Ym01bFkzUWlMQ0poWkdSeUlpd2lWMU52WTJ0bGRDSXNJbVJwYzJOdmJtNWxZM1FpTENKcGMwTnZibTVsWTNSbFpDSXNJbkJsWlhKeklpd2ljMlZzWmlJc0luVnpaWElpTENKd1lYTnpJaXdpYVhOQmRYUm9aVzUwYVdOaGRHVmtJaXdpWVhWMGFHVnVkR2xqWVhSbFpDSXNJbkJoY25ObFVHVmxjaUlzSW1Ga1pISlRkSElpTENKd1pXVnlJaXdpWVdSa2NrNWxkQ0lzSW5SbGMzUWlMQ0p6Y0d4cGRDSXNJbWx1WkdWNFQyWWlMQ0pzWlc1bmRHZ2lMQ0p1WVcxbElpd2ljM1ZpYzNSeUlpd2lkSEo1UTI5dWJtVmpkQ0lzSW5ObGNuWmxjbk1pTENKa1pXWmxjbkpsWkNJc0ltUmxabVZ5SWl3aWRHTWlMQ0pwSWl3aWRHaGxiaUlzSW1VaUxDSnlaWE52YkhabElpd2lZMkYwWTJnaUxDSnpaWFJVYVcxbGIzVjBJaXdpY21WcVpXTjBJaXdpY0hKdmJXbHpaU0lzSW1OMWNuSmxiblJUWlhKMlpYSWlMQ0pmWVdSa2NpSXNJbTl1SWl3aVpYWmxiblFpTENKallXeHNZbUZqYXlJc0luSmxiVzkyWlV4cGMzUmxibVZ5SWl3aVkyOXVibVZqZEVGelZYTmxjaUlzSW1sd0lpd2ljR0Z6YzNkdmNtUWlMQ0poZFhSb0lpd2laR1ZoZFhSb1pXNTBhV05oZEdVaUxDSnpaWFJUWldOMWNtVmtJaXdpWWxObFkzVnlaV1FpTENKcGMxTmxZM1Z5WldRaUxDSmZjMlZqZFhKbFpDSXNJbk5sZEZkVGIyTnJaWFFpTENKa01TSXNJbU5oYkd3aUxDSmZZMjl1Ym1WamRHbHZiaUlzSWw5elpXeGxZM1J2Y2lJc0lsOXNhWE4wWlc1bGNrTnZkVzUwSWl3aVgyeHBjM1JsYmtOaGJHeGlZV05ySWl3aVgyTmhiR3hpWVdOclFYUjBZV05vWldRaUxDSndjbTkwYjNSNWNHVWlMQ0p6Wld4bFkzUWlMQ0pmYzJWc1pXTjBJaXdpWldGamFDSXNJbU5pSWl3aVltbHVaQ0lzSW5KbGNYVmxjM1FpTENKd1lYSmhiWE1pTENKMGFXMWxiM1YwSWl3aWIzQjBhVzl1Y3lJc0ltTnZibk4wY25WamRHOXlJaXdpVTNSeWFXNW5JaXdpWDNCaGNtRnRjeUlzSW5ObGNuWnBZMlVpTENKbWRXNWpJaXdpYm1KQmJuTjNaWEp6SWl3aWJtSkZlSEJsWTNSbFpDSXNJbkJsWlhKSlpDSXNJblJoY21kbGRDSXNJbTl3ZEhNaUxDSmpZV3hzWW1GamExOXdZWEowYVdGc0lpd2laWEp5SWl3aVpHRjBZU0lzSW1KT2IzUnBabmxYYUdWdVJtbHVhWE5vWldRaUxDSnpkV0p6WTNKcFltVWlMQ0pUZFdKelkzSnBjSFJwYjI0aUxDSjFibk4xWW5OamNtbGlaU0lzSW5OMVluTmpjbWx3ZEdsdmJpSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbU5zYjNObElpd2lYMTl2YkdSZlpHVndjbVZqWVhSbFpGOTFibk4xWW5OamNtbGlaU0lzSW5Sb1lYUWlMQ0oxYzJWeWJtRnRaU0lzSW05d1pXNVRiMk5yWlhRaUxDSnpiMk5yWlhST1lXMWxJaXdpYzI5amEyVjBYMjVoYldVaUxDSnpiMk5yWlhSZmFXUWlMQ0p6YjJOclpYUkpaQ0lzSW1ScGVXRlRiMk5yWlhRaUxDSnpaVzVrVTI5amEyVjBSR0YwWVNJc0ltOXVVMjlqYTJWMFEyeHZjMlZrSWl3aWMyVnNaV04wYjNKR2RXNWpkR2x2YmlJc0ltWnBiSFJsY2lJc0lsOXRZWFJqYUNJc0luTjBjaUlzSW01dmRDSXNJbTFoZEdOb1UzUnlhVzVuSWl3aWJXRjBZMmhTWldkRmVIQWlMQ0p0WVhSamFFRnljbUY1SWl3aWJXRjBZMmdpTENKZmIyNGlMQ0owZVhCbElpd2lYMTlmUkdsNVlWTmxiR1ZqZEc5eVgyaHBaR1JsYmw5M2NtRndjR1Z5SWl3aVpXMXBkQ0lzSW5KbGRDSXNJbDl5WlcxdmRtVk1hWE4wWlc1bGNpSXNJbk4xWWtsa2N5SXNJbVJ2VTNWaWMyTnlhV0psSWl3aWNIVnphQ0lzSWw5aFpHUlRkV0p6WTNKcGNIUnBiMjRpTENKemRHRjBaU0lzSW1GMWRHOGlMQ0pySWl3aWMzVmlTV1FpTENKc2FYTjBaVzRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWxCTEZsQlFWa3NSVUZCUlN4UFFVRlBReXhOUVVGUUxFdEJRV3RDTEZkQlFYQkNMRU5CUVdoQ08wRkJRMEVzU1VGQlJ5eERRVUZEUkN4VFFVRktMRVZCUVdVN1FVRkJSU3hMUVVGSlJTeEpRVUZKUXl4UlFVRlJMRWRCUVZJc1EwRkJVanRCUVVGMVFpeERRVUY0UXl4TlFVTkxPMEZCUVVVc1MwRkJTVVFzU1VGQlNVUXNUMEZCVDBNc1EwRkJaanRCUVVGdFFqdEJRVU14UWl4SlFVRkpSU3hsUVVGbFJDeFJRVUZSTEc5Q1FVRlNMRU5CUVc1Q08wRkJRMEVzU1VGQlNVVXNWMEZCVjBZc1VVRkJVU3hWUVVGU0xFTkJRV1k3TzBGQlJVRXNTVUZCU1Vjc1YwRkJWMGdzVVVGQlVTeFpRVUZTTEVOQlFXWTdPMEZCUlVFc1NVRkJTVWtzVjBGQlZ5eHJTMEZCWmpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3p0QlFVbEJMRk5CUVZORExGZEJRVlFzUjBGQmQwSTdPMEZCUlhaQ0xFdEJRVWxETEdGQlFXRXNTVUZCU1Vnc1VVRkJTaXhGUVVGcVFqczdRVUZGUVN4TFFVRkpTU3hUUVVGVExGTkJRVlJCTEUxQlFWTXNRMEZCVlVNc1VVRkJWaXhGUVVGdlFqdEJRVU5vUXl4VFFVRlBMRWxCUVVsRExGbEJRVW9zUTBGQmFVSkVMRkZCUVdwQ0xFVkJRVEpDUml4VlFVRXpRaXhEUVVGUU8wRkJRMEVzUlVGR1JEczdRVUZKUVVFc1dVRkJWMGtzVDBGQldDeEhRVUZ4UWtnc1RVRkJja0k3TzBGQlJVRkJMRkZCUVU5S0xGRkJRVkFzUjBGQmEwSkJMRkZCUVd4Q08wRkJRMEZKTEZGQlFVOUZMRmxCUVZBc1IwRkJjMEpCTEZsQlFYUkNPenRCUVVWQlJpeFJRVUZQU1N4UFFVRlFMRWRCUVdsQ0xGVkJRVk5ETEVsQlFWUXNSVUZCWlVNc1QwRkJaaXhGUVVGMVFqdEJRVU4yUXl4VFFVRlBVQ3hYUVVGWFN5eFBRVUZZTEVOQlFXMUNReXhKUVVGdVFpeEZRVUY1UWtNc1QwRkJla0lzUTBGQlVEdEJRVU5CTEVWQlJrUTdPMEZCU1VGT0xGRkJRVTlQTEZWQlFWQXNSMEZCYjBJc1dVRkJWVHRCUVVNM1FpeFRRVUZQVWl4WFFVRlhVU3hWUVVGWUxFVkJRVkE3UVVGRFFTeEZRVVpFT3p0QlFVbEJVQ3hSUVVGUFVTeFhRVUZRTEVkQlFYRkNMRmxCUVZjN1FVRkJSU3hUUVVGUFZDeFhRVUZYVXl4WFFVRllMRVZCUVZBN1FVRkJhVU1zUlVGQmJrVTdRVUZEUVZJc1VVRkJUMU1zUzBGQlVDeEhRVUZsTEZsQlFWYzdRVUZCUlN4VFFVRlBWaXhYUVVGWFZTeExRVUZZTEVWQlFWQTdRVUZCTWtJc1JVRkJka1E3UVVGRFFWUXNVVUZCVDFVc1NVRkJVQ3hIUVVGakxGbEJRVmM3UVVGQlJTeFRRVUZQV0N4WFFVRlhWeXhKUVVGWUxFVkJRVkE3UVVGQk1rSXNSVUZCZEVRN1FVRkRRVllzVVVGQlQwc3NTVUZCVUN4SFFVRmpMRmxCUVZjN1FVRkJSU3hUUVVGUFRpeFhRVUZYVFN4SlFVRllMRVZCUVZBN1FVRkJNa0lzUlVGQmRFUTdRVUZEUVV3c1VVRkJUMWNzU1VGQlVDeEhRVUZqTEZsQlFWYzdRVUZCUlN4VFFVRlBXaXhYUVVGWFdTeEpRVUZZTEVWQlFWQTdRVUZCTWtJc1JVRkJkRVE3UVVGRFFWZ3NVVUZCVDFrc1NVRkJVQ3hIUVVGakxGbEJRVmM3UVVGQlJTeFRRVUZQWWl4WFFVRlhZU3hKUVVGWUxFVkJRVkE3UVVGQk1rSXNSVUZCZEVRN1FVRkRRVm9zVVVGQlQyRXNaVUZCVUN4SFFVRjVRaXhaUVVGWE8wRkJRVVVzVTBGQlQyUXNWMEZCVjJVc1lVRkJXQ3hGUVVGUU8wRkJRVzlETEVWQlFURkZPenRCUVVWQlpDeFJRVUZQWlN4VFFVRlFMRWRCUVcxQ0xGVkJRVk5ETEU5QlFWUXNSVUZCYTBJN1FVRkRjRU1zVFVGQlNVTXNUMEZCVHl4RlFVRllPenRCUVVWQk8wRkJRMEVzVFVGQlJ5eERRVUZEUkN4UFFVRkVMRWxCUVZsQkxGbEJRVmtzUlVGQk0wSXNSVUZCSzBJN1FVRkRPVUpETEZGQlFVdGFMRWxCUVV3c1IwRkJXU3h4UWtGQldqdEJRVU5CV1N4UlFVRkxReXhQUVVGTUxFZEJRV1VzY1VKQlFXWTdRVUZEUVR0QlFVTkVPMEZCU2tFc1QwRkxTeXhKUVVGSExGZEJRVmRETEVsQlFWZ3NRMEZCWjBKSUxFOUJRV2hDTEVOQlFVZ3NSVUZCTmtJN1FVRkRha05ETEZOQlFVdGFMRWxCUVV3c1IwRkJXU3h2UWtGQmEwSlhMRTlCUVRsQ08wRkJRMEU3UVVGRFJEdEJRVWhMTEZGQlNVRXNTVUZCU1VFc1dVRkJXU3hYUVVGb1FpeEZRVUUyUWp0QlFVTnFRME1zVlVGQlMxb3NTVUZCVEN4SFFVRlpMSEZEUVVGYU8wRkJRMEU3UVVGRFJEdEJRVU5CTzBGQlNrc3NVMEZMUVN4SlFVRkpVaXhUUVVGVGMwSXNTVUZCVkN4RFFVRmpTQ3hQUVVGa0xFTkJRVW9zUlVGQk5FSTdRVUZEYUVORExGZEJRVXRhTEVsQlFVd3NSMEZCV1N4WFFVRlRWeXhQUVVGVUxFZEJRV2xDTEUxQlFUZENPMEZCUTBGRExGZEJRVXRETEU5QlFVd3NSMEZCWlN4WFFVRlRSaXhQUVVGVUxFZEJRV2xDTEUxQlFXaERPMEZCUTBFN1FVRkRSRHRCUVVwTExGVkJTMDhzU1VGQlNXNUNMRk5CUVZOelFpeEpRVUZVTEVOQlFXTklMRkZCUVZGSkxFdEJRVklzUTBGQll5eEhRVUZrTEVWQlFXMUNMRU5CUVc1Q0xFTkJRV1FzUzBGQmQwTXNWMEZCVjBRc1NVRkJXQ3hEUVVGblFrZ3NVVUZCVVVrc1MwRkJVaXhEUVVGakxFZEJRV1FzUlVGQmJVSXNRMEZCYmtJc1EwRkJhRUlzUTBGQk5VTXNSVUZCYjBZN1FVRkRMMFpJTEZsQlFVdGFMRWxCUVV3c1IwRkJXU3hWUVVGUlZ5eFBRVUZ3UWp0QlFVTkJPMEZCUTBRN1FVRkRRVHRCUVVwWkxGZEJTMUFzU1VGQlNVRXNVVUZCVVVzc1QwRkJVaXhEUVVGblFpeFJRVUZvUWl4TlFVRTRRaXhEUVVFNVFpeEpRVUZ0UTB3c1VVRkJVVXNzVDBGQlVpeERRVUZuUWl4UFFVRm9RaXhOUVVFMlFpeERRVUZ3UlN4RlFVRjFSVHRCUVVNelJVb3NZVUZCUzFvc1NVRkJUQ3hIUVVGWlZ5eFBRVUZhTzBGQlEwRTdRVUZEUkR0QlFVTkJPMEZCUTBFN1FVRk1TeXhaUVUxQkxFbEJRVWRCTEZGQlFWRkpMRXRCUVZJc1EwRkJZeXhIUVVGa0xFVkJRVzFDUlN4TlFVRnVRaXhMUVVFNFFpeERRVUZxUXl4RlFVRnZRenRCUVVONFEwd3NZMEZCUzFvc1NVRkJUQ3hIUVVGWkxGZEJRVmRYTEU5QlFWZ3NSMEZCY1VJc1RVRkJha003UVVGRFFVTXNZMEZCUzBNc1QwRkJUQ3hIUVVGbExGZEJRVmRHTEU5QlFWZ3NSMEZCY1VJc1RVRkJjRU03UVVGRFFVTXNZMEZCUzAwc1NVRkJUQ3hIUVVGWlVDeFJRVUZSU1N4TFFVRlNMRU5CUVdNc1IwRkJaQ3hGUVVGdFFpeERRVUZ1UWl4RFFVRmFPMEZCUTBFN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGUVN5eGhRVkZCTEVsQlFVZEtMRkZCUVZGSkxFdEJRVklzUTBGQll5eEhRVUZrTEVWQlFXMUNSU3hOUVVGdVFpeExRVUU0UWl4RFFVRTVRaXhKUVVGdFEwNHNVVUZCVVVrc1MwRkJVaXhEUVVGakxFZEJRV1FzUlVGQmJVSXNRMEZCYmtJc1RVRkJNRUlzUzBGQmFFVXNSVUZCZFVVN1FVRkRNMFZJTEdWQlFVdGFMRWxCUVV3c1IwRkJXU3hYUVVGVFZ5eFBRVUZ5UWp0QlFVTkJReXhsUVVGTFF5eFBRVUZNTEVkQlFXVXNWMEZCVTBZc1VVRkJVVkVzVFVGQlVpeERRVUZsTEVOQlFXWXNSVUZCYTBKU0xGRkJRVkZOTEUxQlFWSXNSMEZCYVVJc1EwRkJia01zUTBGQmVFSTdRVUZEUVV3c1pVRkJTMDBzU1VGQlRDeEhRVUZaVUN4UlFVRlJTU3hMUVVGU0xFTkJRV01zUjBGQlpDeEZRVUZ0UWl4RFFVRnVRaXhEUVVGYU8wRkJRMEU3UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZRU3l4alFWRkJPMEZCUTBwSUxHZENRVUZMV2l4SlFVRk1MRWRCUVZrc1owTkJRVGhDVnl4UFFVRTVRaXhIUVVGelF5eE5RVUZzUkR0QlFVTkJReXhuUWtGQlMwTXNUMEZCVEN4SFFVRmxMR2REUVVFNFFrWXNUMEZCT1VJc1IwRkJjME1zVFVGQmNrUTdRVUZEUVVNc1owSkJRVXROTEVsQlFVd3NSMEZCV1ZBc1QwRkJXanRCUVVOQk96dEJRVVZFTEZOQlFVOURMRWxCUVZBN1FVRkRRU3hGUVhwRVJEczdRVUUwUkVFN1FVRkRRV3BDTEZGQlFVOTVRaXhWUVVGUUxFZEJRVzlDTEZWQlFWTkRMRTlCUVZRc1JVRkJhMEp3UWl4UFFVRnNRaXhGUVVFd1FqdEJRVU0zUXl4TlFVRkpjVUlzVjBGQlYyNURMRVZCUVVWdlF5eExRVUZHTEVWQlFXWTdRVUZEUVN4WFFVRlRReXhGUVVGVUxFTkJRVmxETEVOQlFWb3NSVUZCWlR0QlFVTmtPVUlzVlVGQlQwa3NUMEZCVUN4RFFVRmxjMElzVVVGQlVVa3NRMEZCVWl4RFFVRm1MRVZCUVRKQ2VFSXNUMEZCTTBJc1JVRkJiME41UWl4SlFVRndReXhEUVVGNVF5eFZRVUZUUXl4RFFVRlVMRVZCUVZjN1FVRkRia1FzVjBGQlQwd3NVMEZCVTAwc1QwRkJWQ3hEUVVGcFFsQXNVVUZCVVVrc1EwRkJVaXhEUVVGcVFpeERRVUZRTzBGQlEwRXNTVUZHUkN4RlFVVkhTU3hMUVVaSUxFTkJSVk1zVlVGQlUwWXNRMEZCVkN4RlFVRlhPMEZCUTI1Q2FFTXNWMEZCVDA4c1ZVRkJVQ3hIUVVGdlFuZENMRWxCUVhCQ0xFTkJRWGxDTEZsQlFWYzdRVUZEYmtORU8wRkJRMEVzVTBGQlIwRXNTVUZCUlVvc1VVRkJVVW9zVFVGQllpeEZRVUZ4UW1Fc1YwRkJWeXhaUVVGWE8wRkJRVU5PTEZOQlFVZERMRU5CUVVnN1FVRkJUeXhOUVVFNVFpeEZRVUZuUXl4SFFVRm9ReXhGUVVGeVFpeExRVU5MTEU5QlFVOUlMRk5CUVZOVExFMUJRVlFzUTBGQlowSXNVMEZCYUVJc1EwRkJVRHRCUVVOTUxFdEJTa1E3UVVGTFFTeEpRVkpFTzBGQlUwRTdRVUZEUkZBc1MwRkJSeXhEUVVGSU8wRkJRMEVzVTBGQlQwWXNVMEZCVTFVc1QwRkJhRUk3UVVGRFFTeEZRV1pFT3p0QlFXbENRWEpETEZGQlFVOXpReXhoUVVGUUxFZEJRWFZDTEZsQlFWVTdRVUZEYUVNc1UwRkJUM1pETEZkQlFWZDNReXhMUVVGc1FqdEJRVU5CTEVWQlJrUTdPMEZCU1VGMlF5eFJRVUZQZDBNc1JVRkJVQ3hIUVVGWkxGVkJRVk5ETEV0QlFWUXNSVUZCWjBKRExGRkJRV2hDTEVWQlFYbENPMEZCUTNCRE0wTXNZVUZCVjNsRExFVkJRVmdzUTBGQlkwTXNTMEZCWkN4RlFVRnhRa01zVVVGQmNrSTdRVUZEUVN4VFFVRlBNVU1zVFVGQlVEdEJRVU5CTEVWQlNFUTdPMEZCUzBGQkxGRkJRVTh5UXl4alFVRlFMRWRCUVhkQ0xGVkJRVk5HTEV0QlFWUXNSVUZCWjBKRExGRkJRV2hDTEVWQlFYbENPMEZCUTJoRU0wTXNZVUZCVnpSRExHTkJRVmdzUTBGQk1FSkdMRXRCUVRGQ0xFVkJRV2xEUXl4UlFVRnFRenRCUVVOQkxGTkJRVTh4UXl4TlFVRlFPMEZCUTBFc1JVRklSRHM3UVVGTFFUdEJRVU5CUVN4UlFVRlBORU1zWVVGQlVDeEhRVUYxUWl4VlFVRlRReXhGUVVGVUxFVkJRV0ZzUXl4SlFVRmlMRVZCUVcxQ2JVTXNVVUZCYmtJc1JVRkJOa0o0UXl4UFFVRTNRaXhGUVVGelF6dEJRVU0xUkN4VFFVRlBUaXhQUVVGUFNTeFBRVUZRTEVOQlFXVjVReXhGUVVGbUxFVkJRVzFDZGtNc1QwRkJia0lzUlVGQk5FSjVRaXhKUVVFMVFpeERRVUZwUXl4WlFVRlZPMEZCUTJwRUxGVkJRVTh2UWl4UFFVRlBMRTlCUVZBc1JVRkJaMElyUXl4SlFVRm9RaXhEUVVGeFFuQkRMRWxCUVhKQ0xFVkJRVEpDYlVNc1VVRkJNMElzUTBGQlVEdEJRVU5CTEVkQlJrMHNRMEZCVUR0QlFVZEJMRVZCU2tRN08wRkJUVUU1UXl4UlFVRlBaMFFzWTBGQlVDeEhRVUYzUWl4WlFVRlZPMEZCUVVWcVJDeGhRVUZYWlN4aFFVRllMRU5CUVhsQ0xFdEJRWHBDTEVWQlFXbERaaXhYUVVGWFdTeEpRVUZZTEVOQlFXZENMRWxCUVdoQ0xFVkJRWFZDV2l4WFFVRlhZU3hKUVVGWUxFTkJRV2RDTEVsQlFXaENPMEZCUVhWQ0xFVkJRVzVJTzBGQlEwRmFMRkZCUVU5cFJDeFZRVUZRTEVkQlFXOUNMRlZCUVZORExGRkJRVlFzUlVGQmJVSTdRVUZCUlc1RUxHRkJRVmRyUkN4VlFVRllMRU5CUVhOQ1F5eFJRVUYwUWp0QlFVRnJReXhGUVVFelJUdEJRVU5CYkVRc1VVRkJUMjFFTEZOQlFWQXNSMEZCYlVJc1dVRkJWenRCUVVGRExGTkJRVTl3UkN4WFFVRlhjVVFzVVVGQmJFSTdRVUZCTmtJc1JVRkJOVVE3UVVGRFFYQkVMRkZCUVU5eFJDeFZRVUZRTEVkQlFXOUNMRlZCUVZNdlF5eFBRVUZVTEVWQlFXdENPMEZCUVVWUUxHRkJRVmR6UkN4VlFVRllMRU5CUVhOQ0wwTXNUMEZCZEVJN1FVRkJhVU1zUlVGQmVrVTdPMEZCUlVFc1VVRkJUMDRzVFVGQlVEdEJRVU5CT3p0QlFVVkVMRWxCUVVselJDeExRVUZMZUVRc1lVRkJWRHRCUVVOQmQwUXNSMEZCUjNoRUxGZEJRVWdzUjBGQmFVSkJMRmRCUVdwQ096dEJRVWxCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hUUVVGVFNTeFpRVUZVTEVOQlFYTkNSQ3hSUVVGMFFpeEZRVUZuUTBZc1ZVRkJhRU1zUlVGQk1rTTdRVUZETVVOTUxHTkJRV0UyUkN4SlFVRmlMRU5CUVd0Q0xFbEJRV3hDT3p0QlFVVkJMRTFCUVV0RExGZEJRVXdzUjBGQmJVSjZSQ3hWUVVGdVFqdEJRVU5CTEUxQlFVc3dSQ3hUUVVGTUxFZEJRV2xDZUVRc1VVRkJha0k3UVVGRFFTeE5RVUZMZVVRc1kwRkJUQ3hIUVVGelFpeERRVUYwUWp0QlFVTkJMRTFCUVV0RExHVkJRVXdzUjBGQmRVSXNTVUZCZGtJN1FVRkRRU3hOUVVGTFF5eHBRa0ZCVEN4SFFVRjVRaXhMUVVGNlFqdEJRVU5CTzBGQlEwUnFSU3hUUVVGVFR5eFpRVUZVTEVWQlFYVkNVaXhaUVVGMlFqczdRVUZIUVR0QlFVTkJPMEZCUTBFN08wRkJSVUZSTEdGQlFXRXlSQ3hUUVVGaUxFTkJRWFZDUXl4TlFVRjJRaXhIUVVGblF5eFpRVUZYTzBGQlFVVXNVVUZCVHl4TFFVRkxReXhQUVVGTUxFVkJRVkE3UVVGQmQwSXNRMEZCY2tVN08wRkJTVUU3T3pzN096czdRVUZQUVRkRUxHRkJRV0V5UkN4VFFVRmlMRU5CUVhWQ1J5eEpRVUYyUWl4SFFVRTRRaXhWUVVGVFF5eEZRVUZVTEVWQlFWazdRVUZEZWtNc1MwRkJTWGhFTEZGQlFWRXNTMEZCUzNORUxFOUJRVXdzUlVGQldqdEJRVU5CTEUxQlFVa3NTVUZCU1dwRExFbEJRVVVzUTBGQlZpeEZRVUZoUVN4SlFVRkZja0lzVFVGQlRXRXNUVUZCY2tJc1JVRkJOa0pSTEVkQlFUZENPMEZCUVd0RGJVTXNTMEZCUjBNc1NVRkJTQ3hEUVVGUkxFbEJRVklzUlVGQlkzcEVMRTFCUVUxeFFpeERRVUZPTEVOQlFXUTdRVUZCYkVNc1JVRkRRU3hQUVVGUExFbEJRVkE3UVVGRFFTeERRVXBFT3p0QlFVMUJPenM3TzBGQlNVRTFRaXhoUVVGaE1rUXNVMEZCWWl4RFFVRjFRazBzVDBGQmRrSXNSMEZCYVVNc1ZVRkJVME1zVFVGQlZDeEZRVUZwUWpGQ0xGRkJRV3BDTEVWQlFUSkNNa0lzVDBGQk0wSXNSVUZCYjBORExFOUJRWEJETEVWQlFUUkRPMEZCUXpWRkxFdEJRVWNzUTBGQlF5eExRVUZMWkN4WFFVRlVMRVZCUVhOQ0xFOUJRVThzU1VGQlVEdEJRVU4wUWl4TFFVRkhMRU5CUVVOakxFOUJRVW9zUlVGQllVRXNWVUZCVlN4RlFVRldPMEZCUTJJc1MwRkJSMFlzVDBGQlQwY3NWMEZCVUN4TFFVRjFRa01zVFVGQk1VSXNSVUZCYTBNN1FVRkRha01zVFVGQlNVTXNWVUZCVlV3c1QwRkJUMmhFTEV0QlFWQXNRMEZCWVN4SFFVRmlMRU5CUVdRN1FVRkRRU3hOUVVGSGNVUXNVVUZCVVc1RUxFMUJRVklzU1VGQlowSXNRMEZCYmtJc1JVRkJjMElzVFVGQlRTeHJRa0ZCVGp0QlFVTjBRamhETEZkQlFWTXNSVUZCUTAwc1UwRkJVVVFzVVVGQlVTeERRVUZTTEVOQlFWUXNSVUZCY1VKRkxFMUJRVXRHTEZGQlFWRXNRMEZCVWl4RFFVRXhRaXhGUVVGVU8wRkJRMEU3TzBGQlJVUXNTMEZCU1Vjc1dVRkJXU3hEUVVGb1FqdEJRVU5CTEV0QlFVbERMR0ZCUVdFc1MwRkJTMlFzVDBGQlRDeEhRVUZsZWtNc1RVRkJhRU03UVVGRFFTeFJRVUZQTEV0QlFVc3dReXhKUVVGTUxFTkJRVlVzVlVGQlUyTXNUVUZCVkN4RlFVRm5RanRCUVVOb1ExWXNVMEZCVDFjc1RVRkJVQ3hIUVVGblFrUXNUVUZCYUVJN08wRkJSVUVzVFVGQlNVVXNUMEZCVHl4RlFVRllPMEZCUTBFc1QwRkJTU3hKUVVGSmJFUXNRMEZCVWl4SlFVRmhkME1zVDBGQllqdEJRVUZ6UWxVc1VVRkJTMnhFTEVOQlFVd3NTVUZCVlhkRExGRkJRVkY0UXl4RFFVRlNMRU5CUVZZN1FVRkJkRUlzUjBGRFFTeEpRVUZITEU5QlFVOXJSQ3hMUVVGTFF5eG5Ra0ZCV2l4TFFVRnBReXhWUVVGd1F5eEZRVUZuUkVRc1MwRkJTME1zWjBKQlFVd3NSMEZCZDBJc1ZVRkJVME1zUjBGQlZDeEZRVUZqUXl4SlFVRmtMRVZCUVcxQ08wRkJRVVZpTEZkQlFWRlhMR2RDUVVGU0xFTkJRWGxDU0N4TlFVRjZRaXhGUVVGcFEwa3NSMEZCYWtNc1JVRkJjME5ETEVsQlFYUkRPMEZCUVRaRExFZEJRVEZHT3p0QlFVVm9SQ3hQUVVGTE0wSXNWMEZCVEN4RFFVRnBRbGNzVDBGQmFrSXNRMEZCZVVKRExFMUJRWHBDTEVWQlFXbERMRlZCUVZOakxFZEJRVlFzUlVGQlkwTXNTVUZCWkN4RlFVRnRRanRCUVVOdVJDeFBRVUZITEU5QlFVOTZReXhSUVVGUUxFdEJRVzlDTEZWQlFYWkNMRVZCUVcxRFFTeFRRVUZUYjBNc1RVRkJWQ3hGUVVGcFFra3NSMEZCYWtJc1JVRkJjMEpETEVsQlFYUkNPMEZCUTI1RFVEdEJRVU5CTEU5QlFVZEJMR0ZCUVdGRExGVkJRV0lzU1VGQk1rSlFMRkZCUVZGakxHMUNRVUYwUXl4RlFVRXlSREZETEZOQlFWTXNTVUZCVkN4RlFVRmxkME1zUjBGQlppeEZRVUZ2UWl4VFFVRndRaXhGUVVoU0xFTkJSM2RETzBGQlF6TkdMRWRCU2tRc1JVRkpSMklzVDBGS1NDeEZRVWxaVnl4SlFVcGFPMEZCUzBFc1JVRmFUU3hEUVVGUU8wRkJZVUVzUTBGNFFrUTdPMEZCTWtKQk8wRkJRMEU3UVVGRFFUbEZMR0ZCUVdFeVJDeFRRVUZpTEVOQlFYVkNkMElzVTBGQmRrSXNSMEZCYlVNc1ZVRkJVMnBDTEUxQlFWUXNSVUZCYVVJeFFpeFJRVUZxUWl4RlFVRXlRalJDTEU5QlFUTkNMRVZCUVcxRE8wRkJRM0pGTEV0QlFVZEdMRTlCUVU5SExGZEJRVkFzUzBGQmRVSkRMRTFCUVRGQ0xFVkJRV3RETzBGQlEycERMRTFCUVVsRExGVkJRVlZNTEU5QlFVOW9SQ3hMUVVGUUxFTkJRV0VzUjBGQllpeERRVUZrTzBGQlEwRXNUVUZCUjNGRUxGRkJRVkZ1UkN4TlFVRlNMRWxCUVdkQ0xFTkJRVzVDTEVWQlFYTkNMRTFCUVUwc2RVSkJRVTQ3UVVGRGRFSTRReXhYUVVGVExFVkJRVU5OTEZOQlFWRkVMRkZCUVZFc1EwRkJVaXhEUVVGVUxFVkJRWEZDUlN4TlFVRkxSaXhSUVVGUkxFTkJRVklzUTBGQk1VSXNSVUZCVkR0QlFVTkJPenRCUVVWRUxGRkJRVThzU1VGQlNXRXNXVUZCU2l4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUW14Q0xFMUJRWFpDTEVWQlFTdENNVUlzVVVGQkwwSXNSVUZCZVVNMFFpeFBRVUY2UXl4RFFVRlFPMEZCUTBFc1EwRlNSRHM3UVVGWFFUdEJRVU5CTzBGQlEwRndSU3hoUVVGaE1rUXNVMEZCWWl4RFFVRjFRakJDTEZkQlFYWkNMRWRCUVhGRExGVkJRVk5ETEZsQlFWUXNSVUZCYzBJN1FVRkRNVVFzUzBGQlIwTXNUVUZCVFVNc1QwRkJUaXhEUVVGalJpeFpRVUZrTEV0QlFTdENMRU5CUVVOQkxHRkJRV0ZITEV0QlFXaEVMRVZCUVhWRUxFOUJRVThzUzBGQlMwTXNORUpCUVV3c1EwRkJhME5LTEZsQlFXeERMRU5CUVZBN1FVRkRka1FzVVVGQlQwRXNZVUZCWVVjc1MwRkJZaXhGUVVGUU8wRkJRMEVzUTBGSVJEczdRVUZMUVhwR0xHRkJRV0V5UkN4VFFVRmlMRU5CUVhWQ1pDeEpRVUYyUWl4SFFVRTRRaXhWUVVGVGNFTXNTVUZCVkN4RlFVRmxiVU1zVVVGQlppeEZRVUY1UWtvc1VVRkJla0lzUlVGQmJVTXlRaXhQUVVGdVF5eEZRVUV5UXp0QlFVTjRSU3hMUVVGSmQwSXNUMEZCVHl4SlFVRllPMEZCUTBFc1MwRkJSeXhQUVVGUGJrUXNVVUZCVUN4TFFVRnZRaXhWUVVGMlFpeEZRVUZ0UTBFc1YwRkJWMEVzVTBGQlUzZENMRWxCUVZRc1EwRkJZeXhKUVVGa0xFTkJRVmc3TzBGQlJXNURMRXRCUVVsMlF5eFhRVUZYYmtNc1JVRkJSVzlETEV0QlFVWXNSVUZCWmpzN1FVRkZRU3hOUVVGTGRVTXNUMEZCVEN4RFFVRmhPMEZCUTFwUExGZEJRVk1zVFVGRVJ6dEJRVVZhUXl4UlFVRk5MR05CUmswN1FVRkhXbEVzVVVGQlRUdEJRVU5NZUVVc1UwRkJUVUVzU1VGRVJDeEZRVU5QTzBGQlExcHRSaXhoUVVGVmJrWXNTVUZHVEN4RlFVVlhPMEZCUTJoQ2JVTXNZVUZCVlVFN1FVRklURHRCUVVoTkxFVkJRV0lzUlVGUlJ5eFZRVUZUWjBNc1RVRkJWQ3hGUVVGcFFra3NSMEZCYWtJc1JVRkJjMEpETEVsQlFYUkNMRVZCUVRKQ096dEJRVVUzUWl4TlFVRkhSQ3hSUVVGUkxHbENRVUZZTEVWQlFUWkNPMEZCUXpWQ0xFOUJRVWNzVDBGQlQzaERMRkZCUVZBc1MwRkJiMElzVlVGQmRrSXNSVUZCYlVOQkxGTkJRVk52UXl4TlFVRlVMRVZCUVdsQ0xFbEJRV3BDTEVWQlFXNURMRXRCUTB0dVJDeFRRVUZUVXl4TlFVRlVMRU5CUVdkQ09FTXNSMEZCYUVJN1FVRkRURHRCUVVOQk96dEJRVVZFTzBGQlEwRXNUVUZCUnl4RFFVRkRRU3hIUVVGRUxFbEJRVkZETEVsQlFWSXNTMEZCYVVKQkxGTkJRVk1zU1VGQlZDeEpRVUZwUWtFc1MwRkJTM0pGTEdGQlFVd3NTMEZCZFVJc1NVRkJla1FzUTBGQlNDeEZRVUZyUlR0QlFVTnFSU3RGTEZGQlFVdHlReXhYUVVGTUxFTkJRV2xDTVVNc1lVRkJha0lzUTBGQkswSXNTVUZCTDBJN1FVRkRRU3RGTEZGQlFVdHlReXhYUVVGTUxFTkJRV2xDTjBNc1NVRkJha0lzUTBGQmMwSkJMRWxCUVhSQ08wRkJRMEZyUml4UlFVRkxja01zVjBGQlRDeERRVUZwUWpWRExFbEJRV3BDTEVOQlFYTkNhME1zVVVGQmRFSTdRVUZEUVN4UFFVRkhMRTlCUVU5S0xGRkJRVkFzUzBGQmIwSXNWVUZCZGtJc1JVRkJiVU5CTEZOQlFWTnZReXhOUVVGVUxFVkJRV2xDTEVsQlFXcENMRVZCUVc1RExFdEJRMHR1UkN4VFFVRlRUU3hQUVVGVU8wRkJRMHdzUjBGT1JDeE5RVTFQTzBGQlEwNDBSQ3hSUVVGTGNrTXNWMEZCVEN4RFFVRnBRakZETEdGQlFXcENMRU5CUVN0Q0xFdEJRUzlDTzBGQlEwRXNUMEZCUnl4UFFVRlBORUlzVVVGQlVDeExRVUZ2UWl4VlFVRjJRaXhGUVVGdFEwRXNVMEZCVTI5RExFMUJRVlFzUlVGQmFVSXNTMEZCYWtJc1JVRkJia01zUzBGRFMyNUVMRk5CUVZOVExFMUJRVlFzUTBGQlowSXNZMEZCYUVJN1FVRkRURHRCUVVWRUxFVkJOMEpFTEVWQk5rSkhhVU1zVDBFM1FrZzdPMEZCSzBKQkxGRkJRVTh4UXl4VFFVRlRWU3hQUVVGb1FqdEJRVU5CTEVOQmRFTkVPenRCUVhkRFFXNURMR0ZCUVdFeVJDeFRRVUZpTEVOQlFYVkNhME1zVlVGQmRrSXNSMEZCYjBNc1ZVRkJWVE5DTEUxQlFWWXNSVUZCYTBJeFFpeFJRVUZzUWl4RlFVRTBRanRCUVVNdlJDeExRVUZKYlVRc1QwRkJUeXhKUVVGWU96dEJRVVZCTEV0QlFVa3NUMEZCVDI1RUxGRkJRVkFzUzBGQmIwSXNWVUZCZUVJc1JVRkJiME5CTEZkQlFWZEJMRk5CUVZOM1FpeEpRVUZVTEVOQlFXTXNTVUZCWkN4RFFVRllPenRCUVVWd1F5eExRVUZKT0VJc1lVRkJZVFZDTEUxQlFXcENPenRCUVVWQkxFMUJRVXRFTEU5QlFVd3NRMEZCWVR0QlFVTmFUeXhYUVVGVExHVkJSRWM3UVVGRldrTXNVVUZCVFN4WlFVWk5PMEZCUjFwUkxGRkJRVTA3UVVGRFRHTXNaMEpCUVdGRU8wRkJSRkk3UVVGSVRTeEZRVUZpTEVWQlRVY3NWVUZCVld4Q0xFMUJRVllzUlVGQmEwSkpMRWRCUVd4Q0xFVkJRWFZDUXl4SlFVRjJRaXhGUVVFMlFqdEJRVU12UWl4TlFVRkpSQ3hQUVVGUExFbEJRVkFzU1VGQlpVTXNTMEZCUzJVc1UwRkJUQ3hKUVVGclFpeEpRVUZ5UXl4RlFVRXlRenRCUVVNeFF6bENMRmxCUVZNN1FVRkRVbU1zVTBGQlMwRXNSMEZFUnp0QlFVVlNhVUlzWTBGQlZXaENMRXRCUVV0bExGTkJSbEE3UVVGSFVrWXNaMEpCUVZsQkxGVkJTRW83UVVGSlVtcENMRmxCUVZGRU8wRkJTa0VzU1VGQlZEdEJRVTFCWlN4UlFVRkxja01zVjBGQlRDeERRVUZwUW5WRExGVkJRV3BDTEVOQlFUUkNSaXhKUVVFMVFpeEZRVUZyUTNwQ0xFMUJRV3hETEVWQlFUQkRMRlZCUVVOblF5eFZRVUZFTEVWQlFXZENPMEZCUTNwRUxGRkJRVWtzVDBGQlR6RkVMRkZCUVZBc1MwRkJiMElzVlVGQmVFSXNSVUZCYjBOQkxGTkJRVk52UXl4TlFVRlVMRVZCUVdsQ0xFbEJRV3BDTEVWQlFYVkNjMElzVlVGQmRrSTdRVUZEY0VNc1NVRkdSRHRCUVVsQkxFZEJXRVFzVFVGWFR6dEJRVU5PTEU5QlFVa3NUMEZCVHpGRUxGRkJRVkFzUzBGQmIwSXNWVUZCZUVJc1JVRkJiME5CTEZOQlFWTnZReXhOUVVGVUxFVkJRV2xDU1N4SFFVRnFRaXhGUVVGelFpeEpRVUYwUWp0QlFVTndRenRCUVVORUxFVkJja0pFTzBGQmMwSkJMRU5CTjBKRU96dEJRU3RDUVdoR0xHRkJRV0V5UkN4VFFVRmlMRU5CUVhWQ2QwTXNZMEZCZGtJc1IwRkJkME1zVlVGQlZXcERMRTFCUVZZc1JVRkJhMEk3UVVGRGVrUXNVVUZCVHl4TFFVRkxTaXhKUVVGTUxFTkJRVlVzVlVGQlZXTXNUVUZCVml4RlFVRnJRanRCUVVOc1ExWXNVMEZCVDFjc1RVRkJVQ3hIUVVGblFrUXNUVUZCYUVJN1FVRkRRU3hQUVVGTGRFSXNWMEZCVEN4RFFVRnBRalpETEdOQlFXcENMRU5CUVdkRGFrTXNUVUZCYUVNN1FVRkRRU3hGUVVoTkxFTkJRVkE3UVVGSlFTeERRVXhFT3p0QlFVOUJiRVVzWVVGQllUSkVMRk5CUVdJc1EwRkJkVUo1UXl4alFVRjJRaXhIUVVGM1F5eFZRVUZUU0N4UlFVRlVMRVZCUVd0Q08wRkJRM3BFTEUxQlFVc3pReXhYUVVGTUxFTkJRV2xDT0VNc1kwRkJha0lzUTBGQlowTklMRkZCUVdoRE8wRkJRMEVzUTBGR1JEczdRVUZKUVRzN1FVRkZRV3BITEdGQlFXRXlSQ3hUUVVGaUxFTkJRWFZDUlN4UFFVRjJRaXhIUVVGcFF5eFZRVUZUZDBNc1owSkJRVlFzUlVGQk1FSTdRVUZETVVRc1MwRkJTVllzVDBGQlR5eEpRVUZZT3p0QlFVVkJMRXRCUVVjc1EwRkJReXhMUVVGTGNrTXNWMEZCVkN4RlFVRnpRaXhQUVVGUExFVkJRVkE3UVVGRGRFSXNVVUZCVHl4TFFVRkxRU3hYUVVGTUxFTkJRV2xDTDBNc1MwRkJha0lzUjBGQmVVSXJSaXhOUVVGNlFpeERRVUZuUXl4VlFVRlRNVUlzVFVGQlZDeEZRVUZuUWp0QlFVTjBSQ3hUUVVGUFpTeExRVUZMV1N4TlFVRk1MRU5CUVZsYUxFdEJRVXR3UXl4VFFVRnFRaXhGUVVFMFFuRkNMRTFCUVRWQ0xFTkJRVkE3UVVGRFFTeEZRVVpOTEVOQlFWQTdRVUZIUVN4RFFWQkVPenRCUVZOQk5VVXNZVUZCWVRKRUxGTkJRV0lzUTBGQmRVSTBReXhOUVVGMlFpeEhRVUZuUXl4VlFVRlRlRWNzVVVGQlZDeEZRVUZ0UW5sSExFZEJRVzVDTEVWQlFYVkNPMEZCUTNSRUxFdEJRVWNzUTBGQlEzcEhMRkZCUVVvc1JVRkJZeXhQUVVGUExFdEJRVkE3UVVGRFpDeExRVUZIUVN4aFFVRmhMRTlCUVdoQ0xFVkJRWGxDTzBGQlFVVXNVMEZCVHl4TFFVRkxkVVFzVjBGQlRDeEpRVUZ2UW10RUxGRkJRVkVzUzBGQlMyeEVMRmRCUVV3c1EwRkJhVUk1UXl4SlFVRnFRaXhGUVVGdVF6dEJRVUUyUkN4RlFVRjRSaXhOUVVOTExFbEJRVWRVTEZOQlFWTXdSeXhIUVVGYUxFVkJRV2xDTEU5QlFVOHNRMEZCUXl4TFFVRkxSaXhOUVVGTUxFTkJRVmw0Unl4VFFVRlRNRWNzUjBGQmNrSXNSVUZCTUVKRUxFZEJRVEZDTEVOQlFWSXNRMEZCYWtJc1MwRkRRU3hKUVVGSGVrY3NVMEZCVTNORkxGZEJRVlFzUTBGQmNVSm9SQ3hKUVVGeVFpeExRVUU0UWl4UlFVRnFReXhGUVVFd1F6dEJRVU01UXl4VFFVRlBjVVlzV1VGQldUTkhMRkZCUVZvc1JVRkJjMEo1Unl4SFFVRjBRaXhEUVVGUU8wRkJRMEVzUlVGR1NTeE5RVVZGTEVsQlFVZDZSeXhUUVVGVGMwVXNWMEZCVkN4RFFVRnhRbWhFTEVsQlFYSkNMRXRCUVRoQ0xGRkJRV3BETEVWQlFUQkRPMEZCUTJoRUxGTkJRVTl6Uml4WlFVRlpOVWNzVVVGQldpeEZRVUZ6UW5sSExFZEJRWFJDTEVOQlFWQTdRVUZEUVN4RlFVWk5MRTFCUlVFc1NVRkJSMnBDTEUxQlFVMURMRTlCUVU0c1EwRkJZM3BHTEZGQlFXUXNRMEZCU0N4RlFVRXlRanRCUVVOcVF5eFRRVUZQTmtjc1YwRkJWemRITEZGQlFWZ3NSVUZCY1VKNVJ5eEhRVUZ5UWl4RFFVRlFPMEZCUTBFN1FVRkRSQ3hSUVVGUExFdEJRVkE3UVVGRFFTeERRVnBFT3p0QlFXTkJMRk5CUVZORkxGZEJRVlFzUTBGQmNVSXpSeXhSUVVGeVFpeEZRVUVyUW5sSExFZEJRUzlDTEVWQlFXMURPMEZCUTJ4RExGRkJRVTk2Unl4aFFVRmhlVWNzUjBGQmNFSTdRVUZEUVRzN1FVRkZSQ3hUUVVGVFJ5eFhRVUZVTEVOQlFYRkNOVWNzVVVGQmNrSXNSVUZCSzBKNVJ5eEhRVUV2UWl4RlFVRnRRenRCUVVOc1F5eFJRVUZQUVN4SlFVRkpTeXhMUVVGS0xFTkJRVlU1Unl4UlFVRldMRU5CUVZBN1FVRkRRVHM3UVVGRlJDeFRRVUZUTmtjc1ZVRkJWQ3hEUVVGdlFqZEhMRkZCUVhCQ0xFVkJRVGhDZVVjc1IwRkJPVUlzUlVGQmEwTTdRVUZEYWtNc1RVRkJTU3hKUVVGSk5VVXNTVUZCUlN4RFFVRldMRVZCUVZsQkxFbEJRVVUzUWl4VFFVRlRjVUlzVFVGQmRrSXNSVUZCSzBKUkxFZEJRUzlDTEVWQlFXMURPMEZCUTJ4RExFMUJRVWMzUWl4VFFVRlROa0lzUTBGQlZDeE5RVUZuUWpSRkxFZEJRVzVDTEVWQlFYZENMRTlCUVU4c1NVRkJVRHRCUVVONFFqdEJRVU5FTEZGQlFVOHNTMEZCVUR0QlFVTkJPenRCUVVWRU8wRkJRMEY0Unl4aFFVRmhNa1FzVTBGQllpeERRVUYxUW0xRUxFZEJRWFpDTEVkQlFUWkNPVWNzWVVGQllUSkVMRk5CUVdJc1EwRkJkVUp5UWl4RlFVRndSRHRCUVVOQmRFTXNZVUZCWVRKRUxGTkJRV0lzUTBGQmRVSnlRaXhGUVVGMlFpeEhRVUUwUWl4VlFVRlRlVVVzU1VGQlZDeEZRVUZsZGtVc1VVRkJaaXhGUVVGM1FqdEJRVU51UkN4TFFVRkpiVVFzVDBGQlR5eEpRVUZZTzBGQlEwRnVSQ3hWUVVGVGQwVXNPRUpCUVZRc1IwRkJNRU1zVlVGQlUzQkRMRTFCUVZRc1JVRkJhVUk3UVVGRE1VUXNUVUZCUjJVc1MwRkJTMWtzVFVGQlRDeERRVUZaV2l4TFFVRkxjRU1zVTBGQmFrSXNSVUZCTkVKeFFpeE5RVUUxUWl4RFFVRklMRVZCUVhkRFpTeExRVUZMYzBJc1NVRkJUQ3hEUVVGVlJpeEpRVUZXTEVWQlFXZENia01zVFVGQmFFSTdRVUZEZUVNc1JVRkdSRHRCUVVkQkxFMUJRVXQwUWl4WFFVRk1MRU5CUVdsQ2FFSXNSVUZCYWtJc1EwRkJiMEo1UlN4SlFVRndRaXhGUVVFd1FuWkZMRk5CUVZOM1JTdzRRa0ZCYmtNN1FVRkRRU3hMUVVGSlJTeE5RVUZOTEV0QlFVdEtMRWRCUVV3c1EwRkJVME1zU1VGQlZDeEZRVUZsZGtVc1VVRkJaaXhEUVVGV096dEJRVVZCTzBGQlEwRXNTMEZCUjNWRkxGTkJRVk1zWjBKQlFWUXNTVUZCTmtJc1MwRkJTM3BFTEZkQlFVd3NRMEZCYVVKb1JDeFhRVUZxUWl4RlFVRm9ReXhGUVVGblJUdEJRVU12UkN4TlFVRkpReXhSUVVGUkxFdEJRVXNyUXl4WFFVRk1MRU5CUVdsQ0wwTXNTMEZCYWtJc1JVRkJXanRCUVVOQkxFOUJRVWtzU1VGQlNYRkNMRWxCUVVVc1EwRkJWaXhGUVVGWlFTeEpRVUZGY2tJc1RVRkJUV0VzVFVGQmNFSXNSVUZCTkVKUkxFZEJRVFZDTEVWQlFXbERPMEZCUTJoRExFOUJRVWNzUzBGQlN6SkZMRTFCUVV3c1EwRkJXU3hMUVVGTGFFUXNVMEZCYWtJc1JVRkJORUpvUkN4TlFVRk5jVUlzUTBGQlRpeERRVUUxUWl4RFFVRklMRVZCUVRCRFdTeFRRVUZUYWtNc1RVRkJUWEZDTEVOQlFVNHNRMEZCVkR0QlFVTXhRenRCUVVORU8wRkJRMFFzVVVGQlQzTkdMRWRCUVZBN1FVRkRRU3hEUVdoQ1JEczdRVUZ0UWtFN1FVRkRRV3hJTEdGQlFXRXlSQ3hUUVVGaUxFTkJRWFZDZDBRc1pVRkJka0lzUjBGQmVVTnVTQ3hoUVVGaE1rUXNVMEZCWWl4RFFVRjFRbXhDTEdOQlFXaEZPMEZCUTBGNlF5eGhRVUZoTWtRc1UwRkJZaXhEUVVGMVFteENMR05CUVhaQ0xFZEJRWGRETEZWQlFWTnpSU3hKUVVGVUxFVkJRV1YyUlN4UlFVRm1MRVZCUVhsQ08wRkJRMmhGTEV0QlFVZEJMRk5CUVZOM1JTdzRRa0ZCV2l4RlFVRTBReXhMUVVGTE1VUXNWMEZCVEN4RFFVRnBRbUlzWTBGQmFrSXNRMEZCWjBOelJTeEpRVUZvUXl4RlFVRnpRM1pGTEZOQlFWTjNSU3c0UWtGQkwwTTdRVUZETlVNc1RVRkJTMGNzWlVGQlRDeERRVUZ4UWtvc1NVRkJja0lzUlVGQk1rSjJSU3hSUVVFelFqdEJRVU5CTEVOQlNFUTdPMEZCVDBFN1FVRkRRVHRCUVVOQk96czdRVUZIUVRzN096dEJRVWxCTEZOQlFWTTBReXhaUVVGVUxFTkJRWE5DY2tZc1VVRkJkRUlzUlVGQlowTnRSU3hOUVVGb1F5eEZRVUYzUXpGQ0xGRkJRWGhETEVWQlFXdEVORUlzVDBGQmJFUXNSVUZCTWtRN1FVRkRla1FzUzBGQlNYVkNMRTlCUVU4c1NVRkJXRHRCUVVOQkxFMUJRVXMxUml4UlFVRk1MRWRCUVdkQ1FTeFJRVUZvUWp0QlFVTkJMRTFCUVV0dFJTeE5RVUZNTEVkQlFXTkJMRTFCUVdRN1FVRkRRU3hOUVVGTE1VSXNVVUZCVEN4SFFVRm5Ra0VzVVVGQmFFSTdRVUZEUVN4TlFVRkxORUlzVDBGQlRDeEhRVUZsUVN4UFFVRm1PMEZCUTBFc1RVRkJTMmRFTEUxQlFVd3NSMEZCWXl4RlFVRmtPenRCUVVWQkxFMUJRVXRETEZkQlFVd3NSMEZCYlVJc1ZVRkJVM3BETEUxQlFWUXNSVUZCYVVJN1FVRkRia05sTEU5QlFVdDVRaXhOUVVGTUxFTkJRVmxGTEVsQlFWb3NRMEZCYVVJelFpeExRVUZMTkVJc1owSkJRVXdzUTBGQmMwSXpReXhOUVVGMFFpeERRVUZxUWp0QlFVTkJaU3hQUVVGTE5rSXNTMEZCVEN4SFFVRmhMRTFCUVdJN1FVRkRRU3hGUVVoRU96dEJRVXRCTEV0QlFVY3NTMEZCUzNCRUxFOUJRVXdzU1VGQlowSXNTMEZCUzBFc1QwRkJUQ3hEUVVGaGNVUXNTVUZCYUVNc1JVRkJjME03UVVGRGNrTXNUMEZCU3pGSUxGRkJRVXdzUTBGQlkzVkRMRVZCUVdRc1EwRkJhVUlzWjBKQlFXcENMRVZCUVcxRExFdEJRVXNyUlN4WFFVRjRRenRCUVVOQkxFVkJSa1FzVFVGRlR6dEJRVU5PTEU5QlFVdDBTQ3hSUVVGTUxFTkJRV01yUkN4SlFVRmtMRU5CUVcxQ0xFdEJRVXQxUkN4WFFVRjRRanRCUVVOQk96dEJRVVZFTEZGQlFVOHNTVUZCVUR0QlFVTkVPenRCUVVWRWFrTXNZVUZCWVhwQ0xGTkJRV0lzUTBGQmRVSTRRaXhMUVVGMlFpeEhRVUVyUWl4WlFVRlhPMEZCUTNwRExFMUJRVWtzU1VGQlNUZEVMRWxCUVVrc1EwRkJXaXhGUVVGbFFTeEpRVUZGTEV0QlFVdDNSaXhOUVVGTUxFTkJRVmxvUnl4TlFVRTNRaXhGUVVGeFExRXNSMEZCY2tNc1JVRkJNRU03UVVGRGVrTXNUMEZCU3pkQ0xGRkJRVXdzUTBGQlkzVkVMRmRCUVdRc1EwRkJNRUlyUWl4WFFVRXhRaXhEUVVGelF5eExRVUZMSzBJc1RVRkJUQ3hEUVVGWmVFWXNRMEZCV2l4RFFVRjBRenRCUVVOQk8wRkJRMFFzVFVGQlMzZEdMRTFCUVV3c1IwRkJZeXhGUVVGa08wRkJRMEVzVFVGQlMzSklMRkZCUVV3c1EwRkJZekJETEdOQlFXUXNRMEZCTmtJc1owSkJRVGRDTEVWQlFTdERMRXRCUVVzMFJTeFhRVUZ3UkR0QlFVTkJMRTFCUVV0SExFdEJRVXdzUjBGQllTeFJRVUZpTzBGQlEwRXNRMEZRUkRzN1FVRlRRWEJETEdGQlFXRjZRaXhUUVVGaUxFTkJRWFZDTkVRc1owSkJRWFpDTEVkQlFUQkRMRlZCUVZNelF5eE5RVUZVTEVWQlFXbENPMEZCUXpGRUxFdEJRVWxsTEU5QlFVOHNTVUZCV0R0QlFVTkJMRXRCUVVsNlFpeFRRVUZUTEVWQlFXSTdRVUZEUVN4TlFVRkpMRWxCUVVsM1JDeERRVUZTTEVsQlFXRXNTMEZCUzNoRUxFMUJRV3hDTzBGQlFUQkNRU3hUUVVGUGQwUXNRMEZCVUN4SlFVRlpMRXRCUVV0NFJDeE5RVUZNTEVOQlFWbDNSQ3hEUVVGYUxFTkJRVm83UVVGQk1VSXNSVUZEUVhoRUxFOUJRVTlYTEUxQlFWQXNSMEZCWjBKRUxFMUJRV2hDTzBGQlEwRXNTMEZCU1N0RExGRkJRVkVzUzBGQlN6VklMRkZCUVV3c1EwRkJZM1ZFTEZkQlFXUXNRMEZCTUVJMlFpeFRRVUV4UWl4RFFVRnZRMnBDTEUxQlFYQkRMRVZCUVRSRExGVkJRVk5qTEVkQlFWUXNSVUZCWTBNc1NVRkJaQ3hGUVVGdFFqdEJRVU14UlZVc1QwRkJTMjVFTEZGQlFVd3NRMEZCWTI5RExFMUJRV1FzUlVGQmMwSkpMRWRCUVhSQ0xFVkJRVEpDUXl4SlFVRXpRanRCUVVOQkxFVkJSbGNzUTBGQldqdEJRVWRCTEV0QlFVY3NTMEZCUzJJc1QwRkJUQ3hKUVVGblFtMUNMRTFCUVUxRExFOUJRVTRzUTBGQll5eExRVUZMY0VJc1QwRkJUQ3hEUVVGaFowUXNUVUZCTTBJc1EwRkJia0lzUlVGRFF5eExRVUZMYUVRc1QwRkJUQ3hEUVVGaFowUXNUVUZCWWl4RFFVRnZRbmhETEUxQlFYQkNMRWxCUVRoQ0swTXNTMEZCT1VJN1FVRkRSQ3hSUVVGUFFTeExRVUZRTzBGQlEwRXNRMEZZUkRzN1FVRnBRa0U3T3p0QlFVZEJPMEZCUTBFelNDeGhRVUZoTWtRc1UwRkJZaXhEUVVGMVFtbEZMRTFCUVhaQ0xFZEJRV2RETEZsQlFWVXNRMEZCUlN4RFFVRTFRenM3UVVGRlFUVklMR0ZCUVdFeVJDeFRRVUZpTEVOQlFYVkNLMElzTkVKQlFYWkNMRWRCUVhORUxGVkJRVk13UWl4TlFVRlVMRVZCUVdsQ08wRkJRM1JGTEUxQlFVdDBSQ3hKUVVGTUxFTkJRVlVzVlVGQlUyTXNUVUZCVkN4RlFVRm5RanRCUVVONlFpeE5RVUZKSzBNc1VVRkJVVkFzVDBGQlQzaERMRTFCUVZBc1EwRkJXanRCUVVOQkxFMUJRVWNyUXl4TFFVRklMRVZCUVZVc1MwRkJTM0pGTEZkQlFVd3NRMEZCYVVJclFpeFhRVUZxUWl4RFFVRTJRbk5ETEV0QlFUZENPMEZCUTFZc1JVRklSRHRCUVVsQkxGRkJRVThzU1VGQlVEdEJRVU5CTEVOQlRrUTdPMEZCVlVFN096dEJRVWxCUlN4UFFVRlBReXhQUVVGUUxFZEJRV2xDTVVVc1JVRkJha0lpTENKbWFXeGxJam9pUkdsNVlWTmxiR1ZqZEc5eUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHbHpRbkp2ZDNObGNpQTlJQ0VvZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnSjNWdVpHVm1hVzVsWkNjcE8xeHVhV1lvSVdselFuSnZkM05sY2lrZ2V5QjJZWElnVVNBOUlISmxjWFZwY21Vb0ozRW5LVHNnZlZ4dVpXeHpaU0I3SUhaaGNpQlJJRDBnZDJsdVpHOTNMbEU3SUgxY2JuWmhjaUJGZG1WdWRFVnRhWFIwWlhJZ1BTQnlaWEYxYVhKbEtDZHViMlJsTFdWMlpXNTBMV1Z0YVhSMFpYSW5LVHRjYm5aaGNpQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWs3WEc1Y2JuWmhjaUJFYVhsaFRtOWtaU0E5SUhKbGNYVnBjbVVvSnk0dlJHbDVZVTV2WkdVbktUdGNibHh1ZG1GeUlFbFFYMUpGUjBWWUlEMGdMMTRvTWpWYk1DMDFYWHd5V3pBdE5GMWJNQzA1WFh4Yk1ERmRQMXN3TFRsZFd6QXRPVjAvS1Z4Y0xpZ3lOVnN3TFRWZGZESmJNQzAwWFZzd0xUbGRmRnN3TVYwL1d6QXRPVjFiTUMwNVhUOHBYRnd1S0RJMVd6QXROVjE4TWxzd0xUUmRXekF0T1YxOFd6QXhYVDliTUMwNVhWc3dMVGxkUHlsY1hDNG9NalZiTUMwMVhYd3lXekF0TkYxYk1DMDVYWHhiTURGZFAxc3dMVGxkV3pBdE9WMC9LU1F2TzF4dVhHNHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdJRVF4SUVGUVNTQWdMeTljYmk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYmx4dVhHNW1kVzVqZEdsdmJpQnVaWGRKYm5OMFlXNWpaU0FvS1NCN1hHNWNibHgwZG1GeUlHTnZibTVsWTNScGIyNGdQU0J1WlhjZ1JHbDVZVTV2WkdVb0tUdGNibHh1WEhSMllYSWdaREZwYm5OMElEMGdablZ1WTNScGIyNGdLSE5sYkdWamRHOXlLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHNWxkeUJFYVhsaFUyVnNaV04wYjNJb2MyVnNaV04wYjNJc0lHTnZibTVsWTNScGIyNHBPMXh1WEhSOVhHNWNibHgwWTI5dWJtVmpkR2x2Ymk1ZlpERnBibk4wSUQwZ1pERnBibk4wWEc1Y2JseDBaREZwYm5OMExrUnBlV0ZPYjJSbElEMGdSR2w1WVU1dlpHVTdYRzVjZEdReGFXNXpkQzVFYVhsaFUyVnNaV04wYjNJZ1BTQkVhWGxoVTJWc1pXTjBiM0k3WEc1Y2JseDBaREZwYm5OMExtTnZibTVsWTNRZ1BTQm1kVzVqZEdsdmJpaGhaR1J5TENCWFUyOWphMlYwS1h0Y2JseDBYSFJ5WlhSMWNtNGdZMjl1Ym1WamRHbHZiaTVqYjI1dVpXTjBLR0ZrWkhJc0lGZFRiMk5yWlhRcE8xeHVYSFI5TzF4dVhHNWNkR1F4YVc1emRDNWthWE5qYjI1dVpXTjBJRDBnWm5WdVkzUnBiMjRvS1h0Y2JseDBYSFJ5WlhSMWNtNGdZMjl1Ym1WamRHbHZiaTVrYVhOamIyNXVaV04wS0NrN1hHNWNkSDA3WEc1Y2JseDBaREZwYm5OMExtbHpRMjl1Ym1WamRHVmtJRDBnWm5WdVkzUnBiMjRvS1NCN1hIUnlaWFIxY200Z1kyOXVibVZqZEdsdmJpNXBjME52Ym01bFkzUmxaQ2dwTzMwN1hHNWNkR1F4YVc1emRDNXdaV1Z5Y3lBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdZMjl1Ym1WamRHbHZiaTV3WldWeWN5Z3BPMzA3WEc1Y2RHUXhhVzV6ZEM1elpXeG1JRDBnWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlCamIyNXVaV04wYVc5dUxuTmxiR1lvS1RzZ2ZUdGNibHgwWkRGcGJuTjBMbUZrWkhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJR052Ym01bFkzUnBiMjR1WVdSa2NpZ3BPeUI5TzF4dVhIUmtNV2x1YzNRdWRYTmxjaUE5SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z1kyOXVibVZqZEdsdmJpNTFjMlZ5S0NrN0lIMDdYRzVjZEdReGFXNXpkQzV3WVhOeklEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUJqYjI1dVpXTjBhVzl1TG5CaGMzTW9LVHNnZlR0Y2JseDBaREZwYm5OMExtbHpRWFYwYUdWdWRHbGpZWFJsWkNBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdZMjl1Ym1WamRHbHZiaTVoZFhSb1pXNTBhV05oZEdWa0tDazdJSDA3WEc1Y2JseDBaREZwYm5OMExuQmhjbk5sVUdWbGNpQTlJR1oxYm1OMGFXOXVLR0ZrWkhKVGRISXBJSHRjYmx4MFhIUjJZWElnY0dWbGNpQTlJSHQ5TzF4dVhHNWNkRngwTHk4Z1BHNXZkR2hwYm1jK0lDMCtJSGR6Y3pvdkwyeHZZMkZzYUc5emRDOWhjR2xjYmx4MFhIUnBaaWdoWVdSa2NsTjBjaUI4ZkNCaFpHUnlVM1J5SUQwOVBTQmNJbHdpS1NCN1hHNWNkRngwWEhSd1pXVnlMbUZrWkhJZ1BTQmNJbmR6Y3pvdkwyeHZZMkZzYUc5emRDOWhjR2xjSWp0Y2JseDBYSFJjZEhCbFpYSXVZV1JrY2s1bGRDQTlJRndpZDNOek9pOHZiRzlqWVd4b2IzTjBMMjVsZEZ3aU8xeHVYSFJjZEgxY2JseDBYSFF2THlBeE1qTTBJQzArSUhkek9pOHZiRzlqWVd4b2IzTjBPakV5TXpSY2JseDBYSFJsYkhObElHbG1LQzllV3pBdE9WMHFKQzh1ZEdWemRDaGhaR1J5VTNSeUtTa2dlMXh1WEhSY2RGeDBjR1ZsY2k1aFpHUnlJRDBnWENKM2N6b3ZMMnh2WTJGc2FHOXpkRHBjSWl0aFpHUnlVM1J5TzF4dVhIUmNkSDFjYmx4MFhIUXZMeUFuYkc5allXeG9iM04wSnlCaGJHOXVaU0F0UGlCVlRrbFlJSE52WTJ0bGRDQXZkbUZ5TDNKMWJpOWthWGxoTDJScGVXRXRibTlrWlM1emIyTnJYRzVjZEZ4MFpXeHpaU0JwWmlBb1lXUmtjbE4wY2lBOVBUMGdKMnh2WTJGc2FHOXpkQ2NwSUh0Y2JseDBYSFJjZEhCbFpYSXVZV1JrY2lBOUlDZDFibWw0T2k4dkwzWmhjaTl5ZFc0dlpHbDVZUzlrYVhsaExXNXZaR1V1YzI5amF5ZGNibHgwWEhSOVhHNWNkRngwTHk4Z01UQXVOREl1TUM0eElDMCtJSGR6Y3pvdkx6RXdMalF5TGpBdU1TOWhjR2xjYmx4MFhIUXZMeUFnSUNBZ0lDQWdJQ0F0UGlCM2MzTTZMeTh4TUM0eU5DNHdMakV2Ym1WMFhHNWNkRngwWld4elpTQnBaaUFvU1ZCZlVrVkhSVmd1ZEdWemRDaGhaR1J5VTNSeUtTa2dlMXh1WEhSY2RGeDBjR1ZsY2k1aFpHUnlJRDBnWENKM2MzTTZMeTljSWl0aFpHUnlVM1J5SzF3aUwyRndhVndpTzF4dVhIUmNkRngwY0dWbGNpNWhaR1J5VG1WMElEMGdYQ0ozYzNNNkx5OWNJaXRoWkdSeVUzUnlLMXdpTDI1bGRGd2lPMXh1WEhSY2RIMWNibHgwWEhRdkx5QXhNQzQwTWk0d0xqRTZNVEl6TkNBdFBpQjNjem92THpFd0xqUXlMakF1TVRveE1qTTBYRzVjZENBZ0lDQWdJQ0JjZEdWc2MyVWdhV1lnS0VsUVgxSkZSMFZZTG5SbGMzUW9ZV1JrY2xOMGNpNXpjR3hwZENnbk9pY3BXekJkS1NBbUppQXZYbHN3TFRsZEtpUXZMblJsYzNRb1lXUmtjbE4wY2k1emNHeHBkQ2duT2ljcFd6RmRLU2tnZTF4dVhIUmNkRngwY0dWbGNpNWhaR1J5SUQwZ1hDSjNjem92TDF3aUsyRmtaSEpUZEhJN1hHNWNkRngwZlZ4dVhIUmNkQzh2SUhkemN6b3ZMM052YldWaFpHUnlaWE56TG1OdmJTOXpkSFZtWmlBdFBpQjNjM002THk5emIyMWxZV1JrY21WemN5NWpiMjB2YzNSMVptWmNibHgwWEhRdkx5QjNjem92TDNOdmJXVmhaR1J5WlhOekxtTnZiUzl6ZEhWbVppQXRQaUIzY3pvdkwzTnZiV1ZoWkdSeVpYTnpMbU52YlM5emRIVm1abHh1WEhSY2RHVnNjMlVnYVdZZ0tHRmtaSEpUZEhJdWFXNWtaWGhQWmloY0luZHpjem92TDF3aUtTQTlQVDBnTUNCOGZDQmhaR1J5VTNSeUxtbHVaR1Y0VDJZb1hDSjNjem92TDF3aUtTQTlQVDBnTUNrZ2UxeHVYSFJjZEZ4MGNHVmxjaTVoWkdSeUlEMGdZV1JrY2xOMGNqdGNibHgwWEhSOVhHNWNkRngwTHk4Z2MyOXRaV1J2YldGcGJpOXpiMjFsYzJsMFpTQXRQaUJjSW5kemN6b3ZMM052YldWa2IyMWhhVzR2YzI5dFpYTnBkR1V2WVhCcFhHNWNkRngwTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXRQaUJjSW5kemN6b3ZMM052YldWa2IyMWhhVzR2YzI5dFpYTnBkR1V2Ym1WMFhHNWNkRngwTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXRQaUJ6YjIxbGMybDBaVnh1WEhSY2RHVnNjMlVnYVdZb1lXUmtjbE4wY2k1emNHeHBkQ2duTHljcExteGxibWQwYUNBOVBUMGdNaWtnZTF4dVhIUmNkRngwY0dWbGNpNWhaR1J5SUQwZ1hDSjNjM002THk5Y0lpQXJJR0ZrWkhKVGRISWdLeUFuTDJGd2FTYzdYRzVjZEZ4MFhIUndaV1Z5TG1Ga1pISk9aWFFnUFNCY0luZHpjem92TDF3aUlDc2dZV1JrY2xOMGNpQXJJQ2N2Ym1WMEp6dGNibHgwWEhSY2RIQmxaWEl1Ym1GdFpTQTlJR0ZrWkhKVGRISXVjM0JzYVhRb0p5OG5LVnN4WFR0Y2JseDBYSFI5WEc1Y2RGeDBMeThnYzI5dFpXUnZiV0ZwYmk5emIyMWxjMmwwWlM5aGNHa2dMVDRnWENKM2MzTTZMeTl6YjIxbFpHOXRZV2x1TDNOdmJXVnphWFJsTDJGd2FWd2lYRzVjZEZ4MEx5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xUNGdYQ0ozYzNNNkx5OXpiMjFsWkc5dFlXbHVMM052YldWemFYUmxMMjVsZEZ3aVhHNWNkRngwTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTFQ0Z2MyOXRaWE5wZEdWY2JseDBYSFJsYkhObElHbG1LR0ZrWkhKVGRISXVjM0JzYVhRb0p5OG5LUzVzWlc1bmRHZ2dQVDA5SURNZ0ppWWdZV1JrY2xOMGNpNXpjR3hwZENnbkx5Y3BXekpkSUQwOVBTQmNJbUZ3YVZ3aUtTQjdYRzVjZEZ4MFhIUndaV1Z5TG1Ga1pISWdQU0JjSW5kemN6b3ZMMXdpSzJGa1pISlRkSEk3WEc1Y2RGeDBYSFJ3WldWeUxtRmtaSEpPWlhRZ1BTQmNJbmR6Y3pvdkwxd2lLMkZrWkhKVGRISXVjM1ZpYzNSeUtEQXNJR0ZrWkhKVGRISXViR1Z1WjNSb0lDMGdOQ2s3WEc1Y2RGeDBYSFJ3WldWeUxtNWhiV1VnUFNCaFpHUnlVM1J5TG5Od2JHbDBLQ2N2SnlsYk1WMDdYRzVjZEZ4MGZWeHVYSFJjZEM4dklITnZiV1Z6YVhSbElDMCtJRndpZDNOek9pOHZjR0Z5ZEc1bGNtbHVaeTFqYkc5MVpDNWpiMjB2YzI5dFpYTnBkR1V2WVhCcFhDSmNibHgwWEhRdkx5QWdJQ0FnSUNBZ0lDQXRQaUJjSW5kemN6b3ZMM0JoY25SdVpYSnBibWN0WTJ4dmRXUXVZMjl0TDNOdmJXVnphWFJsTDI1bGRGd2lYRzVjZEZ4MEx5OGdJQ0FnSUNBZ0lDQWdMVDRnYzI5dFpYTnBkR1ZjYmx4MFhIUmxiSE5sSUh0Y2JseDBYSFJjZEhCbFpYSXVZV1JrY2lBOUlGd2lkM056T2k4dmNHRnlkRzVsY21sdVp5MWpiRzkxWkM1amIyMHZYQ0lyWVdSa2NsTjBjaXRjSWk5aGNHbGNJanRjYmx4MFhIUmNkSEJsWlhJdVlXUmtjazVsZENBOUlGd2lkM056T2k4dmNHRnlkRzVsY21sdVp5MWpiRzkxWkM1amIyMHZYQ0lyWVdSa2NsTjBjaXRjSWk5dVpYUmNJanRjYmx4MFhIUmNkSEJsWlhJdWJtRnRaU0E5SUdGa1pISlRkSEk3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIQmxaWEk3WEc1Y2RIMDdYRzVjYmx4dVhIUXZLaW9nVkhKNUlIUnZJR052Ym01bFkzUWdkRzhnZEdobElHZHBkbVZ1SUhObGNuWmxjbk1nYkdsemRDQnBiaUIwYUdVZ2JHbHpkQ0J2Y21SbGNpd2dkVzUwYVd3Z1ptbHVaR2x1WnlCaGJpQmhkbUZwYkdGaWJHVWdiMjVsSUNvdlhHNWNkR1F4YVc1emRDNTBjbmxEYjI1dVpXTjBJRDBnWm5WdVkzUnBiMjRvYzJWeWRtVnljeXdnVjFOdlkydGxkQ2w3WEc1Y2RGeDBkbUZ5SUdSbFptVnljbVZrSUQwZ1VTNWtaV1psY2lncE8xeHVYSFJjZEdaMWJtTjBhVzl1SUhSaktHa3BJSHRjYmx4MFhIUmNkR1F4YVc1emRDNWpiMjV1WldOMEtITmxjblpsY25OYmFWMHNJRmRUYjJOclpYUXBMblJvWlc0b1puVnVZM1JwYjI0b1pTbDdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQmtaV1psY25KbFpDNXlaWE52YkhabEtITmxjblpsY25OYmFWMHBPMXh1WEhSY2RGeDBmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9aU2w3WEc1Y2RGeDBYSFJjZEdReGFXNXpkQzVrYVhOamIyNXVaV04wS0NrdWRHaGxiaWhtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUnBLeXM3WEc1Y2RGeDBYSFJjZEZ4MGFXWW9hVHh6WlhKMlpYSnpMbXhsYm1kMGFDa2djMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUh0MFl5aHBLVHQ5TENBeE1EQXBPMXh1WEhSY2RGeDBYSFJjZEdWc2MyVWdjbVYwZFhKdUlHUmxabVZ5Y21Wa0xuSmxhbVZqZENoY0lsUnBiV1Z2ZFhSY0lpazdYRzVjZEZ4MFhIUmNkSDBwTzF4dVhIUmNkRngwZlNrN1hHNWNkRngwZlZ4dVhIUmNkSFJqS0RBcE8xeHVYSFJjZEhKbGRIVnliaUJrWldabGNuSmxaQzV3Y205dGFYTmxPMXh1WEhSOVhHNWNibHgwWkRGcGJuTjBMbU4xY25KbGJuUlRaWEoyWlhJZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1WEhSY2RISmxkSFZ5YmlCamIyNXVaV04wYVc5dUxsOWhaR1J5TzF4dVhIUjlPMXh1WEc1Y2RHUXhhVzV6ZEM1dmJpQTlJR1oxYm1OMGFXOXVLR1YyWlc1MExDQmpZV3hzWW1GamF5bDdYRzVjZEZ4MFkyOXVibVZqZEdsdmJpNXZiaWhsZG1WdWRDd2dZMkZzYkdKaFkyc3BPMXh1WEhSY2RISmxkSFZ5YmlCa01XbHVjM1E3WEc1Y2RIMDdYRzVjYmx4MFpERnBibk4wTG5KbGJXOTJaVXhwYzNSbGJtVnlJRDBnWm5WdVkzUnBiMjRvWlhabGJuUXNJR05oYkd4aVlXTnJLWHRjYmx4MFhIUmpiMjV1WldOMGFXOXVMbkpsYlc5MlpVeHBjM1JsYm1WeUtHVjJaVzUwTENCallXeHNZbUZqYXlrN1hHNWNkRngwY21WMGRYSnVJR1F4YVc1emREdGNibHgwZlR0Y2JseHVYSFF2S2lvZ1UyaHZjblJvWVc1a0lHWjFibU4wYVc5dUlIUnZJR052Ym01bFkzUWdZVzVrSUd4dloybHVJSGRwZEdnZ2RHaGxJR2RwZG1WdUlDaDFjMlZ5TEhCaGMzTjNiM0prS1NBcUwxeHVYSFJrTVdsdWMzUXVZMjl1Ym1WamRFRnpWWE5sY2lBOUlHWjFibU4wYVc5dUtHbHdMQ0IxYzJWeUxDQndZWE56ZDI5eVpDd2dWMU52WTJ0bGRDa2dlMXh1WEhSY2RISmxkSFZ5YmlCa01XbHVjM1F1WTI5dWJtVmpkQ2hwY0N3Z1YxTnZZMnRsZENrdWRHaGxiaWhtZFc1amRHbHZiaWdwZTF4dVhIUmNkRngwY21WMGRYSnVJR1F4YVc1emRDaGNJaU56Wld4bVhDSXBMbUYxZEdnb2RYTmxjaXdnY0dGemMzZHZjbVFwTzF4dVhIUmNkSDBwTzF4dVhIUjlPMXh1WEc1Y2RHUXhhVzV6ZEM1a1pXRjFkR2hsYm5ScFkyRjBaU0E5SUdaMWJtTjBhVzl1S0NsN0lHTnZibTVsWTNScGIyNHVZWFYwYUdWdWRHbGpZWFJsWkNobVlXeHpaU2s3SUdOdmJtNWxZM1JwYjI0dWRYTmxjaWh1ZFd4c0tUc2dZMjl1Ym1WamRHbHZiaTV3WVhOektHNTFiR3dwTzMwN1hHNWNkR1F4YVc1emRDNXpaWFJUWldOMWNtVmtJRDBnWm5WdVkzUnBiMjRvWWxObFkzVnlaV1FwSUhzZ1kyOXVibVZqZEdsdmJpNXpaWFJUWldOMWNtVmtLR0pUWldOMWNtVmtLVHNnZlR0Y2JseDBaREZwYm5OMExtbHpVMlZqZFhKbFpDQTlJR1oxYm1OMGFXOXVLQ2tnZTNKbGRIVnliaUJqYjI1dVpXTjBhVzl1TGw5elpXTjFjbVZrT3lCOVhHNWNkR1F4YVc1emRDNXpaWFJYVTI5amEyVjBJRDBnWm5WdVkzUnBiMjRvVjFOdlkydGxkQ2tnZXlCamIyNXVaV04wYVc5dUxuTmxkRmRUYjJOclpYUW9WMU52WTJ0bGRDazdJSDFjYmx4dVhIUnlaWFIxY200Z1pERnBibk4wTzF4dWZWeHVYRzUyWVhJZ1pERWdQU0J1WlhkSmJuTjBZVzVqWlNncE8xeHVaREV1Ym1WM1NXNXpkR0Z1WTJVZ1BTQnVaWGRKYm5OMFlXNWpaVHRjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1JHbDVZVk5sYkdWamRHOXlJQzh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JseHVablZ1WTNScGIyNGdSR2w1WVZObGJHVmpkRzl5S0hObGJHVmpkRzl5TENCamIyNXVaV04wYVc5dUtYdGNibHgwUlhabGJuUkZiV2wwZEdWeUxtTmhiR3dvZEdocGN5azdYRzVjYmx4MGRHaHBjeTVmWTI5dWJtVmpkR2x2YmlBOUlHTnZibTVsWTNScGIyNDdYRzVjZEhSb2FYTXVYM05sYkdWamRHOXlJRDBnYzJWc1pXTjBiM0k3WEc1Y2RIUm9hWE11WDJ4cGMzUmxibVZ5UTI5MWJuUWdQU0F3TzF4dVhIUjBhR2x6TGw5c2FYTjBaVzVEWVd4c1ltRmpheUE5SUc1MWJHdzdYRzVjZEhSb2FYTXVYMk5oYkd4aVlXTnJRWFIwWVdOb1pXUWdQU0JtWVd4elpUdGNibjFjYm1sdWFHVnlhWFJ6S0VScGVXRlRaV3hsWTNSdmNpd2dSWFpsYm5SRmJXbDBkR1Z5S1R0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2SUZCMVlteHBZeUJCVUVrZ0x5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYmtScGVXRlRaV3hsWTNSdmNpNXdjbTkwYjNSNWNHVXVjMlZzWldOMElEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUIwYUdsekxsOXpaV3hsWTNRb0tUc2dmVHRjYmx4dVhHNWNiaThxS2x4dUlDb2dRWEJ3YkhrZ1kyRnNiR0poWTJzZ1kySWdkRzhnWldGamFDQnpaV3hsWTNSbFpDQndaV1Z5TGlCUVpXVnljeUJoY21VZ2MyVnNaV04wWldSY2JpQXFJR0ZqWTI5eVpHbHVaeUIwYnlCMGFHVWdjblZzWlNBbmMyVnNaV04wYjNJbklHZHBkbVZ1SUhSdklHTnZibk4wY25WamRHOXlMaUJUWld4bFkzUnZjaUJqWVc1Y2JpQXFJR0psSUdFZ2NHVmxja2xrTENCaElISmxaMFY0SUdadmNpQndaV1Z5U1dSeklHOW1JR0Z1SUdGeWNtRjVJRzltSUhCbFpYSkpaSE11WEc0Z0tpQkFjR0Z5WVcxeklGeDBZMkpjZEZ4MFkyRnNiR0poWTJzZ2RHOGdZbVVnWVhCd2JHbGxaRnh1SUNvZ1FISmxkSFZ5YmlCY2RIUm9hWE1nWEhROFJHbDVZVk5sYkdWamRHOXlQbHh1SUNvdlhHNUVhWGxoVTJWc1pXTjBiM0l1Y0hKdmRHOTBlWEJsTG1WaFkyZ2dQU0JtZFc1amRHbHZiaWhqWWlsN1hHNWNkSFpoY2lCd1pXVnljeUE5SUhSb2FYTXVYM05sYkdWamRDZ3BPMXh1WEhSbWIzSW9kbUZ5SUdrOU1Ec2dhVHh3WldWeWN5NXNaVzVuZEdnN0lHa3JLeWtnWTJJdVltbHVaQ2gwYUdsektTaHdaV1Z5YzF0cFhTazdYRzVjZEhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCVFpXNWtJSEpsY1hWbGMzUWdkRzhnYzJWc1pXTjBaV1FnY0dWbGNuTWdLQ0J6WldVZ1pXRmphQ2dwSUNrZ2RHaHliM1ZuYUNCMGFHVWdZM1Z5Y21WdWRDQmpiMjV1WldOMGFXOXVJQ2hFYVhsaFRtOWtaU2t1WEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WnlCOElFOWlhbVZqZEgwZ2NHRnlZVzF6SURvZ1kyRnVJR0psSUhObGNuWnBZMlV1Wm5WdVkzUnBiMjRnYjNJZ2UzTmxjblpwWTJVNmMyVnlkbWxqWlN3Z1puVnVZenBtZFc1amRHbHZiaXdnTGk0dWZWeHVJQ292WEc1RWFYbGhVMlZzWldOMGIzSXVjSEp2ZEc5MGVYQmxMbkpsY1hWbGMzUWdQU0JtZFc1amRHbHZiaWh3WVhKaGJYTXNJR05oYkd4aVlXTnJMQ0IwYVcxbGIzVjBMQ0J2Y0hScGIyNXpLWHRjYmx4MGFXWW9JWFJvYVhNdVgyTnZibTVsWTNScGIyNHBJSEpsZEhWeWJpQjBhR2x6TzF4dVhIUnBaaWdoYjNCMGFXOXVjeWtnYjNCMGFXOXVjeUE5SUh0OU8xeHVYSFJwWmlod1lYSmhiWE11WTI5dWMzUnlkV04wYjNJZ1BUMDlJRk4wY21sdVp5a2dlMXh1WEhSY2RIWmhjaUJmY0dGeVlXMXpJRDBnY0dGeVlXMXpMbk53YkdsMEtGd2lMbHdpS1R0Y2JseDBYSFJwWmloZmNHRnlZVzF6TG14bGJtZDBhQ0U5TWlrZ2RHaHliM2NnSjAxaGJHWnZjbTFsWkZKbGNYVmxjM1FuTzF4dVhIUmNkSEJoY21GdGN5QTlJSHR6WlhKMmFXTmxPbDl3WVhKaGJYTmJNRjBzSUdaMWJtTTZYM0JoY21GdGMxc3hYWDA3WEc1Y2RIMWNibHh1WEhSMllYSWdibUpCYm5OM1pYSnpJRDBnTUR0Y2JseDBkbUZ5SUc1aVJYaHdaV04wWldRZ1BTQjBhR2x6TGw5elpXeGxZM1FvS1M1c1pXNW5kR2c3WEc1Y2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0b2NHVmxja2xrS1h0Y2JseDBYSFJ3WVhKaGJYTXVkR0Z5WjJWMElEMGdjR1ZsY2tsa08xeHVYRzVjZEZ4MGRtRnlJRzl3ZEhNZ1BTQjdmVHRjYmx4MFhIUm1iM0lvZG1GeUlHa2dhVzRnYjNCMGFXOXVjeWtnYjNCMGMxdHBYU0E5SUc5d2RHbHZibk5iYVYwN1hHNWNkRngwYVdZb2RIbHdaVzltSUc5d2RITXVZMkZzYkdKaFkydGZjR0Z5ZEdsaGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2IzQjBjeTVqWVd4c1ltRmphMTl3WVhKMGFXRnNJRDBnWm5WdVkzUnBiMjRvWlhKeUxDQmtZWFJoS1hzZ2IzQjBhVzl1Y3k1allXeHNZbUZqYTE5d1lYSjBhV0ZzS0hCbFpYSkpaQ3dnWlhKeUxDQmtZWFJoS1R0OVhHNWNibHgwWEhSMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG5KbGNYVmxjM1FvY0dGeVlXMXpMQ0JtZFc1amRHbHZiaWhsY25Jc0lHUmhkR0VwZTF4dVhIUmNkRngwYVdZb2RIbHdaVzltSUdOaGJHeGlZV05ySUQwOVBTQW5ablZ1WTNScGIyNG5LU0JqWVd4c1ltRmpheWh3WldWeVNXUXNJR1Z5Y2l3Z1pHRjBZU2s3WEc1Y2RGeDBYSFJ1WWtGdWMzZGxjbk1yS3p0Y2JseDBYSFJjZEdsbUtHNWlRVzV6ZDJWeWN5QTlQU0J1WWtWNGNHVmpkR1ZrSUNZbUlHOXdkR2x2Ym5NdVlrNXZkR2xtZVZkb1pXNUdhVzVwYzJobFpDa2dZMkZzYkdKaFkyc29iblZzYkN3Z1pYSnlMQ0JjSWlNalJVNUVJeU5jSWlrN0lDOHZJRlJQUkU4Z09pQkdhVzVrSUdFZ1ltVjBkR1Z5SUhkaGVTQjBieUJ1YjNScFpua2djbVZ4ZFdWemRDQkZUa1FnSVNGY2JseDBYSFI5TENCMGFXMWxiM1YwTENCdmNIUnpLVHRjYmx4MGZTazdYRzU5TzF4dVhHNWNiaTh2SUVsTlVFOVNWRUZPVkNBaElTRWdRbmtnTXpBdk1URXZNVFVzSUhSb2FYTWdiV1YwYUc5a0lHUnZaWE51SjNRZ2NtVjBkWEp1SUNkMGFHbHpKeUJoYm5sdGIzSmxMQ0JpZFhRZ1lTQlRkV0p6WTNKcGNIUnBiMjRnYjJKcVpXTjBJR2x1YzNSbFlXUmNiaThxSUVCd1lYSmhiU0I3VTNSeWFXNW5JSHdnVDJKcVpXTjBmU0J3WVhKaGJYTWdPaUJqWVc0Z1ltVWdKM05sY25acFkyVXVablZ1WTNScGIyNG5JRzl5SUh0elpYSjJhV05sT25ObGNuWnBZMlVzSUdaMWJtTTZablZ1WTNScGIyNHNJQzR1TG4wZ0tpOWNia1JwZVdGVFpXeGxZM1J2Y2k1d2NtOTBiM1I1Y0dVdWMzVmljMk55YVdKbElEMGdablZ1WTNScGIyNG9jR0Z5WVcxekxDQmpZV3hzWW1GamF5d2diM0IwYVc5dWN5bDdYRzVjZEdsbUtIQmhjbUZ0Y3k1amIyNXpkSEoxWTNSdmNpQTlQVDBnVTNSeWFXNW5LU0I3WEc1Y2RGeDBkbUZ5SUY5d1lYSmhiWE1nUFNCd1lYSmhiWE11YzNCc2FYUW9YQ0l1WENJcE8xeHVYSFJjZEdsbUtGOXdZWEpoYlhNdWJHVnVaM1JvSVQweUtTQjBhSEp2ZHlBblRXRnNabTl5YldWa1UzVmljMk55YVhCMGFXOXVKenRjYmx4MFhIUndZWEpoYlhNZ1BTQjdjMlZ5ZG1salpUcGZjR0Z5WVcxeld6QmRMQ0JtZFc1ak9sOXdZWEpoYlhOYk1WMTlPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJRzVsZHlCVGRXSnpZM0pwY0hScGIyNG9kR2hwY3l3Z2NHRnlZVzF6TENCallXeHNZbUZqYXl3Z2IzQjBhVzl1Y3lrN1hHNTlPMXh1WEc1Y2JpOHZJRWxOVUU5U1ZFRk9WQ0FoSVNFZ1Fsa2dNekF2TVRFdk1UVXNJSFJvYVhNZ2JXVjBhRzlrSUdSdlpYTnVKM1FnZEdGclpTQnpkV0pKWkhNZ1lYTWdhVzV3ZFhRZ1lXNTViVzl5WlM1Y2JpOHZJRkJzWldGelpTQndjbTkyYVdSbElHRWdjM1ZpYzJOeWFYQjBhVzl1SUdsdWMzUmxZV1FnSVZ4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzUxYm5OMVluTmpjbWxpWlNBOUlHWjFibU4wYVc5dUtITjFZbk5qY21sd2RHbHZiaWw3WEc1Y2RHbG1LRUZ5Y21GNUxtbHpRWEp5WVhrb2MzVmljMk55YVhCMGFXOXVLU0I4ZkNBaGMzVmljMk55YVhCMGFXOXVMbU5zYjNObEtTQnlaWFIxY200Z2RHaHBjeTVmWDI5c1pGOWtaWEJ5WldOaGRHVmtYM1Z1YzNWaWMyTnlhV0psS0hOMVluTmpjbWx3ZEdsdmJpazdYRzVjZEhKbGRIVnliaUJ6ZFdKelkzSnBjSFJwYjI0dVkyeHZjMlVvS1R0Y2JuMDdYRzVjYmtScGVXRlRaV3hsWTNSdmNpNXdjbTkwYjNSNWNHVXVZWFYwYUNBOUlHWjFibU4wYVc5dUtIVnpaWElzSUhCaGMzTjNiM0prTENCallXeHNZbUZqYXl3Z2RHbHRaVzkxZENsN1hHNWNkSFpoY2lCMGFHRjBJRDBnZEdocGN6dGNibHgwYVdZb2RIbHdaVzltSUdOaGJHeGlZV05ySUQwOVBTQW5ablZ1WTNScGIyNG5LU0JqWVd4c1ltRmpheUE5SUdOaGJHeGlZV05yTG1KcGJtUW9kR2hwY3lrN1hHNWNibHgwZG1GeUlHUmxabVZ5Y21Wa0lEMGdVUzVrWldabGNpZ3BPMXh1WEc1Y2RIUm9hWE11Y21WeGRXVnpkQ2g3WEc1Y2RGeDBjMlZ5ZG1salpUb2dKMkYxZEdnbkxGeHVYSFJjZEdaMWJtTTZJQ2RCZFhSb1pXNTBhV05oZEdVbkxGeHVYSFJjZEdSaGRHRTZJSHRjYmx4MFhIUmNkSFZ6WlhJNklIVnpaWElzSUM4dklFUkZVRkpGUTBGVVJVUXNJR3RsY0hRZ1ptOXlJRzV2ZHlCbWIzSWdZbUZqYTNkaGNtUWdZMjl0Y0dGMGFXSnNhWFI1SUNoM2FXeHNJR0psSUdSeWIzQndaV1FwWEc1Y2RGeDBYSFIxYzJWeWJtRnRaVG9nZFhObGNpd2dMeThnVG1WM0lITjViblJoZUNCemFXNWpaU0J6ZDJsMFkyaHBibWNnZEc4Z1JFSjFjMXh1WEhSY2RGeDBjR0Z6YzNkdmNtUTZJSEJoYzNOM2IzSmtYRzVjZEZ4MGZWeHVYSFI5TENCbWRXNWpkR2x2Ymlod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNsN1hHNWNibHgwWEhScFppaGxjbklnUFQwOUlDZFRaWEoyYVdObFRtOTBSbTkxYm1RbktYdGNibHgwWEhSY2RHbG1LSFI1Y0dWdlppQmpZV3hzWW1GamF5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzb2NHVmxja2xrTENCMGNuVmxLVHRjYmx4MFhIUmNkR1ZzYzJVZ1pHVm1aWEp5WldRdWNtVnFaV04wS0dWeWNpazdYRzVjZEZ4MFhIUnlaWFIxY200Z08xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklHUmhkR0V1WVhWMGFHVnVkR2xqWVhSbFpDQnBjeUJFUlZCU1JVTkJWRVZFTENCclpYQjBJR1p2Y2lCaVlXTnJkMkZ5WkNCamIyMXdZWFJwWW1sc2FYUjVYRzVjZEZ4MGFXWW9JV1Z5Y2lBbUppQmtZWFJoSUNZbUlDaGtZWFJoSUQwOVBTQjBjblZsSUh4OElHUmhkR0V1WVhWMGFHVnVkR2xqWVhSbFpDQTlQVDBnZEhKMVpTa3BlMXh1WEhSY2RGeDBkR2hoZEM1ZlkyOXVibVZqZEdsdmJpNWhkWFJvWlc1MGFXTmhkR1ZrS0hSeWRXVXBPMXh1WEhSY2RGeDBkR2hoZEM1ZlkyOXVibVZqZEdsdmJpNTFjMlZ5S0hWelpYSXBPMXh1WEhSY2RGeDBkR2hoZEM1ZlkyOXVibVZqZEdsdmJpNXdZWE56S0hCaGMzTjNiM0prS1R0Y2JseDBYSFJjZEdsbUtIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtnWTJGc2JHSmhZMnNvY0dWbGNrbGtMQ0IwY25WbEtUdGNibHgwWEhSY2RHVnNjMlVnWkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTzF4dVhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUjBhR0YwTGw5amIyNXVaV04wYVc5dUxtRjFkR2hsYm5ScFkyRjBaV1FvWm1Gc2MyVXBPMXh1WEhSY2RGeDBhV1lvZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktTQmpZV3hzWW1GamF5aHdaV1Z5U1dRc0lHWmhiSE5sS1R0Y2JseDBYSFJjZEdWc2MyVWdaR1ZtWlhKeVpXUXVjbVZxWldOMEtDZEJZMk5sYzNORVpXNXBaV1FuS1R0Y2JseDBYSFI5WEc1Y2JseDBmU3dnZEdsdFpXOTFkQ2s3WEc1Y2JseDBjbVYwZFhKdUlHUmxabVZ5Y21Wa0xuQnliMjFwYzJVN1hHNTlPMXh1WEc1RWFYbGhVMlZzWldOMGIzSXVjSEp2ZEc5MGVYQmxMbTl3Wlc1VGIyTnJaWFFnUFNCbWRXNWpkR2x2YmlBb2NHRnlZVzF6TENCallXeHNZbUZqYXlrZ2UxeHVYSFIyWVhJZ2RHaGhkQ0E5SUhSb2FYTTdYRzVjYmx4MGFXWWdLSFI1Y0dWdlppQmpZV3hzWW1GamF5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF5NWlhVzVrS0hSb2FYTXBPMXh1WEc1Y2RIWmhjaUJ6YjJOclpYUk9ZVzFsSUQwZ2NHRnlZVzF6TzF4dVhHNWNkSFJvYVhNdWNtVnhkV1Z6ZENoN1hHNWNkRngwYzJWeWRtbGpaVG9nSjNOdlkydGxkRWhoYm1Sc1pYSW5MRnh1WEhSY2RHWjFibU02SUNkUGNHVnVVMjlqYTJWMEp5eGNibHgwWEhSa1lYUmhPaUI3WEc1Y2RGeDBYSFJ6YjJOclpYUmZibUZ0WlRvZ2MyOWphMlYwVG1GdFpTeGNibHgwWEhSOVhHNWNkSDBzSUdaMWJtTjBhVzl1SUNod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNrZ2UxeHVYSFJjZEdsbUlDaGxjbklnUFQwZ2JuVnNiQ0FtSmlCa1lYUmhMbk52WTJ0bGRGOXBaQ0FoUFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFJ3WVhKaGJYTWdQU0I3WEc1Y2RGeDBYSFJjZEdWeWNqb2daWEp5TEZ4dVhIUmNkRngwWEhSemIyTnJaWFJKWkRvZ1pHRjBZUzV6YjJOclpYUmZhV1FzWEc1Y2RGeDBYSFJjZEhOdlkydGxkRTVoYldVNklITnZZMnRsZEU1aGJXVXNYRzVjZEZ4MFhIUmNkSFJoY21kbGREb2djR1ZsY2tsa0xGeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGRHaGhkQzVmWTI5dWJtVmpkR2x2Ymk1dmNHVnVVMjlqYTJWMEtIUm9ZWFFzSUhCaGNtRnRjeXdnS0dScGVXRlRiMk5yWlhRcElEMCtJSHRjYmx4MFhIUmNkRngwYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtnWTJGc2JHSmhZMnNvY0dWbGNrbGtMQ0J1ZFd4c0xDQmthWGxoVTI5amEyVjBLVHRjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnWTJGc2JHSmhZMnNnUFQwOUlDZG1kVzVqZEdsdmJpY3BJR05oYkd4aVlXTnJLSEJsWlhKSlpDd2daWEp5TENCdWRXeHNLVHRjYmx4MFhIUjlYRzVjZEgwcE8xeHVmVHRjYmx4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzV6Wlc1a1UyOWphMlYwUkdGMFlTQTlJR1oxYm1OMGFXOXVJQ2h3WVhKaGJYTXBJSHRjYmx4MGNtVjBkWEp1SUhSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb2NHVmxja2xrS1NCN1hHNWNkRngwY0dGeVlXMXpMblJoY21kbGRDQTlJSEJsWlhKSlpEdGNibHgwWEhSMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG5ObGJtUlRiMk5yWlhSRVlYUmhLSEJoY21GdGN5azdYRzVjZEgwcE8xeHVmVHRjYmx4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzV2YmxOdlkydGxkRU5zYjNObFpDQTlJR1oxYm1OMGFXOXVLSE52WTJ0bGRFbGtLWHRjYmx4MGRHaHBjeTVmWTI5dWJtVmpkR2x2Ymk1dmJsTnZZMnRsZEVOc2IzTmxaQ2h6YjJOclpYUkpaQ2s3WEc1OVhHNWNiaTh2SUZCeWFYWmhkR1Z6WEc1Y2JrUnBlV0ZUWld4bFkzUnZjaTV3Y205MGIzUjVjR1V1WDNObGJHVmpkQ0E5SUdaMWJtTjBhVzl1S0hObGJHVmpkRzl5Um5WdVkzUnBiMjRwZTF4dVhIUjJZWElnZEdoaGRDQTlJSFJvYVhNN1hHNWNibHgwYVdZb0lYUm9hWE11WDJOdmJtNWxZM1JwYjI0cElISmxkSFZ5YmlCYlhUdGNibHgwY21WMGRYSnVJSFJvYVhNdVgyTnZibTVsWTNScGIyNHVjR1ZsY25Nb0tTNW1hV3gwWlhJb1puVnVZM1JwYjI0b2NHVmxja2xrS1h0Y2JseDBYSFJ5WlhSMWNtNGdkR2hoZEM1ZmJXRjBZMmdvZEdoaGRDNWZjMlZzWldOMGIzSXNJSEJsWlhKSlpDazdYRzVjZEgwcE8xeHVmVHRjYmx4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzVmYldGMFkyZ2dQU0JtZFc1amRHbHZiaWh6Wld4bFkzUnZjaXdnYzNSeUtYdGNibHgwYVdZb0lYTmxiR1ZqZEc5eUtTQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RHbG1LSE5sYkdWamRHOXlJRDA5UFNCY0lpTnpaV3htWENJcElIc2djbVYwZFhKdUlIUm9hWE11WDJOdmJtNWxZM1JwYjI0Z0ppWWdjM1J5SUQwOVBTQjBhR2x6TGw5amIyNXVaV04wYVc5dUxuTmxiR1lvS1RzZ2ZWeHVYSFJsYkhObElHbG1LSE5sYkdWamRHOXlMbTV2ZENrZ2NtVjBkWEp1SUNGMGFHbHpMbDl0WVhSamFDaHpaV3hsWTNSdmNpNXViM1FzSUhOMGNpazdYRzVjZEdWc2MyVWdhV1lvYzJWc1pXTjBiM0l1WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E5UFQwZ0oxTjBjbWx1WnljcGUxeHVYSFJjZEhKbGRIVnliaUJ0WVhSamFGTjBjbWx1WnloelpXeGxZM1J2Y2l3Z2MzUnlLVHRjYmx4MGZTQmxiSE5sSUdsbUtITmxiR1ZqZEc5eUxtTnZibk4wY25WamRHOXlMbTVoYldVZ1BUMDlJQ2RTWldkRmVIQW5LWHRjYmx4MFhIUnlaWFIxY200Z2JXRjBZMmhTWldkRmVIQW9jMlZzWldOMGIzSXNJSE4wY2lrN1hHNWNkSDBnWld4elpTQnBaaWhCY25KaGVTNXBjMEZ5Y21GNUtITmxiR1ZqZEc5eUtTbDdYRzVjZEZ4MGNtVjBkWEp1SUcxaGRHTm9RWEp5WVhrb2MyVnNaV04wYjNJc0lITjBjaWs3WEc1Y2RIMWNibHgwY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYUmphRk4wY21sdVp5aHpaV3hsWTNSdmNpd2djM1J5S1h0Y2JseDBjbVYwZFhKdUlITmxiR1ZqZEc5eUlEMDlQU0J6ZEhJN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUcxaGRHTm9VbVZuUlhod0tITmxiR1ZqZEc5eUxDQnpkSElwZTF4dVhIUnlaWFIxY200Z2MzUnlMbTFoZEdOb0tITmxiR1ZqZEc5eUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRjBZMmhCY25KaGVTaHpaV3hsWTNSdmNpd2djM1J5S1h0Y2JseDBabTl5S0haaGNpQnBQVEE3YVR4elpXeGxZM1J2Y2k1c1pXNW5kR2c3SUdrckt5bDdYRzVjZEZ4MGFXWW9jMlZzWldOMGIzSmJhVjBnUFQwOUlITjBjaWtnY21WMGRYSnVJSFJ5ZFdVN1hHNWNkSDFjYmx4MGNtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNHZMeUJQZG1WeWNtbGtaWE1nUlhabGJuUkZiV2wwZEdWeUozTWdZbVZvWVhacGIzSWdkRzhnY0hKdmVIa2dZVzVrSUdacGJIUmxjaUJsZG1WdWRITWdabkp2YlNCMGFHVWdZMjl1Ym1WamRHbHZibHh1UkdsNVlWTmxiR1ZqZEc5eUxuQnliM1J2ZEhsd1pTNWZiMjRnUFNCRWFYbGhVMlZzWldOMGIzSXVjSEp2ZEc5MGVYQmxMbTl1TzF4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzV2YmlBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUdOaGJHeGlZV05yS1h0Y2JseDBkbUZ5SUhSb1lYUWdQU0IwYUdsek8xeHVYSFJqWVd4c1ltRmpheTVmWDE5RWFYbGhVMlZzWldOMGIzSmZhR2xrWkdWdVgzZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaHdaV1Z5U1dRcElIdGNibHgwWEhScFppaDBhR0YwTGw5dFlYUmphQ2gwYUdGMExsOXpaV3hsWTNSdmNpd2djR1ZsY2tsa0tTa2dkR2hoZEM1bGJXbDBLSFI1Y0dVc0lIQmxaWEpKWkNrN1hHNWNkSDA3WEc1Y2RIUm9hWE11WDJOdmJtNWxZM1JwYjI0dWIyNG9kSGx3WlN3Z1kyRnNiR0poWTJzdVgxOWZSR2w1WVZObGJHVmpkRzl5WDJocFpHUmxibDkzY21Gd2NHVnlLVHRjYmx4MGRtRnlJSEpsZENBOUlIUm9hWE11WDI5dUtIUjVjR1VzSUdOaGJHeGlZV05yS1R0Y2JseHVYSFF2THlCSVlXNWtiR1VnZEdobElITndaV05wWm1saklHTmhjMlVnYjJZZ1hDSndaV1Z5TFdOdmJtNWxZM1JsWkZ3aUlHVjJaVzUwY3l3Z2FTNWxMaXdnYm05MGFXWjVJRzltSUdGc2NtVmhaSGtnWTI5dWJtVmpkR1ZrSUhCbFpYSnpYRzVjZEdsbUtIUjVjR1VnUFQwOUlDZHdaV1Z5TFdOdmJtNWxZM1JsWkNjZ0ppWWdkR2hwY3k1ZlkyOXVibVZqZEdsdmJpNXBjME52Ym01bFkzUmxaQ2dwS1NCN1hHNWNkRngwZG1GeUlIQmxaWEp6SUQwZ2RHaHBjeTVmWTI5dWJtVmpkR2x2Ymk1d1pXVnljeWdwTzF4dVhIUmNkR1p2Y2loMllYSWdhVDB3TzJrOGNHVmxjbk11YkdWdVozUm9PeUJwS3lzcElIdGNibHgwWEhSY2RHbG1LSFJvYVhNdVgyMWhkR05vS0hSb2FYTXVYM05sYkdWamRHOXlMQ0J3WldWeWMxdHBYU2twSUdOaGJHeGlZV05yS0hCbFpYSnpXMmxkS1R0Y2JseDBYSFI5WEc1Y2RIMWNibHgwY21WMGRYSnVJSEpsZER0Y2JuMDdYRzVjYmx4dUx5OGdUM1psY25KcFpHVnpJRVYyWlc1MFJXMXBkSFJsY2lkeklHSmxhR0YyYVc5eUlIUnZJSEJ5YjNoNUlHRnVaQ0JtYVd4MFpYSWdaWFpsYm5SeklHWnliMjBnZEdobElHTnZibTVsWTNScGIyNWNia1JwZVdGVFpXeGxZM1J2Y2k1d2NtOTBiM1I1Y0dVdVgzSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ1JHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzV5WlcxdmRtVk1hWE4wWlc1bGNqdGNia1JwZVdGVFpXeGxZM1J2Y2k1d2NtOTBiM1I1Y0dVdWNtVnRiM1psVEdsemRHVnVaWElnUFNCbWRXNWpkR2x2YmloMGVYQmxMQ0JqWVd4c1ltRmpheWtnZTF4dVhIUnBaaWhqWVd4c1ltRmpheTVmWDE5RWFYbGhVMlZzWldOMGIzSmZhR2xrWkdWdVgzZHlZWEJ3WlhJcElIUm9hWE11WDJOdmJtNWxZM1JwYjI0dWNtVnRiM1psVEdsemRHVnVaWElvZEhsd1pTd2dZMkZzYkdKaFkyc3VYMTlmUkdsNVlWTmxiR1ZqZEc5eVgyaHBaR1JsYmw5M2NtRndjR1Z5S1R0Y2JseDBkR2hwY3k1ZmNtVnRiM1psVEdsemRHVnVaWElvZEhsd1pTd2dZMkZzYkdKaFkyc3BPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdVMVZDVTBOU1NWQlVTVTlPSUM4dlhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNibHh1WEc0dktpcGNiaW9nU0dGdVpHeGxjeUJoSUhOMVluTmpjbWx3ZEdsdmJpQjBieUJ6YjIxbElFUnBlV0ZPYjJSbElITmxjblpwWTJVZ1ptOXlJRzExYkhScGNHeGxJRzV2WkdWelhHNHFJR0ZqWTI5eVpHbHVaeUIwYnlCMGFHVWdaMmwyWlc0Z2MyVnNaV04wYjNKY2Jpb3ZYRzVtZFc1amRHbHZiaUJUZFdKelkzSnBjSFJwYjI0b2MyVnNaV04wYjNJc0lIQmhjbUZ0Y3l3Z1kyRnNiR0poWTJzc0lHOXdkR2x2Ym5NcElIdGNibHgwWEhSMllYSWdkR2hoZENBOUlIUm9hWE03WEc1Y2RGeDBkR2hwY3k1elpXeGxZM1J2Y2lBOUlITmxiR1ZqZEc5eU8xeHVYSFJjZEhSb2FYTXVjR0Z5WVcxeklEMGdjR0Z5WVcxek8xeHVYSFJjZEhSb2FYTXVZMkZzYkdKaFkyc2dQU0JqWVd4c1ltRmphenRjYmx4MFhIUjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dVhIUmNkSFJvYVhNdWMzVmlTV1J6SUQwZ1cxMDdYRzVjYmx4MFhIUjBhR2x6TG1SdlUzVmljMk55YVdKbElEMGdablZ1WTNScGIyNG9jR1ZsY2tsa0tTQjdYRzVjZEZ4MFhIUjBhR0YwTG5OMVlrbGtjeTV3ZFhOb0tIUm9ZWFF1WDJGa1pGTjFZbk5qY21sd2RHbHZiaWh3WldWeVNXUXBLVHRjYmx4MFhIUmNkSFJvWVhRdWMzUmhkR1VnUFNCY0ltOXdaVzVjSWp0Y2JseDBYSFI5TzF4dVhHNWNkRngwYVdZb2RHaHBjeTV2Y0hScGIyNXpJQ1ltSUhSb2FYTXViM0IwYVc5dWN5NWhkWFJ2S1NCN1hHNWNkRngwWEhSMGFHbHpMbk5sYkdWamRHOXlMbTl1S0Nkd1pXVnlMV052Ym01bFkzUmxaQ2NzSUhSb2FYTXVaRzlUZFdKelkzSnBZbVVwTzF4dVhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUjBhR2x6TG5ObGJHVmpkRzl5TG1WaFkyZ29kR2hwY3k1a2IxTjFZbk5qY21saVpTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNVRkV0p6WTNKcGNIUnBiMjR1Y0hKdmRHOTBlWEJsTG1Oc2IzTmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkR1p2Y2loMllYSWdhU0E5SURBN0lHazhkR2hwY3k1emRXSkpaSE11YkdWdVozUm9PeUJwS3lzcElIdGNibHgwWEhSMGFHbHpMbk5sYkdWamRHOXlMbDlqYjI1dVpXTjBhVzl1TG5WdWMzVmljMk55YVdKbEtIUm9hWE11YzNWaVNXUnpXMmxkS1R0Y2JseDBmVnh1WEhSMGFHbHpMbk4xWWtsa2N5QTlJRnRkTzF4dVhIUjBhR2x6TG5ObGJHVmpkRzl5TG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2R3WldWeUxXTnZibTVsWTNSbFpDY3NJSFJvYVhNdVpHOVRkV0p6WTNKcFltVXBPMXh1WEhSMGFHbHpMbk4wWVhSbElEMGdYQ0pqYkc5elpXUmNJanRjYm4wN1hHNWNibE4xWW5OamNtbHdkR2x2Ymk1d2NtOTBiM1I1Y0dVdVgyRmtaRk4xWW5OamNtbHdkR2x2YmlBOUlHWjFibU4wYVc5dUtIQmxaWEpKWkNrZ2UxeHVYSFIyWVhJZ2RHaGhkQ0E5SUhSb2FYTTdYRzVjZEhaaGNpQndZWEpoYlhNZ1BTQjdmVHRjYmx4MFptOXlLSFpoY2lCcklHbHVJSFJvYVhNdWNHRnlZVzF6S1NCd1lYSmhiWE5iYTEwZ1BTQjBhR2x6TG5CaGNtRnRjMXRyWFR0Y2JseDBjR0Z5WVcxekxuUmhjbWRsZENBOUlIQmxaWEpKWkR0Y2JseDBkbUZ5SUhOMVlrbGtJRDBnZEdocGN5NXpaV3hsWTNSdmNpNWZZMjl1Ym1WamRHbHZiaTV6ZFdKelkzSnBZbVVvY0dGeVlXMXpMQ0JtZFc1amRHbHZiaWhsY25Jc0lHUmhkR0VwZTF4dVhIUmNkSFJvWVhRdVkyRnNiR0poWTJzb2NHVmxja2xrTENCbGNuSXNJR1JoZEdFcE8xeHVYSFI5S1R0Y2JseDBhV1lvZEdocGN5NXZjSFJwYjI1eklDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb2RHaHBjeTV2Y0hScGIyNXpMbk4xWWtsa2N5a3BYRzVjZEZ4MGRHaHBjeTV2Y0hScGIyNXpMbk4xWWtsa2MxdHdaV1Z5U1dSZElEMGdjM1ZpU1dRN1hHNWNkSEpsZEhWeWJpQnpkV0pKWkR0Y2JuMDdYRzVjYmx4dVhHNWNibHh1THk4Z1RHVm5ZV041SUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc1Y2JseHVMeW9xSUVCa1pYQnlaV05oZEdWa0lDQXFMMXh1UkdsNVlWTmxiR1ZqZEc5eUxuQnliM1J2ZEhsd1pTNXNhWE4wWlc0Z1BTQm1kVzVqZEdsdmJpZ3BlMzA3WEc1Y2JrUnBlV0ZUWld4bFkzUnZjaTV3Y205MGIzUjVjR1V1WDE5dmJHUmZaR1Z3Y21WallYUmxaRjkxYm5OMVluTmpjbWxpWlNBOUlHWjFibU4wYVc5dUtITjFZa2xrY3lrZ2UxeHVYSFIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvY0dWbGNrbGtLWHRjYmx4MFhIUjJZWElnYzNWaVNXUWdQU0J6ZFdKSlpITmJjR1ZsY2tsa1hUdGNibHgwWEhScFppaHpkV0pKWkNrZ2RHaHBjeTVmWTI5dWJtVmpkR2x2Ymk1MWJuTjFZbk5qY21saVpTaHpkV0pKWkNrN1hHNWNkSDBwTzF4dVhIUnlaWFIxY200Z2RHaHBjenRjYm4xY2JseHVYRzVjYmk4dklDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNibHh1WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pERTdYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtO1xuXG52YXIgRGl5YVNvY2tldCA9IGZ1bmN0aW9uIChfVHJhbnNmb3JtKSB7XG5cdF9pbmhlcml0cyhEaXlhU29ja2V0LCBfVHJhbnNmb3JtKTtcblxuXHRmdW5jdGlvbiBEaXlhU29ja2V0KGQxaW5zdCwgcGFyYW1zLCBvcHRpb25zKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpeWFTb2NrZXQpO1xuXG5cdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERpeWFTb2NrZXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEaXlhU29ja2V0KSkuY2FsbCh0aGlzLCBvcHRpb25zKSk7XG5cblx0XHRfdGhpcy5kMWluc3QgPSBkMWluc3Q7XG5cdFx0X3RoaXMuc29ja2V0TmFtZSA9IHBhcmFtcy5zb2NrZXROYW1lO1xuXHRcdF90aGlzLnNvY2tldElkID0gcGFyYW1zLnNvY2tldElkO1xuXHRcdF90aGlzLnBlZXJJZCA9IHBhcmFtcy50YXJnZXQ7XG5cdFx0X3RoaXMuZmxhZ1NvY2tldElzRGVhZCA9IGZhbHNlO1xuXHRcdF90aGlzLnN1YnNjcmlwdGlvblNvY2tldENsb3NlZCA9IG51bGw7XG5cdFx0cmV0dXJuIF90aGlzO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKERpeWFTb2NrZXQsIFt7XG5cdFx0a2V5OiAnX3dyaXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcblx0XHRcdGlmICh0aGlzLmZsYWdTb2NrZXRJc0RlYWQgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHZhciBwYXJhbXMgPSB7XG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0c29ja2V0SWQ6IHRoaXMuc29ja2V0SWQsXG5cdFx0XHRcdFx0XHRzb2NrZXRCdWZmZXI6IGNodW5rLnRvU3RyaW5nKCdiYXNlNjQnKVxuXHRcdFx0XHRcdH0sIHRhcmdldDogdGhpcy5wZWVySWRcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy5kMWluc3Quc2VuZFNvY2tldERhdGEocGFyYW1zKTtcblx0XHRcdH1cblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZGlzY29ubmVjdCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0aWYgKHRoaXMuZmxhZ1NvY2tldElzRGVhZCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0dGhpcy5lbmQoKTtcblx0XHRcdFx0dGhpcy5kMWluc3QucmVxdWVzdCh7XG5cdFx0XHRcdFx0c2VydmljZTogJ3NvY2tldEhhbmRsZXInLFxuXHRcdFx0XHRcdGZ1bmM6ICdEaXNjb25uZWN0Q2xpZW50Jyxcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRzb2NrZXRfaWQ6IHRoaXMuc29ja2V0SWRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRcdF90aGlzMi5mbGFnU29ja2V0SXNEZWFkID0gdHJ1ZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc3Vic2NyaWJlU29ja2V0Q2xvc2VkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlU29ja2V0Q2xvc2VkKG9wZW5lZFNvY2tldElkKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Tb2NrZXRDbG9zZWQgPSB0aGlzLmQxaW5zdC5zdWJzY3JpYmUoe1xuXHRcdFx0XHRzZXJ2aWNlOiAnU29ja2V0SGFuZGxlcicsXG5cdFx0XHRcdGZ1bmM6ICdTb2NrZXRJc0Nsb3NlZCdcblx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoZXJyID09IG51bGwgJiYgZGF0YSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGFbMF0gPT09IG9wZW5lZFNvY2tldElkKSBfdGhpczMuZDFpbnN0Lm9uU29ja2V0Q2xvc2VkKGRhdGFbMF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF90aGlzMy5kaXNjb25uZWN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3RoaXMzLnN1YnNjcmlwdGlvblNvY2tldENsb3NlZC5jbG9zZSgpO1xuXHRcdFx0XHRfdGhpczMuc3Vic2NyaXB0aW9uU29ja2V0Q2xvc2VkID0gbnVsbDtcblx0XHRcdFx0X3RoaXMzLmQxaW5zdCA9IG51bGw7XG5cdFx0XHRcdF90aGlzMy5zb2NrZXROYW1lID0gbnVsbDtcblx0XHRcdFx0X3RoaXMzLnNvY2tldElkID0gbnVsbDtcblx0XHRcdFx0X3RoaXMzLnBlZXJJZCA9IG51bGw7XG5cdFx0XHRcdF90aGlzMy5mbGFnU29ja2V0SXNEZWFkID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBEaXlhU29ja2V0O1xufShUcmFuc2Zvcm0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpeWFTb2NrZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JwZVdGVGIyTnJaWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lWSEpoYm5ObWIzSnRJaXdpY21WeGRXbHlaU0lzSWtScGVXRlRiMk5yWlhRaUxDSmtNV2x1YzNRaUxDSndZWEpoYlhNaUxDSnZjSFJwYjI1eklpd2ljMjlqYTJWMFRtRnRaU0lzSW5OdlkydGxkRWxrSWl3aWNHVmxja2xrSWl3aWRHRnlaMlYwSWl3aVpteGhaMU52WTJ0bGRFbHpSR1ZoWkNJc0luTjFZbk5qY21sd2RHbHZibE52WTJ0bGRFTnNiM05sWkNJc0ltTm9kVzVySWl3aVpXNWpiMlJwYm1jaUxDSmpZV3hzWW1GamF5SXNJbVJoZEdFaUxDSnpiMk5yWlhSQ2RXWm1aWElpTENKMGIxTjBjbWx1WnlJc0luTmxibVJUYjJOclpYUkVZWFJoSWl3aVpXNWtJaXdpY21WeGRXVnpkQ0lzSW5ObGNuWnBZMlVpTENKbWRXNWpJaXdpYzI5amEyVjBYMmxrSWl3aVpYSnlJaXdpYjNCbGJtVmtVMjlqYTJWMFNXUWlMQ0p6ZFdKelkzSnBZbVVpTENKdmJsTnZZMnRsZEVOc2IzTmxaQ0lzSW1ScGMyTnZibTVsWTNRaUxDSmpiRzl6WlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFTeEpRVUZOUVN4WlFVRlpReXhSUVVGUkxGRkJRVklzUlVGQmEwSkVMRk5CUVhCRE96dEpRVVZOUlN4Vk96czdRVUZEVEN4eFFrRkJXVU1zVFVGQldpeEZRVUZ2UWtNc1RVRkJjRUlzUlVGQk5FSkRMRTlCUVRWQ0xFVkJRWEZETzBGQlFVRTdPMEZCUVVFc2MwaEJRemxDUVN4UFFVUTRRanM3UVVGRmNFTXNVVUZCUzBZc1RVRkJUQ3hIUVVGalFTeE5RVUZrTzBGQlEwRXNVVUZCUzBjc1ZVRkJUQ3hIUVVGclFrWXNUMEZCVDBVc1ZVRkJla0k3UVVGRFFTeFJRVUZMUXl4UlFVRk1MRWRCUVdkQ1NDeFBRVUZQUnl4UlFVRjJRanRCUVVOQkxGRkJRVXRETEUxQlFVd3NSMEZCWTBvc1QwRkJUMHNzVFVGQmNrSTdRVUZEUVN4UlFVRkxReXhuUWtGQlRDeEhRVUYzUWl4TFFVRjRRanRCUVVOQkxGRkJRVXRETEhkQ1FVRk1MRWRCUVdkRExFbEJRV2hETzBGQlVHOURPMEZCVVhCRE96czdPM2xDUVVWTlF5eExMRVZCUVU5RExGRXNSVUZCVlVNc1VTeEZRVUZWTzBGQlEycERMRTlCUVVrc1MwRkJTMG9zWjBKQlFVd3NTMEZCTUVJc1MwRkJPVUlzUlVGQmNVTTdRVUZEY0VNc1VVRkJTVTRzVTBGQlV6dEJRVU5hVnl4WFFVRk5PMEZCUTB4U0xHZENRVUZWTEV0QlFVdEJMRkZCUkZZN1FVRkZURk1zYjBKQlFXTktMRTFCUVUxTExGRkJRVTRzUTBGQlpTeFJRVUZtTzBGQlJsUXNUVUZFVFN4RlFVbFVVaXhSUVVGUkxFdEJRVXRFTzBGQlNrb3NTMEZCWWp0QlFVMUJMRk5CUVV0TUxFMUJRVXdzUTBGQldXVXNZMEZCV2l4RFFVRXlRbVFzVFVGQk0wSTdRVUZEUVR0QlFVTkVWVHRCUVVOQk96czdLMEpCUlZrN1FVRkJRVHM3UVVGRFdpeFBRVUZKTEV0QlFVdEtMR2RDUVVGTUxFdEJRVEJDTEV0QlFUbENMRVZCUVhGRE8wRkJRM0JETEZOQlFVdFRMRWRCUVV3N1FVRkRRU3hUUVVGTGFFSXNUVUZCVEN4RFFVRlphVUlzVDBGQldpeERRVUZ2UWp0QlFVTnVRa01zWTBGQlV5eGxRVVJWTzBGQlJXNUNReXhYUVVGTkxHdENRVVpoTzBGQlIyNUNVQ3hYUVVGTk8wRkJRMHhSTEdsQ1FVRlhMRXRCUVV0b1FqdEJRVVJZTzBGQlNHRXNTMEZCY0VJc1JVRk5SeXhWUVVGRFF5eE5RVUZFTEVWQlFWTm5RaXhIUVVGVUxFVkJRV05VTEVsQlFXUXNSVUZCZFVJN1FVRkRla0lzV1VGQlMwd3NaMEpCUVV3c1IwRkJkMElzU1VGQmVFSTdRVUZEUVN4TFFWSkVPMEZCVTBFN1FVRkRSRHM3TzNkRFFVVnhRbVVzWXl4RlFVRm5RanRCUVVGQk96dEJRVU55UXl4UlFVRkxaQ3gzUWtGQlRDeEhRVUZuUXl4TFFVRkxVaXhOUVVGTUxFTkJRVmwxUWl4VFFVRmFMRU5CUVhOQ08wRkJRM0pFVEN4aFFVRlRMR1ZCUkRSRE8wRkJSWEpFUXl4VlFVRk5PMEZCUml0RExFbEJRWFJDTEVWQlJ6ZENMRlZCUVVOa0xFMUJRVVFzUlVGQlUyZENMRWRCUVZRc1JVRkJZMVFzU1VGQlpDeEZRVUYxUWp0QlFVTjZRaXhSUVVGSlV5eFBRVUZQTEVsQlFWQXNTVUZCWlZRc1VVRkJVU3hKUVVFelFpeEZRVUZwUXp0QlFVTm9ReXhUUVVGSlFTeExRVUZMTEVOQlFVd3NUVUZCV1ZVc1kwRkJhRUlzUlVGQlowTXNUMEZCUzNSQ0xFMUJRVXdzUTBGQldYZENMR05CUVZvc1EwRkJNa0phTEV0QlFVc3NRMEZCVEN4RFFVRXpRanRCUVVOb1F5eExRVVpFTEUxQlJVODdRVUZEVGl4WlFVRkxZU3hWUVVGTU8wRkJRMEU3UVVGRFJDeFhRVUZMYWtJc2QwSkJRVXdzUTBGQk9FSnJRaXhMUVVFNVFqdEJRVU5CTEZkQlFVdHNRaXgzUWtGQlRDeEhRVUZuUXl4SlFVRm9RenRCUVVOQkxGZEJRVXRTTEUxQlFVd3NSMEZCWXl4SlFVRmtPMEZCUTBFc1YwRkJTMGNzVlVGQlRDeEhRVUZyUWl4SlFVRnNRanRCUVVOQkxGZEJRVXRETEZGQlFVd3NSMEZCWjBJc1NVRkJhRUk3UVVGRFFTeFhRVUZMUXl4TlFVRk1MRWRCUVdNc1NVRkJaRHRCUVVOQkxGZEJRVXRGTEdkQ1FVRk1MRWRCUVhkQ0xFbEJRWGhDTzBGQlEwRXNTVUZvUWl0Q0xFTkJRV2hETzBGQmFVSkJPenM3TzBWQmVrUjFRbFlzVXpzN1FVRTBSSHBDT0VJc1QwRkJUME1zVDBGQlVDeEhRVUZwUWpkQ0xGVkJRV3BDSWl3aVptbHNaU0k2SWtScGVXRlRiMk5yWlhRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQlVjbUZ1YzJadmNtMGdQU0J5WlhGMWFYSmxLQ2R6ZEhKbFlXMG5LUzVVY21GdWMyWnZjbTA3WEc1Y2JtTnNZWE56SUVScGVXRlRiMk5yWlhRZ1pYaDBaVzVrY3lCVWNtRnVjMlp2Y20wZ2UxeHVYSFJqYjI1emRISjFZM1J2Y2loa01XbHVjM1FzSUhCaGNtRnRjeXdnYjNCMGFXOXVjeWtnZTF4dVhIUmNkSE4xY0dWeUtHOXdkR2x2Ym5NcE8xeHVYSFJjZEhSb2FYTXVaREZwYm5OMElEMGdaREZwYm5OME8xeHVYSFJjZEhSb2FYTXVjMjlqYTJWMFRtRnRaU0E5SUhCaGNtRnRjeTV6YjJOclpYUk9ZVzFsTzF4dVhIUmNkSFJvYVhNdWMyOWphMlYwU1dRZ1BTQndZWEpoYlhNdWMyOWphMlYwU1dRN1hHNWNkRngwZEdocGN5NXdaV1Z5U1dRZ1BTQndZWEpoYlhNdWRHRnlaMlYwTzF4dVhIUmNkSFJvYVhNdVpteGhaMU52WTJ0bGRFbHpSR1ZoWkNBOUlHWmhiSE5sTzF4dVhIUmNkSFJvYVhNdWMzVmljMk55YVhCMGFXOXVVMjlqYTJWMFEyeHZjMlZrSUQwZ2JuVnNiRHRjYmx4MGZWeHVYRzVjZEY5M2NtbDBaU2hqYUhWdWF5d2daVzVqYjJScGJtY3NJR05oYkd4aVlXTnJLU0I3WEc1Y2RGeDBhV1lnS0hSb2FYTXVabXhoWjFOdlkydGxkRWx6UkdWaFpDQTlQVDBnWm1Gc2MyVXBJSHRjYmx4MFhIUmNkR3hsZENCd1lYSmhiWE1nUFNCN1hHNWNkRngwWEhSY2RHUmhkR0U2SUh0Y2JseDBYSFJjZEZ4MFhIUnpiMk5yWlhSSlpEb2dkR2hwY3k1emIyTnJaWFJKWkN4Y2JseDBYSFJjZEZ4MFhIUnpiMk5yWlhSQ2RXWm1aWEk2SUdOb2RXNXJMblJ2VTNSeWFXNW5LQ2RpWVhObE5qUW5LU3hjYmx4MFhIUmNkRngwZlN3Z2RHRnlaMlYwT2lCMGFHbHpMbkJsWlhKSlpGeHVYSFJjZEZ4MGZUdGNibHgwWEhSY2RIUm9hWE11WkRGcGJuTjBMbk5sYm1SVGIyTnJaWFJFWVhSaEtIQmhjbUZ0Y3lrN1hHNWNkRngwZlZ4dVhIUmNkR05oYkd4aVlXTnJLQ2s3WEc1Y2RIMWNibHh1WEhSa2FYTmpiMjV1WldOMEtDa2dlMXh1WEhSY2RHbG1JQ2gwYUdsekxtWnNZV2RUYjJOclpYUkpjMFJsWVdRZ1BUMDlJR1poYkhObEtTQjdYRzVjZEZ4MFhIUjBhR2x6TG1WdVpDZ3BPMXh1WEhSY2RGeDBkR2hwY3k1a01XbHVjM1F1Y21WeGRXVnpkQ2g3WEc1Y2RGeDBYSFJjZEhObGNuWnBZMlU2SUNkemIyTnJaWFJJWVc1a2JHVnlKeXhjYmx4MFhIUmNkRngwWm5WdVl6b2dKMFJwYzJOdmJtNWxZM1JEYkdsbGJuUW5MRnh1WEhSY2RGeDBYSFJrWVhSaE9pQjdYRzVjZEZ4MFhIUmNkRngwYzI5amEyVjBYMmxrT2lCMGFHbHpMbk52WTJ0bGRFbGtYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBzSUNod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNrZ1BUNGdlMXh1WEhSY2RGeDBYSFIwYUdsekxtWnNZV2RUYjJOclpYUkpjMFJsWVdRZ1BTQjBjblZsWEc1Y2RGeDBYSFI5S1Z4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEhOMVluTmpjbWxpWlZOdlkydGxkRU5zYjNObFpDaHZjR1Z1WldSVGIyTnJaWFJKWkNrZ2UxeHVYSFJjZEhSb2FYTXVjM1ZpYzJOeWFYQjBhVzl1VTI5amEyVjBRMnh2YzJWa0lEMGdkR2hwY3k1a01XbHVjM1F1YzNWaWMyTnlhV0psS0h0Y2JseDBYSFJjZEhObGNuWnBZMlU2SUNkVGIyTnJaWFJJWVc1a2JHVnlKeXhjYmx4MFhIUmNkR1oxYm1NNklDZFRiMk5yWlhSSmMwTnNiM05sWkNkY2JseDBYSFI5TENBb2NHVmxja2xrTENCbGNuSXNJR1JoZEdFcElEMCtJSHRjYmx4MFhIUmNkR2xtSUNobGNuSWdQVDBnYm5Wc2JDQW1KaUJrWVhSaElDRTlJRzUxYkd3cElIdGNibHgwWEhSY2RGeDBhV1lnS0dSaGRHRmJNRjBnUFQwOUlHOXdaVzVsWkZOdlkydGxkRWxrS1NCMGFHbHpMbVF4YVc1emRDNXZibE52WTJ0bGRFTnNiM05sWkNoa1lYUmhXekJkS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVaR2x6WTI5dWJtVmpkQ2dwWEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFIwYUdsekxuTjFZbk5qY21sd2RHbHZibE52WTJ0bGRFTnNiM05sWkM1amJHOXpaU2dwTzF4dVhIUmNkRngwZEdocGN5NXpkV0p6WTNKcGNIUnBiMjVUYjJOclpYUkRiRzl6WldRZ1BTQnVkV3hzTzF4dVhIUmNkRngwZEdocGN5NWtNV2x1YzNRZ1BTQnVkV3hzTzF4dVhIUmNkRngwZEdocGN5NXpiMk5yWlhST1lXMWxJRDBnYm5Wc2JEdGNibHgwWEhSY2RIUm9hWE11YzI5amEyVjBTV1FnUFNCdWRXeHNPMXh1WEhSY2RGeDBkR2hwY3k1d1pXVnlTV1FnUFNCdWRXeHNPMXh1WEhSY2RGeDBkR2hwY3k1bWJHRm5VMjlqYTJWMFNYTkVaV0ZrSUQwZ2JuVnNiRHRjYmx4MFhIUjlLVnh1WEhSOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUkdsNVlWTnZZMnRsZER0Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBpc0Jyb3dzZXIgPSAhKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcblxuaWYgKCFpc0Jyb3dzZXIpIHtcblxuXHR2YXIgUSA9IHJlcXVpcmUoJ3EnKTtcblx0dmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXHR2YXIgSlNPTlNvY2tldCA9IHJlcXVpcmUoJ2pzb24tc29ja2V0Jyk7XG5cdHZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlLWV2ZW50LWVtaXR0ZXInKTtcblxuXHR2YXIgVU5JWFNvY2tldEhhbmRsZXIgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuXHRcdF9pbmhlcml0cyhVTklYU29ja2V0SGFuZGxlciwgX0V2ZW50RW1pdHRlcik7XG5cblx0XHRmdW5jdGlvbiBVTklYU29ja2V0SGFuZGxlcihhZGRyLCBjb25uZWN0VGltZW91dCkge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVOSVhTb2NrZXRIYW5kbGVyKTtcblxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFVOSVhTb2NrZXRIYW5kbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVU5JWFNvY2tldEhhbmRsZXIpKS5jYWxsKHRoaXMpKTtcblxuXHRcdFx0X3RoaXMuYWRkciA9IGFkZHI7XG5cblx0XHRcdF90aGlzLl9zb2NrZXQgPSBuZXcgSlNPTlNvY2tldChuZXcgbmV0LlNvY2tldCgpKTtcblx0XHRcdF90aGlzLl9zb2NrZXQuY29ubmVjdChfdGhpcy5hZGRyKTtcblxuXHRcdFx0Ly8gU3RvcmUgY2FsbGJhY2sgc28gdGhhdCB3ZSBjYW4gdW5yZWdpc3RlciB0aGVtIGxhdGVyXG5cdFx0XHRfdGhpcy5fc29ja2V0T3BlbkNhbGxiYWNrID0gX3RoaXMuX29ub3Blbi5iaW5kKF90aGlzKTtcblx0XHRcdF90aGlzLl9zb2NrZXRDbG9zZUNhbGxiYWNrID0gX3RoaXMuX29uY2xvc2UuYmluZChfdGhpcyk7XG5cdFx0XHRfdGhpcy5fc29ja2V0TWVzc2FnZUNhbGxiYWNrID0gX3RoaXMuX29ubWVzc2FnZS5iaW5kKF90aGlzKTtcblx0XHRcdF90aGlzLl9zb2NrZXRFcnJvckNhbGxiYWNrID0gX3RoaXMuX29uZXJyb3IuYmluZChfdGhpcyk7XG5cblx0XHRcdF90aGlzLl9zb2NrZXQub24oJ2Nvbm5lY3QnLCBfdGhpcy5fc29ja2V0T3BlbkNhbGxiYWNrKTtcblx0XHRcdF90aGlzLl9zb2NrZXQuX3NvY2tldC5vbignY2xvc2UnLCBfdGhpcy5fc29ja2V0Q2xvc2VDYWxsYmFjayk7XG5cdFx0XHRfdGhpcy5fc29ja2V0Lm9uKCdtZXNzYWdlJywgX3RoaXMuX3NvY2tldE1lc3NhZ2VDYWxsYmFjayk7XG5cdFx0XHRfdGhpcy5fc29ja2V0Ll9zb2NrZXQub24oJ2Vycm9yJywgX3RoaXMuX3NvY2tldEVycm9yQ2FsbGJhY2spO1xuXG5cdFx0XHQvLyBDcmVhdGUgdGltZW91dCB0byBhYm9yZCBjb25uZWN0aW9uZ1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoXykge1xuXHRcdFx0XHQvLyBXaGUgbnRpbWUgdGltZXMgb3V0LCBpZiB0aGUgc29ja2V0IGlzIG9wZW5lZCwgc2ltcGx5IHJldHVyblxuXHRcdFx0XHRpZiAoX3RoaXMuX3N0YXR1cyA9PT0gJ29wZW5lZCcpIHJldHVybjtcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBhYm9yZFxuXHRcdFx0XHRpZiAoX3RoaXMuX3N0YXR1cyAhPT0gJ2Nsb3NlZCcpIHtcblx0XHRcdFx0XHRMb2dnZXIubG9nKCdkMTogJyArIHRoYXQuYWRkciArICcgdGltZWQgb3V0IHdoaWxlIGNvbm5lY3RpbmcnKTtcblx0XHRcdFx0XHRfdGhpcy5jbG9zZSgpO1xuXHRcdFx0XHRcdF90aGlzLmVtaXQoJ3RpbWVvdXQnLCBfdGhpcy5fc29ja2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgY29ubmVjdFRpbWVvdXQpO1xuXHRcdFx0cmV0dXJuIF90aGlzO1xuXHRcdH1cblxuXHRcdF9jcmVhdGVDbGFzcyhVTklYU29ja2V0SGFuZGxlciwgW3tcblx0XHRcdGtleTogJ2Nsb3NlJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZCAmJiB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZSkgcmV0dXJuIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlO1xuXG5cdFx0XHRcdHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZCA9IFEuZGVmZXIoKTtcblx0XHRcdFx0dGhpcy5fc3RhdHVzID0gJ2Nsb3NpbmcnO1xuXG5cdFx0XHRcdHRoaXMuZW1pdCgnY2xvc2luZycsIHRoaXMuX3NvY2tldCk7XG5cblx0XHRcdFx0aWYgKHRoaXMuX3NvY2tldCkgdGhpcy5fc29ja2V0LmVuZCgpO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucHJvbWlzZTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBTZW5kIGEgSlNPTi1mb3JtYXR0ZWQgbWVzc2FnZSB0aHJvdWdoIHRoZSBzb2NrZXRcbiAgICAqIEBwYXJhbSB7SlNPTn0gbXNnIFRoZSBKU09OIHRvIHNlbmQgKGRvIG5vdCBzdHJpbmdpZnkgaXQsIGpzb24tc29ja2V0IHdpbGwgZG8gaXQpXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3NlbmQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHNlbmQobXNnKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dGhpcy5fc29ja2V0LnNlbmRNZXNzYWdlKG1zZyk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBzZW5kIG1lc3NhZ2U6ICcgKyBlcnIubWVzc2FnZSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnaXNDb25uZWN0ZWQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGlzQ29ubmVjdGVkKCkge1xuXHRcdFx0XHRyZXR1cm4gIXRoaXMuX3NvY2tldC5pc0Nsb3NlZCgpICYmIHRoaXMuX3N0YXR1cyA9PT0gJ29wZW5lZCc7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnX29ub3BlbicsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gX29ub3BlbigpIHtcblx0XHRcdFx0dGhpcy5fc3RhdHVzID0gJ29wZW5lZCc7XG5cdFx0XHRcdHRoaXMuZW1pdCgnb3BlbicsIHRoaXMuX3NvY2tldCk7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnX29uY2xvc2UnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIF9vbmNsb3NlKCkge1xuXHRcdFx0XHR0aGlzLl9zdGF0dXMgPSAnY2xvc2VkJztcblx0XHRcdFx0dGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzKCk7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2xvc2UnLCB0aGlzLl9zb2NrZXQpO1xuXHRcdFx0XHRpZiAodGhpcy5fZGlzY29ubmVjdGlvbkRlZmVycmVkICYmIHRoaXMuX2Rpc2Nvbm5lY3Rpb25EZWZlcnJlZC5wcm9taXNlKSB0aGlzLl9kaXNjb25uZWN0aW9uRGVmZXJyZWQucmVzb2x2ZSgpO1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdGtleTogJ19vbm1lc3NhZ2UnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIF9vbm1lc3NhZ2UobXNnKSB7XG5cdFx0XHRcdC8vIFRoZSBtZXNzYWdlIGlzIGFscmVhZHkgYSBKU09OXG5cdFx0XHRcdHRoaXMuZW1pdCgnbWVzc2FnZScsIG1zZyk7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnX29uZXJyb3InLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIF9vbmVycm9yKGVycikge1xuXHRcdFx0XHR0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICd1bnJlZ2lzdGVyQ2FsbGJhY2tzJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyQ2FsbGJhY2tzKCkge1xuXHRcdFx0XHRpZiAodGhpcy5fc29ja2V0ICYmIHR5cGVvZiB0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMuX3NvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdvcGVuJywgdGhpcy5fc29ja2V0T3BlbkNhbGxiYWNrKTtcblx0XHRcdFx0XHR0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xvc2UnLCB0aGlzLl9zb2NrZXRDbG9zZUNhbGxiYWNrKTtcblx0XHRcdFx0XHR0aGlzLl9zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX3NvY2tldE1lc3NhZ2VDYWxsYmFjayk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fc29ja2V0ICYmIHR5cGVvZiB0aGlzLl9zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5fc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIFVOSVhTb2NrZXRIYW5kbGVyO1xuXHR9KEV2ZW50RW1pdHRlcik7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBVTklYU29ja2V0SGFuZGxlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsVk9TVmhUYjJOclpYUklZVzVrYkdWeUxtcHpJbDBzSW01aGJXVnpJanBiSW1selFuSnZkM05sY2lJc0luZHBibVJ2ZHlJc0lsRWlMQ0p5WlhGMWFYSmxJaXdpYm1WMElpd2lTbE5QVGxOdlkydGxkQ0lzSWtWMlpXNTBSVzFwZEhSbGNpSXNJbFZPU1ZoVGIyTnJaWFJJWVc1a2JHVnlJaXdpWVdSa2NpSXNJbU52Ym01bFkzUlVhVzFsYjNWMElpd2lYM052WTJ0bGRDSXNJbE52WTJ0bGRDSXNJbU52Ym01bFkzUWlMQ0pmYzI5amEyVjBUM0JsYmtOaGJHeGlZV05ySWl3aVgyOXViM0JsYmlJc0ltSnBibVFpTENKZmMyOWphMlYwUTJ4dmMyVkRZV3hzWW1GamF5SXNJbDl2Ym1Oc2IzTmxJaXdpWDNOdlkydGxkRTFsYzNOaFoyVkRZV3hzWW1GamF5SXNJbDl2Ym0xbGMzTmhaMlVpTENKZmMyOWphMlYwUlhKeWIzSkRZV3hzWW1GamF5SXNJbDl2Ym1WeWNtOXlJaXdpYjI0aUxDSnpaWFJVYVcxbGIzVjBJaXdpWDNOMFlYUjFjeUlzSWt4dloyZGxjaUlzSW14dlp5SXNJblJvWVhRaUxDSmpiRzl6WlNJc0ltVnRhWFFpTENKZlpHbHpZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtJaXdpY0hKdmJXbHpaU0lzSW1SbFptVnlJaXdpWlc1a0lpd2liWE5uSWl3aWMyVnVaRTFsYzNOaFoyVWlMQ0psY25JaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSnRaWE56WVdkbElpd2lhWE5EYkc5elpXUWlMQ0oxYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnR6SWl3aWNtVnpiMngyWlNJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3T3p0QlFVVkJMRWxCUVVsQkxGbEJRVmtzUlVGQlJTeFBRVUZQUXl4TlFVRlFMRXRCUVd0Q0xGZEJRWEJDTEVOQlFXaENPenRCUVVWQkxFbEJRVWtzUTBGQlEwUXNVMEZCVEN4RlFVRm5RanM3UVVGRlppeExRVUZOUlN4SlFVRmxReXhSUVVGUkxFZEJRVklzUTBGQmNrSTdRVUZEUVN4TFFVRk5ReXhOUVVGbFJDeFJRVUZUTEV0QlFWUXNRMEZCY2tJN1FVRkRRU3hMUVVGTlJTeGhRVUZsUml4UlFVRlRMR0ZCUVZRc1EwRkJja0k3UVVGRFFTeExRVUZOUnl4bFFVRmxTQ3hSUVVGVExHOUNRVUZVTEVOQlFYSkNPenRCUVV4bExFdEJUMVJKTEdsQ1FWQlRPMEZCUVVFN08wRkJVV1FzTmtKQlFXRkRMRWxCUVdJc1JVRkJiVUpETEdOQlFXNUNMRVZCUVcxRE8wRkJRVUU3TzBGQlFVRTdPMEZCUld4RExGTkJRVXRFTEVsQlFVd3NSMEZCV1VFc1NVRkJXanM3UVVGRlFTeFRRVUZMUlN4UFFVRk1MRWRCUVdVc1NVRkJTVXdzVlVGQlNpeERRVUZsTEVsQlFVbEVMRWxCUVVsUExFMUJRVklzUlVGQlppeERRVUZtTzBGQlEwRXNVMEZCUzBRc1QwRkJUQ3hEUVVGaFJTeFBRVUZpTEVOQlFYRkNMRTFCUVV0S0xFbEJRVEZDT3p0QlFVVkJPMEZCUTBFc1UwRkJTMHNzYlVKQlFVd3NSMEZCTWtJc1RVRkJTME1zVDBGQlRDeERRVUZoUXl4SlFVRmlMRTlCUVROQ08wRkJRMEVzVTBGQlMwTXNiMEpCUVV3c1IwRkJORUlzVFVGQlMwTXNVVUZCVEN4RFFVRmpSaXhKUVVGa0xFOUJRVFZDTzBGQlEwRXNVMEZCUzBjc2MwSkJRVXdzUjBGQk9FSXNUVUZCUzBNc1ZVRkJUQ3hEUVVGblFrb3NTVUZCYUVJc1QwRkJPVUk3UVVGRFFTeFRRVUZMU3l4dlFrRkJUQ3hIUVVFMFFpeE5RVUZMUXl4UlFVRk1MRU5CUVdOT0xFbEJRV1FzVDBGQk5VSTdPMEZCUlVFc1UwRkJTMHdzVDBGQlRDeERRVUZoV1N4RlFVRmlMRU5CUVdkQ0xGTkJRV2hDTEVWQlFUSkNMRTFCUVV0VUxHMUNRVUZvUXp0QlFVTkJMRk5CUVV0SUxFOUJRVXdzUTBGQllVRXNUMEZCWWl4RFFVRnhRbGtzUlVGQmNrSXNRMEZCZDBJc1QwRkJlRUlzUlVGQlowTXNUVUZCUzA0c2IwSkJRWEpETzBGQlEwRXNVMEZCUzA0c1QwRkJUQ3hEUVVGaFdTeEZRVUZpTEVOQlFXZENMRk5CUVdoQ0xFVkJRVEpDTEUxQlFVdEtMSE5DUVVGb1F6dEJRVU5CTEZOQlFVdFNMRTlCUVV3c1EwRkJZVUVzVDBGQllpeERRVUZ4UWxrc1JVRkJja0lzUTBGQmQwSXNUMEZCZUVJc1JVRkJhVU1zVFVGQlMwWXNiMEpCUVhSRE96dEJRVVZCTzBGQlEwRkhMR05CUVZjc1lVRkJTenRCUVVObU8wRkJRMEVzVVVGQlNTeE5RVUZMUXl4UFFVRk1MRXRCUVdsQ0xGRkJRWEpDTEVWQlEwTTdRVUZEUkR0QlFVTkJMRkZCUVVrc1RVRkJTMEVzVDBGQlRDeExRVUZwUWl4UlFVRnlRaXhGUVVFNFFqdEJRVU0zUWtNc1dVRkJUME1zUjBGQlVDeERRVUZYTEZOQlFWTkRMRXRCUVV0dVFpeEpRVUZrTEVkQlFYRkNMRFpDUVVGb1F6dEJRVU5CTEZkQlFVdHZRaXhMUVVGTU8wRkJRMEVzVjBGQlMwTXNTVUZCVEN4RFFVRlZMRk5CUVZZc1JVRkJjVUlzVFVGQlMyNUNMRTlCUVRGQ08wRkJRMEU3UVVGRFJDeEpRVlpFTEVWQlZVZEVMR05CVmtnN1FVRnVRbXRETzBGQk9FSnNRenM3UVVGMFEyRTdRVUZCUVR0QlFVRkJMREpDUVhkRFREdEJRVU5TTEZGQlFVa3NTMEZCUzNGQ0xITkNRVUZNTEVsQlFTdENMRXRCUVV0QkxITkNRVUZNTEVOQlFUUkNReXhQUVVFdlJDeEZRVU5ETEU5QlFVOHNTMEZCUzBRc2MwSkJRVXdzUTBGQk5FSkRMRTlCUVc1RE96dEJRVVZFTEZOQlFVdEVMSE5DUVVGTUxFZEJRVGhDTlVJc1JVRkJSVGhDTEV0QlFVWXNSVUZCT1VJN1FVRkRRU3hUUVVGTFVpeFBRVUZNTEVkQlFXVXNVMEZCWmpzN1FVRkZRU3hUUVVGTFN5eEpRVUZNTEVOQlFWVXNVMEZCVml4RlFVRnhRaXhMUVVGTGJrSXNUMEZCTVVJN08wRkJSVUVzVVVGQlNTeExRVUZMUVN4UFFVRlVMRVZCUTBNc1MwRkJTMEVzVDBGQlRDeERRVUZoZFVJc1IwRkJZanM3UVVGRlJDeFhRVUZQTEV0QlFVdElMSE5DUVVGTUxFTkJRVFJDUXl4UFFVRnVRenRCUVVOQk96dEJRVVZFT3pzN096dEJRWFpFWXp0QlFVRkJPMEZCUVVFc2QwSkJNa1JTUnl4SFFUTkVVU3hGUVRKRVNEdEJRVU5XTEZGQlFVazdRVUZEU0N4VlFVRkxlRUlzVDBGQlRDeERRVUZoZVVJc1YwRkJZaXhEUVVGNVFrUXNSMEZCZWtJN1FVRkRRU3hMUVVaRUxFTkJSVVVzVDBGQlRVVXNSMEZCVGl4RlFVRlZPMEZCUTFoRExHRkJRVkZETEV0QlFWSXNRMEZCWXl3d1FrRkJNRUpHTEVsQlFVbEhMRTlCUVRWRE8wRkJRMEVzV1VGQlR5eExRVUZRTzBGQlEwRTdPMEZCUlVRc1YwRkJUeXhKUVVGUU8wRkJRMEU3UVVGd1JXRTdRVUZCUVR0QlFVRkJMR2xEUVhORlF6dEJRVU5rTEZkQlFVOHNRMEZCUXl4TFFVRkxOMElzVDBGQlRDeERRVUZoT0VJc1VVRkJZaXhGUVVGRUxFbEJRVFJDTEV0QlFVdG9RaXhQUVVGTUxFdEJRV2xDTEZGQlFYQkVPMEZCUTBFN1FVRjRSV0U3UVVGQlFUdEJRVUZCTERaQ1FUQkZTRHRCUVVOV0xGTkJRVXRCTEU5QlFVd3NSMEZCWlN4UlFVRm1PMEZCUTBFc1UwRkJTMHNzU1VGQlRDeERRVUZWTEUxQlFWWXNSVUZCYTBJc1MwRkJTMjVDTEU5QlFYWkNPMEZCUTBFN1FVRTNSV0U3UVVGQlFUdEJRVUZCTERoQ1FTdEZSanRCUVVOWUxGTkJRVXRqTEU5QlFVd3NSMEZCWlN4UlFVRm1PMEZCUTBFc1UwRkJTMmxDTEcxQ1FVRk1PMEZCUTBFc1UwRkJTMW9zU1VGQlRDeERRVUZWTEU5QlFWWXNSVUZCYlVJc1MwRkJTMjVDTEU5QlFYaENPMEZCUTBFc1VVRkJTU3hMUVVGTGIwSXNjMEpCUVV3c1NVRkJLMElzUzBGQlMwRXNjMEpCUVV3c1EwRkJORUpETEU5QlFTOUVMRVZCUTBNc1MwRkJTMFFzYzBKQlFVd3NRMEZCTkVKWkxFOUJRVFZDTzBGQlEwUTdRVUZ5Um1FN1FVRkJRVHRCUVVGQkxEaENRWFZHUmxJc1IwRjJSa1VzUlVGMVJrYzdRVUZEYUVJN1FVRkRRU3hUUVVGTFRDeEpRVUZNTEVOQlFWVXNVMEZCVml4RlFVRnhRa3NzUjBGQmNrSTdRVUZEUVR0QlFURkdZVHRCUVVGQk8wRkJRVUVzTkVKQk5FWktSU3hIUVRWR1NTeEZRVFJHUXp0QlFVTmtMRk5CUVV0UUxFbEJRVXdzUTBGQlZTeFBRVUZXTEVWQlFXMUNUeXhIUVVGdVFqdEJRVU5CTzBGQk9VWmhPMEZCUVVFN1FVRkJRU3g1UTBGblIxTTdRVUZEZEVJc1VVRkJTU3hMUVVGTE1VSXNUMEZCVEN4SlFVRnBRaXhQUVVGUExFdEJRVXRCTEU5QlFVd3NRMEZCWVdsRExHMUNRVUZ3UWl4TFFVRTBReXhWUVVGcVJTeEZRVUU0UlR0QlFVTTNSU3hWUVVGTGFrTXNUMEZCVEN4RFFVRmhhVU1zYlVKQlFXSXNRMEZCYVVNc1RVRkJha01zUlVGQmVVTXNTMEZCU3psQ0xHMUNRVUU1UXp0QlFVTkJMRlZCUVV0SUxFOUJRVXdzUTBGQllXbERMRzFDUVVGaUxFTkJRV2xETEU5QlFXcERMRVZCUVRCRExFdEJRVXN6UWl4dlFrRkJMME03UVVGRFFTeFZRVUZMVGl4UFFVRk1MRU5CUVdGcFF5eHRRa0ZCWWl4RFFVRnBReXhUUVVGcVF5eEZRVUUwUXl4TFFVRkxla0lzYzBKQlFXcEVPMEZCUTBFc1MwRktSQ3hOUVVsUExFbEJRVWtzUzBGQlMxSXNUMEZCVEN4SlFVRnBRaXhQUVVGUExFdEJRVXRCTEU5QlFVd3NRMEZCWVd0RExHdENRVUZ3UWl4TFFVRXlReXhWUVVGb1JTeEZRVUUyUlR0QlFVTnVSaXhWUVVGTGJFTXNUMEZCVEN4RFFVRmhhME1zYTBKQlFXSTdRVUZEUVR0QlFVTkVPMEZCZUVkaE96dEJRVUZCTzBGQlFVRXNSMEZQYVVKMFF5eFpRVkJxUWpzN1FVRXlSMloxUXl4UlFVRlBReXhQUVVGUUxFZEJRV2xDZGtNc2FVSkJRV3BDTzBGQlEwRWlMQ0ptYVd4bElqb2lWVTVKV0ZOdlkydGxkRWhoYm1Sc1pYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJbmRYTmxJSE4wY21samRDYzdYRzVjYm14bGRDQnBjMEp5YjNkelpYSWdQU0FoS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkMWJtUmxabWx1WldRbktWeHVYRzVwWmlBb0lXbHpRbkp2ZDNObGNpa2dlMXh1WEc1Y2RHTnZibk4wSUZFZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KM0VuS1Z4dVhIUmpiMjV6ZENCdVpYUWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxJQ2duYm1WMEp5bGNibHgwWTI5dWMzUWdTbE5QVGxOdlkydGxkQ0FnSUQwZ2NtVnhkV2x5WlNBb0oycHpiMjR0YzI5amEyVjBKeWxjYmx4MFkyOXVjM1FnUlhabGJuUkZiV2wwZEdWeUlEMGdjbVZ4ZFdseVpTQW9KMjV2WkdVdFpYWmxiblF0WlcxcGRIUmxjaWNwWEc1Y2JseDBZMnhoYzNNZ1ZVNUpXRk52WTJ0bGRFaGhibVJzWlhJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1WEhSY2RHTnZibk4wY25WamRHOXlJQ2hoWkdSeUxDQmpiMjV1WldOMFZHbHRaVzkxZENrZ2UxeHVYSFJjZEZ4MGMzVndaWElvS1Z4dVhIUmNkRngwZEdocGN5NWhaR1J5SUQwZ1lXUmtjbHh1WEc1Y2RGeDBYSFIwYUdsekxsOXpiMk5yWlhRZ1BTQnVaWGNnU2xOUFRsTnZZMnRsZENodVpYY2dibVYwTGxOdlkydGxkQ2dwS1Z4dVhIUmNkRngwZEdocGN5NWZjMjlqYTJWMExtTnZibTVsWTNRb2RHaHBjeTVoWkdSeUtWeHVYRzVjZEZ4MFhIUXZMeUJUZEc5eVpTQmpZV3hzWW1GamF5QnpieUIwYUdGMElIZGxJR05oYmlCMWJuSmxaMmx6ZEdWeUlIUm9aVzBnYkdGMFpYSmNibHgwWEhSY2RIUm9hWE11WDNOdlkydGxkRTl3Wlc1RFlXeHNZbUZqYXlBOUlIUm9hWE11WDI5dWIzQmxiaTVpYVc1a0tIUm9hWE1wWEc1Y2RGeDBYSFIwYUdsekxsOXpiMk5yWlhSRGJHOXpaVU5oYkd4aVlXTnJJRDBnZEdocGN5NWZiMjVqYkc5elpTNWlhVzVrS0hSb2FYTXBYRzVjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFJOWlhOellXZGxRMkZzYkdKaFkyc2dQU0IwYUdsekxsOXZibTFsYzNOaFoyVXVZbWx1WkNoMGFHbHpLVnh1WEhSY2RGeDBkR2hwY3k1ZmMyOWphMlYwUlhKeWIzSkRZV3hzWW1GamF5QTlJSFJvYVhNdVgyOXVaWEp5YjNJdVltbHVaQ2gwYUdsektWeHVYRzVjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFF1YjI0b0oyTnZibTVsWTNRbkxDQjBhR2x6TGw5emIyTnJaWFJQY0dWdVEyRnNiR0poWTJzcFhHNWNkRngwWEhSMGFHbHpMbDl6YjJOclpYUXVYM052WTJ0bGRDNXZiaWduWTJ4dmMyVW5MSFJvYVhNdVgzTnZZMnRsZEVOc2IzTmxRMkZzYkdKaFkyc3BYRzVjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFF1YjI0b0oyMWxjM05oWjJVbkxDQjBhR2x6TGw5emIyTnJaWFJOWlhOellXZGxRMkZzYkdKaFkyc3BYRzVjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFF1WDNOdlkydGxkQzV2YmlnblpYSnliM0luTENCMGFHbHpMbDl6YjJOclpYUkZjbkp2Y2tOaGJHeGlZV05yS1Z4dVhHNWNkRngwWEhRdkx5QkRjbVZoZEdVZ2RHbHRaVzkxZENCMGJ5QmhZbTl5WkNCamIyNXVaV04wYVc5dVoxeHVYSFJjZEZ4MGMyVjBWR2x0Wlc5MWRDaGZJRDArSUh0Y2JseDBYSFJjZEZ4MEx5OGdWMmhsSUc1MGFXMWxJSFJwYldWeklHOTFkQ3dnYVdZZ2RHaGxJSE52WTJ0bGRDQnBjeUJ2Y0dWdVpXUXNJSE5wYlhCc2VTQnlaWFIxY201Y2JseDBYSFJjZEZ4MGFXWWdLSFJvYVhNdVgzTjBZWFIxY3lBOVBUMGdKMjl3Wlc1bFpDY3BYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVYRzVjZEZ4MFhIUmNkQzh2SUU5MGFHVnlkMmx6WlN3Z1lXSnZjbVJjYmx4MFhIUmNkRngwYVdZZ0tIUm9hWE11WDNOMFlYUjFjeUFoUFQwZ0oyTnNiM05sWkNjcGUxeHVYSFJjZEZ4MFhIUmNkRXh2WjJkbGNpNXNiMmNvSjJReE9pQW5JQ3NnZEdoaGRDNWhaR1J5SUNzZ0p5QjBhVzFsWkNCdmRYUWdkMmhwYkdVZ1kyOXVibVZqZEdsdVp5Y3BYRzVjZEZ4MFhIUmNkRngwZEdocGN5NWpiRzl6WlNncFhHNWNkRngwWEhSY2RGeDBkR2hwY3k1bGJXbDBLQ2QwYVcxbGIzVjBKeXdnZEdocGN5NWZjMjlqYTJWMEtWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlMQ0JqYjI1dVpXTjBWR2x0Wlc5MWRDbGNibHgwWEhSOVhHNWNibHgwWEhSamJHOXpaU0FvS1NCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1ZlpHbHpZMjl1Ym1WamRHbHZia1JsWm1WeWNtVmtJQ1ltSUhSb2FYTXVYMlJwYzJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkM1d2NtOXRhWE5sS1Z4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWZaR2x6WTI5dWJtVmpkR2x2YmtSbFptVnljbVZrTG5CeWIyMXBjMlZjYmx4dVhIUmNkRngwZEdocGN5NWZaR2x6WTI5dWJtVmpkR2x2YmtSbFptVnljbVZrSUQwZ1VTNWtaV1psY2lncFhHNWNkRngwWEhSMGFHbHpMbDl6ZEdGMGRYTWdQU0FuWTJ4dmMybHVaeWRjYmx4dVhIUmNkRngwZEdocGN5NWxiV2wwS0NkamJHOXphVzVuSnl3Z2RHaHBjeTVmYzI5amEyVjBLVnh1WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTVmYzI5amEyVjBLVnh1WEhSY2RGeDBYSFIwYUdsekxsOXpiMk5yWlhRdVpXNWtLQ2xjYmx4dVhIUmNkRngwY21WMGRYSnVJSFJvYVhNdVgyUnBjMk52Ym01bFkzUnBiMjVFWldabGNuSmxaQzV3Y205dGFYTmxYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5b3FYRzVjZEZ4MElDb2dVMlZ1WkNCaElFcFRUMDR0Wm05eWJXRjBkR1ZrSUcxbGMzTmhaMlVnZEdoeWIzVm5hQ0IwYUdVZ2MyOWphMlYwWEc1Y2RGeDBJQ29nUUhCaGNtRnRJSHRLVTA5T2ZTQnRjMmNnVkdobElFcFRUMDRnZEc4Z2MyVnVaQ0FvWkc4Z2JtOTBJSE4wY21sdVoybG1lU0JwZEN3Z2FuTnZiaTF6YjJOclpYUWdkMmxzYkNCa2J5QnBkQ2xjYmx4MFhIUWdLaTljYmx4MFhIUnpaVzVrSUNodGMyY3BJSHRjYmx4MFhIUmNkSFJ5ZVNCN1hHNWNkRngwWEhSY2RIUm9hWE11WDNOdlkydGxkQzV6Wlc1a1RXVnpjMkZuWlNodGMyY3BYRzVjZEZ4MFhIUjlJR05oZEdOb0tHVnljaWw3WEc1Y2RGeDBYSFJjZEdOdmJuTnZiR1V1WlhKeWIzSW9KME5oYm01dmRDQnpaVzVrSUcxbGMzTmhaMlU2SUNjZ0t5Qmxjbkl1YldWemMyRm5aU2xjYmx4MFhIUmNkRngwY21WMGRYSnVJR1poYkhObFhHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlCMGNuVmxYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFYTkRiMjV1WldOMFpXUWdLQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJQ0YwYUdsekxsOXpiMk5yWlhRdWFYTkRiRzl6WldRb0tTQW1KaUIwYUdsekxsOXpkR0YwZFhNZ1BUMDlJQ2R2Y0dWdVpXUW5YRzVjZEZ4MGZWeHVYRzVjZEZ4MFgyOXViM0JsYmlBb0tTQjdYRzVjZEZ4MFhIUjBhR2x6TGw5emRHRjBkWE1nUFNBbmIzQmxibVZrSjF4dVhIUmNkRngwZEdocGN5NWxiV2wwS0NkdmNHVnVKeXdnZEdocGN5NWZjMjlqYTJWMEtWeHVYSFJjZEgxY2JseHVYSFJjZEY5dmJtTnNiM05sSUNncElIdGNibHgwWEhSY2RIUm9hWE11WDNOMFlYUjFjeUE5SUNkamJHOXpaV1FuWEc1Y2RGeDBYSFIwYUdsekxuVnVjbVZuYVhOMFpYSkRZV3hzWW1GamEzTW9LVnh1WEhSY2RGeDBkR2hwY3k1bGJXbDBLQ2RqYkc5elpTY3NJSFJvYVhNdVgzTnZZMnRsZENsY2JseDBYSFJjZEdsbUlDaDBhR2x6TGw5a2FYTmpiMjV1WldOMGFXOXVSR1ZtWlhKeVpXUWdKaVlnZEdocGN5NWZaR2x6WTI5dWJtVmpkR2x2YmtSbFptVnljbVZrTG5CeWIyMXBjMlVwWEc1Y2RGeDBYSFJjZEhSb2FYTXVYMlJwYzJOdmJtNWxZM1JwYjI1RVpXWmxjbkpsWkM1eVpYTnZiSFpsS0NsY2JseDBYSFI5WEc1Y2JseDBYSFJmYjI1dFpYTnpZV2RsSUNodGMyY3BJSHRjYmx4MFhIUmNkQzh2SUZSb1pTQnRaWE56WVdkbElHbHpJR0ZzY21WaFpIa2dZU0JLVTA5T1hHNWNkRngwWEhSMGFHbHpMbVZ0YVhRb0oyMWxjM05oWjJVbkxDQnRjMmNwWEc1Y2RGeDBmVnh1WEc1Y2RGeDBYMjl1WlhKeWIzSWdLR1Z5Y2lrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsYldsMEtDZGxjbkp2Y2ljc0lHVnljaWxjYmx4MFhIUjlYRzVjYmx4MFhIUjFibkpsWjJsemRHVnlRMkZzYkdKaFkydHpJQ2dwSUh0Y2JseDBYSFJjZEdsbUlDaDBhR2x6TGw5emIyTnJaWFFnSmlZZ0tIUjVjR1Z2WmlCMGFHbHpMbDl6YjJOclpYUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a3BJSHRjYmx4MFhIUmNkRngwZEdocGN5NWZjMjlqYTJWMExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMjl3Wlc0bkxDQjBhR2x6TGw5emIyTnJaWFJQY0dWdVEyRnNiR0poWTJzcFhHNWNkRngwWEhSY2RIUm9hWE11WDNOdlkydGxkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHOXpaU2NzSUhSb2FYTXVYM052WTJ0bGRFTnNiM05sUTJGc2JHSmhZMnNwWEc1Y2RGeDBYSFJjZEhSb2FYTXVYM052WTJ0bGRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0WlhOellXZGxKeXdnZEdocGN5NWZjMjlqYTJWMFRXVnpjMkZuWlVOaGJHeGlZV05yS1Z4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNoMGFHbHpMbDl6YjJOclpYUWdKaVlnS0hSNWNHVnZaaUIwYUdsekxsOXpiMk5yWlhRdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKeklEMDlQU0FuWm5WdVkzUnBiMjRuS1NrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TGw5emIyTnJaWFF1Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0NsY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZWT1NWaFRiMk5yWlhSSVlXNWtiR1Z5WEc1OVhHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZDEgPSByZXF1aXJlKCcuL0RpeWFTZWxlY3Rvci5qcycpO1xuXG5yZXF1aXJlKCcuL3NlcnZpY2VzL3J0Yy9ydGMuanMnKTtcbnJlcXVpcmUoJy4vc2VydmljZXMvaWVxL2llcS5qcycpO1xucmVxdWlyZSgnLi9zZXJ2aWNlcy9wZWVyQXV0aC9QZWVyQXV0aC5qcycpO1xucmVxdWlyZSgnLi9zZXJ2aWNlcy9tZXNoTmV0d29yay9NZXNoTmV0d29yay5qcycpO1xucmVxdWlyZSgnLi91dGlscy9lbmNvZGluZy9lbmNvZGluZy5qcycpO1xucmVxdWlyZSgnLi9zZXJ2aWNlcy9zdGF0dXMvc3RhdHVzLmpzJyk7XG5yZXF1aXJlKCcuL0RCdXNPYmplY3QuanMnKTtcbnJlcXVpcmUoJy4vc2VydmljZXMvc2hlbGwvU2hlbGwuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUnBlV0V0YzJSckxtcHpJbDBzSW01aGJXVnpJanBiSW1ReElpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlNVRXNTMEZCUzBNc1VVRkJVU3h0UWtGQlVpeERRVUZVT3p0QlFVVkJRU3hSUVVGUkxIVkNRVUZTTzBGQlEwRkJMRkZCUVZFc2RVSkJRVkk3UVVGRFFVRXNVVUZCVVN4cFEwRkJVanRCUVVOQlFTeFJRVUZSTEhWRFFVRlNPMEZCUTBGQkxGRkJRVkVzT0VKQlFWSTdRVUZEUVVFc1VVRkJVU3cyUWtGQlVqdEJRVU5CUVN4UlFVRlJMR2xDUVVGU08wRkJRMEZCTEZGQlFWRXNNa0pCUVZJN08wRkJSVUZETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpJTEVWQlFXcENJaXdpWm1sc1pTSTZJbVJwZVdFdGMyUnJMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJR1F4SUQwZ2NtVnhkV2x5WlNnbkxpOUVhWGxoVTJWc1pXTjBiM0l1YW5NbktUdGNibHh1Y21WeGRXbHlaU2duTGk5elpYSjJhV05sY3k5eWRHTXZjblJqTG1wekp5azdYRzV5WlhGMWFYSmxLQ2N1TDNObGNuWnBZMlZ6TDJsbGNTOXBaWEV1YW5NbktUdGNibkpsY1hWcGNtVW9KeTR2YzJWeWRtbGpaWE12Y0dWbGNrRjFkR2d2VUdWbGNrRjFkR2d1YW5NbktUdGNibkpsY1hWcGNtVW9KeTR2YzJWeWRtbGpaWE12YldWemFFNWxkSGR2Y21zdlRXVnphRTVsZEhkdmNtc3Vhbk1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZkWFJwYkhNdlpXNWpiMlJwYm1jdlpXNWpiMlJwYm1jdWFuTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmMyVnlkbWxqWlhNdmMzUmhkSFZ6TDNOMFlYUjFjeTVxY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTlFUW5WelQySnFaV04wTG1wekp5azdYRzV5WlhGMWFYSmxLQ2N1TDNObGNuWnBZMlZ6TDNOb1pXeHNMMU5vWld4c0xtcHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pERTdYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuLyogbWF5YS1jbGllbnRcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgUGFydG5lcmluZyBSb2JvdGljcywgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IHZlcnNpb25cbiAqXHQzLjAgb2YgdGhlIExpY2Vuc2UuIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZVxuICogdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW5cbiAqIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVJcbiAqIFBVUlBPU0UuIFNlZSB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5LlxuICovXG5cbi8qKlxuICAgVG9kbyA6XG4gICBjaGVjayBlcnIgZm9yIGVhY2ggZGF0YVxuICAgaW1wcm92ZSBBUEkgOiBnZXREYXRhKHNlbnNvck5hbWUsIGRhdGFDb25maWcpXG4gICByZXR1cm4gYWRhcHRlZCB2ZWN0b3IgZm9yIGRpc3BsYXkgd2l0aCBEMyB0byByZWR1Y2UgY29kZSBpbiBJSE0gP1xuICAgdXBkYXRlRGF0YShzZW5zb3JOYW1lLCBkYXRhQ29uZmlnKVxuICAgc2V0IGFuZCBnZXQgZm9yIHRoZSBkaWZmZXJlbnQgZGF0YUNvbmZpZyBwYXJhbXNcblxuKi9cblxudmFyIERpeWFTZWxlY3RvciA9IHJlcXVpcmUoJy4uLy4uL0RpeWFTZWxlY3RvcicpLkRpeWFTZWxlY3RvcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgTWVzc2FnZSA9IHJlcXVpcmUoJy4uL21lc3NhZ2UnKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8gTG9nZ2luZyB1dGlsaXR5IG1ldGhvZHMgLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG52YXIgREVCVUcgPSB0cnVlO1xudmFyIExvZ2dlciA9IHtcblx0bG9nOiBmdW5jdGlvbiBsb2cobWVzc2FnZSkge1xuXHRcdGlmIChERUJVRykgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cdH0sXG5cblx0ZXJyb3I6IGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcblx0XHRpZiAoREVCVUcpIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG5cdH1cbn07XG5cbi8qKlxuICpcdGNhbGxiYWNrIDogZnVuY3Rpb24gY2FsbGVkIGFmdGVyIG1vZGVsIHVwZGF0ZWRcbiAqICovXG5mdW5jdGlvbiBJRVEoc2VsZWN0b3IpIHtcblx0dmFyIHRoYXQgPSB0aGlzO1xuXHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdHRoaXMuZGF0YU1vZGVsID0ge307XG5cdHRoaXMuX2NvZGVyID0gc2VsZWN0b3IuZW5jb2RlKCk7XG5cdHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuXHQvL1x0dGhhdC5zdWJzY3JpcHRpb25FcnJvck51bSA9IDA7XG5cblx0LyoqKiBzdHJ1Y3R1cmUgb2YgZGF0YSBjb25maWcgKioqXG4gXHQgY3JpdGVyaWEgOlxuIFx0ICAgdGltZTogYWxsIDMgdGltZSBjcml0ZXJpYSBzaG91bGQgbm90IGJlIGRlZmluZWQgYXQgdGhlIHNhbWUgdGltZS4gKHJhbmdlIHdvdWxkIGJlIGdpdmVuIHVwKVxuIFx0ICAgICBzdGFydDoge1tudWxsXSx0aW1lfSAobnVsbCBtZWFucyBtb3N0IHJlY2VudCkgLy8gc3RvcmVkIGEgVVRDIGluIG1zIChudW0pXG4gXHQgICAgIGVuZDoge1tudWxsXSwgdGltZX0gKG51bGwgbWVhbnMgbW9zdCBvbGRlc3QpIC8vIHN0b3JlZCBhcyBVVEMgaW4gbXMgKG51bSlcbiBcdCAgICAgcmFuZ2U6IHtbbnVsbF0sIHRpbWV9IChyYW5nZSBvZiB0aW1lKHBvc2l0aXZlKSApIC8vIGluIHMgKG51bSlcbiBcdCAgIHJvYm90OiB7QXJyYXlPZiBJRCBvciBbXCJhbGxcIl19XG4gXHQgICBwbGFjZToge0FycmF5T2YgSUQgb3IgW1wiYWxsXCJdfVxuIFx0IG9wZXJhdG9yOiB7W2xhc3RdLCBtYXgsIG1veSwgc2R9IC0oIG1heWJlIG1veSBzaG91bGQgYmUgZGVmYXVsdFxuIFx0IC4uLlxuIFx0XHQgc2Vuc29ycyA6IHtbbnVsbF0gb3IgQXJyYXlPZiBTZW5zb3JOYW1lfVxuIFx0XHQgc2FtcGxpbmc6IHtbbnVsbF0gb3IgaW50fVxuICovXG5cdHRoaXMuZGF0YUNvbmZpZyA9IHtcblx0XHRjcml0ZXJpYToge1xuXHRcdFx0dGltZToge1xuXHRcdFx0XHRzdGFydDogbnVsbCxcblx0XHRcdFx0ZW5kOiBudWxsLFxuXHRcdFx0XHRyYW5nZTogbnVsbCAvLyBpbiBzXG5cdFx0XHR9LFxuXHRcdFx0cm9ib3Q6IG51bGwsXG5cdFx0XHRwbGFjZTogbnVsbFxuXHRcdH0sXG5cdFx0b3BlcmF0b3I6ICdsYXN0Jyxcblx0XHRzZW5zb3JzOiBudWxsLFxuXHRcdHNhbXBsaW5nOiBudWxsIC8vc2FtcGxpbmdcblx0fTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogR2V0IGRhdGFNb2RlbCA6XG4gKiB7XG4gKlx0XCJzZW5zZXVyWFhcIjoge1xuICpcdFx0XHRkYXRhOltGTE9BVCwgLi4uXSxcbiAqXHRcdFx0dGltZTpbRkxPQVQsIC4uLl0sXG4gKlx0XHRcdHJvYm90OltGTE9BVCwgLi4uXSxcbiAqXHRcdFx0cGxhY2U6W0ZMT0FULCAuLi5dLFxuICpcdFx0XHRxdWFsaXR5SW5kZXg6W0ZMT0FULCAuLi5dLFxuICpcdFx0XHRyYW5nZTogW0ZMT0FULCBGTE9BVF0sXG4gKlx0XHRcdHVuaXQ6IHN0cmluZyxcbiAqXHRcdGxhYmVsOiBzdHJpbmdcbiAqXHRcdH0sXG4gKlx0IC4uLiAoXCJzZW5zZXVyc1lZXCIpXG4gKiB9XG4gKi9cbklFUS5wcm90b3R5cGUuZ2V0RGF0YU1vZGVsID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5kYXRhTW9kZWw7XG59O1xuSUVRLnByb3RvdHlwZS5nZXREYXRhUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLmRhdGFNb2RlbC5yYW5nZTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFDb25maWcgY29uZmlnIGZvciBkYXRhIHJlcXVlc3RcbiAqIGlmIGRhdGFDb25maWcgaXMgZGVmaW5lIDogc2V0IGFuZCByZXR1cm4gdGhpc1xuICpcdCBAcmV0dXJuIHtJRVF9IHRoaXNcbiAqIGVsc2VcbiAqXHQgQHJldHVybiB7T2JqZWN0fSBjdXJyZW50IGRhdGFDb25maWdcbiAqL1xuSUVRLnByb3RvdHlwZS5EYXRhQ29uZmlnID0gZnVuY3Rpb24gKG5ld0RhdGFDb25maWcpIHtcblx0aWYgKG5ld0RhdGFDb25maWcpIHtcblx0XHR0aGlzLmRhdGFDb25maWcgPSBuZXdEYXRhQ29uZmlnO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9IGVsc2UgcmV0dXJuIHRoaXMuZGF0YUNvbmZpZztcbn07XG4vKipcbiAqIFRPIEJFIElNUExFTUVOVEVEIDogb3BlcmF0b3IgbWFuYWdlbWVudCBpbiBETi1JRVFcbiAqIEBwYXJhbSAge1N0cmluZ31cdCBuZXdPcGVyYXRvciA6IHtbbGFzdF0sIG1heCwgbW95LCBzZH1cbiAqIEByZXR1cm4ge0lFUX0gdGhpcyAtIGNoYWluYWJsZVxuICogU2V0IG9wZXJhdG9yIGNyaXRlcmlhLlxuICogRGVwZW5kcyBvbiBuZXdPcGVyYXRvclxuICpcdEBwYXJhbSB7U3RyaW5nfSBuZXdPcGVyYXRvclxuICpcdEByZXR1cm4gdGhpc1xuICogR2V0IG9wZXJhdG9yIGNyaXRlcmlhLlxuICpcdEByZXR1cm4ge1N0cmluZ30gb3BlcmF0b3JcbiAqL1xuSUVRLnByb3RvdHlwZS5EYXRhT3BlcmF0b3IgPSBmdW5jdGlvbiAobmV3T3BlcmF0b3IpIHtcblx0aWYgKG5ld09wZXJhdG9yKSB7XG5cdFx0dGhpcy5kYXRhQ29uZmlnLm9wZXJhdG9yID0gbmV3T3BlcmF0b3I7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSByZXR1cm4gdGhpcy5kYXRhQ29uZmlnLm9wZXJhdG9yO1xufTtcbi8qKlxuICogRGVwZW5kcyBvbiBudW1TYW1wbGVzXG4gKiBAcGFyYW0ge2ludH0gbnVtYmVyIG9mIHNhbXBsZXMgaW4gZGF0YU1vZGVsXG4gKiBpZiBkZWZpbmVkIDogc2V0IG51bWJlciBvZiBzYW1wbGVzXG4gKlx0QHJldHVybiB7SUVRfSB0aGlzXG4gKiBlbHNlXG4gKlx0QHJldHVybiB7aW50fSBudW1iZXIgb2Ygc2FtcGxlc1xuICoqL1xuSUVRLnByb3RvdHlwZS5EYXRhU2FtcGxpbmcgPSBmdW5jdGlvbiAobnVtU2FtcGxlcykge1xuXHRpZiAobnVtU2FtcGxlcykge1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5zYW1wbGluZyA9IG51bVNhbXBsZXM7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSByZXR1cm4gdGhpcy5kYXRhQ29uZmlnLnNhbXBsaW5nO1xufTtcbi8qKlxuICogU2V0IG9yIGdldCBkYXRhIHRpbWUgY3JpdGVyaWEgc3RhcnQgYW5kIGVuZC5cbiAqIElmIHBhcmFtIGRlZmluZWRcbiAqXHRAcGFyYW0ge0RhdGV9IG5ld1RpbWVTdGFydCAvLyBtYXkgYmUgbnVsbFxuICpcdEBwYXJhbSB7RGF0ZX0gbmV3VGltZUVuZCAvLyBtYXkgYmUgbnVsbFxuICpcdEByZXR1cm4ge0lFUX0gdGhpc1xuICogSWYgbm8gcGFyYW0gZGVmaW5lZDpcbiAqXHRAcmV0dXJuIHtPYmplY3R9IFRpbWUgb2JqZWN0OiBmaWVsZHMgc3RhcnQgYW5kIGVuZC5cbiAqL1xuSUVRLnByb3RvdHlwZS5EYXRhVGltZSA9IGZ1bmN0aW9uIChuZXdUaW1lU3RhcnQsIG5ld1RpbWVFbmQsIG5ld1JhbmdlKSB7XG5cdGlmIChuZXdUaW1lU3RhcnQgfHwgbmV3VGltZUVuZCB8fCBuZXdSYW5nZSkge1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLnN0YXJ0ID0gbmV3VGltZVN0YXJ0LmdldFRpbWUoKTtcblx0XHR0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEudGltZS5lbmQgPSBuZXdUaW1lRW5kLmdldFRpbWUoKTtcblx0XHR0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEudGltZS5yYW5nZSA9IG5ld1JhbmdlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9IGVsc2UgcmV0dXJuIHtcblx0XHRzdGFydDogbmV3IERhdGUodGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnRpbWUuc3RhcnQpLFxuXHRcdGVuZDogbmV3IERhdGUodGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnRpbWUuZW5kKSxcblx0XHRyYW5nZTogbmV3IERhdGUodGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnRpbWUucmFuZ2UpXG5cdH07XG59O1xuLyoqXG4gKiBEZXBlbmRzIG9uIHJvYm90SWRzXG4gKiBTZXQgcm9ib3QgY3JpdGVyaWEuXG4gKlx0QHBhcmFtIHtBcnJheVtJbnRdfSByb2JvdElkcyBsaXN0IG9mIHJvYm90IElkc1xuICogR2V0IHJvYm90IGNyaXRlcmlhLlxuICpcdEByZXR1cm4ge0FycmF5W0ludF19IGxpc3Qgb2Ygcm9ib3QgSWRzXG4gKi9cbklFUS5wcm90b3R5cGUuRGF0YVJvYm90SWRzID0gZnVuY3Rpb24gKHJvYm90SWRzKSB7XG5cdGlmIChyb2JvdElkcykge1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS5yb2JvdCA9IHJvYm90SWRzO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9IGVsc2UgcmV0dXJuIHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS5yb2JvdDtcbn07XG4vKipcbiAqIERlcGVuZHMgb24gcGxhY2VJZHNcbiAqIFNldCBwbGFjZSBjcml0ZXJpYS5cbiAqXHRAcGFyYW0ge0FycmF5W0ludF19IHBsYWNlSWRzIGxpc3Qgb2YgcGxhY2UgSWRzXG4gKiBHZXQgcGxhY2UgY3JpdGVyaWEuXG4gKlx0QHJldHVybiB7QXJyYXlbSW50XX0gbGlzdCBvZiBwbGFjZSBJZHNcbiAqL1xuSUVRLnByb3RvdHlwZS5EYXRhUGxhY2VJZHMgPSBmdW5jdGlvbiAocGxhY2VJZHMpIHtcblx0aWYgKHBsYWNlSWRzKSB7XG5cdFx0dGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnBsYWNlSWQgPSBwbGFjZUlkcztcblx0XHRyZXR1cm4gdGhpcztcblx0fSBlbHNlIHJldHVybiB0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEucGxhY2U7XG59O1xuLyoqXG4gKiBHZXQgZGF0YSBieSBzZW5zb3IgbmFtZS5cbiAqXHRAcGFyYW0ge0FycmF5W1N0cmluZ119IHNlbnNvck5hbWUgbGlzdCBvZiBzZW5zb3JzXG4gKi9cbklFUS5wcm90b3R5cGUuZ2V0RGF0YUJ5TmFtZSA9IGZ1bmN0aW9uIChzZW5zb3JOYW1lcykge1xuXHR2YXIgZGF0YSA9IFtdO1xuXHRmb3IgKHZhciBuIGluIHNlbnNvck5hbWVzKSB7XG5cdFx0ZGF0YS5wdXNoKHRoaXMuZGF0YU1vZGVsW3NlbnNvck5hbWVzW25dXSk7XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59O1xuLyoqXG4gKiBVcGRhdGUgZGF0YSBnaXZlbiBkYXRhQ29uZmlnLlxuICogQHBhcmFtIHtmdW5jfSBjYWxsYmFjayA6IGNhbGxlZCBhZnRlciB1cGRhdGVcbiAqIFRPRE8gVVNFIFBST01JU0VcbiAqL1xuSUVRLnByb3RvdHlwZS51cGRhdGVEYXRhID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkYXRhQ29uZmlnKSB7XG5cdHZhciB0aGF0ID0gdGhpcztcblx0aWYgKGRhdGFDb25maWcpIHRoaXMuRGF0YUNvbmZpZyhkYXRhQ29uZmlnKTtcblx0Ly8gY29uc29sZS5sb2coXCJSZXF1ZXN0OiBcIitKU09OLnN0cmluZ2lmeShkYXRhQ29uZmlnKSk7XG5cdHRoaXMuc2VsZWN0b3IucmVxdWVzdCh7XG5cdFx0c2VydmljZTogXCJpZXFcIixcblx0XHRmdW5jOiBcIkRhdGFSZXF1ZXN0XCIsXG5cdFx0ZGF0YToge1xuXHRcdFx0dHlwZTogXCJzcGxSZXFcIixcblx0XHRcdGRhdGFDb25maWc6IHRoYXQuZGF0YUNvbmZpZ1xuXHRcdH1cblx0fSwgZnVuY3Rpb24gKGRuSWQsIGVyciwgZGF0YSkge1xuXHRcdGlmIChlcnIpIHtcblx0XHRcdExvZ2dlci5lcnJvcihcIltcIiArIHRoYXQuZGF0YUNvbmZpZy5zZW5zb3JzICsgXCJdIFJlY3YgZXJyOiBcIiArIEpTT04uc3RyaW5naWZ5KGVycikpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoZGF0YS5oZWFkZXIuZXJyb3IpIHtcblx0XHRcdC8vIFRPRE8gOiBjaGVjay91c2UgZXJyIHN0YXR1cyBhbmQgYWRhcHQgYmVoYXZpb3IgYWNjb3JkaW5nbHlcblx0XHRcdExvZ2dlci5lcnJvcihcIlVwZGF0ZURhdGE6XFxuXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhLmhlYWRlci5kYXRhQ29uZmlnKSk7XG5cdFx0XHRMb2dnZXIuZXJyb3IoXCJEYXRhIHJlcXVlc3QgZmFpbGVkIChcIiArIGRhdGEuaGVhZGVyLmVycm9yLnN0ICsgXCIpOiBcIiArIGRhdGEuaGVhZGVyLmVycm9yLm1zZyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0dGhhdC5fZ2V0RGF0YU1vZGVsRnJvbVJlY3YoZGF0YSk7XG5cblx0XHQvLyBMb2dnZXIubG9nKHRoYXQuZ2V0RGF0YU1vZGVsKCkpO1xuXG5cdFx0Y2FsbGJhY2sgPSBjYWxsYmFjay5iaW5kKHRoYXQpOyAvLyBiaW5kIGNhbGxiYWNrIHdpdGggSUVRXG5cdFx0Y2FsbGJhY2sodGhhdC5nZXREYXRhTW9kZWwoKSk7IC8vIGNhbGxiYWNrIGZ1bmNcblx0fSk7XG59O1xuXG5JRVEucHJvdG90eXBlLl9pc0RhdGFNb2RlbFdpdGhOYU4gPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBkYXRhTW9kZWxOYU4gPSBmYWxzZTtcblx0dmFyIHNlbnNvck5hbjtcblx0Zm9yICh2YXIgbiBpbiB0aGlzLmRhdGFNb2RlbCkge1xuXHRcdHNlbnNvck5hbiA9IHRoaXMuZGF0YU1vZGVsW25dLmRhdGEucmVkdWNlKGZ1bmN0aW9uIChuYW5QcmVzLCBkKSB7XG5cdFx0XHRyZXR1cm4gbmFuUHJlcyAmJiBpc05hTihkKTtcblx0XHR9LCBmYWxzZSk7XG5cdFx0ZGF0YU1vZGVsTmFOID0gZGF0YU1vZGVsTmFOICYmIHNlbnNvck5hbjtcblx0XHRMb2dnZXIubG9nKG4gKyBcIiB3aXRoIG5hbiA6IFwiICsgc2Vuc29yTmFuICsgXCIgKFwiICsgZGF0YU1vZGVsTmFOICsgXCIpIC8gXCIgKyB0aGlzLmRhdGFNb2RlbFtuXS5kYXRhLmxlbmd0aCk7XG5cdH1cbn07XG5cbklFUS5wcm90b3R5cGUuZ2V0Q29uZmluZW1lbnRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuY29uZmluZW1lbnQ7XG59O1xuXG5JRVEucHJvdG90eXBlLmdldEFpclF1YWxpdHlMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuYWlyUXVhbGl0eTtcbn07XG5cbklFUS5wcm90b3R5cGUuZ2V0RW52UXVhbGl0eUxldmVsID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5lbnZRdWFsaXR5O1xufTtcblxuLyoqXG4gKiBVcGRhdGUgaW50ZXJuYWwgbW9kZWwgd2l0aCByZWNlaXZlZCBkYXRhXG4gKiBAcGFyYW0gIGRhdGEgdG8gY29uZmlndXJlIHN1YnNjcmlwdGlvblxuICogQHBhcmFtICBjYWxsYmFjayBjYWxsZWQgb24gYW5zd2VycyAoQHBhcmFtIDogZGF0YU1vZGVsKVxuICovXG5JRVEucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG5cdHZhciB0aGF0ID0gdGhpcztcblx0Ly8gY29uc29sZS5sb2coXCJSZXF1ZXN0OiBcIitKU09OLnN0cmluZ2lmeShkYXRhQ29uZmlnKSk7XG5cblx0LyoqIGRlZmF1bHQgKiovXG5cdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRkYXRhLnRpbWVSYW5nZSA9IGRhdGEudGltZVJhbmdlIHx8ICdob3Vycyc7XG5cdGRhdGEuY2F0ID0gZGF0YS5jYXQgfHwgJ2llcSc7IC8qIGNhdGVnb3J5ICovXG5cblx0dmFyIHN1YnMgPSB0aGlzLnNlbGVjdG9yLnN1YnNjcmliZSh7XG5cdFx0c2VydmljZTogXCJpZXFcIixcblx0XHRmdW5jOiBcIkRhdGFcIixcblx0XHRkYXRhOiBkYXRhLFxuXHRcdG9iajogZGF0YS5jYXQgLyogcHJvdmlkZSBjYXRlZ29yeSBvZiBzZW5zb3IgdG8gYmUgd2F0Y2hlZCwgZmlsdGVyZWQgYWNjb3JkaW5nIHRvIENSTSAqL1xuXHR9LCBmdW5jdGlvbiAoZG5JZCwgZXJyLCBkYXRhKSB7XG5cdFx0aWYgKGVycikge1xuXHRcdFx0TG9nZ2VyLmVycm9yKFwiV2F0Y2hJRVFSZWN2RXJyOlwiICsgSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhlKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHRoYXQuc2VsZWN0b3IpO1xuXHRcdFx0Ly8gaWYoZXJyPT09XCJTdWJzY3JpcHRpb25DbG9zZWRcIikge1xuXHRcdFx0Ly8gXHR0aGF0LmNsb3NlU3Vic2NyaXB0aW9ucygpOyAvLyBzaG91bGQgbm90IGJlIG5lY2Vzc2FyeVxuXHRcdFx0Ly8gXHR0aGF0LnN1YnNjcmlwdGlvbkVycm9yID0gdGhhdC5zdWJzY3JpcHRpb25FcnJvck51bSsxOyAvLyBpbmNyZWFzZSBlcnJvciBjb3VudGVyXG5cdFx0XHQvLyBcdHNldFRpbWVvdXQodGhhdC5zdWJzY3JpcHRpb25FcnJvck51bSo2MDAwMCwgdGhhdC53YXRjaChkYXRhLGNhbGxiYWNrKSk7IC8vIHRyeSBhZ2FpbiBsYXRlclxuXHRcdFx0Ly8gfVxuXHRcdFx0Ly8gZWxzZSB7XG5cdFx0XHQvLyBcdGNvbnNvbGUuZXJyb3IoXCJVbm1hbmFnZSBjYXNlcyA6IHNob3VsZCB0aGUgc3Vic2NyaXB0aW9uIGJlIHJlZ2VuZXJhdGVkID9cIik7XG5cdFx0XHQvLyB9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChkYXRhLmhlYWRlci5lcnJvcikge1xuXHRcdFx0Ly8gVE9ETyA6IGNoZWNrL3VzZSBlcnIgc3RhdHVzIGFuZCBhZGFwdCBiZWhhdmlvciBhY2NvcmRpbmdseVxuXHRcdFx0TG9nZ2VyLmVycm9yKFwiV2F0Y2hJRVE6XFxuXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhLmhlYWRlci5kYXRhQ29uZmlnKSk7XG5cdFx0XHRMb2dnZXIuZXJyb3IoXCJEYXRhIHJlcXVlc3QgZmFpbGVkIChcIiArIGRhdGEuaGVhZGVyLmVycm9yLnN0ICsgXCIpOiBcIiArIGRhdGEuaGVhZGVyLmVycm9yLm1zZyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdHRoYXQuX2dldERhdGFNb2RlbEZyb21SZWN2KGRhdGEpO1xuXHRcdC8vXHRcdHRoYXQuc3Vic2NyaXB0aW9uRXJyb3IgPSAwOyAvLyByZXNldCBlcnJvciBjb3VudGVyXG5cblx0XHRjYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQodGhhdCk7IC8vIGJpbmQgY2FsbGJhY2sgd2l0aCBJRVFcblx0XHRjYWxsYmFjayh0aGF0LmdldERhdGFNb2RlbCgpKTsgLy8gY2FsbGJhY2sgZnVuY1xuXHR9KTtcblxuXHR0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgYWxsIHN1YnNjcmlwdGlvbnNcbiAqL1xuSUVRLnByb3RvdHlwZS5jbG9zZVN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdGZvciAodmFyIGkgaW4gdGhpcy5zdWJzY3JpcHRpb25zKSB7XG5cdFx0dGhpcy5zdWJzY3JpcHRpb25zW2ldLmNsb3NlKCk7XG5cdH1cblx0dGhpcy5zdWJzY3JpcHRpb25zID0gW107XG59O1xuXG4vKipcbiAqIHJlcXVlc3QgRGF0YSB0byBtYWtlIENTViBmaWxlXG4gKi9cbklFUS5wcm90b3R5cGUuZ2V0Q1NWRGF0YSA9IGZ1bmN0aW9uIChzZW5zb3JOYW1lcywgX2ZpcnN0RGF5LCBjYWxsYmFjaykge1xuXHR2YXIgZmlyc3REYXkgPSBuZXcgRGF0ZShfZmlyc3REYXkpO1xuXHR2YXIgZGF0YUNvbmZpZyA9IHtcblx0XHRjcml0ZXJpYToge1xuXHRcdFx0dGltZTogeyBzdGFydDogZmlyc3REYXkuZ2V0VGltZSgpLCByYW5nZVVuaXQ6ICdob3VyJywgcmFuZ2U6IDE4MCB9LCAvLyAzNjBoIC0+IDE1ZCAvLyAxODBoIC0+IDdqXG5cdFx0XHRwbGFjZXM6IFtdLFxuXHRcdFx0cm9ib3RzOiBbXVxuXHRcdH0sXG5cdFx0c2Vuc29yczogc2Vuc29yTmFtZXNcblx0fTtcblxuXHR0aGlzLnVwZGF0ZURhdGEoY2FsbGJhY2ssIGRhdGFDb25maWcpO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgaW50ZXJuYWwgbW9kZWwgd2l0aCByZWNlaXZlZCBkYXRhXG4gKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgZGF0YSByZWNlaXZlZCBmcm9tIERpeWFOb2RlIGJ5IHdlYnNvY2tldFxuICogQHJldHVybiB7W3R5cGVdfVx0XHRbZGVzY3JpcHRpb25dXG4gKi9cbklFUS5wcm90b3R5cGUuX2dldERhdGFNb2RlbEZyb21SZWN2ID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0dmFyIGRhdGFNb2RlbCA9IG51bGw7XG5cblx0aWYgKGRhdGEuZXJyICYmIGRhdGEuZXJyLnN0ID4gMCkge1xuXHRcdExvZ2dlci5lcnJvcihkYXRhLmVyci5tc2cpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGRlbGV0ZSBkYXRhLmVycjtcblx0aWYgKGRhdGEgJiYgZGF0YS5oZWFkZXIpIHtcblx0XHRmb3IgKHZhciBuIGluIGRhdGEpIHtcblx0XHRcdGlmIChuICE9IFwiaGVhZGVyXCIgJiYgbiAhPSBcImVyclwiKSB7XG5cblx0XHRcdFx0aWYgKGRhdGFbbl0uZXJyICYmIGRhdGFbbl0uZXJyLnN0ID4gMCkge1xuXHRcdFx0XHRcdExvZ2dlci5lcnJvcihuICsgXCIgd2FzIGluIGVycm9yOiBcIiArIGRhdGFbbl0uZXJyLm1zZyk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWRhdGFNb2RlbCkgZGF0YU1vZGVsID0ge307XG5cblx0XHRcdFx0Ly8gTG9nZ2VyLmxvZyhuKTtcblx0XHRcdFx0aWYgKCFkYXRhTW9kZWxbbl0pIHtcblx0XHRcdFx0XHRkYXRhTW9kZWxbbl0gPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvKiB1cGRhdGUgZGF0YSBhYnNvbHV0ZSByYW5nZSAqL1xuXHRcdFx0XHRkYXRhTW9kZWxbbl0ucmFuZ2UgPSBkYXRhW25dLnJhbmdlO1xuXHRcdFx0XHQvKiB1cGRhdGUgZGF0YSByYW5nZSAqL1xuXHRcdFx0XHRkYXRhTW9kZWxbbl0udGltZVJhbmdlID0gZGF0YVtuXS50aW1lUmFuZ2U7XG5cdFx0XHRcdC8qIHVwZGF0ZSBkYXRhIGxhYmVsICovXG5cdFx0XHRcdGRhdGFNb2RlbFtuXS5sYWJlbCA9IGRhdGFbbl0ubGFiZWw7XG5cdFx0XHRcdC8qIHVwZGF0ZSBkYXRhIHVuaXQgKi9cblx0XHRcdFx0ZGF0YU1vZGVsW25dLnVuaXQgPSBkYXRhW25dLnVuaXQ7XG5cdFx0XHRcdC8qIHVwZGF0ZSBkYXRhIHByZWNpc2lvbiAqL1xuXHRcdFx0XHRkYXRhTW9kZWxbbl0ucHJlY2lzaW9uID0gZGF0YVtuXS5wcmVjaXNpb247XG5cdFx0XHRcdC8qIHVwZGF0ZSBkYXRhIGNhdGVnb3JpZXMgKi9cblx0XHRcdFx0ZGF0YU1vZGVsW25dLmNhdGVnb3J5ID0gZGF0YVtuXS5jYXRlZ29yeTtcblxuXHRcdFx0XHQvKiBzdWdnZXN0ZWQgeSBkaXNwbGF5IHJhbmdlICovXG5cdFx0XHRcdGRhdGFNb2RlbFtuXS56b29tUmFuZ2UgPSBbMCwgMTAwXTtcblxuXHRcdFx0XHQvKiB1cGRhdGUgZGF0YSBpbmRleFJhbmdlICovXG5cdFx0XHRcdGRhdGFNb2RlbFtuXS5xdWFsaXR5Q29uZmlnID0ge1xuXHRcdFx0XHRcdC8qIGNvbmZvcnRSYW5nZTogZGF0YVtuXS5jb25mb3J0UmFuZ2UsICovXG5cdFx0XHRcdFx0aW5kZXhSYW5nZTogZGF0YVtuXS5pbmRleFJhbmdlXG5cdFx0XHRcdH07XG5cdFx0XHRcdGRhdGFNb2RlbFtuXS50aW1lID0gdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLnRpbWUsICdiNjQnLCA4KTtcblx0XHRcdFx0ZGF0YU1vZGVsW25dLmRhdGEgPSBkYXRhW25dLmRhdGEgPyB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uZGF0YSwgJ2I2NCcsIDQpIDogZGF0YVtuXS5hdmcgPyB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uYXZnLmQsICdiNjQnLCA0KSA6IG51bGw7XG5cdFx0XHRcdGRhdGFNb2RlbFtuXS5xdWFsaXR5SW5kZXggPSBkYXRhW25dLmRhdGEgPyB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uaW5kZXgsICdiNjQnLCA0KSA6IGRhdGFbbl0uYXZnID8gdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLmF2Zy5pLCAnYjY0JywgNCkgOiBudWxsO1xuXHRcdFx0XHRkYXRhTW9kZWxbbl0ucm9ib3RJZCA9IHRoaXMuX2NvZGVyLmZyb20oZGF0YVtuXS5yb2JvdElkLCAnYjY0JywgNCk7XG5cdFx0XHRcdGlmIChkYXRhTW9kZWxbbl0ucm9ib3RJZCkge1xuXHRcdFx0XHRcdC8qKiBkaWNvIHJvYm90SWQgLT4gcm9ib3ROYW1lICoqL1xuXHRcdFx0XHRcdHZhciBkaWNvUm9ib3QgPSB7fTtcblx0XHRcdFx0XHRkYXRhLmhlYWRlci5yb2JvdHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0XHRcdGRpY29Sb2JvdFtlbC5pZF0gPSBlbC5uYW1lO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGRhdGFNb2RlbFtuXS5yb2JvdElkID0gZGF0YU1vZGVsW25dLnJvYm90SWQubWFwKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpY29Sb2JvdFtlbF07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkYXRhTW9kZWxbbl0ucGxhY2VJZCA9IHRoaXMuX2NvZGVyLmZyb20oZGF0YVtuXS5wbGFjZUlkLCAnYjY0JywgNCk7XG5cdFx0XHRcdGRhdGFNb2RlbFtuXS54ID0gbnVsbDtcblx0XHRcdFx0ZGF0YU1vZGVsW25dLnkgPSBudWxsO1xuXG5cdFx0XHRcdGlmIChkYXRhW25dLmF2ZykgZGF0YU1vZGVsW25dLmF2ZyA9IHtcblx0XHRcdFx0XHRkOiB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uYXZnLmQsICdiNjQnLCA0KSxcblx0XHRcdFx0XHRpOiB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uYXZnLmksICdiNjQnLCA0KVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpZiAoZGF0YVtuXS5taW4pIGRhdGFNb2RlbFtuXS5taW4gPSB7XG5cdFx0XHRcdFx0ZDogdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLm1pbi5kLCAnYjY0JywgNCksXG5cdFx0XHRcdFx0aTogdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLm1pbi5pLCAnYjY0JywgNClcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKGRhdGFbbl0ubWF4KSBkYXRhTW9kZWxbbl0ubWF4ID0ge1xuXHRcdFx0XHRcdGQ6IHRoaXMuX2NvZGVyLmZyb20oZGF0YVtuXS5tYXguZCwgJ2I2NCcsIDQpLFxuXHRcdFx0XHRcdGk6IHRoaXMuX2NvZGVyLmZyb20oZGF0YVtuXS5tYXguaSwgJ2I2NCcsIDQpXG5cdFx0XHRcdH07XG5cdFx0XHRcdGlmIChkYXRhW25dLnN0ZGRldikgZGF0YU1vZGVsW25dLnN0ZGRldiA9IHtcblx0XHRcdFx0XHRkOiB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uc3RkZGV2LmQsICdiNjQnLCA0KSxcblx0XHRcdFx0XHRpOiB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0uc3RkZGV2LmksICdiNjQnLCA0KVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpZiAoZGF0YVtuXS5zdGRkZXYpIGRhdGFNb2RlbFtuXS5zdGRkZXYgPSB7XG5cdFx0XHRcdFx0ZDogdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLnN0ZGRldi5kLCAnYjY0JywgNCksXG5cdFx0XHRcdFx0aTogdGhpcy5fY29kZXIuZnJvbShkYXRhW25dLnN0ZGRldi5pLCAnYjY0JywgNClcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYgKGRhdGFbbl0ueCkgZGF0YU1vZGVsW25dLnggPSB0aGlzLl9jb2Rlci5mcm9tKGRhdGFbbl0ueCwgJ2I2NCcsIDQpO1xuXHRcdFx0XHRpZiAoZGF0YVtuXS55KSBkYXRhTW9kZWxbbl0ueSA9IHRoaXMuX2NvZGVyLmZyb20oZGF0YVtuXS55LCAnYjY0JywgNCk7XG5cdFx0XHRcdC8qKlxuICAgICAqIGN1cnJlbnQgcXVhbGl0eSA6IHsnYidhZCwgJ20nZWRpdW0sICdnJ29vZH1cbiAgICAgKiBldm9sdXRpb24gOiB7J3UncCwgJ2Qnb3duLCAncyd0YWJsZX1cbiAgICAgKiBldm9sdXRpb24gcXVhbGl0eSA6IHsnYidldHRlciwgJ3cnb3JzZSwgJ3MnYW1lfVxuICAgICAqL1xuXHRcdFx0XHQvLy8gVE9ET1xuXHRcdFx0XHRkYXRhTW9kZWxbbl0udHJlbmQgPSAnbXNzJztcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0TG9nZ2VyLmVycm9yKFwiTm8gRGF0YSB0byByZWFkIG9yIGhlYWRlciBpcyBtaXNzaW5nICFcIik7XG5cdH1cblx0LyoqIGxpc3Qgcm9ib3RzICoqL1xuXHQvL1x0ZGF0YU1vZGVsLnJvYm90cyA9IFt7bmFtZTogJ0QyUjInLCBpZDoxfV07XG5cdHRoaXMuZGF0YU1vZGVsID0gZGF0YU1vZGVsO1xuXHRyZXR1cm4gZGF0YU1vZGVsO1xufTtcblxuLyoqIGNyZWF0ZSBJRVEgc2VydmljZSAqKi9cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUuSUVRID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IElFUSh0aGlzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWxsY1M1cWN5SmRMQ0p1WVcxbGN5STZXeUpFYVhsaFUyVnNaV04wYjNJaUxDSnlaWEYxYVhKbElpd2lkWFJwYkNJc0lrMWxjM05oWjJVaUxDSkVSVUpWUnlJc0lreHZaMmRsY2lJc0lteHZaeUlzSW0xbGMzTmhaMlVpTENKamIyNXpiMnhsSWl3aVpYSnliM0lpTENKSlJWRWlMQ0p6Wld4bFkzUnZjaUlzSW5Sb1lYUWlMQ0prWVhSaFRXOWtaV3dpTENKZlkyOWtaWElpTENKbGJtTnZaR1VpTENKemRXSnpZM0pwY0hScGIyNXpJaXdpWkdGMFlVTnZibVpwWnlJc0ltTnlhWFJsY21saElpd2lkR2x0WlNJc0luTjBZWEowSWl3aVpXNWtJaXdpY21GdVoyVWlMQ0p5YjJKdmRDSXNJbkJzWVdObElpd2liM0JsY21GMGIzSWlMQ0p6Wlc1emIzSnpJaXdpYzJGdGNHeHBibWNpTENKd2NtOTBiM1I1Y0dVaUxDSm5aWFJFWVhSaFRXOWtaV3dpTENKblpYUkVZWFJoVW1GdVoyVWlMQ0pFWVhSaFEyOXVabWxuSWl3aWJtVjNSR0YwWVVOdmJtWnBaeUlzSWtSaGRHRlBjR1Z5WVhSdmNpSXNJbTVsZDA5d1pYSmhkRzl5SWl3aVJHRjBZVk5oYlhCc2FXNW5JaXdpYm5WdFUyRnRjR3hsY3lJc0lrUmhkR0ZVYVcxbElpd2libVYzVkdsdFpWTjBZWEowSWl3aWJtVjNWR2x0WlVWdVpDSXNJbTVsZDFKaGJtZGxJaXdpWjJWMFZHbHRaU0lzSWtSaGRHVWlMQ0pFWVhSaFVtOWliM1JKWkhNaUxDSnliMkp2ZEVsa2N5SXNJa1JoZEdGUWJHRmpaVWxrY3lJc0luQnNZV05sU1dSeklpd2ljR3hoWTJWSlpDSXNJbWRsZEVSaGRHRkNlVTVoYldVaUxDSnpaVzV6YjNKT1lXMWxjeUlzSW1SaGRHRWlMQ0p1SWl3aWNIVnphQ0lzSW5Wd1pHRjBaVVJoZEdFaUxDSmpZV3hzWW1GamF5SXNJbkpsY1hWbGMzUWlMQ0p6WlhKMmFXTmxJaXdpWm5WdVl5SXNJblI1Y0dVaUxDSmtia2xrSWl3aVpYSnlJaXdpU2xOUFRpSXNJbk4wY21sdVoybG1lU0lzSW1obFlXUmxjaUlzSW5OMElpd2liWE5uSWl3aVgyZGxkRVJoZEdGTmIyUmxiRVp5YjIxU1pXTjJJaXdpWW1sdVpDSXNJbDlwYzBSaGRHRk5iMlJsYkZkcGRHaE9ZVTRpTENKa1lYUmhUVzlrWld4T1lVNGlMQ0p6Wlc1emIzSk9ZVzRpTENKeVpXUjFZMlVpTENKdVlXNVFjbVZ6SWl3aVpDSXNJbWx6VG1GT0lpd2liR1Z1WjNSb0lpd2laMlYwUTI5dVptbHVaVzFsYm5STVpYWmxiQ0lzSW1OdmJtWnBibVZ0Wlc1MElpd2laMlYwUVdseVVYVmhiR2wwZVV4bGRtVnNJaXdpWVdseVVYVmhiR2wwZVNJc0ltZGxkRVZ1ZGxGMVlXeHBkSGxNWlhabGJDSXNJbVZ1ZGxGMVlXeHBkSGtpTENKM1lYUmphQ0lzSW5ScGJXVlNZVzVuWlNJc0ltTmhkQ0lzSW5OMVluTWlMQ0p6ZFdKelkzSnBZbVVpTENKdlltb2lMQ0pqYkc5elpWTjFZbk5qY21sd2RHbHZibk1pTENKcElpd2lZMnh2YzJVaUxDSm5aWFJEVTFaRVlYUmhJaXdpWDJacGNuTjBSR0Y1SWl3aVptbHljM1JFWVhraUxDSnlZVzVuWlZWdWFYUWlMQ0p3YkdGalpYTWlMQ0p5YjJKdmRITWlMQ0pzWVdKbGJDSXNJblZ1YVhRaUxDSndjbVZqYVhOcGIyNGlMQ0pqWVhSbFoyOXllU0lzSW5wdmIyMVNZVzVuWlNJc0luRjFZV3hwZEhsRGIyNW1hV2NpTENKcGJtUmxlRkpoYm1kbElpd2labkp2YlNJc0ltRjJaeUlzSW5GMVlXeHBkSGxKYm1SbGVDSXNJbWx1WkdWNElpd2ljbTlpYjNSSlpDSXNJbVJwWTI5U2IySnZkQ0lzSW1admNrVmhZMmdpTENKbGJDSXNJbWxrSWl3aWJtRnRaU0lzSW0xaGNDSXNJbmdpTENKNUlpd2liV2x1SWl3aWJXRjRJaXdpYzNSa1pHVjJJaXdpZEhKbGJtUWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUU3T3pzN096czdPenM3T3pzN1FVRmhRVHM3T3pzN096czdPenRCUVZWQkxFbEJRVWxCTEdWQlFXVkRMRkZCUVZFc2IwSkJRVklzUlVGQk9FSkVMRmxCUVdwRU8wRkJRMEVzU1VGQlNVVXNUMEZCVDBRc1VVRkJVU3hOUVVGU0xFTkJRVmc3TzBGQlIwRXNTVUZCU1VVc1ZVRkJWVVlzVVVGQlVTeFpRVUZTTEVOQlFXUTdPMEZCUjBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEVsQlFVbEhMRkZCUVZFc1NVRkJXanRCUVVOQkxFbEJRVWxETEZOQlFWTTdRVUZEV2tNc1RVRkJTeXhoUVVGVFF5eFBRVUZVTEVWQlFXbENPMEZCUTNKQ0xFMUJRVWRJTEV0QlFVZ3NSVUZCVlVrc1VVRkJVVVlzUjBGQlVpeERRVUZaUXl4UFFVRmFPMEZCUTFZc1JVRklWenM3UVVGTFdrVXNVVUZCVHl4bFFVRlRSaXhQUVVGVUxFVkJRV2xDTzBGQlEzWkNMRTFCUVVkSUxFdEJRVWdzUlVGQlZVa3NVVUZCVVVNc1MwRkJVaXhEUVVGalJpeFBRVUZrTzBGQlExWTdRVUZRVnl4RFFVRmlPenRCUVZWQk96czdRVUZIUVN4VFFVRlRSeXhIUVVGVUxFTkJRV0ZETEZGQlFXSXNSVUZCYzBJN1FVRkRja0lzUzBGQlNVTXNUMEZCVHl4SlFVRllPMEZCUTBFc1RVRkJTMFFzVVVGQlRDeEhRVUZuUWtFc1VVRkJhRUk3UVVGRFFTeE5RVUZMUlN4VFFVRk1MRWRCUVdVc1JVRkJaanRCUVVOQkxFMUJRVXRETEUxQlFVd3NSMEZCWTBnc1UwRkJVMGtzVFVGQlZDeEZRVUZrTzBGQlEwRXNUVUZCUzBNc1lVRkJUQ3hIUVVGeFFpeEZRVUZ5UWp0QlFVTkVPenRCUVVWRE96czdPenM3T3pzN096czdPMEZCWlVFc1RVRkJTME1zVlVGQlRDeEhRVUZyUWp0QlFVTnFRa01zV1VGQlZUdEJRVU5VUXl4VFFVRk5PMEZCUTB4RExGZEJRVThzU1VGRVJqdEJRVVZNUXl4VFFVRkxMRWxCUmtFN1FVRkhURU1zVjBGQlR5eEpRVWhHTEVOQlIwODdRVUZJVUN4SlFVUkhPMEZCVFZSRExGVkJRVThzU1VGT1JUdEJRVTlVUXl4VlFVRlBPMEZCVUVVc1IwRkVUenRCUVZWcVFrTXNXVUZCVlN4TlFWWlBPMEZCVjJwQ1F5eFhRVUZUTEVsQldGRTdRVUZaYWtKRExGbEJRVlVzU1VGYVR5eERRVmxHTzBGQldrVXNSVUZCYkVJN08wRkJaVUVzVVVGQlR5eEpRVUZRTzBGQlEwRTdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3UVVGblFrRnFRaXhKUVVGSmEwSXNVMEZCU2l4RFFVRmpReXhaUVVGa0xFZEJRVFpDTEZsQlFWVTdRVUZEZEVNc1VVRkJUeXhMUVVGTGFFSXNVMEZCV2p0QlFVTkJMRU5CUmtRN1FVRkhRVWdzU1VGQlNXdENMRk5CUVVvc1EwRkJZMFVzV1VGQlpDeEhRVUUyUWl4WlFVRlZPMEZCUTNSRExGRkJRVThzUzBGQlMycENMRk5CUVV3c1EwRkJaVk1zUzBGQmRFSTdRVUZEUVN4RFFVWkVPenRCUVVsQk96czdPenM3TzBGQlQwRmFMRWxCUVVsclFpeFRRVUZLTEVOQlFXTkhMRlZCUVdRc1IwRkJNa0lzVlVGQlUwTXNZVUZCVkN4RlFVRjFRanRCUVVOcVJDeExRVUZIUVN4aFFVRklMRVZCUVd0Q08wRkJRMnBDTEU5QlFVdG1MRlZCUVV3c1IwRkJaMEpsTEdGQlFXaENPMEZCUTBFc1UwRkJUeXhKUVVGUU8wRkJRMEVzUlVGSVJDeE5RVXRETEU5QlFVOHNTMEZCUzJZc1ZVRkJXanRCUVVORUxFTkJVRVE3UVVGUlFUczdPenM3T3pzN096czdRVUZYUVZBc1NVRkJTV3RDTEZOQlFVb3NRMEZCWTBzc1dVRkJaQ3hIUVVFMlFpeFZRVUZUUXl4WFFVRlVMRVZCUVhGQ08wRkJRMnBFTEV0QlFVZEJMRmRCUVVnc1JVRkJaMEk3UVVGRFppeFBRVUZMYWtJc1ZVRkJUQ3hEUVVGblFsRXNVVUZCYUVJc1IwRkJNa0pUTEZkQlFUTkNPMEZCUTBFc1UwRkJUeXhKUVVGUU8wRkJRMEVzUlVGSVJDeE5RVXRETEU5QlFVOHNTMEZCUzJwQ0xGVkJRVXdzUTBGQlowSlJMRkZCUVhaQ08wRkJRMFFzUTBGUVJEdEJRVkZCT3pzN096czdPenRCUVZGQlppeEpRVUZKYTBJc1UwRkJTaXhEUVVGalR5eFpRVUZrTEVkQlFUWkNMRlZCUVZORExGVkJRVlFzUlVGQmIwSTdRVUZEYUVRc1MwRkJSMEVzVlVGQlNDeEZRVUZsTzBGQlEyUXNUMEZCUzI1Q0xGVkJRVXdzUTBGQlowSlZMRkZCUVdoQ0xFZEJRVEpDVXl4VlFVRXpRanRCUVVOQkxGTkJRVThzU1VGQlVEdEJRVU5CTEVWQlNFUXNUVUZMUXl4UFFVRlBMRXRCUVV0dVFpeFZRVUZNTEVOQlFXZENWU3hSUVVGMlFqdEJRVU5FTEVOQlVFUTdRVUZSUVRzN096czdPenM3TzBGQlUwRnFRaXhKUVVGSmEwSXNVMEZCU2l4RFFVRmpVeXhSUVVGa0xFZEJRWGxDTEZWQlFWTkRMRmxCUVZRc1JVRkJjMEpETEZWQlFYUkNMRVZCUVd0RFF5eFJRVUZzUXl4RlFVRXlRenRCUVVOdVJTeExRVUZIUml4blFrRkJaMEpETEZWQlFXaENMRWxCUVRoQ1F5eFJRVUZxUXl4RlFVRXlRenRCUVVNeFF5eFBRVUZMZGtJc1ZVRkJUQ3hEUVVGblFrTXNVVUZCYUVJc1EwRkJlVUpETEVsQlFYcENMRU5CUVRoQ1F5eExRVUU1UWl4SFFVRnpRMnRDTEdGQlFXRkhMRTlCUVdJc1JVRkJkRU03UVVGRFFTeFBRVUZMZUVJc1ZVRkJUQ3hEUVVGblFrTXNVVUZCYUVJc1EwRkJlVUpETEVsQlFYcENMRU5CUVRoQ1JTeEhRVUU1UWl4SFFVRnZRMnRDTEZkQlFWZEZMRTlCUVZnc1JVRkJjRU03UVVGRFFTeFBRVUZMZUVJc1ZVRkJUQ3hEUVVGblFrTXNVVUZCYUVJc1EwRkJlVUpETEVsQlFYcENMRU5CUVRoQ1J5eExRVUU1UWl4SFFVRnpRMnRDTEZGQlFYUkRPMEZCUTBFc1UwRkJUeXhKUVVGUU8wRkJRMEVzUlVGTVJDeE5RVTlETEU5QlFVODdRVUZEVG5CQ0xGTkJRVThzU1VGQlNYTkNMRWxCUVVvc1EwRkJVeXhMUVVGTGVrSXNWVUZCVEN4RFFVRm5Ra01zVVVGQmFFSXNRMEZCZVVKRExFbEJRWHBDTEVOQlFUaENReXhMUVVGMlF5eERRVVJFTzBGQlJVNURMRTlCUVVzc1NVRkJTWEZDTEVsQlFVb3NRMEZCVXl4TFFVRkxla0lzVlVGQlRDeERRVUZuUWtNc1VVRkJhRUlzUTBGQmVVSkRMRWxCUVhwQ0xFTkJRVGhDUlN4SFFVRjJReXhEUVVaRE8wRkJSMDVETEZOQlFVOHNTVUZCU1c5Q0xFbEJRVW9zUTBGQlV5eExRVUZMZWtJc1ZVRkJUQ3hEUVVGblFrTXNVVUZCYUVJc1EwRkJlVUpETEVsQlFYcENMRU5CUVRoQ1J5eExRVUYyUXp0QlFVaEVMRVZCUVZBN1FVRkxSQ3hEUVdKRU8wRkJZMEU3T3pzN096czdRVUZQUVZvc1NVRkJTV3RDTEZOQlFVb3NRMEZCWTJVc1dVRkJaQ3hIUVVFMlFpeFZRVUZUUXl4UlFVRlVMRVZCUVd0Q08wRkJRemxETEV0QlFVZEJMRkZCUVVnc1JVRkJZVHRCUVVOYUxFOUJRVXN6UWl4VlFVRk1MRU5CUVdkQ1F5eFJRVUZvUWl4RFFVRjVRa3NzUzBGQmVrSXNSMEZCYVVOeFFpeFJRVUZxUXp0QlFVTkJMRk5CUVU4c1NVRkJVRHRCUVVOQkxFVkJTRVFzVFVGTFF5eFBRVUZQTEV0QlFVc3pRaXhWUVVGTUxFTkJRV2RDUXl4UlFVRm9RaXhEUVVGNVFrc3NTMEZCYUVNN1FVRkRSQ3hEUVZCRU8wRkJVVUU3T3pzN096czdRVUZQUVdJc1NVRkJTV3RDTEZOQlFVb3NRMEZCWTJsQ0xGbEJRV1FzUjBGQk5rSXNWVUZCVTBNc1VVRkJWQ3hGUVVGclFqdEJRVU01UXl4TFFVRkhRU3hSUVVGSUxFVkJRV0U3UVVGRFdpeFBRVUZMTjBJc1ZVRkJUQ3hEUVVGblFrTXNVVUZCYUVJc1EwRkJlVUkyUWl4UFFVRjZRaXhIUVVGdFEwUXNVVUZCYmtNN1FVRkRRU3hUUVVGUExFbEJRVkE3UVVGRFFTeEZRVWhFTEUxQlMwTXNUMEZCVHl4TFFVRkxOMElzVlVGQlRDeERRVUZuUWtNc1VVRkJhRUlzUTBGQmVVSk5MRXRCUVdoRE8wRkJRMFFzUTBGUVJEdEJRVkZCT3pzN08wRkJTVUZrTEVsQlFVbHJRaXhUUVVGS0xFTkJRV052UWl4aFFVRmtMRWRCUVRoQ0xGVkJRVk5ETEZkQlFWUXNSVUZCY1VJN1FVRkRiRVFzUzBGQlNVTXNUMEZCU3l4RlFVRlVPMEZCUTBFc1RVRkJTU3hKUVVGSlF5eERRVUZTTEVsQlFXRkdMRmRCUVdJc1JVRkJNRUk3UVVGRGVrSkRMRTlCUVV0RkxFbEJRVXdzUTBGQlZTeExRVUZMZGtNc1UwRkJUQ3hEUVVGbGIwTXNXVUZCV1VVc1EwRkJXaXhEUVVGbUxFTkJRVlk3UVVGRFFUdEJRVU5FTEZGQlFVOUVMRWxCUVZBN1FVRkRRU3hEUVU1RU8wRkJUMEU3T3pzN08wRkJTMEY0UXl4SlFVRkphMElzVTBGQlNpeERRVUZqZVVJc1ZVRkJaQ3hIUVVFeVFpeFZRVUZUUXl4UlFVRlVMRVZCUVcxQ2NrTXNWVUZCYmtJc1JVRkJPRUk3UVVGRGVFUXNTMEZCU1V3c1QwRkJTeXhKUVVGVU8wRkJRMEVzUzBGQlIwc3NWVUZCU0N4RlFVTkRMRXRCUVV0akxGVkJRVXdzUTBGQlowSmtMRlZCUVdoQ08wRkJRMFE3UVVGRFFTeE5RVUZMVGl4UlFVRk1MRU5CUVdNMFF5eFBRVUZrTEVOQlFYTkNPMEZCUTNKQ1F5eFhRVUZUTEV0QlJGazdRVUZGY2tKRExGRkJRVTBzWVVGR1pUdEJRVWR5UWxBc1VVRkJUVHRCUVVOTVVTeFRRVUZMTEZGQlJFRTdRVUZGVEhwRExHVkJRVmxNTEV0QlFVdExPMEZCUmxvN1FVRklaU3hGUVVGMFFpeEZRVTlITEZWQlFWTXdReXhKUVVGVUxFVkJRV1ZETEVkQlFXWXNSVUZCYjBKV0xFbEJRWEJDTEVWQlFYbENPMEZCUXpOQ0xFMUJRVWRWTEVkQlFVZ3NSVUZCVVR0QlFVTlFka1FzVlVGQlQwa3NTMEZCVUN4RFFVRmhMRTFCUVVsSExFdEJRVXRMTEZWQlFVd3NRMEZCWjBKVExFOUJRWEJDTEVkQlFUUkNMR05CUVRWQ0xFZEJRVEpEYlVNc1MwRkJTME1zVTBGQlRDeERRVUZsUml4SFFVRm1MRU5CUVhoRU8wRkJRMEU3UVVGRFFUdEJRVU5FTEUxQlFVZFdMRXRCUVV0aExFMUJRVXdzUTBGQldYUkVMRXRCUVdZc1JVRkJjMEk3UVVGRGNrSTdRVUZEUVVvc1ZVRkJUMGtzUzBGQlVDeERRVUZoTEd0Q1FVRm5RbTlFTEV0QlFVdERMRk5CUVV3c1EwRkJaVm9zUzBGQlMyRXNUVUZCVEN4RFFVRlpPVU1zVlVGQk0wSXNRMEZCTjBJN1FVRkRRVm9zVlVGQlQwa3NTMEZCVUN4RFFVRmhMREJDUVVGM1FubERMRXRCUVV0aExFMUJRVXdzUTBGQldYUkVMRXRCUVZvc1EwRkJhMEoxUkN4RlFVRXhReXhIUVVFMlF5eExRVUUzUXl4SFFVRnRSR1FzUzBGQlMyRXNUVUZCVEN4RFFVRlpkRVFzUzBGQldpeERRVUZyUW5kRUxFZEJRV3hHTzBGQlEwRTdRVUZEUVRzN1FVRkZSRHRCUVVOQmNrUXNUMEZCUzNORUxIRkNRVUZNTEVOQlFUSkNhRUlzU1VGQk0wSTdPMEZCUlVFN08wRkJSVUZKTEdGQlFWZEJMRk5CUVZOaExFbEJRVlFzUTBGQlkzWkVMRWxCUVdRc1EwRkJXQ3hEUVdwQ01rSXNRMEZwUWtzN1FVRkRhRU13UXl4WFFVRlRNVU1zUzBGQlMybENMRmxCUVV3c1JVRkJWQ3hGUVd4Q01rSXNRMEZyUWtrN1FVRkRMMElzUlVFeFFrUTdRVUV5UWtFc1EwRm9RMFE3TzBGQmEwTkJia0lzU1VGQlNXdENMRk5CUVVvc1EwRkJZM2RETEcxQ1FVRmtMRWRCUVc5RExGbEJRVmM3UVVGRE9VTXNTMEZCU1VNc1pVRkJZU3hMUVVGcVFqdEJRVU5CTEV0QlFVbERMRk5CUVVvN1FVRkRRU3hOUVVGSkxFbEJRVWx1UWl4RFFVRlNMRWxCUVdFc1MwRkJTM1JETEZOQlFXeENMRVZCUVRaQ08wRkJRelZDZVVRc1kwRkJXU3hMUVVGTGVrUXNVMEZCVEN4RFFVRmxjME1zUTBGQlppeEZRVUZyUWtRc1NVRkJiRUlzUTBGQmRVSnhRaXhOUVVGMlFpeERRVUU0UWl4VlFVRlRReXhQUVVGVUxFVkJRV2xDUXl4RFFVRnFRaXhGUVVGdlFqdEJRVU0zUkN4VlFVRlBSQ3hYUVVGWFJTeE5RVUZOUkN4RFFVRk9MRU5CUVd4Q08wRkJRMEVzUjBGR1Z5eEZRVVZXTEV0QlJsVXNRMEZCV2p0QlFVZEJTaXhwUWtGQlpVRXNaMEpCUVdkQ1F5eFRRVUV2UWp0QlFVTkJha1VzVTBGQlQwTXNSMEZCVUN4RFFVRlhOa01zU1VGQlJTeGpRVUZHTEVkQlFXbENiVUlzVTBGQmFrSXNSMEZCTWtJc1NVRkJNMElzUjBGQlowTkVMRmxCUVdoRExFZEJRVFpETEUxQlFUZERMRWRCUVc5RUxFdEJRVXQ0UkN4VFFVRk1MRU5CUVdWelF5eERRVUZtTEVWQlFXdENSQ3hKUVVGc1FpeERRVUYxUW5sQ0xFMUJRWFJHTzBGQlEwRTdRVUZEUkN4RFFWWkVPenRCUVZsQmFrVXNTVUZCU1d0Q0xGTkJRVW9zUTBGQlkyZEVMRzFDUVVGa0xFZEJRVzlETEZsQlFWVTdRVUZETjBNc1VVRkJUeXhMUVVGTFF5eFhRVUZhTzBGQlEwRXNRMEZHUkRzN1FVRkpRVzVGTEVsQlFVbHJRaXhUUVVGS0xFTkJRV05yUkN4clFrRkJaQ3hIUVVGdFF5eFpRVUZWTzBGQlF6VkRMRkZCUVU4c1MwRkJTME1zVlVGQldqdEJRVU5CTEVOQlJrUTdPMEZCU1VGeVJTeEpRVUZKYTBJc1UwRkJTaXhEUVVGamIwUXNhMEpCUVdRc1IwRkJiVU1zV1VGQlZUdEJRVU0xUXl4UlFVRlBMRXRCUVV0RExGVkJRVm83UVVGRFFTeERRVVpFT3p0QlFVMUJPenM3T3p0QlFVdEJka1VzU1VGQlNXdENMRk5CUVVvc1EwRkJZM05FTEV0QlFXUXNSMEZCYzBJc1ZVRkJVMmhETEVsQlFWUXNSVUZCWlVrc1VVRkJaaXhGUVVGM1FqdEJRVU0zUXl4TFFVRkpNVU1zVDBGQlR5eEpRVUZZTzBGQlEwRTdPMEZCUlVFN1FVRkRRWE5ETEZGQlFVOUJMRkZCUVZFc1JVRkJaanRCUVVOQlFTeE5RVUZMYVVNc1UwRkJUQ3hIUVVGcFFtcERMRXRCUVV0cFF5eFRRVUZNTEVsQlFXMUNMRTlCUVhCRE8wRkJRMEZxUXl4TlFVRkxhME1zUjBGQlRDeEhRVUZYYkVNc1MwRkJTMnRETEVkQlFVd3NTVUZCV1N4TFFVRjJRaXhEUVZBMlF5eERRVTltT3p0QlFVVTVRaXhMUVVGSlF5eFBRVUZQTEV0QlFVc3hSU3hSUVVGTUxFTkJRV015UlN4VFFVRmtMRU5CUVhkQ08wRkJRMnhET1VJc1YwRkJVeXhMUVVSNVFqdEJRVVZzUTBNc1VVRkJUU3hOUVVZMFFqdEJRVWRzUTFBc1VVRkJUVUVzU1VGSU5FSTdRVUZKYkVOeFF5eFBRVUZMY2tNc1MwRkJTMnRETEVkQlNuZENMRU5CU1hCQ08wRkJTbTlDTEVWQlFYaENMRVZCUzFJc1ZVRkJVM3BDTEVsQlFWUXNSVUZCWlVNc1IwRkJaaXhGUVVGdlFsWXNTVUZCY0VJc1JVRkJlVUk3UVVGRE0wSXNUVUZCUjFVc1IwRkJTQ3hGUVVGUk8wRkJRMUIyUkN4VlFVRlBTU3hMUVVGUUxFTkJRV0VzY1VKQlFXMUNiMFFzUzBGQlMwTXNVMEZCVEN4RFFVRmxSaXhIUVVGbUxFTkJRV2hETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBRc1RVRkJSMVlzUzBGQlMyRXNUVUZCVEN4RFFVRlpkRVFzUzBGQlppeEZRVUZ6UWp0QlFVTnlRanRCUVVOQlNpeFZRVUZQU1N4TFFVRlFMRU5CUVdFc1owSkJRV052UkN4TFFVRkxReXhUUVVGTUxFTkJRV1ZhTEV0QlFVdGhMRTFCUVV3c1EwRkJXVGxETEZWQlFUTkNMRU5CUVROQ08wRkJRMEZhTEZWQlFVOUpMRXRCUVZBc1EwRkJZU3d3UWtGQmQwSjVReXhMUVVGTFlTeE5RVUZNTEVOQlFWbDBSQ3hMUVVGYUxFTkJRV3RDZFVRc1JVRkJNVU1zUjBGQk5rTXNTMEZCTjBNc1IwRkJiVVJrTEV0QlFVdGhMRTFCUVV3c1EwRkJXWFJFTEV0QlFWb3NRMEZCYTBKM1JDeEhRVUZzUmp0QlFVTkJPMEZCUTBFN1FVRkRSRHRCUVVOQmNrUXNUMEZCUzNORUxIRkNRVUZNTEVOQlFUSkNhRUlzU1VGQk0wSTdRVUZEUmpzN1FVRkZSVWtzWVVGQlYwRXNVMEZCVTJFc1NVRkJWQ3hEUVVGamRrUXNTVUZCWkN4RFFVRllMRU5CZWtJeVFpeERRWGxDU3p0QlFVTm9RekJETEZkQlFWTXhReXhMUVVGTGFVSXNXVUZCVEN4RlFVRlVMRVZCTVVJeVFpeERRVEJDU1R0QlFVTXZRaXhGUVdoRFZTeERRVUZZT3p0QlFXdERRU3hOUVVGTFlpeGhRVUZNTEVOQlFXMUNiME1zU1VGQmJrSXNRMEZCZDBKcFF5eEpRVUY0UWp0QlFVTkJMRU5CTlVORU96dEJRVGhEUVRzN08wRkJSMEV6UlN4SlFVRkphMElzVTBGQlNpeERRVUZqTkVRc2EwSkJRV1FzUjBGQmJVTXNXVUZCVlR0QlFVTTFReXhOUVVGSkxFbEJRVWxETEVOQlFWSXNTVUZCWVN4TFFVRkxla1VzWVVGQmJFSXNSVUZCYVVNN1FVRkRhRU1zVDBGQlMwRXNZVUZCVEN4RFFVRnRRbmxGTEVOQlFXNUNMRVZCUVhOQ1F5eExRVUYwUWp0QlFVTkJPMEZCUTBRc1RVRkJTekZGTEdGQlFVd3NSMEZCYjBJc1JVRkJjRUk3UVVGRFFTeERRVXhFT3p0QlFVOUJPenM3UVVGSFFVNHNTVUZCU1d0Q0xGTkJRVW9zUTBGQll5dEVMRlZCUVdRc1IwRkJNa0lzVlVGQlV6RkRMRmRCUVZRc1JVRkJjVUl5UXl4VFFVRnlRaXhGUVVFclFuUkRMRkZCUVM5Q0xFVkJRWGRETzBGQlEyeEZMRXRCUVVsMVF5eFhRVUZYTEVsQlFVbHVSQ3hKUVVGS0xFTkJRVk5yUkN4VFFVRlVMRU5CUVdZN1FVRkRRU3hMUVVGSk0wVXNZVUZCWVR0QlFVTm9Ra01zV1VGQlZUdEJRVU5VUXl4VFFVRk5MRVZCUVVWRExFOUJRVTk1UlN4VFFVRlRjRVFzVDBGQlZDeEZRVUZVTEVWQlFUWkNjVVFzVjBGQlZ5eE5RVUY0UXl4RlFVRm5SSGhGTEU5QlFVOHNSMEZCZGtRc1JVRkVSeXhGUVVNd1JEdEJRVU51UlhsRkxGZEJRVkVzUlVGR1F6dEJRVWRVUXl4WFFVRlJPMEZCU0VNc1IwRkVUVHRCUVUxb1FuUkZMRmRCUVZOMVFqdEJRVTVQTEVWQlFXcENPenRCUVZOQkxFMUJRVXRKTEZWQlFVd3NRMEZCWjBKRExGRkJRV2hDTEVWQlFUQkNja01zVlVGQk1VSTdRVUZEUVN4RFFWcEVPenRCUVdWQk96czdPenRCUVV0QlVDeEpRVUZKYTBJc1UwRkJTaXhEUVVGamMwTXNjVUpCUVdRc1IwRkJjME1zVlVGQlUyaENMRWxCUVZRc1JVRkJZenRCUVVOdVJDeExRVUZKY2tNc1dVRkJWU3hKUVVGa096dEJRVVZCTEV0QlFVZHhReXhMUVVGTFZTeEhRVUZNTEVsQlFWbFdMRXRCUVV0VkxFZEJRVXdzUTBGQlUwa3NSVUZCVkN4SFFVRlpMRU5CUVROQ0xFVkJRVGhDTzBGQlF6ZENNMFFzVTBGQlQwa3NTMEZCVUN4RFFVRmhlVU1zUzBGQlMxVXNSMEZCVEN4RFFVRlRTeXhIUVVGMFFqdEJRVU5CTEZOQlFVOHNTVUZCVUR0QlFVTkJPMEZCUTBRc1VVRkJUMllzUzBGQlMxVXNSMEZCV2p0QlFVTkJMRXRCUVVkV0xGRkJRVkZCTEV0QlFVdGhMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzWkNMRTlCUVVzc1NVRkJTVm9zUTBGQlZDeEpRVUZqUkN4SlFVRmtMRVZCUVc5Q08wRkJRMjVDTEU5QlFVZERMRXRCUVVzc1VVRkJUQ3hKUVVGcFFrRXNTMEZCU3l4TFFVRjZRaXhGUVVGblF6czdRVUZGTDBJc1VVRkJSMFFzUzBGQlMwTXNRMEZCVEN4RlFVRlJVeXhIUVVGU0xFbEJRV1ZXTEV0QlFVdERMRU5CUVV3c1JVRkJVVk1zUjBGQlVpeERRVUZaU1N4RlFVRmFMRWRCUVdVc1EwRkJha01zUlVGQmIwTTdRVUZEYmtNelJDeFpRVUZQU1N4TFFVRlFMRU5CUVdFd1F5eEpRVUZGTEdsQ1FVRkdMRWRCUVc5Q1JDeExRVUZMUXl4RFFVRk1MRVZCUVZGVExFZEJRVklzUTBGQldVc3NSMEZCTjBNN1FVRkRRVHRCUVVOQk96dEJRVVZFTEZGQlFVY3NRMEZCUTNCRUxGTkJRVW9zUlVGRFEwRXNXVUZCVlN4RlFVRldPenRCUVVWRU8wRkJRMEVzVVVGQlJ5eERRVUZEUVN4VlFVRlZjME1zUTBGQlZpeERRVUZLTEVWQlFXdENPMEZCUTJwQ2RFTXNaVUZCVlhORExFTkJRVllzU1VGQllTeEZRVUZpTzBGQlEwRTdRVUZEUkR0QlFVTkJkRU1zWTBGQlZYTkRMRU5CUVZZc1JVRkJZVGRDTEV0QlFXSXNSMEZCYlVJMFFpeExRVUZMUXl4RFFVRk1MRVZCUVZFM1FpeExRVUV6UWp0QlFVTkJPMEZCUTBGVUxHTkJRVlZ6UXl4RFFVRldMRVZCUVdGblF5eFRRVUZpTEVkQlFYVkNha01zUzBGQlMwTXNRMEZCVEN4RlFVRlJaME1zVTBGQkwwSTdRVUZEUVR0QlFVTkJkRVVzWTBGQlZYTkRMRU5CUVZZc1JVRkJZVGhETEV0QlFXSXNSMEZCYlVJdlF5eExRVUZMUXl4RFFVRk1MRVZCUVZFNFF5eExRVUV6UWp0QlFVTkJPMEZCUTBGd1JpeGpRVUZWYzBNc1EwRkJWaXhGUVVGaEswTXNTVUZCWWl4SFFVRnJRbWhFTEV0QlFVdERMRU5CUVV3c1JVRkJVU3RETEVsQlFURkNPMEZCUTBFN1FVRkRRWEpHTEdOQlFWVnpReXhEUVVGV0xFVkJRV0ZuUkN4VFFVRmlMRWRCUVhWQ2FrUXNTMEZCUzBNc1EwRkJUQ3hGUVVGUlowUXNVMEZCTDBJN1FVRkRRVHRCUVVOQmRFWXNZMEZCVlhORExFTkJRVllzUlVGQllXbEVMRkZCUVdJc1IwRkJjMEpzUkN4TFFVRkxReXhEUVVGTUxFVkJRVkZwUkN4UlFVRTVRanM3UVVGRlFUdEJRVU5CZGtZc1kwRkJWWE5ETEVOQlFWWXNSVUZCWVd0RUxGTkJRV0lzUjBGQmVVSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1IwRkJTaXhEUVVGNlFqczdRVUZGUVR0QlFVTkJlRVlzWTBGQlZYTkRMRU5CUVZZc1JVRkJZVzFFTEdGQlFXSXNSMEZCTWtJN1FVRkRNVUk3UVVGRFFVTXNhVUpCUVZseVJDeExRVUZMUXl4RFFVRk1MRVZCUVZGdlJEdEJRVVpOTEV0QlFUTkNPMEZCU1VFeFJpeGpRVUZWYzBNc1EwRkJWaXhGUVVGaGFFTXNTVUZCWWl4SFFVRnZRaXhMUVVGTFRDeE5RVUZNTEVOQlFWa3dSaXhKUVVGYUxFTkJRV2xDZEVRc1MwRkJTME1zUTBGQlRDeEZRVUZSYUVNc1NVRkJla0lzUlVGQk9FSXNTMEZCT1VJc1JVRkJiME1zUTBGQmNFTXNRMEZCY0VJN1FVRkRRVTRzWTBGQlZYTkRMRU5CUVZZc1JVRkJZVVFzU1VGQllpeEhRVUZ4UWtFc1MwRkJTME1zUTBGQlRDeEZRVUZSUkN4SlFVRlNMRWRCUVdFc1MwRkJTM0JETEUxQlFVd3NRMEZCV1RCR0xFbEJRVm9zUTBGQmFVSjBSQ3hMUVVGTFF5eERRVUZNTEVWQlFWRkVMRWxCUVhwQ0xFVkJRVGhDTEV0QlFUbENMRVZCUVc5RExFTkJRWEJETEVOQlFXSXNSMEZCY1VSQkxFdEJRVXRETEVOQlFVd3NSVUZCVVhORUxFZEJRVklzUjBGQldTeExRVUZMTTBZc1RVRkJUQ3hEUVVGWk1FWXNTVUZCV2l4RFFVRnBRblJFTEV0QlFVdERMRU5CUVV3c1JVRkJVWE5FTEVkQlFWSXNRMEZCV1doRExFTkJRVGRDTEVWQlFTdENMRXRCUVM5Q0xFVkJRWEZETEVOQlFYSkRMRU5CUVZvc1IwRkJiMFFzU1VGQk9VZzdRVUZEUVRWRUxHTkJRVlZ6UXl4RFFVRldMRVZCUVdGMVJDeFpRVUZpTEVkQlFUWkNlRVFzUzBGQlMwTXNRMEZCVEN4RlFVRlJSQ3hKUVVGU0xFZEJRV0VzUzBGQlMzQkRMRTFCUVV3c1EwRkJXVEJHTEVsQlFWb3NRMEZCYVVKMFJDeExRVUZMUXl4RFFVRk1MRVZCUVZGM1JDeExRVUY2UWl4RlFVRXJRaXhMUVVFdlFpeEZRVUZ4UXl4RFFVRnlReXhEUVVGaUxFZEJRWE5FZWtRc1MwRkJTME1zUTBGQlRDeEZRVUZSYzBRc1IwRkJVaXhIUVVGWkxFdEJRVXN6Uml4TlFVRk1MRU5CUVZrd1JpeEpRVUZhTEVOQlFXbENkRVFzUzBGQlMwTXNRMEZCVEN4RlFVRlJjMFFzUjBGQlVpeERRVUZaYUVJc1EwRkJOMElzUlVGQkswSXNTMEZCTDBJc1JVRkJjVU1zUTBGQmNrTXNRMEZCV2l4SFFVRnZSQ3hKUVVGMlNUdEJRVU5CTlVVc1kwRkJWWE5ETEVOQlFWWXNSVUZCWVhsRUxFOUJRV0lzUjBGQmRVSXNTMEZCU3psR0xFMUJRVXdzUTBGQldUQkdMRWxCUVZvc1EwRkJhVUowUkN4TFFVRkxReXhEUVVGTUxFVkJRVkY1UkN4UFFVRjZRaXhGUVVGcFF5eExRVUZxUXl4RlFVRjFReXhEUVVGMlF5eERRVUYyUWp0QlFVTkJMRkZCUVVjdlJpeFZRVUZWYzBNc1EwRkJWaXhGUVVGaGVVUXNUMEZCYUVJc1JVRkJlVUk3UVVGRGVFSTdRVUZEUVN4VFFVRkpReXhaUVVGWkxFVkJRV2hDTzBGQlEwRXpSQ3hWUVVGTFlTeE5RVUZNTEVOQlFWbHBReXhOUVVGYUxFTkJRVzFDWXl4UFFVRnVRaXhEUVVFeVFpeFZRVUZUUXl4RlFVRlVMRVZCUVdFN1FVRkRka05HTEdkQ1FVRlZSU3hIUVVGSFF5eEZRVUZpTEVsQlFXbENSQ3hIUVVGSFJTeEpRVUZ3UWp0QlFVTkJMRTFCUmtRN1FVRkhRWEJITEdWQlFWVnpReXhEUVVGV0xFVkJRV0Y1UkN4UFFVRmlMRWRCUVhWQ0wwWXNWVUZCVlhORExFTkJRVllzUlVGQllYbEVMRTlCUVdJc1EwRkJjVUpOTEVkQlFYSkNMRU5CUVhsQ0xGVkJRVk5JTEVWQlFWUXNSVUZCWVR0QlFVTTFSQ3hoUVVGUFJpeFZRVUZWUlN4RlFVRldMRU5CUVZBN1FVRkRRU3hOUVVaelFpeERRVUYyUWp0QlFVZEJPenRCUVVWRWJFY3NZMEZCVlhORExFTkJRVllzUlVGQllVb3NUMEZCWWl4SFFVRjFRaXhMUVVGTGFrTXNUVUZCVEN4RFFVRlpNRVlzU1VGQldpeERRVUZwUW5SRUxFdEJRVXRETEVOQlFVd3NSVUZCVVVvc1QwRkJla0lzUlVGQmFVTXNTMEZCYWtNc1JVRkJkVU1zUTBGQmRrTXNRMEZCZGtJN1FVRkRRV3hETEdOQlFWVnpReXhEUVVGV0xFVkJRV0ZuUlN4RFFVRmlMRWRCUVdsQ0xFbEJRV3BDTzBGQlEwRjBSeXhqUVVGVmMwTXNRMEZCVml4RlFVRmhhVVVzUTBGQllpeEhRVUZwUWl4SlFVRnFRanM3UVVGRlFTeFJRVUZIYkVVc1MwRkJTME1zUTBGQlRDeEZRVUZSYzBRc1IwRkJXQ3hGUVVORE5VWXNWVUZCVlhORExFTkJRVllzUlVGQllYTkVMRWRCUVdJc1IwRkJiVUk3UVVGRGJFSm9ReXhSUVVGSExFdEJRVXN6UkN4TlFVRk1MRU5CUVZrd1JpeEpRVUZhTEVOQlFXbENkRVFzUzBGQlMwTXNRMEZCVEN4RlFVRlJjMFFzUjBGQlVpeERRVUZaYUVNc1EwRkJOMElzUlVGQkswSXNTMEZCTDBJc1JVRkJjVU1zUTBGQmNrTXNRMEZFWlR0QlFVVnNRbWRDTEZGQlFVY3NTMEZCU3pORkxFMUJRVXdzUTBGQldUQkdMRWxCUVZvc1EwRkJhVUowUkN4TFFVRkxReXhEUVVGTUxFVkJRVkZ6UkN4SFFVRlNMRU5CUVZsb1FpeERRVUUzUWl4RlFVRXJRaXhMUVVFdlFpeEZRVUZ4UXl4RFFVRnlRenRCUVVabExFdEJRVzVDTzBGQlNVUXNVVUZCUjNaRExFdEJRVXRETEVOQlFVd3NSVUZCVVd0RkxFZEJRVmdzUlVGRFEzaEhMRlZCUVZWelF5eERRVUZXTEVWQlFXRnJSU3hIUVVGaUxFZEJRVzFDTzBGQlEyeENOVU1zVVVGQlJ5eExRVUZMTTBRc1RVRkJUQ3hEUVVGWk1FWXNTVUZCV2l4RFFVRnBRblJFTEV0QlFVdERMRU5CUVV3c1JVRkJVV3RGTEVkQlFWSXNRMEZCV1RWRExFTkJRVGRDTEVWQlFTdENMRXRCUVM5Q0xFVkJRWEZETEVOQlFYSkRMRU5CUkdVN1FVRkZiRUpuUWl4UlFVRkhMRXRCUVVzelJTeE5RVUZNTEVOQlFWa3dSaXhKUVVGYUxFTkJRV2xDZEVRc1MwRkJTME1zUTBGQlRDeEZRVUZSYTBVc1IwRkJVaXhEUVVGWk5VSXNRMEZCTjBJc1JVRkJLMElzUzBGQkwwSXNSVUZCY1VNc1EwRkJja003UVVGR1pTeExRVUZ1UWp0QlFVbEVMRkZCUVVkMlF5eExRVUZMUXl4RFFVRk1MRVZCUVZGdFJTeEhRVUZZTEVWQlEwTjZSeXhWUVVGVmMwTXNRMEZCVml4RlFVRmhiVVVzUjBGQllpeEhRVUZ0UWp0QlFVTnNRamRETEZGQlFVY3NTMEZCU3pORUxFMUJRVXdzUTBGQldUQkdMRWxCUVZvc1EwRkJhVUowUkN4TFFVRkxReXhEUVVGTUxFVkJRVkZ0UlN4SFFVRlNMRU5CUVZrM1F5eERRVUUzUWl4RlFVRXJRaXhMUVVFdlFpeEZRVUZ4UXl4RFFVRnlReXhEUVVSbE8wRkJSV3hDWjBJc1VVRkJSeXhMUVVGTE0wVXNUVUZCVEN4RFFVRlpNRVlzU1VGQldpeERRVUZwUW5SRUxFdEJRVXRETEVOQlFVd3NSVUZCVVcxRkxFZEJRVklzUTBGQldUZENMRU5CUVRkQ0xFVkJRU3RDTEV0QlFTOUNMRVZCUVhGRExFTkJRWEpETzBGQlJtVXNTMEZCYmtJN1FVRkpSQ3hSUVVGSGRrTXNTMEZCUzBNc1EwRkJUQ3hGUVVGUmIwVXNUVUZCV0N4RlFVTkRNVWNzVlVGQlZYTkRMRU5CUVZZc1JVRkJZVzlGTEUxQlFXSXNSMEZCYzBJN1FVRkRja0k1UXl4UlFVRkhMRXRCUVVzelJDeE5RVUZNTEVOQlFWa3dSaXhKUVVGYUxFTkJRV2xDZEVRc1MwRkJTME1zUTBGQlRDeEZRVUZSYjBVc1RVRkJVaXhEUVVGbE9VTXNRMEZCYUVNc1JVRkJhME1zUzBGQmJFTXNSVUZCZDBNc1EwRkJlRU1zUTBGRWEwSTdRVUZGY2tKblFpeFJRVUZITEV0QlFVc3pSU3hOUVVGTUxFTkJRVmt3Uml4SlFVRmFMRU5CUVdsQ2RFUXNTMEZCUzBNc1EwRkJUQ3hGUVVGUmIwVXNUVUZCVWl4RFFVRmxPVUlzUTBGQmFFTXNSVUZCYTBNc1MwRkJiRU1zUlVGQmQwTXNRMEZCZUVNN1FVRkdhMElzUzBGQmRFSTdRVUZKUkN4UlFVRkhka01zUzBGQlMwTXNRMEZCVEN4RlFVRlJiMFVzVFVGQldDeEZRVU5ETVVjc1ZVRkJWWE5ETEVOQlFWWXNSVUZCWVc5RkxFMUJRV0lzUjBGQmMwSTdRVUZEY2tJNVF5eFJRVUZITEV0QlFVc3pSQ3hOUVVGTUxFTkJRVmt3Uml4SlFVRmFMRU5CUVdsQ2RFUXNTMEZCUzBNc1EwRkJUQ3hGUVVGUmIwVXNUVUZCVWl4RFFVRmxPVU1zUTBGQmFFTXNSVUZCYTBNc1MwRkJiRU1zUlVGQmQwTXNRMEZCZUVNc1EwRkVhMEk3UVVGRmNrSm5RaXhSUVVGSExFdEJRVXN6UlN4TlFVRk1MRU5CUVZrd1JpeEpRVUZhTEVOQlFXbENkRVFzUzBGQlMwTXNRMEZCVEN4RlFVRlJiMFVzVFVGQlVpeERRVUZsT1VJc1EwRkJhRU1zUlVGQmEwTXNTMEZCYkVNc1JVRkJkME1zUTBGQmVFTTdRVUZHYTBJc1MwRkJkRUk3UVVGSlJDeFJRVUZIZGtNc1MwRkJTME1zUTBGQlRDeEZRVUZSWjBVc1EwRkJXQ3hGUVVORGRFY3NWVUZCVlhORExFTkJRVllzUlVGQllXZEZMRU5CUVdJc1IwRkJhVUlzUzBGQlMzSkhMRTFCUVV3c1EwRkJXVEJHTEVsQlFWb3NRMEZCYVVKMFJDeExRVUZMUXl4RFFVRk1MRVZCUVZGblJTeERRVUY2UWl4RlFVRXlRaXhMUVVFelFpeEZRVUZwUXl4RFFVRnFReXhEUVVGcVFqdEJRVU5FTEZGQlFVZHFSU3hMUVVGTFF5eERRVUZNTEVWQlFWRnBSU3hEUVVGWUxFVkJRME4yUnl4VlFVRlZjME1zUTBGQlZpeEZRVUZoYVVVc1EwRkJZaXhIUVVGcFFpeExRVUZMZEVjc1RVRkJUQ3hEUVVGWk1FWXNTVUZCV2l4RFFVRnBRblJFTEV0QlFVdERMRU5CUVV3c1JVRkJVV2xGTEVOQlFYcENMRVZCUVRKQ0xFdEJRVE5DTEVWQlFXbERMRU5CUVdwRExFTkJRV3BDTzBGQlEwUTdPenM3TzBGQlMwRTdRVUZEUVhaSExHTkJRVlZ6UXl4RFFVRldMRVZCUVdGeFJTeExRVUZpTEVkQlFYRkNMRXRCUVhKQ08wRkJRMEU3UVVGRFJEdEJRVU5FTEVWQk9VWkVMRTFCSzBaTE8wRkJRMHB1U0N4VFFVRlBTU3hMUVVGUUxFTkJRV0VzZDBOQlFXSTdRVUZEUVR0QlFVTkVPMEZCUTBRN1FVRkRReXhOUVVGTFNTeFRRVUZNTEVkQlFXVkJMRk5CUVdZN1FVRkRRU3hSUVVGUFFTeFRRVUZRTzBGQlEwRXNRMEU1UjBRN08wRkJiMGhCTzBGQlEwRmlMR0ZCUVdFMFFpeFRRVUZpTEVOQlFYVkNiRUlzUjBGQmRrSXNSMEZCTmtJc1dVRkJWVHRCUVVOMFF5eFJRVUZQTEVsQlFVbEJMRWRCUVVvc1EwRkJVU3hKUVVGU0xFTkJRVkE3UVVGRFFTeERRVVpFSWl3aVptbHNaU0k2SW1sbGNTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUlHMWhlV0V0WTJ4cFpXNTBYRzRnS2lCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRRc0lGQmhjblJ1WlhKcGJtY2dVbTlpYjNScFkzTXNJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tpQlVhR2x6SUd4cFluSmhjbmtnYVhNZ1puSmxaU0J6YjJaMGQyRnlaVHNnZVc5MUlHTmhiaUJ5WldScGMzUnlhV0oxZEdVZ2FYUWdZVzVrTDI5eVhHNGdLaUJ0YjJScFpua2dhWFFnZFc1a1pYSWdkR2hsSUhSbGNtMXpJRzltSUhSb1pTQkhUbFVnVEdWemMyVnlJRWRsYm1WeVlXd2dVSFZpYkdsalhHNGdLaUJNYVdObGJuTmxJR0Z6SUhCMVlteHBjMmhsWkNCaWVTQjBhR1VnUm5KbFpTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVPeUIyWlhKemFXOXVYRzRnS2x4ME15NHdJRzltSUhSb1pTQk1hV05sYm5ObExpQlVhR2x6SUd4cFluSmhjbmtnYVhNZ1pHbHpkSEpwWW5WMFpXUWdhVzRnZEdobElHaHZjR1ZjYmlBcUlIUm9ZWFFnYVhRZ2QybHNiQ0JpWlNCMWMyVm1kV3dzSUdKMWRDQlhTVlJJVDFWVUlFRk9XU0JYUVZKU1FVNVVXVHNnZDJsMGFHOTFkQ0JsZG1WdVhHNGdLaUIwYUdVZ2FXMXdiR2xsWkNCM1lYSnlZVzUwZVNCdlppQk5SVkpEU0VGT1ZFRkNTVXhKVkZrZ2IzSWdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU1hHNGdLaUJRVlZKUVQxTkZMaUJUWldVZ2RHaGxJRWRPVlNCTVpYTnpaWElnUjJWdVpYSmhiQ0JRZFdKc2FXTWdUR2xqWlc1elpTQm1iM0lnYlc5eVpTQmtaWFJoYVd4ekxseHVJQ29nV1c5MUlITm9iM1ZzWkNCb1lYWmxJSEpsWTJWcGRtVmtJR0VnWTI5d2VTQnZaaUIwYUdVZ1IwNVZJRXhsYzNObGNpQkhaVzVsY21Gc0lGQjFZbXhwWTF4dUlDb2dUR2xqWlc1elpTQmhiRzl1WnlCM2FYUm9JSFJvYVhNZ2JHbGljbUZ5ZVM1Y2JpQXFMMXh1WEc0dktpcGNiaUFnSUZSdlpHOGdPbHh1SUNBZ1kyaGxZMnNnWlhKeUlHWnZjaUJsWVdOb0lHUmhkR0ZjYmlBZ0lHbHRjSEp2ZG1VZ1FWQkpJRG9nWjJWMFJHRjBZU2h6Wlc1emIzSk9ZVzFsTENCa1lYUmhRMjl1Wm1sbktWeHVJQ0FnY21WMGRYSnVJR0ZrWVhCMFpXUWdkbVZqZEc5eUlHWnZjaUJrYVhOd2JHRjVJSGRwZEdnZ1JETWdkRzhnY21Wa2RXTmxJR052WkdVZ2FXNGdTVWhOSUQ5Y2JpQWdJSFZ3WkdGMFpVUmhkR0VvYzJWdWMyOXlUbUZ0WlN3Z1pHRjBZVU52Ym1acFp5bGNiaUFnSUhObGRDQmhibVFnWjJWMElHWnZjaUIwYUdVZ1pHbG1abVZ5Wlc1MElHUmhkR0ZEYjI1bWFXY2djR0Z5WVcxelhHNWNiaW92WEc1Y2JuWmhjaUJFYVhsaFUyVnNaV04wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5RWFYbGhVMlZzWldOMGIzSW5LUzVFYVhsaFUyVnNaV04wYjNJN1hHNTJZWElnZFhScGJDQTlJSEpsY1hWcGNtVW9KM1YwYVd3bktUdGNibHh1WEc1MllYSWdUV1Z6YzJGblpTQTlJSEpsY1hWcGNtVW9KeTR1TDIxbGMzTmhaMlVuS1R0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THlCTWIyZG5hVzVuSUhWMGFXeHBkSGtnYldWMGFHOWtjeUF2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc1Y2JuWmhjaUJFUlVKVlJ5QTlJSFJ5ZFdVN1hHNTJZWElnVEc5bloyVnlJRDBnZTF4dVhIUnNiMmM2SUdaMWJtTjBhVzl1S0cxbGMzTmhaMlVwZTF4dVhIUmNkR2xtS0VSRlFsVkhLU0JqYjI1emIyeGxMbXh2WnlodFpYTnpZV2RsS1R0Y2JseDBmU3hjYmx4dVhIUmxjbkp2Y2pvZ1puVnVZM1JwYjI0b2JXVnpjMkZuWlNsN1hHNWNkRngwYVdZb1JFVkNWVWNwSUdOdmJuTnZiR1V1WlhKeWIzSW9iV1Z6YzJGblpTazdYRzVjZEgxY2JuMDdYRzVjYmk4cUtseHVJQ3BjZEdOaGJHeGlZV05ySURvZ1puVnVZM1JwYjI0Z1kyRnNiR1ZrSUdGbWRHVnlJRzF2WkdWc0lIVndaR0YwWldSY2JpQXFJQ292WEc1bWRXNWpkR2x2YmlCSlJWRW9jMlZzWldOMGIzSXBlMXh1WEhSMllYSWdkR2hoZENBOUlIUm9hWE03WEc1Y2RIUm9hWE11YzJWc1pXTjBiM0lnUFNCelpXeGxZM1J2Y2p0Y2JseDBkR2hwY3k1a1lYUmhUVzlrWld3OWUzMDdYRzVjZEhSb2FYTXVYMk52WkdWeUlEMGdjMlZzWldOMGIzSXVaVzVqYjJSbEtDazdYRzVjZEhSb2FYTXVjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlGdGRPMXh1THk5Y2RIUm9ZWFF1YzNWaWMyTnlhWEIwYVc5dVJYSnliM0pPZFcwZ1BTQXdPMXh1WEc1Y2RDOHFLaW9nYzNSeWRXTjBkWEpsSUc5bUlHUmhkR0VnWTI5dVptbG5JQ29xS2x4dVhIUmNkQ0JqY21sMFpYSnBZU0E2WEc1Y2RGeDBJQ0FnZEdsdFpUb2dZV3hzSURNZ2RHbHRaU0JqY21sMFpYSnBZU0J6YUc5MWJHUWdibTkwSUdKbElHUmxabWx1WldRZ1lYUWdkR2hsSUhOaGJXVWdkR2x0WlM0Z0tISmhibWRsSUhkdmRXeGtJR0psSUdkcGRtVnVJSFZ3S1Z4dVhIUmNkQ0FnSUNBZ2MzUmhjblE2SUh0YmJuVnNiRjBzZEdsdFpYMGdLRzUxYkd3Z2JXVmhibk1nYlc5emRDQnlaV05sYm5RcElDOHZJSE4wYjNKbFpDQmhJRlZVUXlCcGJpQnRjeUFvYm5WdEtWeHVYSFJjZENBZ0lDQWdaVzVrT2lCN1cyNTFiR3hkTENCMGFXMWxmU0FvYm5Wc2JDQnRaV0Z1Y3lCdGIzTjBJRzlzWkdWemRDa2dMeThnYzNSdmNtVmtJR0Z6SUZWVVF5QnBiaUJ0Y3lBb2JuVnRLVnh1WEhSY2RDQWdJQ0FnY21GdVoyVTZJSHRiYm5Wc2JGMHNJSFJwYldWOUlDaHlZVzVuWlNCdlppQjBhVzFsS0hCdmMybDBhWFpsS1NBcElDOHZJR2x1SUhNZ0tHNTFiU2xjYmx4MFhIUWdJQ0J5YjJKdmREb2dlMEZ5Y21GNVQyWWdTVVFnYjNJZ1cxd2lZV3hzWENKZGZWeHVYSFJjZENBZ0lIQnNZV05sT2lCN1FYSnlZWGxQWmlCSlJDQnZjaUJiWENKaGJHeGNJbDE5WEc1Y2RGeDBJRzl3WlhKaGRHOXlPaUI3VzJ4aGMzUmRMQ0J0WVhnc0lHMXZlU3dnYzJSOUlDMG9JRzFoZVdKbElHMXZlU0J6YUc5MWJHUWdZbVVnWkdWbVlYVnNkRnh1WEhSY2RDQXVMaTVjYmx4dVhIUmNkQ0J6Wlc1emIzSnpJRG9nZTF0dWRXeHNYU0J2Y2lCQmNuSmhlVTltSUZObGJuTnZjazVoYldWOVhHNWNibHgwWEhRZ2MyRnRjR3hwYm1jNklIdGJiblZzYkYwZ2IzSWdhVzUwZlZ4dVhIUXFMMXh1WEhSMGFHbHpMbVJoZEdGRGIyNW1hV2NnUFNCN1hHNWNkRngwWTNKcGRHVnlhV0U2SUh0Y2JseDBYSFJjZEhScGJXVTZJSHRjYmx4MFhIUmNkRngwYzNSaGNuUTZJRzUxYkd3c1hHNWNkRngwWEhSY2RHVnVaRG9nYm5Wc2JDeGNibHgwWEhSY2RGeDBjbUZ1WjJVNklHNTFiR3dnTHk4Z2FXNGdjMXh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkSEp2WW05ME9pQnVkV3hzTEZ4dVhIUmNkRngwY0d4aFkyVTZJRzUxYkd4Y2JseDBYSFI5TEZ4dVhIUmNkRzl3WlhKaGRHOXlPaUFuYkdGemRDY3NYRzVjZEZ4MGMyVnVjMjl5Y3pvZ2JuVnNiQ3hjYmx4MFhIUnpZVzF3YkdsdVp6b2diblZzYkNBdkwzTmhiWEJzYVc1blhHNWNkSDA3WEc1Y2JseDBjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzR2S2lwY2JpQXFJRWRsZENCa1lYUmhUVzlrWld3Z09seHVJQ29nZTF4dUlDcGNkRndpYzJWdWMyVjFjbGhZWENJNklIdGNiaUFxWEhSY2RGeDBaR0YwWVRwYlJreFBRVlFzSUM0dUxsMHNYRzRnS2x4MFhIUmNkSFJwYldVNlcwWk1UMEZVTENBdUxpNWRMRnh1SUNwY2RGeDBYSFJ5YjJKdmREcGJSa3hQUVZRc0lDNHVMbDBzWEc0Z0tseDBYSFJjZEhCc1lXTmxPbHRHVEU5QlZDd2dMaTR1WFN4Y2JpQXFYSFJjZEZ4MGNYVmhiR2wwZVVsdVpHVjRPbHRHVEU5QlZDd2dMaTR1WFN4Y2JpQXFYSFJjZEZ4MGNtRnVaMlU2SUZ0R1RFOUJWQ3dnUmt4UFFWUmRMRnh1SUNwY2RGeDBYSFIxYm1sME9pQnpkSEpwYm1jc1hHNGdLbHgwWEhSc1lXSmxiRG9nYzNSeWFXNW5YRzRnS2x4MFhIUjlMRnh1SUNwY2RDQXVMaTRnS0Z3aWMyVnVjMlYxY25OWldWd2lLVnh1SUNvZ2ZWeHVJQ292WEc1SlJWRXVjSEp2ZEc5MGVYQmxMbWRsZEVSaGRHRk5iMlJsYkNBOUlHWjFibU4wYVc5dUtDbDdYRzVjZEhKbGRIVnliaUIwYUdsekxtUmhkR0ZOYjJSbGJEdGNibjA3WEc1SlJWRXVjSEp2ZEc5MGVYQmxMbWRsZEVSaGRHRlNZVzVuWlNBOUlHWjFibU4wYVc5dUtDbDdYRzVjZEhKbGRIVnliaUIwYUdsekxtUmhkR0ZOYjJSbGJDNXlZVzVuWlR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JoZEdGRGIyNW1hV2NnWTI5dVptbG5JR1p2Y2lCa1lYUmhJSEpsY1hWbGMzUmNiaUFxSUdsbUlHUmhkR0ZEYjI1bWFXY2dhWE1nWkdWbWFXNWxJRG9nYzJWMElHRnVaQ0J5WlhSMWNtNGdkR2hwYzF4dUlDcGNkQ0JBY21WMGRYSnVJSHRKUlZGOUlIUm9hWE5jYmlBcUlHVnNjMlZjYmlBcVhIUWdRSEpsZEhWeWJpQjdUMkpxWldOMGZTQmpkWEp5Wlc1MElHUmhkR0ZEYjI1bWFXZGNiaUFxTDF4dVNVVlJMbkJ5YjNSdmRIbHdaUzVFWVhSaFEyOXVabWxuSUQwZ1puVnVZM1JwYjI0b2JtVjNSR0YwWVVOdmJtWnBaeWw3WEc1Y2RHbG1LRzVsZDBSaGRHRkRiMjVtYVdjcElIdGNibHgwWEhSMGFHbHpMbVJoZEdGRGIyNW1hV2M5Ym1WM1JHRjBZVU52Ym1acFp6dGNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlZ4dVhIUmxiSE5sWEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WkdGMFlVTnZibVpwWnp0Y2JuMDdYRzR2S2lwY2JpQXFJRlJQSUVKRklFbE5VRXhGVFVWT1ZFVkVJRG9nYjNCbGNtRjBiM0lnYldGdVlXZGxiV1Z1ZENCcGJpQkVUaTFKUlZGY2JpQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMWNkQ0J1WlhkUGNHVnlZWFJ2Y2lBNklIdGJiR0Z6ZEYwc0lHMWhlQ3dnYlc5NUxDQnpaSDFjYmlBcUlFQnlaWFIxY200Z2UwbEZVWDBnZEdocGN5QXRJR05vWVdsdVlXSnNaVnh1SUNvZ1UyVjBJRzl3WlhKaGRHOXlJR055YVhSbGNtbGhMbHh1SUNvZ1JHVndaVzVrY3lCdmJpQnVaWGRQY0dWeVlYUnZjbHh1SUNwY2RFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVpYZFBjR1Z5WVhSdmNseHVJQ3BjZEVCeVpYUjFjbTRnZEdocGMxeHVJQ29nUjJWMElHOXdaWEpoZEc5eUlHTnlhWFJsY21saExseHVJQ3BjZEVCeVpYUjFjbTRnZTFOMGNtbHVaMzBnYjNCbGNtRjBiM0pjYmlBcUwxeHVTVVZSTG5CeWIzUnZkSGx3WlM1RVlYUmhUM0JsY21GMGIzSWdQU0JtZFc1amRHbHZiaWh1WlhkUGNHVnlZWFJ2Y2lsN1hHNWNkR2xtS0c1bGQwOXdaWEpoZEc5eUtTQjdYRzVjZEZ4MGRHaHBjeTVrWVhSaFEyOXVabWxuTG05d1pYSmhkRzl5SUQwZ2JtVjNUM0JsY21GMGIzSTdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgxY2JseDBaV3h6WlZ4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1SaGRHRkRiMjVtYVdjdWIzQmxjbUYwYjNJN1hHNTlPMXh1THlvcVhHNGdLaUJFWlhCbGJtUnpJRzl1SUc1MWJWTmhiWEJzWlhOY2JpQXFJRUJ3WVhKaGJTQjdhVzUwZlNCdWRXMWlaWElnYjJZZ2MyRnRjR3hsY3lCcGJpQmtZWFJoVFc5a1pXeGNiaUFxSUdsbUlHUmxabWx1WldRZ09pQnpaWFFnYm5WdFltVnlJRzltSUhOaGJYQnNaWE5jYmlBcVhIUkFjbVYwZFhKdUlIdEpSVkY5SUhSb2FYTmNiaUFxSUdWc2MyVmNiaUFxWEhSQWNtVjBkWEp1SUh0cGJuUjlJRzUxYldKbGNpQnZaaUJ6WVcxd2JHVnpYRzRnS2lvdlhHNUpSVkV1Y0hKdmRHOTBlWEJsTGtSaGRHRlRZVzF3YkdsdVp5QTlJR1oxYm1OMGFXOXVLRzUxYlZOaGJYQnNaWE1wZTF4dVhIUnBaaWh1ZFcxVFlXMXdiR1Z6S1NCN1hHNWNkRngwZEdocGN5NWtZWFJoUTI5dVptbG5Mbk5oYlhCc2FXNW5JRDBnYm5WdFUyRnRjR3hsY3p0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEhSbGJITmxYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaR0YwWVVOdmJtWnBaeTV6WVcxd2JHbHVaenRjYm4wN1hHNHZLaXBjYmlBcUlGTmxkQ0J2Y2lCblpYUWdaR0YwWVNCMGFXMWxJR055YVhSbGNtbGhJSE4wWVhKMElHRnVaQ0JsYm1RdVhHNGdLaUJKWmlCd1lYSmhiU0JrWldacGJtVmtYRzRnS2x4MFFIQmhjbUZ0SUh0RVlYUmxmU0J1WlhkVWFXMWxVM1JoY25RZ0x5OGdiV0Y1SUdKbElHNTFiR3hjYmlBcVhIUkFjR0Z5WVcwZ2UwUmhkR1Y5SUc1bGQxUnBiV1ZGYm1RZ0x5OGdiV0Y1SUdKbElHNTFiR3hjYmlBcVhIUkFjbVYwZFhKdUlIdEpSVkY5SUhSb2FYTmNiaUFxSUVsbUlHNXZJSEJoY21GdElHUmxabWx1WldRNlhHNGdLbHgwUUhKbGRIVnliaUI3VDJKcVpXTjBmU0JVYVcxbElHOWlhbVZqZERvZ1ptbGxiR1J6SUhOMFlYSjBJR0Z1WkNCbGJtUXVYRzRnS2k5Y2JrbEZVUzV3Y205MGIzUjVjR1V1UkdGMFlWUnBiV1VnUFNCbWRXNWpkR2x2YmlodVpYZFVhVzFsVTNSaGNuUXNibVYzVkdsdFpVVnVaQ3dnYm1WM1VtRnVaMlVwZTF4dVhIUnBaaWh1WlhkVWFXMWxVM1JoY25RZ2ZId2dibVYzVkdsdFpVVnVaQ0I4ZkNCdVpYZFNZVzVuWlNrZ2UxeHVYSFJjZEhSb2FYTXVaR0YwWVVOdmJtWnBaeTVqY21sMFpYSnBZUzUwYVcxbExuTjBZWEowSUQwZ2JtVjNWR2x0WlZOMFlYSjBMbWRsZEZScGJXVW9LVHRjYmx4MFhIUjBhR2x6TG1SaGRHRkRiMjVtYVdjdVkzSnBkR1Z5YVdFdWRHbHRaUzVsYm1RZ1BTQnVaWGRVYVcxbFJXNWtMbWRsZEZScGJXVW9LVHRjYmx4MFhIUjBhR2x6TG1SaGRHRkRiMjVtYVdjdVkzSnBkR1Z5YVdFdWRHbHRaUzV5WVc1blpTQTlJRzVsZDFKaGJtZGxPMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOVhHNWNkR1ZzYzJWY2JseDBYSFJ5WlhSMWNtNGdlMXh1WEhSY2RGeDBjM1JoY25RNklHNWxkeUJFWVhSbEtIUm9hWE11WkdGMFlVTnZibVpwWnk1amNtbDBaWEpwWVM1MGFXMWxMbk4wWVhKMEtTeGNibHgwWEhSY2RHVnVaRG9nYm1WM0lFUmhkR1VvZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMblJwYldVdVpXNWtLU3hjYmx4MFhIUmNkSEpoYm1kbE9pQnVaWGNnUkdGMFpTaDBhR2x6TG1SaGRHRkRiMjVtYVdjdVkzSnBkR1Z5YVdFdWRHbHRaUzV5WVc1blpTbGNibHgwWEhSOU8xeHVmVHRjYmk4cUtseHVJQ29nUkdWd1pXNWtjeUJ2YmlCeWIySnZkRWxrYzF4dUlDb2dVMlYwSUhKdlltOTBJR055YVhSbGNtbGhMbHh1SUNwY2RFQndZWEpoYlNCN1FYSnlZWGxiU1c1MFhYMGdjbTlpYjNSSlpITWdiR2x6ZENCdlppQnliMkp2ZENCSlpITmNiaUFxSUVkbGRDQnliMkp2ZENCamNtbDBaWEpwWVM1Y2JpQXFYSFJBY21WMGRYSnVJSHRCY25KaGVWdEpiblJkZlNCc2FYTjBJRzltSUhKdlltOTBJRWxrYzF4dUlDb3ZYRzVKUlZFdWNISnZkRzkwZVhCbExrUmhkR0ZTYjJKdmRFbGtjeUE5SUdaMWJtTjBhVzl1S0hKdlltOTBTV1J6S1h0Y2JseDBhV1lvY205aWIzUkpaSE1wSUh0Y2JseDBYSFIwYUdsekxtUmhkR0ZEYjI1bWFXY3VZM0pwZEdWeWFXRXVjbTlpYjNRZ1BTQnliMkp2ZEVsa2N6dGNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlZ4dVhIUmxiSE5sWEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WkdGMFlVTnZibVpwWnk1amNtbDBaWEpwWVM1eWIySnZkRHRjYm4wN1hHNHZLaXBjYmlBcUlFUmxjR1Z1WkhNZ2IyNGdjR3hoWTJWSlpITmNiaUFxSUZObGRDQndiR0ZqWlNCamNtbDBaWEpwWVM1Y2JpQXFYSFJBY0dGeVlXMGdlMEZ5Y21GNVcwbHVkRjE5SUhCc1lXTmxTV1J6SUd4cGMzUWdiMllnY0d4aFkyVWdTV1J6WEc0Z0tpQkhaWFFnY0d4aFkyVWdZM0pwZEdWeWFXRXVYRzRnS2x4MFFISmxkSFZ5YmlCN1FYSnlZWGxiU1c1MFhYMGdiR2x6ZENCdlppQndiR0ZqWlNCSlpITmNiaUFxTDF4dVNVVlJMbkJ5YjNSdmRIbHdaUzVFWVhSaFVHeGhZMlZKWkhNZ1BTQm1kVzVqZEdsdmJpaHdiR0ZqWlVsa2N5bDdYRzVjZEdsbUtIQnNZV05sU1dSektTQjdYRzVjZEZ4MGRHaHBjeTVrWVhSaFEyOXVabWxuTG1OeWFYUmxjbWxoTG5Cc1lXTmxTV1FnUFNCd2JHRmpaVWxrY3p0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEhSbGJITmxYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaR0YwWVVOdmJtWnBaeTVqY21sMFpYSnBZUzV3YkdGalpUdGNibjA3WEc0dktpcGNiaUFxSUVkbGRDQmtZWFJoSUdKNUlITmxibk52Y2lCdVlXMWxMbHh1SUNwY2RFQndZWEpoYlNCN1FYSnlZWGxiVTNSeWFXNW5YWDBnYzJWdWMyOXlUbUZ0WlNCc2FYTjBJRzltSUhObGJuTnZjbk5jYmlBcUwxeHVTVVZSTG5CeWIzUnZkSGx3WlM1blpYUkVZWFJoUW5sT1lXMWxJRDBnWm5WdVkzUnBiMjRvYzJWdWMyOXlUbUZ0WlhNcGUxeHVYSFIyWVhJZ1pHRjBZVDFiWFR0Y2JseDBabTl5S0haaGNpQnVJR2x1SUhObGJuTnZjazVoYldWektTQjdYRzVjZEZ4MFpHRjBZUzV3ZFhOb0tIUm9hWE11WkdGMFlVMXZaR1ZzVzNObGJuTnZjazVoYldWelcyNWRYU2s3WEc1Y2RIMWNibHgwY21WMGRYSnVJR1JoZEdFN1hHNTlPMXh1THlvcVhHNGdLaUJWY0dSaGRHVWdaR0YwWVNCbmFYWmxiaUJrWVhSaFEyOXVabWxuTGx4dUlDb2dRSEJoY21GdElIdG1kVzVqZlNCallXeHNZbUZqYXlBNklHTmhiR3hsWkNCaFpuUmxjaUIxY0dSaGRHVmNiaUFxSUZSUFJFOGdWVk5GSUZCU1QwMUpVMFZjYmlBcUwxeHVTVVZSTG5CeWIzUnZkSGx3WlM1MWNHUmhkR1ZFWVhSaElEMGdablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3NJR1JoZEdGRGIyNW1hV2NwZTF4dVhIUjJZWElnZEdoaGREMTBhR2x6TzF4dVhIUnBaaWhrWVhSaFEyOXVabWxuS1Z4dVhIUmNkSFJvYVhNdVJHRjBZVU52Ym1acFp5aGtZWFJoUTI5dVptbG5LVHRjYmx4MEx5OGdZMjl1YzI5c1pTNXNiMmNvWENKU1pYRjFaWE4wT2lCY0lpdEtVMDlPTG5OMGNtbHVaMmxtZVNoa1lYUmhRMjl1Wm1sbktTazdYRzVjZEhSb2FYTXVjMlZzWldOMGIzSXVjbVZ4ZFdWemRDaDdYRzVjZEZ4MGMyVnlkbWxqWlRvZ1hDSnBaWEZjSWl4Y2JseDBYSFJtZFc1ak9pQmNJa1JoZEdGU1pYRjFaWE4wWENJc1hHNWNkRngwWkdGMFlUb2dlMXh1WEhSY2RGeDBkSGx3WlRwY0luTndiRkpsY1Z3aUxGeHVYSFJjZEZ4MFpHRjBZVU52Ym1acFp6b2dkR2hoZEM1a1lYUmhRMjl1Wm1sblhHNWNkRngwZlZ4dVhIUjlMQ0JtZFc1amRHbHZiaWhrYmtsa0xDQmxjbklzSUdSaGRHRXBlMXh1WEhSY2RHbG1LR1Z5Y2lrZ2UxeHVYSFJjZEZ4MFRHOW5aMlZ5TG1WeWNtOXlLRndpVzF3aUszUm9ZWFF1WkdGMFlVTnZibVpwWnk1elpXNXpiM0p6SzF3aVhTQlNaV04ySUdWeWNqb2dYQ0lyU2xOUFRpNXpkSEpwYm1kcFpua29aWEp5S1NrN1hHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEhSY2RHbG1LR1JoZEdFdWFHVmhaR1Z5TG1WeWNtOXlLU0I3WEc1Y2RGeDBYSFF2THlCVVQwUlBJRG9nWTJobFkyc3ZkWE5sSUdWeWNpQnpkR0YwZFhNZ1lXNWtJR0ZrWVhCMElHSmxhR0YyYVc5eUlHRmpZMjl5WkdsdVoyeDVYRzVjZEZ4MFhIUk1iMmRuWlhJdVpYSnliM0lvWENKVmNHUmhkR1ZFWVhSaE9seGNibHdpSzBwVFQwNHVjM1J5YVc1bmFXWjVLR1JoZEdFdWFHVmhaR1Z5TG1SaGRHRkRiMjVtYVdjcEtUdGNibHgwWEhSY2RFeHZaMmRsY2k1bGNuSnZjaWhjSWtSaGRHRWdjbVZ4ZFdWemRDQm1ZV2xzWldRZ0tGd2lLMlJoZEdFdWFHVmhaR1Z5TG1WeWNtOXlMbk4wSzF3aUtUb2dYQ0lyWkdGMFlTNW9aV0ZrWlhJdVpYSnliM0l1YlhObktUdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCamIyNXpiMnhsTG14dlp5aGtZWFJoS1R0Y2JseDBYSFIwYUdGMExsOW5aWFJFWVhSaFRXOWtaV3hHY205dFVtVmpkaWhrWVhSaEtUdGNibHh1WEhSY2RDOHZJRXh2WjJkbGNpNXNiMmNvZEdoaGRDNW5aWFJFWVhSaFRXOWtaV3dvS1NrN1hHNWNibHgwWEhSallXeHNZbUZqYXlBOUlHTmhiR3hpWVdOckxtSnBibVFvZEdoaGRDazdJQzh2SUdKcGJtUWdZMkZzYkdKaFkyc2dkMmwwYUNCSlJWRmNibHgwWEhSallXeHNZbUZqYXloMGFHRjBMbWRsZEVSaGRHRk5iMlJsYkNncEtUc2dMeThnWTJGc2JHSmhZMnNnWm5WdVkxeHVYSFI5S1R0Y2JuMDdYRzVjYmtsRlVTNXdjbTkwYjNSNWNHVXVYMmx6UkdGMFlVMXZaR1ZzVjJsMGFFNWhUaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIyWVhJZ1pHRjBZVTF2WkdWc1RtRk9QV1poYkhObE8xeHVYSFIyWVhJZ2MyVnVjMjl5VG1GdU8xeHVYSFJtYjNJb2RtRnlJRzRnYVc0Z2RHaHBjeTVrWVhSaFRXOWtaV3dwSUh0Y2JseDBYSFJ6Wlc1emIzSk9ZVzRnUFNCMGFHbHpMbVJoZEdGTmIyUmxiRnR1WFM1a1lYUmhMbkpsWkhWalpTaG1kVzVqZEdsdmJpaHVZVzVRY21WekxHUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnVZVzVRY21WeklDWW1JR2x6VG1GT0tHUXBPMXh1WEhSY2RIMHNabUZzYzJVcE8xeHVYSFJjZEdSaGRHRk5iMlJsYkU1aFRpQTlJR1JoZEdGTmIyUmxiRTVoVGlBbUppQnpaVzV6YjNKT1lXNDdYRzVjZEZ4MFRHOW5aMlZ5TG14dlp5aHVLMXdpSUhkcGRHZ2dibUZ1SURvZ1hDSXJjMlZ1YzI5eVRtRnVLMXdpSUNoY0lpdGtZWFJoVFc5a1pXeE9ZVTRyWENJcElDOGdYQ0lyZEdocGN5NWtZWFJoVFc5a1pXeGJibDB1WkdGMFlTNXNaVzVuZEdncE8xeHVYSFI5WEc1OU8xeHVYRzVKUlZFdWNISnZkRzkwZVhCbExtZGxkRU52Ym1acGJtVnRaVzUwVEdWMlpXd2dQU0JtZFc1amRHbHZiaWdwZTF4dVhIUnlaWFIxY200Z2RHaHBjeTVqYjI1bWFXNWxiV1Z1ZER0Y2JuMDdYRzVjYmtsRlVTNXdjbTkwYjNSNWNHVXVaMlYwUVdseVVYVmhiR2wwZVV4bGRtVnNJRDBnWm5WdVkzUnBiMjRvS1h0Y2JseDBjbVYwZFhKdUlIUm9hWE11WVdseVVYVmhiR2wwZVR0Y2JuMDdYRzVjYmtsRlVTNXdjbTkwYjNSNWNHVXVaMlYwUlc1MlVYVmhiR2wwZVV4bGRtVnNJRDBnWm5WdVkzUnBiMjRvS1h0Y2JseDBjbVYwZFhKdUlIUm9hWE11Wlc1MlVYVmhiR2wwZVR0Y2JuMDdYRzVjYmx4dVhHNHZLaXBjYmlBcUlGVndaR0YwWlNCcGJuUmxjbTVoYkNCdGIyUmxiQ0IzYVhSb0lISmxZMlZwZG1Wa0lHUmhkR0ZjYmlBcUlFQndZWEpoYlNBZ1pHRjBZU0IwYnlCamIyNW1hV2QxY21VZ2MzVmljMk55YVhCMGFXOXVYRzRnS2lCQWNHRnlZVzBnSUdOaGJHeGlZV05ySUdOaGJHeGxaQ0J2YmlCaGJuTjNaWEp6SUNoQWNHRnlZVzBnT2lCa1lYUmhUVzlrWld3cFhHNGdLaTljYmtsRlVTNXdjbTkwYjNSNWNHVXVkMkYwWTJnZ1BTQm1kVzVqZEdsdmJpaGtZWFJoTENCallXeHNZbUZqYXlsN1hHNWNkSFpoY2lCMGFHRjBJRDBnZEdocGN6dGNibHgwTHk4Z1kyOXVjMjlzWlM1c2IyY29YQ0pTWlhGMVpYTjBPaUJjSWl0S1UwOU9Mbk4wY21sdVoybG1lU2hrWVhSaFEyOXVabWxuS1NrN1hHNWNibHgwTHlvcUlHUmxabUYxYkhRZ0tpb3ZYRzVjZEdSaGRHRWdQU0JrWVhSaElIeDhJSHQ5TzF4dVhIUmtZWFJoTG5ScGJXVlNZVzVuWlNBOUlHUmhkR0V1ZEdsdFpWSmhibWRsSUNCOGZDQW5hRzkxY25Nbk8xeHVYSFJrWVhSaExtTmhkQ0E5SUdSaGRHRXVZMkYwSUh4OElDZHBaWEVuT3lBdktpQmpZWFJsWjI5eWVTQXFMMXh1WEc1Y2RIWmhjaUJ6ZFdKeklEMGdkR2hwY3k1elpXeGxZM1J2Y2k1emRXSnpZM0pwWW1Vb2UxeHVYSFJjZEhObGNuWnBZMlU2SUZ3aWFXVnhYQ0lzWEc1Y2RGeDBablZ1WXpvZ1hDSkVZWFJoWENJc1hHNWNkRngwWkdGMFlUb2daR0YwWVN4Y2JseDBYSFJ2WW1vNklHUmhkR0V1WTJGMElDOHFJSEJ5YjNacFpHVWdZMkYwWldkdmNua2diMllnYzJWdWMyOXlJSFJ2SUdKbElIZGhkR05vWldRc0lHWnBiSFJsY21Wa0lHRmpZMjl5WkdsdVp5QjBieUJEVWswZ0tpOWNibHgwZlN3Z1puVnVZM1JwYjI0b1pHNUpaQ3dnWlhKeUxDQmtZWFJoS1h0Y2JseDBYSFJwWmlobGNuSXBJSHRjYmx4MFhIUmNkRXh2WjJkbGNpNWxjbkp2Y2loY0lsZGhkR05vU1VWUlVtVmpka1Z5Y2pwY0lpdEtVMDlPTG5OMGNtbHVaMmxtZVNobGNuSXBLVHRjYmx4MFhIUmNkQzh2SUdOdmJuTnZiR1V1Ykc5bktHVXBPMXh1WEhSY2RGeDBMeThnWTI5dWMyOXNaUzVzYjJjb2RHaGhkQzV6Wld4bFkzUnZjaWs3WEc1Y2RGeDBYSFF2THlCcFppaGxjbkk5UFQxY0lsTjFZbk5qY21sd2RHbHZia05zYjNObFpGd2lLU0I3WEc1Y2RGeDBYSFF2THlCY2RIUm9ZWFF1WTJ4dmMyVlRkV0p6WTNKcGNIUnBiMjV6S0NrN0lDOHZJSE5vYjNWc1pDQnViM1FnWW1VZ2JtVmpaWE56WVhKNVhHNWNkRngwWEhRdkx5QmNkSFJvWVhRdWMzVmljMk55YVhCMGFXOXVSWEp5YjNJZ1BTQjBhR0YwTG5OMVluTmpjbWx3ZEdsdmJrVnljbTl5VG5WdEt6RTdJQzh2SUdsdVkzSmxZWE5sSUdWeWNtOXlJR052ZFc1MFpYSmNibHgwWEhSY2RDOHZJRngwYzJWMFZHbHRaVzkxZENoMGFHRjBMbk4xWW5OamNtbHdkR2x2YmtWeWNtOXlUblZ0S2pZd01EQXdMQ0IwYUdGMExuZGhkR05vS0dSaGRHRXNZMkZzYkdKaFkyc3BLVHNnTHk4Z2RISjVJR0ZuWVdsdUlHeGhkR1Z5WEc1Y2RGeDBYSFF2THlCOVhHNWNkRngwWEhRdkx5QmxiSE5sSUh0Y2JseDBYSFJjZEM4dklGeDBZMjl1YzI5c1pTNWxjbkp2Y2loY0lsVnViV0Z1WVdkbElHTmhjMlZ6SURvZ2MyaHZkV3hrSUhSb1pTQnpkV0p6WTNKcGNIUnBiMjRnWW1VZ2NtVm5aVzVsY21GMFpXUWdQMXdpS1R0Y2JseDBYSFJjZEM4dklIMWNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2RGeDBhV1lvWkdGMFlTNW9aV0ZrWlhJdVpYSnliM0lwSUh0Y2JseDBYSFJjZEM4dklGUlBSRThnT2lCamFHVmpheTkxYzJVZ1pYSnlJSE4wWVhSMWN5QmhibVFnWVdSaGNIUWdZbVZvWVhacGIzSWdZV05qYjNKa2FXNW5iSGxjYmx4MFhIUmNkRXh2WjJkbGNpNWxjbkp2Y2loY0lsZGhkR05vU1VWUk9seGNibHdpSzBwVFQwNHVjM1J5YVc1bmFXWjVLR1JoZEdFdWFHVmhaR1Z5TG1SaGRHRkRiMjVtYVdjcEtUdGNibHgwWEhSY2RFeHZaMmRsY2k1bGNuSnZjaWhjSWtSaGRHRWdjbVZ4ZFdWemRDQm1ZV2xzWldRZ0tGd2lLMlJoZEdFdWFHVmhaR1Z5TG1WeWNtOXlMbk4wSzF3aUtUb2dYQ0lyWkdGMFlTNW9aV0ZrWlhJdVpYSnliM0l1YlhObktUdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2RGeDBMeThnWTI5dWMyOXNaUzVzYjJjb1pHRjBZU2s3WEc1Y2RGeDBkR2hoZEM1ZloyVjBSR0YwWVUxdlpHVnNSbkp2YlZKbFkzWW9aR0YwWVNrN1hHNHZMMXgwWEhSMGFHRjBMbk4xWW5OamNtbHdkR2x2YmtWeWNtOXlJRDBnTURzZ0x5OGdjbVZ6WlhRZ1pYSnliM0lnWTI5MWJuUmxjbHh1WEc1Y2RGeDBZMkZzYkdKaFkyc2dQU0JqWVd4c1ltRmpheTVpYVc1a0tIUm9ZWFFwT3lBdkx5QmlhVzVrSUdOaGJHeGlZV05ySUhkcGRHZ2dTVVZSWEc1Y2RGeDBZMkZzYkdKaFkyc29kR2hoZEM1blpYUkVZWFJoVFc5a1pXd29LU2s3SUM4dklHTmhiR3hpWVdOcklHWjFibU5jYmx4MGZTazdYRzVjYmx4MGRHaHBjeTV6ZFdKelkzSnBjSFJwYjI1ekxuQjFjMmdvYzNWaWN5azdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFTnNiM05sSUdGc2JDQnpkV0p6WTNKcGNIUnBiMjV6WEc0Z0tpOWNia2xGVVM1d2NtOTBiM1I1Y0dVdVkyeHZjMlZUZFdKelkzSnBjSFJwYjI1eklEMGdablZ1WTNScGIyNG9LWHRjYmx4MFptOXlLSFpoY2lCcElHbHVJSFJvYVhNdWMzVmljMk55YVhCMGFXOXVjeWtnZTF4dVhIUmNkSFJvYVhNdWMzVmljMk55YVhCMGFXOXVjMXRwWFM1amJHOXpaU2dwTzF4dVhIUjlYRzVjZEhSb2FYTXVjM1ZpYzJOeWFYQjBhVzl1Y3lBOVcxMDdYRzU5TzF4dVhHNHZLaXBjYmlBcUlISmxjWFZsYzNRZ1JHRjBZU0IwYnlCdFlXdGxJRU5UVmlCbWFXeGxYRzRnS2k5Y2JrbEZVUzV3Y205MGIzUjVjR1V1WjJWMFExTldSR0YwWVNBOUlHWjFibU4wYVc5dUtITmxibk52Y2s1aGJXVnpMRjltYVhKemRFUmhlU3hqWVd4c1ltRmpheWw3WEc1Y2RIWmhjaUJtYVhKemRFUmhlU0E5SUc1bGR5QkVZWFJsS0Y5bWFYSnpkRVJoZVNrN1hHNWNkSFpoY2lCa1lYUmhRMjl1Wm1sbklEMGdlMXh1WEhSY2RHTnlhWFJsY21saE9pQjdYRzVjZEZ4MFhIUjBhVzFsT2lCN0lITjBZWEowT2lCbWFYSnpkRVJoZVM1blpYUlVhVzFsS0Nrc0lISmhibWRsVlc1cGREb2dKMmh2ZFhJbkxDQnlZVzVuWlRvZ01UZ3dmU3dnTHk4Z016WXdhQ0F0UGlBeE5XUWdMeThnTVRnd2FDQXRQaUEzYWx4dVhIUmNkRngwY0d4aFkyVnpPaUJiWFN4Y2JseDBYSFJjZEhKdlltOTBjem9nVzExY2JseDBYSFI5TEZ4dVhIUmNkSE5sYm5OdmNuTTZJSE5sYm5OdmNrNWhiV1Z6WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTUxY0dSaGRHVkVZWFJoS0dOaGJHeGlZV05yTENCa1lYUmhRMjl1Wm1sbktUdGNibjA3WEc1Y2JseHVMeW9xWEc0Z0tpQlZjR1JoZEdVZ2FXNTBaWEp1WVd3Z2JXOWtaV3dnZDJsMGFDQnlaV05sYVhabFpDQmtZWFJoWEc0Z0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlHUmhkR0VnWkdGMFlTQnlaV05sYVhabFpDQm1jbTl0SUVScGVXRk9iMlJsSUdKNUlIZGxZbk52WTJ0bGRGeHVJQ29nUUhKbGRIVnliaUI3VzNSNWNHVmRmVngwWEhSYlpHVnpZM0pwY0hScGIyNWRYRzRnS2k5Y2JrbEZVUzV3Y205MGIzUjVjR1V1WDJkbGRFUmhkR0ZOYjJSbGJFWnliMjFTWldOMklEMGdablZ1WTNScGIyNG9aR0YwWVNsN1hHNWNkSFpoY2lCa1lYUmhUVzlrWld3OWJuVnNiRHRjYmx4dVhIUnBaaWhrWVhSaExtVnljaUFtSmlCa1lYUmhMbVZ5Y2k1emRENHdLU0I3WEc1Y2RGeDBURzluWjJWeUxtVnljbTl5S0dSaGRHRXVaWEp5TG0xelp5azdYRzVjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEgxY2JseDBaR1ZzWlhSbElHUmhkR0V1WlhKeU8xeHVYSFJwWmloa1lYUmhJQ1ltSUdSaGRHRXVhR1ZoWkdWeUtTQjdYRzVjZEZ4MFptOXlJQ2gyWVhJZ2JpQnBiaUJrWVhSaEtTQjdYRzVjZEZ4MFhIUnBaaWh1SUNFOUlGd2lhR1ZoWkdWeVhDSWdKaVlnYmlBaFBTQmNJbVZ5Y2x3aUtTQjdYRzVjYmx4MFhIUmNkRngwYVdZb1pHRjBZVnR1WFM1bGNuSWdKaVlnWkdGMFlWdHVYUzVsY25JdWMzUStNQ2tnZTF4dVhIUmNkRngwWEhSY2RFeHZaMmRsY2k1bGNuSnZjaWh1SzF3aUlIZGhjeUJwYmlCbGNuSnZjam9nWENJclpHRjBZVnR1WFM1bGNuSXViWE5uS1R0Y2JseDBYSFJjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdsbUtDRmtZWFJoVFc5a1pXd3BYRzVjZEZ4MFhIUmNkRngwWkdGMFlVMXZaR1ZzUFh0OU8xeHVYRzVjZEZ4MFhIUmNkQzh2SUV4dloyZGxjaTVzYjJjb2JpazdYRzVjZEZ4MFhIUmNkR2xtS0NGa1lYUmhUVzlrWld4YmJsMHBJSHRjYmx4MFhIUmNkRngwWEhSa1lYUmhUVzlrWld4YmJsMDllMzA3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MEx5b2dkWEJrWVhSbElHUmhkR0VnWVdKemIyeDFkR1VnY21GdVoyVWdLaTljYmx4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExuSmhibWRsUFdSaGRHRmJibDB1Y21GdVoyVTdYRzVjZEZ4MFhIUmNkQzhxSUhWd1pHRjBaU0JrWVhSaElISmhibWRsSUNvdlhHNWNkRngwWEhSY2RHUmhkR0ZOYjJSbGJGdHVYUzUwYVcxbFVtRnVaMlU5WkdGMFlWdHVYUzUwYVcxbFVtRnVaMlU3WEc1Y2RGeDBYSFJjZEM4cUlIVndaR0YwWlNCa1lYUmhJR3hoWW1Wc0lDb3ZYRzVjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1c1lXSmxiRDFrWVhSaFcyNWRMbXhoWW1Wc08xeHVYSFJjZEZ4MFhIUXZLaUIxY0dSaGRHVWdaR0YwWVNCMWJtbDBJQ292WEc1Y2RGeDBYSFJjZEdSaGRHRk5iMlJsYkZ0dVhTNTFibWwwUFdSaGRHRmJibDB1ZFc1cGREdGNibHgwWEhSY2RGeDBMeW9nZFhCa1lYUmxJR1JoZEdFZ2NISmxZMmx6YVc5dUlDb3ZYRzVjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1d2NtVmphWE5wYjI0OVpHRjBZVnR1WFM1d2NtVmphWE5wYjI0N1hHNWNkRngwWEhSY2RDOHFJSFZ3WkdGMFpTQmtZWFJoSUdOaGRHVm5iM0pwWlhNZ0tpOWNibHgwWEhSY2RGeDBaR0YwWVUxdlpHVnNXMjVkTG1OaGRHVm5iM0o1UFdSaGRHRmJibDB1WTJGMFpXZHZjbms3WEc1Y2JseDBYSFJjZEZ4MEx5b2djM1ZuWjJWemRHVmtJSGtnWkdsemNHeGhlU0J5WVc1blpTQXFMMXh1WEhSY2RGeDBYSFJrWVhSaFRXOWtaV3hiYmwwdWVtOXZiVkpoYm1kbElEMGdXekFzSURFd01GMDdYRzVjYmx4MFhIUmNkRngwTHlvZ2RYQmtZWFJsSUdSaGRHRWdhVzVrWlhoU1lXNW5aU0FxTDF4dVhIUmNkRngwWEhSa1lYUmhUVzlrWld4YmJsMHVjWFZoYkdsMGVVTnZibVpwWnoxN1hHNWNkRngwWEhSY2RGeDBMeW9nWTI5dVptOXlkRkpoYm1kbE9pQmtZWFJoVzI1ZExtTnZibVp2Y25SU1lXNW5aU3dnS2k5Y2JseDBYSFJjZEZ4MFhIUnBibVJsZUZKaGJtZGxPaUJrWVhSaFcyNWRMbWx1WkdWNFVtRnVaMlZjYmx4MFhIUmNkRngwZlR0Y2JseDBYSFJjZEZ4MFpHRjBZVTF2WkdWc1cyNWRMblJwYldVZ1BTQjBhR2x6TGw5amIyUmxjaTVtY205dEtHUmhkR0ZiYmwwdWRHbHRaU3duWWpZMEp5dzRLVHRjYmx4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExtUmhkR0VnUFNBb1pHRjBZVnR1WFM1a1lYUmhQM1JvYVhNdVgyTnZaR1Z5TG1aeWIyMG9aR0YwWVZ0dVhTNWtZWFJoTENkaU5qUW5MRFFwT2loa1lYUmhXMjVkTG1GMlp6OTBhR2x6TGw5amIyUmxjaTVtY205dEtHUmhkR0ZiYmwwdVlYWm5MbVFzSjJJMk5DY3NOQ2s2Ym5Wc2JDa3BPMXh1WEhSY2RGeDBYSFJrWVhSaFRXOWtaV3hiYmwwdWNYVmhiR2wwZVVsdVpHVjRJRDBnS0dSaGRHRmJibDB1WkdGMFlUOTBhR2x6TGw5amIyUmxjaTVtY205dEtHUmhkR0ZiYmwwdWFXNWtaWGdzSjJJMk5DY3NOQ2s2S0dSaGRHRmJibDB1WVhablAzUm9hWE11WDJOdlpHVnlMbVp5YjIwb1pHRjBZVnR1WFM1aGRtY3VhU3duWWpZMEp5dzBLVHB1ZFd4c0tTazdYRzVjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1eWIySnZkRWxrSUQwZ2RHaHBjeTVmWTI5a1pYSXVabkp2YlNoa1lYUmhXMjVkTG5KdlltOTBTV1FzSjJJMk5DY3NOQ2s3WEc1Y2RGeDBYSFJjZEdsbUtHUmhkR0ZOYjJSbGJGdHVYUzV5YjJKdmRFbGtLU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5b3FJR1JwWTI4Z2NtOWliM1JKWkNBdFBpQnliMkp2ZEU1aGJXVWdLaW92WEc1Y2RGeDBYSFJjZEZ4MGRtRnlJR1JwWTI5U2IySnZkQ0E5SUh0OU8xeHVYSFJjZEZ4MFhIUmNkR1JoZEdFdWFHVmhaR1Z5TG5KdlltOTBjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1ZzS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJrYVdOdlVtOWliM1JiWld3dWFXUmRQV1ZzTG01aGJXVTdYRzVjZEZ4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSY2RGeDBaR0YwWVUxdlpHVnNXMjVkTG5KdlltOTBTV1FnUFNCa1lYUmhUVzlrWld4YmJsMHVjbTlpYjNSSlpDNXRZWEFvWm5WdVkzUnBiMjRvWld3cElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJrYVdOdlVtOWliM1JiWld4ZE8xeHVYSFJjZEZ4MFhIUmNkSDBwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBaR0YwWVUxdlpHVnNXMjVkTG5Cc1lXTmxTV1FnUFNCMGFHbHpMbDlqYjJSbGNpNW1jbTl0S0dSaGRHRmJibDB1Y0d4aFkyVkpaQ3duWWpZMEp5dzBLVHRjYmx4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExuZ2dQU0J1ZFd4c08xeHVYSFJjZEZ4MFhIUmtZWFJoVFc5a1pXeGJibDB1ZVNBOUlHNTFiR3c3WEc1Y2JseDBYSFJjZEZ4MGFXWW9aR0YwWVZ0dVhTNWhkbWNwWEc1Y2RGeDBYSFJjZEZ4MFpHRjBZVTF2WkdWc1cyNWRMbUYyWnlBOUlIdGNibHgwWEhSY2RGeDBYSFJjZEdRNklIUm9hWE11WDJOdlpHVnlMbVp5YjIwb1pHRjBZVnR1WFM1aGRtY3VaQ3duWWpZMEp5dzBLU3hjYmx4MFhIUmNkRngwWEhSY2RHazZJSFJvYVhNdVgyTnZaR1Z5TG1aeWIyMG9aR0YwWVZ0dVhTNWhkbWN1YVN3bllqWTBKeXcwS1Z4dVhIUmNkRngwWEhSY2RIMDdYRzVjZEZ4MFhIUmNkR2xtS0dSaGRHRmJibDB1YldsdUtWeHVYSFJjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1dGFXNGdQU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmtPaUIwYUdsekxsOWpiMlJsY2k1bWNtOXRLR1JoZEdGYmJsMHViV2x1TG1Rc0oySTJOQ2NzTkNrc1hHNWNkRngwWEhSY2RGeDBYSFJwT2lCMGFHbHpMbDlqYjJSbGNpNW1jbTl0S0dSaGRHRmJibDB1YldsdUxta3NKMkkyTkNjc05DbGNibHgwWEhSY2RGeDBYSFI5TzF4dVhIUmNkRngwWEhScFppaGtZWFJoVzI1ZExtMWhlQ2xjYmx4MFhIUmNkRngwWEhSa1lYUmhUVzlrWld4YmJsMHViV0Y0SUQwZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWkRvZ2RHaHBjeTVmWTI5a1pYSXVabkp2YlNoa1lYUmhXMjVkTG0xaGVDNWtMQ2RpTmpRbkxEUXBMRnh1WEhSY2RGeDBYSFJjZEZ4MGFUb2dkR2hwY3k1ZlkyOWtaWEl1Wm5KdmJTaGtZWFJoVzI1ZExtMWhlQzVwTENkaU5qUW5MRFFwWEc1Y2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBhV1lvWkdGMFlWdHVYUzV6ZEdSa1pYWXBYRzVjZEZ4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExuTjBaR1JsZGlBOUlIdGNibHgwWEhSY2RGeDBYSFJjZEdRNklIUm9hWE11WDJOdlpHVnlMbVp5YjIwb1pHRjBZVnR1WFM1emRHUmtaWFl1WkN3bllqWTBKeXcwS1N4Y2JseDBYSFJjZEZ4MFhIUmNkR2s2SUhSb2FYTXVYMk52WkdWeUxtWnliMjBvWkdGMFlWdHVYUzV6ZEdSa1pYWXVhU3duWWpZMEp5dzBLVnh1WEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RHbG1LR1JoZEdGYmJsMHVjM1JrWkdWMktWeHVYSFJjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1emRHUmtaWFlnUFNCN1hHNWNkRngwWEhSY2RGeDBYSFJrT2lCMGFHbHpMbDlqYjJSbGNpNW1jbTl0S0dSaGRHRmJibDB1YzNSa1pHVjJMbVFzSjJJMk5DY3NOQ2tzWEc1Y2RGeDBYSFJjZEZ4MFhIUnBPaUIwYUdsekxsOWpiMlJsY2k1bWNtOXRLR1JoZEdGYmJsMHVjM1JrWkdWMkxta3NKMkkyTkNjc05DbGNibHgwWEhSY2RGeDBYSFI5TzF4dVhIUmNkRngwWEhScFppaGtZWFJoVzI1ZExuZ3BYRzVjZEZ4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExuZ2dQU0IwYUdsekxsOWpiMlJsY2k1bWNtOXRLR1JoZEdGYmJsMHVlQ3duWWpZMEp5dzBLVHRjYmx4MFhIUmNkRngwYVdZb1pHRjBZVnR1WFM1NUtWeHVYSFJjZEZ4MFhIUmNkR1JoZEdGTmIyUmxiRnR1WFM1NUlEMGdkR2hwY3k1ZlkyOWtaWEl1Wm5KdmJTaGtZWFJoVzI1ZExua3NKMkkyTkNjc05DazdYRzVjZEZ4MFhIUmNkQzhxS2x4dVhIUmNkRngwWEhRZ0tpQmpkWEp5Wlc1MElIRjFZV3hwZEhrZ09pQjdKMkluWVdRc0lDZHRKMlZrYVhWdExDQW5aeWR2YjJSOVhHNWNkRngwWEhSY2RDQXFJR1YyYjJ4MWRHbHZiaUE2SUhzbmRTZHdMQ0FuWkNkdmQyNHNJQ2R6SjNSaFlteGxmVnh1WEhSY2RGeDBYSFFnS2lCbGRtOXNkWFJwYjI0Z2NYVmhiR2wwZVNBNklIc25ZaWRsZEhSbGNpd2dKM2NuYjNKelpTd2dKM01uWVcxbGZWeHVYSFJjZEZ4MFhIUWdLaTljYmx4MFhIUmNkRngwTHk4dklGUlBSRTljYmx4MFhIUmNkRngwWkdGMFlVMXZaR1ZzVzI1ZExuUnlaVzVrSUQwZ0oyMXpjeWM3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNWNkR1ZzYzJVZ2UxeHVYSFJjZEV4dloyZGxjaTVsY25KdmNpaGNJazV2SUVSaGRHRWdkRzhnY21WaFpDQnZjaUJvWldGa1pYSWdhWE1nYldsemMybHVaeUFoWENJcE8xeHVYSFI5WEc1Y2RDOHFLaUJzYVhOMElISnZZbTkwY3lBcUtpOWNiaTh2WEhSa1lYUmhUVzlrWld3dWNtOWliM1J6SUQwZ1czdHVZVzFsT2lBblJESlNNaWNzSUdsa09qRjlYVHRjYmx4MGRHaHBjeTVrWVhSaFRXOWtaV3c5WkdGMFlVMXZaR1ZzTzF4dVhIUnlaWFIxY200Z1pHRjBZVTF2WkdWc08xeHVmVHRjYmx4dVhHNWNibHh1WEc0dktpb2dZM0psWVhSbElFbEZVU0J6WlhKMmFXTmxJQ29xTDF4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzVKUlZFZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1WEhSeVpYUjFjbTRnYm1WM0lFbEZVU2gwYUdsektUdGNibjA3WEc0aVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBEaXlhU2VsZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKS5EaXlhU2VsZWN0b3I7XG52YXIgZDEgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKTtcbnZhciBpc0Jyb3dzZXIgPSAhKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcbmlmICghaXNCcm93c2VyKSB7XG5cdHZhciBRID0gcmVxdWlyZSgncScpO1xufSBlbHNlIHtcblx0dmFyIFEgPSB3aW5kb3cuUTtcbn1cblxuZDEua25vd25QZWVycyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGQxKFwiI3NlbGZcIikua25vd25QZWVycygpO1xufTtcbmQxLmtwID0gZDEua25vd25QZWVycztcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5rbm93blBlZXJzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdHZhciBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcblx0dGhpcy5yZXF1ZXN0KHsgc2VydmljZTogJ21lc2hOZXR3b3JrJywgZnVuYzogJ0xpc3RLbm93blBlZXJzJyB9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRpZiAoZXJyKSByZXR1cm4gZGVmZXJyZWQucmVqZWN0KGVycik7XG5cdFx0dmFyIHBlZXJzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRwZWVycy5wdXNoKGRhdGFbaV0ucGVlcl9uYW1lKTtcblx0XHR9cmV0dXJuIGRlZmVycmVkLnJlc29sdmUocGVlcnMpO1xuXHR9KTtcblx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5kMS5saXN0ZW5NZXNoTmV0d29yayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRyZXR1cm4gZDEoLy4qLykuc3Vic2NyaWJlKHsgc2VydmljZTogJ21lc2hOZXR3b3JrJywgZnVuYzogJ01lc2hOZXR3b3JrJyB9LCBjYWxsYmFjaywgeyBhdXRvOiB0cnVlIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMWxjMmhPWlhSM2IzSnJMbXB6SWwwc0ltNWhiV1Z6SWpwYklrUnBlV0ZUWld4bFkzUnZjaUlzSW5KbGNYVnBjbVVpTENKa01TSXNJbWx6UW5KdmQzTmxjaUlzSW5kcGJtUnZkeUlzSWxFaUxDSnJibTkzYmxCbFpYSnpJaXdpYTNBaUxDSndjbTkwYjNSNWNHVWlMQ0pqWVd4c1ltRmpheUlzSW1SbFptVnljbVZrSWl3aVpHVm1aWElpTENKeVpYRjFaWE4wSWl3aWMyVnlkbWxqWlNJc0ltWjFibU1pTENKd1pXVnlTV1FpTENKbGNuSWlMQ0prWVhSaElpd2ljbVZxWldOMElpd2ljR1ZsY25NaUxDSnBJaXdpYkdWdVozUm9JaXdpY0hWemFDSXNJbkJsWlhKZmJtRnRaU0lzSW5KbGMyOXNkbVVpTENKd2NtOXRhWE5sSWl3aWJHbHpkR1Z1VFdWemFFNWxkSGR2Y21zaUxDSnpkV0p6WTNKcFltVWlMQ0poZFhSdklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVVsQkxHVkJRV1ZETEZGQlFWRXNiMEpCUVZJc1JVRkJPRUpFTEZsQlFXcEVPMEZCUTBFc1NVRkJTVVVzUzBGQlMwUXNVVUZCVVN4dlFrRkJVaXhEUVVGVU8wRkJRMEVzU1VGQlNVVXNXVUZCV1N4RlFVRkZMRTlCUVU5RExFMUJRVkFzUzBGQmEwSXNWMEZCY0VJc1EwRkJhRUk3UVVGRFFTeEpRVUZITEVOQlFVTkVMRk5CUVVvc1JVRkJaVHRCUVVGRkxFdEJRVWxGTEVsQlFVbEtMRkZCUVZFc1IwRkJVaXhEUVVGU08wRkJRWFZDTEVOQlFYaERMRTFCUTBzN1FVRkJSU3hMUVVGSlNTeEpRVUZKUkN4UFFVRlBReXhEUVVGbU8wRkJRVzFDT3p0QlFVY3hRa2dzUjBGQlIwa3NWVUZCU0N4SFFVRm5RaXhaUVVGWE8wRkJRekZDTEZGQlFVOUtMRWRCUVVjc1QwRkJTQ3hGUVVGWlNTeFZRVUZhTEVWQlFWQTdRVUZEUVN4RFFVWkVPMEZCUjBGS0xFZEJRVWRMTEVWQlFVZ3NSMEZCVVV3c1IwRkJSMGtzVlVGQldEczdRVUZKUVU0c1lVRkJZVkVzVTBGQllpeERRVUYxUWtZc1ZVRkJka0lzUjBGQmIwTXNWVUZCVTBjc1VVRkJWQ3hGUVVGdFFqdEJRVU4wUkN4TFFVRkpReXhYUVVGWFRDeEZRVUZGVFN4TFFVRkdMRVZCUVdZN1FVRkRRU3hOUVVGTFF5eFBRVUZNTEVOQlFXRXNSVUZCUTBNc1UwRkJVeXhoUVVGV0xFVkJRWGRDUXl4TlFVRk5MR2RDUVVFNVFpeEZRVUZpTEVWQlFUaEVMRlZCUVZORExFMUJRVlFzUlVGQmFVSkRMRWRCUVdwQ0xFVkJRWE5DUXl4SlFVRjBRaXhGUVVFeVFqdEJRVU40Uml4TlFVRkhSQ3hIUVVGSUxFVkJRVkVzVDBGQlQwNHNVMEZCVTFFc1RVRkJWQ3hEUVVGblFrWXNSMEZCYUVJc1EwRkJVRHRCUVVOU0xFMUJRVWxITEZGQlFWRXNSVUZCV2p0QlFVTkJMRTlCUVVrc1NVRkJTVU1zU1VGQlJTeERRVUZXTEVWQlFXRkJMRWxCUVVWSUxFdEJRVXRKTEUxQlFYQkNMRVZCUVRSQ1JDeEhRVUUxUWp0QlFVRnBRMFFzVTBGQlRVY3NTVUZCVGl4RFFVRlhUQ3hMUVVGTFJ5eERRVUZNTEVWQlFWRkhMRk5CUVc1Q08wRkJRV3BETEVkQlEwRXNUMEZCVDJJc1UwRkJVMk1zVDBGQlZDeERRVUZwUWt3c1MwRkJha0lzUTBGQlVEdEJRVU5CTEVWQlRFUTdRVUZOUVN4UlFVRlBWQ3hUUVVGVFpTeFBRVUZvUWp0QlFVTkJMRU5CVkVRN08wRkJZVUYyUWl4SFFVRkhkMElzYVVKQlFVZ3NSMEZCZFVJc1ZVRkJVMnBDTEZGQlFWUXNSVUZCYlVJN1FVRkRla01zVVVGQlQxQXNSMEZCUnl4SlFVRklMRVZCUVZONVFpeFRRVUZVTEVOQlFXMUNMRVZCUVVWa0xGTkJRVk1zWVVGQldDeEZRVUV3UWtNc1RVRkJUU3hoUVVGb1F5eEZRVUZ1UWl4RlFVRnZSVXdzVVVGQmNFVXNSVUZCT0VVc1JVRkJRMjFDTEUxQlFVMHNTVUZCVUN4RlFVRTVSU3hEUVVGUU8wRkJRMEVzUTBGR1JDSXNJbVpwYkdVaU9pSk5aWE5vVG1WMGQyOXlheTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJFYVhsaFUyVnNaV04wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5RWFYbGhVMlZzWldOMGIzSW5LUzVFYVhsaFUyVnNaV04wYjNJN1hHNTJZWElnWkRFZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5RWFYbGhVMlZzWldOMGIzSW5LVHRjYm5aaGNpQnBjMEp5YjNkelpYSWdQU0FoS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkMWJtUmxabWx1WldRbktUdGNibWxtS0NGcGMwSnliM2R6WlhJcElIc2dkbUZ5SUZFZ1BTQnlaWEYxYVhKbEtDZHhKeWs3SUgxY2JtVnNjMlVnZXlCMllYSWdVU0E5SUhkcGJtUnZkeTVST3lCOVhHNWNibHh1WkRFdWEyNXZkMjVRWldWeWN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUnlaWFIxY200Z1pERW9YQ0lqYzJWc1psd2lLUzVyYm05M2JsQmxaWEp6S0NrN1hHNTlPMXh1WkRFdWEzQWdQU0JrTVM1cmJtOTNibEJsWlhKek8xeHVYRzVjYmx4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzVyYm05M2JsQmxaWEp6SUQwZ1puVnVZM1JwYjI0b1kyRnNiR0poWTJzcElIdGNibHgwZG1GeUlHUmxabVZ5Y21Wa0lEMGdVUzVrWldabGNpZ3BPMXh1WEhSMGFHbHpMbkpsY1hWbGMzUW9lM05sY25acFkyVTZJQ2R0WlhOb1RtVjBkMjl5YXljc1puVnVZem9nSjB4cGMzUkxibTkzYmxCbFpYSnpKMzBzSUdaMWJtTjBhVzl1S0hCbFpYSkpaQ3dnWlhKeUxDQmtZWFJoS1h0Y2JseDBYSFJwWmlobGNuSXBJSEpsZEhWeWJpQmtaV1psY25KbFpDNXlaV3BsWTNRb1pYSnlLVHRjYmx4MFhIUjJZWElnY0dWbGNuTWdQU0JiWFR0Y2JseDBYSFJtYjNJb2RtRnlJR2s5TURzZ2FUeGtZWFJoTG14bGJtZDBhRHNnYVNzcktTQndaV1Z5Y3k1d2RYTm9LR1JoZEdGYmFWMHVjR1ZsY2w5dVlXMWxLVHRjYmx4MFhIUnlaWFIxY200Z1pHVm1aWEp5WldRdWNtVnpiMngyWlNod1pXVnljeWs3WEc1Y2RIMHBPMXh1WEhSeVpYUjFjbTRnWkdWbVpYSnlaV1F1Y0hKdmJXbHpaVHRjYm4xY2JseHVYRzVjYm1ReExteHBjM1JsYmsxbGMyaE9aWFIzYjNKcklEMGdablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3BJSHRjYmx4MGNtVjBkWEp1SUdReEtDOHVLaThwTG5OMVluTmpjbWxpWlNoN0lITmxjblpwWTJVNklDZHRaWE5vVG1WMGQyOXlheWNzSUdaMWJtTTZJQ2ROWlhOb1RtVjBkMjl5YXljZ2ZTd2dZMkZzYkdKaFkyc3NJSHRoZFhSdk9pQjBjblZsZlNrN1hHNTlPMXh1SWwxOSIsIid1c2Ugc3RyaWN0JztcblxuLyogbWF5YS1jbGllbnRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIFBhcnRuZXJpbmcgUm9ib3RpY3MsIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyB2ZXJzaW9uXG4gKiAgMy4wIG9mIHRoZSBMaWNlbnNlIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZVxuICogdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW5cbiAqIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVJcbiAqIFBVUlBPU0UuIFNlZSB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5LlxuICovXG5cbmZ1bmN0aW9uIE1lc3NhZ2Uoc2VydmljZSwgZnVuYywgb2JqLCBwZXJtYW5lbnQpIHtcblxuXHR0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuXHR0aGlzLmZ1bmMgPSBmdW5jO1xuXHR0aGlzLm9iaiA9IG9iajtcblxuXHR0aGlzLnBlcm1hbmVudCA9IHBlcm1hbmVudDsgLy9JZiB0aGlzIGZsYWcgaXMgb24sIHRoZSBjb21tYW5kIHdpbGwgc3RheSBvbiB0aGUgY2FsbGJhY2sgbGlzdCBsaXN0ZW5pbmcgZm9yIGV2ZW50c1xufVxuXG5NZXNzYWdlLmJ1aWxkU2lnbmF0dXJlID0gZnVuY3Rpb24gKG1zZykge1xuXHRyZXR1cm4gbXNnLnNlcnZpY2UgKyAnLicgKyBtc2cuZnVuYyArICcuJyArIG1zZy5vYmo7XG59O1xuXG5NZXNzYWdlLnByb3RvdHlwZS5zaWduYXR1cmUgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLnNlcnZpY2UgKyAnLicgKyB0aGlzLmZ1bmMgKyAnLicgKyB0aGlzLm9iajtcbn07XG5cbk1lc3NhZ2UucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHRyZXR1cm4ge1xuXHRcdHNlcnZpY2U6IHRoaXMuc2VydmljZSxcblx0XHRmdW5jOiB0aGlzLmZ1bmMsXG5cdFx0b2JqOiB0aGlzLm9iaixcblx0XHRkYXRhOiBkYXRhXG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTFsYzNOaFoyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVRXVnpjMkZuWlNJc0luTmxjblpwWTJVaUxDSm1kVzVqSWl3aWIySnFJaXdpY0dWeWJXRnVaVzUwSWl3aVluVnBiR1JUYVdkdVlYUjFjbVVpTENKdGMyY2lMQ0p3Y205MGIzUjVjR1VpTENKemFXZHVZWFIxY21VaUxDSmxlR1ZqSWl3aVpHRjBZU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPMEZCWjBKQkxGTkJRVk5CTEU5QlFWUXNRMEZCYVVKRExFOUJRV3BDTEVWQlFUQkNReXhKUVVFeFFpeEZRVUZuUTBNc1IwRkJhRU1zUlVGQmNVTkRMRk5CUVhKRExFVkJRU3RET3p0QlFVVTVReXhOUVVGTFNDeFBRVUZNTEVkQlFXVkJMRTlCUVdZN1FVRkRRU3hOUVVGTFF5eEpRVUZNTEVkQlFWbEJMRWxCUVZvN1FVRkRRU3hOUVVGTFF5eEhRVUZNTEVkQlFWZEJMRWRCUVZnN08wRkJSVUVzVFVGQlMwTXNVMEZCVEN4SFFVRnBRa0VzVTBGQmFrSXNRMEZPT0VNc1EwRk5iRUk3UVVGRE5VSTdPMEZCUlVSS0xGRkJRVkZMTEdOQlFWSXNSMEZCZVVJc1ZVRkJVME1zUjBGQlZDeEZRVUZoTzBGQlEzSkRMRkZCUVU5QkxFbEJRVWxNTEU5QlFVb3NSMEZCV1N4SFFVRmFMRWRCUVdkQ1N5eEpRVUZKU2l4SlFVRndRaXhIUVVGNVFpeEhRVUY2UWl4SFFVRTJRa2tzU1VGQlNVZ3NSMEZCZUVNN1FVRkRRU3hEUVVaRU96dEJRVXRCU0N4UlFVRlJUeXhUUVVGU0xFTkJRV3RDUXl4VFFVRnNRaXhIUVVFNFFpeFpRVUZWTzBGQlEzWkRMRkZCUVU4c1MwRkJTMUFzVDBGQlRDeEhRVUZoTEVkQlFXSXNSMEZCYVVJc1MwRkJTME1zU1VGQmRFSXNSMEZCTWtJc1IwRkJNMElzUjBGQkswSXNTMEZCUzBNc1IwRkJNME03UVVGRFFTeERRVVpFT3p0QlFVbEJTQ3hSUVVGUlR5eFRRVUZTTEVOQlFXdENSU3hKUVVGc1FpeEhRVUY1UWl4VlFVRlRReXhKUVVGVUxFVkJRV003UVVGRGRFTXNVVUZCVHp0QlFVTk9WQ3hYUVVGVExFdEJRVXRCTEU5QlJGSTdRVUZGVGtNc1VVRkJUU3hMUVVGTFFTeEpRVVpNTzBGQlIwNURMRTlCUVVzc1MwRkJTMEVzUjBGSVNqdEJRVWxPVHl4UlFVRk5RVHRCUVVwQkxFVkJRVkE3UVVGTlFTeERRVkJFT3p0QlFWTkJReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENXaXhQUVVGcVFpSXNJbVpwYkdVaU9pSnRaWE56WVdkbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ2JXRjVZUzFqYkdsbGJuUmNiaUFxWEc0Z0tpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UUXNJRkJoY25SdVpYSnBibWNnVW05aWIzUnBZM01zSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLaUJVYUdseklHeHBZbkpoY25rZ2FYTWdabkpsWlNCemIyWjBkMkZ5WlRzZ2VXOTFJR05oYmlCeVpXUnBjM1J5YVdKMWRHVWdhWFFnWVc1a0wyOXlYRzRnS2lCdGIyUnBabmtnYVhRZ2RXNWtaWElnZEdobElIUmxjbTF6SUc5bUlIUm9aU0JIVGxVZ1RHVnpjMlZ5SUVkbGJtVnlZV3dnVUhWaWJHbGpYRzRnS2lCTWFXTmxibk5sSUdGeklIQjFZbXhwYzJobFpDQmllU0IwYUdVZ1JuSmxaU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1T3lCMlpYSnphVzl1WEc0Z0tpQWdNeTR3SUc5bUlIUm9aU0JNYVdObGJuTmxJRlJvYVhNZ2JHbGljbUZ5ZVNCcGN5QmthWE4wY21saWRYUmxaQ0JwYmlCMGFHVWdhRzl3WlZ4dUlDb2dkR2hoZENCcGRDQjNhV3hzSUdKbElIVnpaV1oxYkN3Z1luVjBJRmRKVkVoUFZWUWdRVTVaSUZkQlVsSkJUbFJaT3lCM2FYUm9iM1YwSUdWMlpXNWNiaUFxSUhSb1pTQnBiWEJzYVdWa0lIZGhjbkpoYm5SNUlHOW1JRTFGVWtOSVFVNVVRVUpKVEVsVVdTQnZjaUJHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSmNiaUFxSUZCVlVsQlBVMFV1SUZObFpTQjBhR1VnUjA1VklFeGxjM05sY2lCSFpXNWxjbUZzSUZCMVlteHBZeUJNYVdObGJuTmxJR1p2Y2lCdGIzSmxJR1JsZEdGcGJITXVYRzRnS2lCWmIzVWdjMmh2ZFd4a0lHaGhkbVVnY21WalpXbDJaV1FnWVNCamIzQjVJRzltSUhSb1pTQkhUbFVnVEdWemMyVnlJRWRsYm1WeVlXd2dVSFZpYkdsalhHNGdLaUJNYVdObGJuTmxJR0ZzYjI1bklIZHBkR2dnZEdocGN5QnNhV0p5WVhKNUxseHVJQ292WEc1Y2JseHVYRzVtZFc1amRHbHZiaUJOWlhOellXZGxLSE5sY25acFkyVXNJR1oxYm1Nc0lHOWlhaXdnY0dWeWJXRnVaVzUwS1h0Y2JseHVYSFIwYUdsekxuTmxjblpwWTJVZ1BTQnpaWEoyYVdObE8xeHVYSFIwYUdsekxtWjFibU1nUFNCbWRXNWpPMXh1WEhSMGFHbHpMbTlpYWlBOUlHOWlhanRjYmx4MFhHNWNkSFJvYVhNdWNHVnliV0Z1Wlc1MElEMGdjR1Z5YldGdVpXNTBPeUF2TDBsbUlIUm9hWE1nWm14aFp5QnBjeUJ2Yml3Z2RHaGxJR052YlcxaGJtUWdkMmxzYkNCemRHRjVJRzl1SUhSb1pTQmpZV3hzWW1GamF5QnNhWE4wSUd4cGMzUmxibWx1WnlCbWIzSWdaWFpsYm5SelhHNTlYRzVjYmsxbGMzTmhaMlV1WW5WcGJHUlRhV2R1WVhSMWNtVWdQU0JtZFc1amRHbHZiaWh0YzJjcGUxeHVYSFJ5WlhSMWNtNGdiWE5uTG5ObGNuWnBZMlVySnk0bksyMXpaeTVtZFc1akt5Y3VKeXR0YzJjdWIySnFPMXh1ZlZ4dVhHNWNiazFsYzNOaFoyVXVjSEp2ZEc5MGVYQmxMbk5wWjI1aGRIVnlaU0E5SUdaMWJtTjBhVzl1S0NsN1hHNWNkSEpsZEhWeWJpQjBhR2x6TG5ObGNuWnBZMlVySnk0bkszUm9hWE11Wm5WdVl5c25MaWNyZEdocGN5NXZZbW83WEc1OVhHNWNiazFsYzNOaFoyVXVjSEp2ZEc5MGVYQmxMbVY0WldNZ1BTQm1kVzVqZEdsdmJpaGtZWFJoS1h0Y2JseDBjbVYwZFhKdUlIdGNibHgwWEhSelpYSjJhV05sT2lCMGFHbHpMbk5sY25acFkyVXNYRzVjZEZ4MFpuVnVZem9nZEdocGN5NW1kVzVqTEZ4dVhIUmNkRzlpYWpvZ2RHaHBjeTV2WW1vc1hHNWNkRngwWkdGMFlUb2daR0YwWVZ4dVhIUjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1RXVnpjMkZuWlR0Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBEaXlhU2VsZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKS5EaXlhU2VsZWN0b3I7XG52YXIgZDEgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKTtcbnZhciBpc0Jyb3dzZXIgPSAhKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcbmlmICghaXNCcm93c2VyKSB7XG5cdHZhciBRID0gcmVxdWlyZSgncScpO1xufSBlbHNlIHtcblx0dmFyIFEgPSB3aW5kb3cuUTtcbn1cblxuaWYgKHR5cGVvZiBJTkZPID09PSAndW5kZWZpbmVkJykgdmFyIElORk8gPSBmdW5jdGlvbiBJTkZPKHMpIHtcblx0Y29uc29sZS5sb2cocyk7XG59O1xuaWYgKHR5cGVvZiBPSyA9PT0gJ3VuZGVmaW5lZCcpIHZhciBPSyA9IGZ1bmN0aW9uIE9LKHMpIHtcblx0Y29uc29sZS5sb2cocyk7XG59O1xuXG4vKipcbiogSW5zdGFsbHMgYSBuZXcgRGl5YU5vZGUgZGV2aWNlICh3aXRoIGFkZHJlc3MgJ2lwJykgaW50byBhbiBleGlzdGluZyBuZXR3b3JrLCBieVxuKiBjb250YWN0aW5nIGFuIGV4aXN0aW5nIERpeWFOb2RlIGRldmljZSB3aXRoIGFkZHJlc3MgJ2Jvb3RzdHJhcF9pcCcgOlxuKiAgIDEpIENvbnRhY3QgdGhlIG5ldyBub2RlIHRvIGdldCBpdHMgcHVibGljIGtleVxuKiAgIDIpIEFkZCB0aGlzIHB1YmxpYyBrZXkgdG8gdGhlIGV4aXN0aW5nIG5vZGUgVHJ1c3RlZFBlZXJzIGxpc3RcbiogICAzKSBBZGQgdGhlIGV4aXN0aW5nIG5vZGUncyBwdWJsaWMga2V5IHRvIHRoZSBuZXcgbm9kZSdzIFRydXN0ZWRQZWVycyBsaXN0XG4qICAgNCkgQXNrIHRoZSBuZXcgbm9kZSB0byBqb2luIHRoZSBuZXR3b3JrIGJ5IGNhbGxpbmcgQHNlZXtkMSgpLmpvaW4oKX1cbipcbiogTk9URSA6IFRoaXMgb3BlcmF0aW9uIHJlcXVpcmVzIHRoZSBnaXZlbiB1c2VyIHRvIGhhdmUgcm9vdCByb2xlIG9uIGJvdGggbm9kZXNcbipcbiogQHBhcmFtIGlwIDogdGhlIElQIGFkZHJlc3Mgb2YgdGhlIG5ldyBkZXZpY2VcbiogQHBhcmFtIHVzZXIgOiBhIHVzZXJuYW1lIHdpdGggcm9vdCByb2xlIG9uIHRoZSBuZXcgZGV2aWNlXG4qIEBwYXJhbSBwYXNzd29yZCA6IHRoZSBwYXNzd29yZCBmb3IgJ3VzZXInXG4qIEBwYXJhbSBib290c3RyYXBfaXAgOiB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgYm9vdHN0cmFwIGRldmljZVxuKiBAcGFyYW0gYm9vdHN0cmFwX3VzZXIgOiBhIHVzZXIgaWRlbnRpZmllciB3aXRoIHJvb3Qgcm9sZSBvbiB0aGUgYm9vc3RyYXAgZGV2aWNlXG4qIEBwYXJhbSBib290c3RyYXBfcGFzc3dvcmQgOiB0aGUgcGFzc3dvcmQgZm9yICdib290c3RyYXBfdXNlcidcbiogQHBhcmFtIGJvb3RzdHJhcF9uZXQgOiB0aGUgSVAgYWRkcmVzcyB3aGVyZSB0aGUgbmV3IGRldmljZSB3aWxsIGNvbm5lY3QgdG8gdGhlIGJvb3N0cmFwIG9uZVxuKiBAcGFyYW0gY2FsbGJhY2sgOiBvZiB0aGUgZm9ybSBjYWxsYmFjayhuZXdfcGVlcl9uYW1lLGJvb3RzdHJhcF9wZWVyX25hbWUsIGVyciwgZGF0YSlcbiovXG5kMS5pbnN0YWxsTm9kZUV4dCA9IGZ1bmN0aW9uIChpcCwgdXNlciwgcGFzc3dvcmQsIGJvb3RzdHJhcF9pcCwgYm9vdHN0cmFwX3VzZXIsIGJvb3RzdHJhcF9wYXNzd29yZCwgYm9vdHN0cmFwX25ldCwgY2FsbGJhY2spIHtcblx0aWYgKHR5cGVvZiBpcCAhPT0gJ3N0cmluZycpIHRocm93IFwiW2luc3RhbGxOb2RlXSBpcCBzaG91bGQgYmUgYW4gSVAgYWRkcmVzc1wiO1xuXHRpZiAodHlwZW9mIGJvb3RzdHJhcF9pcCAhPT0gJ3N0cmluZycpIHRocm93IFwiW2luc3RhbGxOb2RlXSBib290c3RyYXBfaXAgc2hvdWxkIGJlIGFuIElQIGFkZHJlc3NcIjtcblx0aWYgKHR5cGVvZiBib290c3RyYXBfbmV0ICE9PSAnc3RyaW5nJykgdGhyb3cgXCJbaW5zdGFsbE5vZGVdIGJvb3RzdHJhcF9uZXQgc2hvdWxkIGJlIGFuIElQIGFkZHJlc3NcIjtcblxuXHQvLyBDaGVjayBhbmQgRm9ybWF0IFVSSSAoRlFETilcblx0aWYgKGJvb3RzdHJhcF9pcC5pbmRleE9mKFwid3M6Ly9cIikgIT09IDAgJiYgYm9vdHN0cmFwX2lwLmluZGV4T2YoXCJ3c3M6Ly9cIikgIT09IDApIHtcblx0XHRpZiAoZDEuaXNTZWN1cmVkKCkpIGJvb3RzdHJhcF9pcCA9IFwid3NzOi8vXCIgKyBib290c3RyYXBfaXA7ZWxzZSBib290c3RyYXBfaXAgPSBcIndzOi8vXCIgKyBib290c3RyYXBfaXA7XG5cdH1cblx0aWYgKGJvb3RzdHJhcF9uZXQuaW5kZXhPZihcIndzOi8vXCIpICE9PSAwICYmIGJvb3RzdHJhcF9uZXQuaW5kZXhPZihcIndzczovL1wiKSAhPT0gMCkge1xuXHRcdGlmIChkMS5pc1NlY3VyZWQoKSkgYm9vdHN0cmFwX25ldCA9IFwid3NzOi8vXCIgKyBib290c3RyYXBfbmV0O2Vsc2UgYm9vdHN0cmFwX25ldCA9IFwid3M6Ly9cIiArIGJvb3RzdHJhcF9uZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBqb2luKHBlZXIsIGJvb3RzdHJhcF9wZWVyKSB7XG5cdFx0ZDEoXCIjc2VsZlwiKS5qb2luKGJvb3RzdHJhcF9uZXQsIHRydWUsIGZ1bmN0aW9uIChwZWVyLCBlcnIsIGRhdGEpIHtcblx0XHRcdGlmICghZXJyKSBPSyhcIkpPSU5FRCAhISFcIik7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2socGVlciwgYm9vdHN0cmFwX3BlZXIsIGVyciwgZGF0YSk7XG5cdFx0fSk7XG5cdH1cblxuXHRkMS5jb25uZWN0QXNVc2VyKGlwLCB1c2VyLCBwYXNzd29yZCkudGhlbihmdW5jdGlvbiAocGVlciwgZXJyLCBkYXRhKSB7XG5cdFx0ZDEoXCIjc2VsZlwiKS5naXZlUHVibGljS2V5KGZ1bmN0aW9uIChwZWVyLCBlcnIsIGRhdGEpIHtcblx0XHRcdGlmIChlcnIgPT09ICdTZXJ2aWNlTm90Rm91bmQnKSB7XG5cdFx0XHRcdElORk8oXCJQZWVyIEF1dGhlbnRpY2F0aW9uIGRpc2FibGVkIC4uLiBkaXJlY3RseSBqb2luaW5nXCIpO1xuXHRcdFx0XHRqb2luKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2socGVlciwgbnVsbCwgZXJyLCBudWxsKTtlbHNlIHtcblx0XHRcdFx0SU5GTyhcIkFkZCB0cnVzdGVkIHBlZXIgJ1wiICsgcGVlciArIFwiJyAoaXA9XCIgKyBpcCArIFwiKSB0byAnXCIgKyBib290c3RyYXBfaXAgKyBcIicgd2l0aCBwdWJsaWMga2V5XFxuXCIgKyBkYXRhLnB1YmxpY19rZXkpO1xuXHRcdFx0XHRkMS5jb25uZWN0QXNVc2VyKGJvb3RzdHJhcF9pcCwgYm9vdHN0cmFwX3VzZXIsIGJvb3RzdHJhcF9wYXNzd29yZCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZDEoXCIjc2VsZlwiKS5hZGRUcnVzdGVkUGVlcihwZWVyLCBkYXRhLnB1YmxpY19rZXksIGZ1bmN0aW9uIChib290c3RyYXBfcGVlciwgZXJyLCBfcmVmKSB7XG5cdFx0XHRcdFx0XHR2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcblx0XHRcdFx0XHRcdCAgICBhbHJlYWR5VHJ1c3RlZCA9IF9yZWYyWzBdLFxuXHRcdFx0XHRcdFx0ICAgIHB1YmxpY19rZXkgPSBfcmVmMlsxXTtcblxuXHRcdFx0XHRcdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKHBlZXIsIGJvb3RzdHJhcF9wZWVyLCBlcnIsIG51bGwpO1xuXHRcdFx0XHRcdFx0aWYgKGFscmVhZHlUcnVzdGVkKSBJTkZPKHBlZXIgKyBcIiBhbHJlYWR5IHRydXN0ZWQgYnkgXCIgKyBib290c3RyYXBfcGVlcik7ZWxzZSBJTkZPKGJvb3RzdHJhcF9wZWVyICsgXCIoaXA9XCIgKyBib290c3RyYXBfaXAgKyBcIikgYWRkZWQgXCIgKyBwZWVyICsgXCIoaXA9XCIgKyBpcCArIFwiKSBhcyBhIFRydXN0ZWQgUGVlclwiKTtcblxuXHRcdFx0XHRcdFx0ZDEoJyNzZWxmJykuZ2l2ZVB1YmxpY0tleShmdW5jdGlvbiAoXywgZXJyLCBkYXRhKSB7XG5cdFx0XHRcdFx0XHRcdElORk8oXCJJbiByZXR1cm4sIGFkZCBcIiArIGJvb3RzdHJhcF9wZWVyICsgXCIgdG8gXCIgKyBwZWVyICsgXCIgYXMgYSBUcnVzdGVkIFBlZXIgd2l0aCBwdWJsaWMga2V5IFwiICsgZGF0YS5wdWJsaWNfa2V5KTtcblx0XHRcdFx0XHRcdFx0ZDEuY29ubmVjdEFzVXNlcihpcCwgdXNlciwgcGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdGQxKFwiI3NlbGZcIikuYWRkVHJ1c3RlZFBlZXIoYm9vdHN0cmFwX3BlZXIsIGRhdGEucHVibGljX2tleSwgZnVuY3Rpb24gKHBlZXIsIGVyciwgX3JlZjMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSxcblx0XHRcdFx0XHRcdFx0XHRcdCAgICBhbHJlYWR5VHJ1c3RlZCA9IF9yZWY0WzBdLFxuXHRcdFx0XHRcdFx0XHRcdFx0ICAgIHB1YmxpY19rZXkgPSBfcmVmNFsxXTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGVycikgY2FsbGJhY2socGVlciwgYm9vdHN0cmFwX3BlZXIsIGVyciwgbnVsbCk7ZWxzZSBpZiAoYWxyZWFkeVRydXN0ZWQpIElORk8oYm9vdHN0cmFwX3BlZXIgKyBcIiBhbHJlYWR5IHRydXN0ZWQgYnkgXCIgKyBwZWVyKTtlbHNlIElORk8ocGVlciArIFwiKGlwPVwiICsgaXAgKyBcIikgYWRkZWQgXCIgKyBib290c3RyYXBfcGVlciArIFwiKGlwPVwiICsgYm9vdHN0cmFwX2lwICsgXCIpIGFzIGEgVHJ1c3RlZCBQZWVyXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25jZSBLZXlzIGhhdmUgYmVlbiBleGNoYW5nZWQgYXNrIHRvIGpvaW4gdGhlIG5ldHdvcmtcblx0XHRcdFx0XHRcdFx0XHRcdE9LKFwiS0VZUyBPSyAhIE5vdywgbGV0IFwiICsgcGVlciArIFwiKGlwPVwiICsgaXAgKyBcIikgam9pbiB0aGUgbmV0d29yayB2aWEgXCIgKyBib290c3RyYXBfcGVlciArIFwiKGlwPVwiICsgYm9vdHN0cmFwX25ldCArIFwiKSAuLi5cIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gam9pbihwZWVyLCBib290c3RyYXBfcGVlcik7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn07XG5cbi8qKiBTaG9ydCB2ZXJzaW9uIG9mIEBzZWV7ZDEuaW5zdGFsbE5vZGVFeHR9ICovXG5kMS5pbnN0YWxsTm9kZSA9IGZ1bmN0aW9uIChib290c3RyYXBfaXAsIGJvb3RzdHJhcF9uZXQsIGNhbGxiYWNrKSB7XG5cdHZhciBpcCA9IGQxLmFkZHIoKTtcblx0dmFyIHVzZXIgPSBkMS51c2VyKCk7XG5cdHZhciBwYXNzd29yZCA9IGQxLnBhc3MoKTtcblx0dmFyIGJvb3RzdHJhcF91c2VyID0gdXNlcjtcblx0dmFyIGJvb3RzdHJhcF9wYXNzd29yZCA9IHBhc3N3b3JkO1xuXG5cdGNvbnNvbGUubG9nKCdbaW5zdGFsbE5vZGVdXFxuaXA6JyArIGlwKTtcblxuXHRyZXR1cm4gZDEuaW5zdGFsbE5vZGVFeHQoaXAsIHVzZXIsIHBhc3N3b3JkLCBib290c3RyYXBfaXAsIGJvb3RzdHJhcF91c2VyLCBib290c3RyYXBfcGFzc3dvcmQsIGJvb3RzdHJhcF9uZXQsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogTWFrZSB0aGUgc2VsZWN0ZWQgRGl5YU5vZGVzIGpvaW4gYW4gZXhpc3RpbmcgRGl5YU5vZGVzIE1lc2ggTmV0d29yayBieSBjb250YWN0aW5nXG4gKiB0aGUgZ2l2ZW4gYm9vdHN0cmFwIHBlZXJzLlxuICpcbiAqIE5PVEUgOiBUaGlzIG9wZXJhdGlvbiByZXF1aXJlcyByb290IHJvbGVcbiAqXG4gKiBAcGFyYW0gYm9vdHN0cmFwX2lwcyA6IGFuIGFycmF5IG9mIGJvb3RzdHJhcCBJUCBhZGRyZXNzZXMgdG8gY29udGFjdCB0byBqb2luIHRoZSBOZXR3b3JrXG4gKiBAcGFyYW0gcGVybWFuZW50IDogaWYgdHJ1ZSwgcGVybWFuZW50bHkgYWRkIHRoZSBib290c3RyYXAgcGVlcnMgYXMgYXV0b21hdGljIGJvb3RzdHJhcCBwZWVycyBmb3IgdGhlIHNlbGVjdGVkIG5vZGVzLlxuICpcbiAqL1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKGJvb3RzdHJhcF9pcHMsIHBlcm1hbmVudCwgY2FsbGJhY2spIHtcblx0aWYgKHR5cGVvZiBib290c3RyYXBfaXBzID09PSAnc3RyaW5nJykgYm9vdHN0cmFwX2lwcyA9IFtib290c3RyYXBfaXBzXTtcblxuXHRpZiAoYm9vdHN0cmFwX2lwcy5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHRocm93IFwiam9pbigpIDogYm9vdHN0cmFwX2lwcyBzaG91bGQgYmUgYW4gYXJyYXkgb2YgcGVlcnMgVVJJc1wiO1xuXG5cdHRoaXMucmVxdWVzdCh7XG5cdFx0c2VydmljZTogJ21lc2hOZXR3b3JrJyxcblx0XHRmdW5jOiAnSm9pbicsXG5cdFx0ZGF0YToge1xuXHRcdFx0Ym9vdHN0cmFwX2lwczogYm9vdHN0cmFwX2lwcyxcblx0XHRcdHBlcm1hbmVudDogcGVybWFuZW50XG5cdFx0fVxuXHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrKHBlZXJJZCwgZXJyLCBkYXRhKTtcblx0fSk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3QgdGhlIHNlbGVjdGVkIERpeWFOb2RlcyBmcm9tIHRoZSBnaXZlbiBib290c3RyYXAgcGVlcnNcbiAqXG4gKiBOT1RFIDogVGhpcyBvcGVyYXRpb24gcmVxdWlyZXMgcm9vdCByb2xlXG4gKlxuICogQHBhcmFtIGJvb3RzdHJhcF9pcHMgOiBhbiBhcnJheSBvZiBib290c3RyYXAgSVAgYWRkcmVzc2VzIHRvIGxlYXZlXG4gKiBAcGFyYW0gYlBlcm1hbmVudCA6IGlmIHRydWUsIHBlcm1hbmVudGx5IHJlbW92ZSB0aGUgZ2l2ZW4gcGVlcnMgZnJvbSB0aGUgYXV0b21hdGljIGJvb3RzdHJhcCBwZWVycyBsaXN0XG4gKlxuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gKGJvb3RzdHJhcF9pcHMsIGJQZXJtYW5lbnQsIGNhbGxiYWNrKSB7XG5cdGlmICh0eXBlb2YgYm9vdHN0cmFwX2lwcyA9PT0gJ3N0cmluZycpIGJvb3RzdHJhcF9pcHMgPSBbYm9vdHN0cmFwX2lwc107XG5cdGlmIChib290c3RyYXBfaXBzLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgdGhyb3cgXCJsZWF2ZSgpIDogYm9vdHN0cmFwX2lwcyBzaG91bGQgYmUgYW4gYXJyYXkgb2YgcGVlcnMgVVJJc1wiO1xuXHR0aGlzLnJlcXVlc3QoeyBzZXJ2aWNlOiAnbWVzaE5ldHdvcmsnLCBmdW5jOiAnTGVhdmUnLCBkYXRhOiB7IGJvb3RzdHJhcF9pcHM6IGJvb3RzdHJhcF9pcHMsIGJQZXJtYW5lbnQ6IGJQZXJtYW5lbnQgfSB9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrKHBlZXJJZCwgZXJyLCBkYXRhKTtcblx0fSk7XG59O1xuXG4vKipcbiAqIEFzayB0aGUgc2VsZWN0ZWQgRGl5YU5vZGVzIGZvciB0aGVpciBwdWJsaWMga2V5c1xuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmdpdmVQdWJsaWNLZXkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0cmV0dXJuIHRoaXMucmVxdWVzdCh7IHNlcnZpY2U6ICdwZWVyQXV0aCcsIGZ1bmM6ICdHaXZlUHVibGljS2V5JywgZGF0YToge30gfSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBkYXRhKSB7XG5cdFx0Y2FsbGJhY2socGVlcklkLCBlcnIsIGRhdGEpO1xuXHR9KTtcbn07XG5cbi8qKlxuICogQWRkIGEgbmV3IHRydXN0ZWQgcGVlciBSU0EgcHVibGljIGtleSB0byB0aGUgc2VsZWN0ZWQgRGl5YU5vZGVzXG4gKiBOT1RFIDogVGhpcyBvcGVyYXRpb24gcmVxdWlyZXMgcm9vdCByb2xlXG4gKlxuICogQHBhcmFtIHBlZXJfbmFtZSA6IHRoZSBuYW1lIG9mIHRoZSBuZXcgdHJ1c3RlZCBEaXlhTm9kZSBwZWVyXG4gKiBAcGFyYW0gcHVibGljX2tleSA6IHRoZSBSU0EgcHVibGljIGtleSBvZiB0aGUgbmV3IHRydXN0ZWQgRGl5YU5vZGUgcGVlclxuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmFkZFRydXN0ZWRQZWVyID0gZnVuY3Rpb24gKG5hbWUsIHB1YmxpY19rZXksIGNhbGxiYWNrKSB7XG5cdHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuXHRcdHNlcnZpY2U6ICdwZWVyQXV0aCcsXG5cdFx0ZnVuYzogJ0FkZFRydXN0ZWRQZWVyJyxcblx0XHRkYXRhOiB7XG5cdFx0XHRwZWVyX25hbWU6IG5hbWUsXG5cdFx0XHRwdWJsaWNfa2V5OiBwdWJsaWNfa2V5XG5cdFx0fVxuXHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRjYWxsYmFjayhwZWVySWQsIGVyciwgZGF0YSk7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgc2VsZWN0ZWQgRGl5YU5vZGVzIHRydXN0IHRoZSBnaXZlbiBwZWVyc1xuICogQHBhcmFtIHBlZXJzIDogYW4gYXJyYXkgb2YgcGVlciBuYW1lc1xuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmFyZVRydXN0ZWQgPSBmdW5jdGlvbiAocGVlcnMsIGNhbGxiYWNrKSB7XG5cdHJldHVybiB0aGlzLnJlcXVlc3QoeyBzZXJ2aWNlOiAncGVlckF1dGgnLCBmdW5jOiAnQXJlVHJ1c3RlZCcsIGRhdGE6IHsgcGVlcnM6IHBlZXJzIH0gfSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBkYXRhKSB7XG5cdFx0dmFyIGFsbFRydXN0ZWQgPSBkYXRhLnRydXN0ZWQ7XG5cdFx0aWYgKGFsbFRydXN0ZWQpIHtcblx0XHRcdE9LKHBlZXJzICsgXCIgYXJlIHRydXN0ZWQgYnkgXCIgKyBwZWVySWQpO2NhbGxiYWNrKHBlZXJJZCwgdHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEVSUihcIlNvbWUgcGVlcnMgaW4gXCIgKyBwZWVycyArIFwiIGFyZSB1bnRydXN0ZWQgYnkgXCIgKyBwZWVySWQpO2NhbGxiYWNrKHBlZXJJZCwgZmFsc2UpO1xuXHRcdH1cblx0fSk7XG59O1xuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5pc1RydXN0ZWQgPSBmdW5jdGlvbiAocGVlciwgY2FsbGJhY2spIHtcblx0cmV0dXJuIHRoaXMuYXJlVHJ1c3RlZChbcGVlcl0sIGNhbGxiYWNrKTtcbn07XG5cbmQxLnRydXN0ZWRQZWVycyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXHRkMShcIiNzZWxmXCIpLnJlcXVlc3QoeyBzZXJ2aWNlOiAncGVlckF1dGgnLCBmdW5jOiAnR2V0VHJ1c3RlZFBlZXJzJyB9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRpZiAoZXJyKSByZXR1cm4gZGVmZXJyZWQucmVqZWN0KGVycik7XG5cdFx0dmFyIHBlZXJzID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnBlZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRwZWVycy5wdXNoKGRhdGEucGVlcnNbaV0ubmFtZSk7XG5cdFx0fXJldHVybiBkZWZlcnJlZC5yZXNvbHZlKHBlZXJzKTtcblx0fSk7XG5cdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcbmQxLnRwID0gZDEudHJ1c3RlZFBlZXJzOyAvLyBTaG9ydGhhbmRcblxuZDEuYmxhY2tsaXN0ZWRQZWVycyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXHRkMShcIiNzZWxmXCIpLnJlcXVlc3QoeyBzZXJ2aWNlOiAncGVlckF1dGgnLCBmdW5jOiAnR2V0QmxhY2tsaXN0ZWRQZWVycycgfSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBkYXRhKSB7XG5cdFx0aWYgKGVycikgcmV0dXJuIGRlZmVycmVkLnJlamVjdChlcnIpO1xuXHRcdHZhciBwZWVycyA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5wZWVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0cGVlcnMucHVzaChkYXRhLnBlZXJzW2ldLm5hbWUpO1xuXHRcdH1yZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShwZWVycyk7XG5cdH0pO1xuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5kMS5icCA9IGQxLmJsYWNrbGlzdGVkUGVlcnM7IC8vIFNob3J0aGFuZFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCbFpYSkJkWFJvTG1weklsMHNJbTVoYldWeklqcGJJa1JwZVdGVFpXeGxZM1J2Y2lJc0luSmxjWFZwY21VaUxDSmtNU0lzSW1selFuSnZkM05sY2lJc0luZHBibVJ2ZHlJc0lsRWlMQ0pKVGtaUElpd2ljeUlzSW1OdmJuTnZiR1VpTENKc2IyY2lMQ0pQU3lJc0ltbHVjM1JoYkd4T2IyUmxSWGgwSWl3aWFYQWlMQ0oxYzJWeUlpd2ljR0Z6YzNkdmNtUWlMQ0ppYjI5MGMzUnlZWEJmYVhBaUxDSmliMjkwYzNSeVlYQmZkWE5sY2lJc0ltSnZiM1J6ZEhKaGNGOXdZWE56ZDI5eVpDSXNJbUp2YjNSemRISmhjRjl1WlhRaUxDSmpZV3hzWW1GamF5SXNJbWx1WkdWNFQyWWlMQ0pwYzFObFkzVnlaV1FpTENKcWIybHVJaXdpY0dWbGNpSXNJbUp2YjNSemRISmhjRjl3WldWeUlpd2laWEp5SWl3aVpHRjBZU0lzSW1OdmJtNWxZM1JCYzFWelpYSWlMQ0owYUdWdUlpd2laMmwyWlZCMVlteHBZMHRsZVNJc0luQjFZbXhwWTE5clpYa2lMQ0poWkdSVWNuVnpkR1ZrVUdWbGNpSXNJbUZzY21WaFpIbFVjblZ6ZEdWa0lpd2lYeUlzSW1sdWMzUmhiR3hPYjJSbElpd2lZV1JrY2lJc0luQmhjM01pTENKd2NtOTBiM1I1Y0dVaUxDSmliMjkwYzNSeVlYQmZhWEJ6SWl3aWNHVnliV0Z1Wlc1MElpd2lZMjl1YzNSeWRXTjBiM0lpTENKQmNuSmhlU0lzSW5KbGNYVmxjM1FpTENKelpYSjJhV05sSWl3aVpuVnVZeUlzSW5CbFpYSkpaQ0lzSW14bFlYWmxJaXdpWWxCbGNtMWhibVZ1ZENJc0ltNWhiV1VpTENKd1pXVnlYMjVoYldVaUxDSmhjbVZVY25WemRHVmtJaXdpY0dWbGNuTWlMQ0poYkd4VWNuVnpkR1ZrSWl3aWRISjFjM1JsWkNJc0lrVlNVaUlzSW1selZISjFjM1JsWkNJc0luUnlkWE4wWldSUVpXVnljeUlzSW1SbFptVnljbVZrSWl3aVpHVm1aWElpTENKeVpXcGxZM1FpTENKcElpd2liR1Z1WjNSb0lpd2ljSFZ6YUNJc0luSmxjMjlzZG1VaUxDSndjbTl0YVhObElpd2lkSEFpTENKaWJHRmphMnhwYzNSbFpGQmxaWEp6SWl3aVluQWlYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZCUVN4SlFVRkpRU3hsUVVGbFF5eFJRVUZSTEc5Q1FVRlNMRVZCUVRoQ1JDeFpRVUZxUkR0QlFVTkJMRWxCUVVsRkxFdEJRVXRFTEZGQlFWRXNiMEpCUVZJc1EwRkJWRHRCUVVOQkxFbEJRVWxGTEZsQlFWa3NSVUZCUlN4UFFVRlBReXhOUVVGUUxFdEJRV3RDTEZkQlFYQkNMRU5CUVdoQ08wRkJRMEVzU1VGQlJ5eERRVUZEUkN4VFFVRktMRVZCUVdVN1FVRkJSU3hMUVVGSlJTeEpRVUZKU2l4UlFVRlJMRWRCUVZJc1EwRkJVanRCUVVGMVFpeERRVUY0UXl4TlFVTkxPMEZCUVVVc1MwRkJTVWtzU1VGQlNVUXNUMEZCVDBNc1EwRkJaanRCUVVGdFFqczdRVUZGTVVJc1NVRkJSeXhQUVVGUFF5eEpRVUZRTEV0QlFXZENMRmRCUVc1Q0xFVkJRV2RETEVsQlFVbEJMRTlCUVU4c1UwRkJVRUVzU1VGQlR5eERRVUZUUXl4RFFVRlVMRVZCUVZrN1FVRkJSVU1zVTBGQlVVTXNSMEZCVWl4RFFVRlpSaXhEUVVGYU8wRkJRV2RDTEVOQlFYcERPMEZCUTJoRExFbEJRVWNzVDBGQlQwY3NSVUZCVUN4TFFVRmpMRmRCUVdwQ0xFVkJRVGhDTEVsQlFVbEJMRXRCUVVzc1UwRkJURUVzUlVGQlN5eERRVUZUU0N4RFFVRlVMRVZCUVZrN1FVRkJSVU1zVTBGQlVVTXNSMEZCVWl4RFFVRlpSaXhEUVVGYU8wRkJRV2RDTEVOQlFYWkRPenRCUVVrNVFqczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVV3c1IwRkJSMU1zWTBGQlNDeEhRVUZ2UWl4VlFVRlRReXhGUVVGVUxFVkJRV0ZETEVsQlFXSXNSVUZCYlVKRExGRkJRVzVDTEVWQlFUWkNReXhaUVVFM1FpeEZRVUV5UTBNc1kwRkJNME1zUlVGQk1rUkRMR3RDUVVFelJDeEZRVUVyUlVNc1lVRkJMMFVzUlVGQk9FWkRMRkZCUVRsR0xFVkJRWGRITzBGQlF6TklMRXRCUVVjc1QwRkJUMUFzUlVGQlVDeExRVUZqTEZGQlFXcENMRVZCUVRKQ0xFMUJRVTBzTUVOQlFVNDdRVUZETTBJc1MwRkJSeXhQUVVGUFJ5eFpRVUZRTEV0QlFYZENMRkZCUVROQ0xFVkJRWEZETEUxQlFVMHNiMFJCUVU0N1FVRkRja01zUzBGQlJ5eFBRVUZQUnl4aFFVRlFMRXRCUVhsQ0xGRkJRVFZDTEVWQlFYTkRMRTFCUVUwc2NVUkJRVTQ3TzBGQlJYUkRPMEZCUTBFc1MwRkJSMGdzWVVGQllVc3NUMEZCWWl4RFFVRnhRaXhQUVVGeVFpeE5RVUZyUXl4RFFVRnNReXhKUVVGMVEwd3NZVUZCWVVzc1QwRkJZaXhEUVVGeFFpeFJRVUZ5UWl4TlFVRnRReXhEUVVFM1JTeEZRVUZuUmp0QlFVTXZSU3hOUVVGSGJFSXNSMEZCUjIxQ0xGTkJRVWdzUlVGQlNDeEZRVUZ0UWs0c1pVRkJaU3hYUVVGWFFTeFpRVUV4UWl4RFFVRnVRaXhMUVVOTFFTeGxRVUZsTEZWQlFWVkJMRmxCUVhwQ08wRkJRMHc3UVVGRFJDeExRVUZIUnl4alFVRmpSU3hQUVVGa0xFTkJRWE5DTEU5QlFYUkNMRTFCUVcxRExFTkJRVzVETEVsQlFYZERSaXhqUVVGalJTeFBRVUZrTEVOQlFYTkNMRkZCUVhSQ0xFMUJRVzlETEVOQlFTOUZMRVZCUVd0R08wRkJRMnBHTEUxQlFVZHNRaXhIUVVGSGJVSXNVMEZCU0N4RlFVRklMRVZCUVcxQ1NDeG5Ra0ZCWjBJc1YwRkJWMEVzWVVGQk0wSXNRMEZCYmtJc1MwRkRTMEVzWjBKQlFXZENMRlZCUVZWQkxHRkJRVEZDTzBGQlEwdzdPMEZCU1VRc1ZVRkJVMGtzU1VGQlZDeERRVUZqUXl4SlFVRmtMRVZCUVc5Q1F5eGpRVUZ3UWl4RlFVRnZRenRCUVVOdVEzUkNMRXRCUVVjc1QwRkJTQ3hGUVVGWmIwSXNTVUZCV2l4RFFVRnBRa29zWVVGQmFrSXNSVUZCWjBNc1NVRkJhRU1zUlVGQmMwTXNWVUZCVTBzc1NVRkJWQ3hGUVVGbFJTeEhRVUZtTEVWQlFXOUNReXhKUVVGd1FpeEZRVUY1UWp0QlFVTTVSQ3hQUVVGSExFTkJRVU5FTEVkQlFVb3NSVUZCVTJZc1IwRkJSeXhaUVVGSU8wRkJRMVFzVlVGQlQxTXNVMEZCVTBrc1NVRkJWQ3hGUVVGbFF5eGpRVUZtTEVWQlFTdENReXhIUVVFdlFpeEZRVUZ2UTBNc1NVRkJjRU1zUTBGQlVEdEJRVU5CTEVkQlNFUTdRVUZKUVRzN1FVRkZSSGhDTEVsQlFVZDVRaXhoUVVGSUxFTkJRV2xDWml4RlFVRnFRaXhGUVVGeFFrTXNTVUZCY2tJc1JVRkJNa0pETEZGQlFUTkNMRVZCUVhGRFl5eEpRVUZ5UXl4RFFVRXdReXhWUVVGVFRDeEpRVUZVTEVWQlFXVkZMRWRCUVdZc1JVRkJiMEpETEVsQlFYQkNMRVZCUVhsQ08wRkJRMnhGZUVJc1MwRkJSeXhQUVVGSUxFVkJRVmt5UWl4aFFVRmFMRU5CUVRCQ0xGVkJRVk5PTEVsQlFWUXNSVUZCWlVVc1IwRkJaaXhGUVVGdlFrTXNTVUZCY0VJc1JVRkJNRUk3UVVGRGJrUXNUMEZCUjBRc1VVRkJUU3hwUWtGQlZDeEZRVUUwUWp0QlFVTXpRbTVDTEZOQlFVc3NiVVJCUVV3N1FVRkRRV2RDTzBGQlEwRTdRVUZEUVN4SlFVcEVMRTFCUzBzc1NVRkJSMGNzUjBGQlNDeEZRVUZSTEU5QlFVOU9MRk5CUVZOSkxFbEJRVlFzUlVGQlpTeEpRVUZtTEVWQlFYRkNSU3hIUVVGeVFpeEZRVUV3UWl4SlFVRXhRaXhEUVVGUUxFTkJRVklzUzBGRFFUdEJRVU5LYmtJc1UwRkJTeXgxUWtGQmRVSnBRaXhKUVVGMlFpeEhRVUU0UWl4UlFVRTVRaXhIUVVGNVExZ3NSVUZCZWtNc1IwRkJPRU1zVVVGQk9VTXNSMEZCZVVSSExGbEJRWHBFTEVkQlFYZEZMSEZDUVVGNFJTeEhRVUZuUjFjc1MwRkJTMGtzVlVGQk1VYzdRVUZEUVRWQ0xFOUJRVWQ1UWl4aFFVRklMRU5CUVdsQ1dpeFpRVUZxUWl4RlFVRXJRa01zWTBGQkwwSXNSVUZCSzBORExHdENRVUV2UXl4RlFVRnRSVmNzU1VGQmJrVXNRMEZCZDBVc1dVRkJWVHRCUVVOcVJqRkNMRkZCUVVjc1QwRkJTQ3hGUVVGWk5rSXNZMEZCV2l4RFFVRXlRbElzU1VGQk0wSXNSVUZCYVVOSExFdEJRVXRKTEZWQlFYUkRMRVZCUVd0RUxGVkJRVk5PTEdOQlFWUXNSVUZCZVVKRExFZEJRWHBDTEZGQlFUUkVPMEZCUVVFN1FVRkJRU3hWUVVFM1FrOHNZMEZCTmtJN1FVRkJRU3hWUVVGaVJpeFZRVUZoT3p0QlFVVTNSeXhWUVVGSFRDeEhRVUZJTEVWQlFWRXNUMEZCVDA0c1UwRkJVMGtzU1VGQlZDeEZRVUZsUXl4alFVRm1MRVZCUVN0Q1F5eEhRVUV2UWl4RlFVRnZReXhKUVVGd1F5eERRVUZRTzBGQlExSXNWVUZCUjA4c1kwRkJTQ3hGUVVGdFFqRkNMRXRCUVV0cFFpeFBRVUZQTEhOQ1FVRlFMRWRCUVdkRFF5eGpRVUZ5UXl4RlFVRnVRaXhMUVVOTGJFSXNTMEZCUzJ0Q0xHbENRVUZwUWl4TlFVRnFRaXhIUVVGNVFsUXNXVUZCZWtJc1IwRkJkVU1zVlVGQmRrTXNSMEZCYjBSUkxFbEJRWEJFTEVkQlFUSkVMRTFCUVRORUxFZEJRVzlGV0N4RlFVRndSU3hIUVVGNVJTeHhRa0ZCT1VVN08wRkJSVXhXTEZOQlFVY3NUMEZCU0N4RlFVRlpNa0lzWVVGQldpeERRVUV3UWl4VlFVRlRTU3hEUVVGVUxFVkJRVmxTTEVkQlFWb3NSVUZCYVVKRExFbEJRV3BDTEVWQlFYVkNPMEZCUTJoRWNFSXNXVUZCU3l4dlFrRkJiMEpyUWl4alFVRndRaXhIUVVGeFF5eE5RVUZ5UXl4SFFVRTRRMFFzU1VGQk9VTXNSMEZCY1VRc2NVTkJRWEpFTEVkQlFUWkdSeXhMUVVGTFNTeFZRVUYyUnp0QlFVTkJOVUlzVlVGQlIzbENMR0ZCUVVnc1EwRkJhVUptTEVWQlFXcENMRVZCUVhGQ1F5eEpRVUZ5UWl4RlFVRXlRa01zVVVGQk0wSXNSVUZCY1VOakxFbEJRWEpETEVOQlFUQkRMRmxCUVZVN1FVRkRia1F4UWl4WFFVRkhMRTlCUVVnc1JVRkJXVFpDTEdOQlFWb3NRMEZCTWtKUUxHTkJRVE5DTEVWQlFUSkRSU3hMUVVGTFNTeFZRVUZvUkN4RlFVRTBSQ3hWUVVGVFVDeEpRVUZVTEVWQlFXVkZMRWRCUVdZc1UwRkJhMFE3UVVGQlFUdEJRVUZCTEdGQlFUZENUeXhqUVVFMlFqdEJRVUZCTEdGQlFXSkdMRlZCUVdFN08wRkJRemRITEdGQlFVZE1MRWRCUVVnc1JVRkJVVTRzVTBGQlUwa3NTVUZCVkN4RlFVRmxReXhqUVVGbUxFVkJRU3RDUXl4SFFVRXZRaXhGUVVGdlF5eEpRVUZ3UXl4RlFVRlNMRXRCUTBzc1NVRkJSMDhzWTBGQlNDeEZRVUZ0UWpGQ0xFdEJRVXRyUWl4cFFrRkJhVUlzYzBKQlFXcENMRWRCUVRCRFJDeEpRVUV2UXl4RlFVRnVRaXhMUVVOQmFrSXNTMEZCUzJsQ0xFOUJRVThzVFVGQlVDeEhRVUZsV0N4RlFVRm1MRWRCUVcxQ0xGVkJRVzVDTEVkQlFXZERXU3hqUVVGb1F5eEhRVUZwUkN4TlFVRnFSQ3hIUVVGNVJGUXNXVUZCZWtRc1IwRkJkVVVzY1VKQlFUVkZPMEZCUTB3N1FVRkRRVXdzV1VGQlJ5eDNRa0ZCYzBKaExFbEJRWFJDTEVkQlFUSkNMRTFCUVROQ0xFZEJRV3REV0N4RlFVRnNReXhIUVVGeFF5eDVRa0ZCY2tNc1IwRkJLMFJaTEdOQlFTOUVMRWRCUVRoRkxFMUJRVGxGTEVkQlFYRkdUaXhoUVVGeVJpeEhRVUZ0Unl4UFFVRjBSenRCUVVOQkxHZENRVUZQU1N4TFFVRkxReXhKUVVGTUxFVkJRVmRETEdOQlFWZ3NRMEZCVUR0QlFVTkJMRk5CVUVRN1FVRlJRU3hSUVZSRU8wRkJWVUVzVDBGYVJEdEJRV0ZCTEUxQmJrSkVPMEZCYjBKQkxFdEJja0pFTzBGQmMwSkJPMEZCUTBRc1IwRm9RMFE3UVVGcFEwRXNSVUZzUTBRN1FVRnRRMEVzUTBFelJFUTdPMEZCT0VSQk8wRkJRMEYwUWl4SFFVRkhaME1zVjBGQlNDeEhRVUZwUWl4VlFVRlRia0lzV1VGQlZDeEZRVUYxUWtjc1lVRkJka0lzUlVGQmMwTkRMRkZCUVhSRExFVkJRV2RFTzBGQlF5OUVMRXRCUVVsUUxFdEJRVXRXTEVkQlFVZHBReXhKUVVGSUxFVkJRVlE3UVVGRFFTeExRVUZKZEVJc1QwRkJUMWdzUjBGQlIxY3NTVUZCU0N4RlFVRllPMEZCUTBFc1MwRkJTVU1zVjBGQlYxb3NSMEZCUjJ0RExFbEJRVWdzUlVGQlpqdEJRVU5CTEV0QlFVbHdRaXhwUWtGQmFVSklMRWxCUVhKQ08wRkJRMEVzUzBGQlNVa3NjVUpCUVhGQ1NDeFJRVUY2UWpzN1FVRkZRVTRzVTBGQlVVTXNSMEZCVWl4M1FrRkJhME5ITEVWQlFXeERPenRCUVVWQkxGRkJRVTlXTEVkQlFVZFRMR05CUVVnc1EwRkJhMEpETEVWQlFXeENMRVZCUVhOQ1F5eEpRVUYwUWl4RlFVRTBRa01zVVVGQk5VSXNSVUZCYzBORExGbEJRWFJETEVWQlFXOUVReXhqUVVGd1JDeEZRVUZ2UlVNc2EwSkJRWEJGTEVWQlFYZEdReXhoUVVGNFJpeEZRVUYxUjBNc1VVRkJka2NzUTBGQlVEdEJRVU5FTEVOQlZrUTdPMEZCWlVFN096czdPenM3T3pzN1FVRlZRVzVDTEdGQlFXRnhReXhUUVVGaUxFTkJRWFZDWml4SlFVRjJRaXhIUVVFNFFpeFZRVUZUWjBJc1lVRkJWQ3hGUVVGM1FrTXNVMEZCZUVJc1JVRkJiVU53UWl4UlFVRnVReXhGUVVFMlF6dEJRVU14UlN4TFFVRkhMRTlCUVU5dFFpeGhRVUZRTEV0QlFYbENMRkZCUVRWQ0xFVkJRWE5EUVN4blFrRkJaMElzUTBGQlJVRXNZVUZCUml4RFFVRm9RanM3UVVGRmRFTXNTMEZCUjBFc1kwRkJZMFVzVjBGQlpDeExRVUU0UWtNc1MwRkJha01zUlVGRFF5eE5RVUZOTEhsRVFVRk9PenRCUVVWRUxFMUJRVXRETEU5QlFVd3NRMEZCWVR0QlFVTmFReXhYUVVGVkxHRkJSRVU3UVVGRldrTXNVVUZCVFN4TlFVWk5PMEZCUjFwc1FpeFJRVUZOTzBGQlEweFpMQ3RDUVVSTE8wRkJSVXhETzBGQlJrczdRVUZJVFN4RlFVRmlMRVZCVVVNc1ZVRkJVMDBzVFVGQlZDeEZRVUZwUW5CQ0xFZEJRV3BDTEVWQlFYTkNReXhKUVVGMFFpeEZRVUUwUWp0QlFVTXpRaXhOUVVGSkxFOUJRVTlRTEZGQlFWQXNTMEZCYjBJc1ZVRkJlRUlzUlVGRFEwRXNVMEZCVXpCQ0xFMUJRVlFzUlVGQmFVSndRaXhIUVVGcVFpeEZRVUZ6UWtNc1NVRkJkRUk3UVVGRFJDeEZRVmhHTzBGQllVRXNRMEZ1UWtRN08wRkJjMEpCT3pzN096czdPenM3UVVGVFFURkNMR0ZCUVdGeFF5eFRRVUZpTEVOQlFYVkNVeXhMUVVGMlFpeEhRVUVyUWl4VlFVRlRVaXhoUVVGVUxFVkJRWGRDVXl4VlFVRjRRaXhGUVVGdlF6VkNMRkZCUVhCRExFVkJRVFpETzBGQlF6TkZMRXRCUVVjc1QwRkJUMjFDTEdGQlFWQXNTMEZCZVVJc1VVRkJOVUlzUlVGQmMwTkJMR2RDUVVGblFpeERRVUZGUVN4aFFVRkdMRU5CUVdoQ08wRkJRM1JETEV0QlFVZEJMR05CUVdORkxGZEJRV1FzUzBGQk9FSkRMRXRCUVdwRExFVkJRWGRETEUxQlFVMHNNRVJCUVU0N1FVRkRlRU1zVFVGQlMwTXNUMEZCVEN4RFFVTkRMRVZCUVVORExGTkJRVlVzWVVGQldDeEZRVUV3UWtNc1RVRkJUU3hQUVVGb1F5eEZRVUY1UTJ4Q0xFMUJRVTBzUlVGQlJWa3NaVUZCWlVFc1lVRkJha0lzUlVGQlowTlRMRmxCUVZsQkxGVkJRVFZETEVWQlFTOURMRVZCUkVRc1JVRkZReXhWUVVGVFJpeE5RVUZVTEVWQlFXbENjRUlzUjBGQmFrSXNSVUZCYzBKRExFbEJRWFJDTEVWQlFUUkNPMEZCUVVVc1RVRkJSeXhQUVVGUFVDeFJRVUZRTEV0QlFXOUNMRlZCUVhaQ0xFVkJRVzFEUVN4VFFVRlRNRUlzVFVGQlZDeEZRVUZwUW5CQ0xFZEJRV3BDTEVWQlFYTkNReXhKUVVGMFFqdEJRVUUyUWl4RlFVWXZSanRCUVVsQkxFTkJVRVE3TzBGQlZVRTdPenRCUVVkQk1VSXNZVUZCWVhGRExGTkJRV0lzUTBGQmRVSlNMR0ZCUVhaQ0xFZEJRWFZETEZWQlFWTldMRkZCUVZRc1JVRkJhMEk3UVVGRGVFUXNVVUZCVHl4TFFVRkxkVUlzVDBGQlRDeERRVU5PTEVWQlFVVkRMRk5CUVZNc1ZVRkJXQ3hGUVVGMVFrTXNUVUZCVFN4bFFVRTNRaXhGUVVFNFEyeENMRTFCUVUwc1JVRkJjRVFzUlVGRVRTeEZRVVZPTEZWQlFWTnRRaXhOUVVGVUxFVkJRV2xDY0VJc1IwRkJha0lzUlVGQmMwSkRMRWxCUVhSQ0xFVkJRVEpDTzBGQlFVTlFMRmRCUVZNd1FpeE5RVUZVTEVWQlFXZENjRUlzUjBGQmFFSXNSVUZCYjBKRExFbEJRWEJDTzBGQlF6VkNMRVZCU0Uwc1EwRkJVRHRCUVVsQkxFTkJURVE3TzBGQlQwRTdPenM3T3pzN1FVRlBRVEZDTEdGQlFXRnhReXhUUVVGaUxFTkJRWFZDVGl4alFVRjJRaXhIUVVGM1F5eFZRVUZUYVVJc1NVRkJWQ3hGUVVGbGJFSXNWVUZCWml4RlFVRXlRbGdzVVVGQk0wSXNSVUZCY1VNN1FVRkROVVVzVVVGQlR5eExRVUZMZFVJc1QwRkJUQ3hEUVVGaE8wRkJRMjVDUXl4WFFVRlRMRlZCUkZVN1FVRkZia0pETEZGQlFVMHNaMEpCUm1FN1FVRkhia0pzUWl4UlFVRk5PMEZCUTB4MVFpeGpRVUZYUkN4SlFVUk9PMEZCUlV4c1FpeGxRVUZaUVR0QlFVWlFPMEZCU0dFc1JVRkJZaXhGUVZGT0xGVkJRVlZsTEUxQlFWWXNSVUZCYVVKd1FpeEhRVUZxUWl4RlFVRnhRa01zU1VGQmNrSXNSVUZCTWtJN1FVRkRNVUpRTEZkQlFWVXdRaXhOUVVGV0xFVkJRV2xDY0VJc1IwRkJha0lzUlVGQmNVSkRMRWxCUVhKQ08wRkJRMEVzUlVGV1N5eERRVUZRTzBGQldVRXNRMEZpUkRzN1FVRm5Ra0U3T3pzN1FVRkpRVEZDTEdGQlFXRnhReXhUUVVGaUxFTkJRWFZDWVN4VlFVRjJRaXhIUVVGdlF5eFZRVUZUUXl4TFFVRlVMRVZCUVdkQ2FFTXNVVUZCYUVJc1JVRkJlVUk3UVVGRE5VUXNVVUZCVHl4TFFVRkxkVUlzVDBGQlRDeERRVU5PTEVWQlFVVkRMRk5CUVZNc1ZVRkJXQ3hGUVVGMVFrTXNUVUZCVFN4WlFVRTNRaXhGUVVFeVEyeENMRTFCUVUwc1JVRkJSWGxDTEU5QlFVOUJMRXRCUVZRc1JVRkJha1FzUlVGRVRTeEZRVVZPTEZWQlFWTk9MRTFCUVZRc1JVRkJhVUp3UWl4SFFVRnFRaXhGUVVGelFrTXNTVUZCZEVJc1JVRkJORUk3UVVGRE0wSXNUVUZCU1RCQ0xHRkJRV0V4UWl4TFFVRkxNa0lzVDBGQmRFSTdRVUZEUVN4TlFVRkhSQ3hWUVVGSUxFVkJRV1U3UVVGQlJURkRMRTFCUVVkNVF5eFJRVUZSTEd0Q1FVRlNMRWRCUVRaQ1RpeE5RVUZvUXl4RlFVRjVRekZDTEZOQlFWTXdRaXhOUVVGVUxFVkJRV2xDTEVsQlFXcENPMEZCUVhsQ0xFZEJRVzVHTEUxQlEwczdRVUZCUlZNc1QwRkJTU3h0UWtGQmJVSklMRXRCUVc1Q0xFZEJRVEpDTEc5Q1FVRXpRaXhIUVVGclJFNHNUVUZCZEVRc1JVRkJLMFF4UWl4VFFVRlRNRUlzVFVGQlZDeEZRVUZwUWl4TFFVRnFRanRCUVVFd1FqdEJRVU5vUnl4RlFVNUxMRU5CUVZBN1FVRlJRU3hEUVZSRU8wRkJWVUUzUXl4aFFVRmhjVU1zVTBGQllpeERRVUYxUW10Q0xGTkJRWFpDTEVkQlFXMURMRlZCUVZOb1F5eEpRVUZVTEVWQlFXVktMRkZCUVdZc1JVRkJlVUk3UVVGQlJTeFJRVUZQTEV0QlFVc3JRaXhWUVVGTUxFTkJRV2RDTEVOQlFVTXpRaXhKUVVGRUxFTkJRV2hDTEVWQlFYZENTaXhSUVVGNFFpeERRVUZRTzBGQlFUSkRMRU5CUVhwSE96dEJRVWRCYWtJc1IwRkJSM05FTEZsQlFVZ3NSMEZCYTBJc1dVRkJWenRCUVVNMVFpeExRVUZKUXl4WFFVRlhjRVFzUlVGQlJYRkVMRXRCUVVZc1JVRkJaanRCUVVOQmVFUXNTVUZCUnl4UFFVRklMRVZCUVZsM1F5eFBRVUZhTEVOQlEwTXNSVUZCUlVNc1UwRkJVeXhWUVVGWUxFVkJRWFZDUXl4TlFVRk5MR2xDUVVFM1FpeEZRVVJFTEVWQlJVTXNWVUZCVTBNc1RVRkJWQ3hGUVVGcFFuQkNMRWRCUVdwQ0xFVkJRWE5DUXl4SlFVRjBRaXhGUVVFMFFqdEJRVU16UWl4TlFVRkhSQ3hIUVVGSUxFVkJRVkVzVDBGQlQyZERMRk5CUVZORkxFMUJRVlFzUTBGQlowSnNReXhIUVVGb1FpeERRVUZRTzBGQlExSXNUVUZCU1RCQ0xGRkJRVkVzUlVGQldqdEJRVU5CTEU5QlFVa3NTVUZCU1ZNc1NVRkJSU3hEUVVGV0xFVkJRV0ZCTEVsQlFVVnNReXhMUVVGTGVVSXNTMEZCVEN4RFFVRlhWU3hOUVVFeFFpeEZRVUZyUTBRc1IwRkJiRU03UVVGQmRVTlVMRk5CUVUxWExFbEJRVTRzUTBGQlYzQkRMRXRCUVV0NVFpeExRVUZNTEVOQlFWZFRMRU5CUVZnc1JVRkJZMW9zU1VGQmVrSTdRVUZCZGtNc1IwRkRRU3hQUVVGUFV5eFRRVUZUVFN4UFFVRlVMRU5CUVdsQ1dpeExRVUZxUWl4RFFVRlFPMEZCUTBFc1JVRlFSanRCUVZOQkxGRkJRVTlOTEZOQlFWTlBMRTlCUVdoQ08wRkJRMEVzUTBGYVJEdEJRV0ZCT1VRc1IwRkJSeXRFTEVWQlFVZ3NSMEZCVVM5RUxFZEJRVWR6UkN4WlFVRllMRU1zUTBGQmVVSTdPMEZCUlhwQ2RFUXNSMEZCUjJkRkxHZENRVUZJTEVkQlFYTkNMRmxCUVZjN1FVRkRhRU1zUzBGQlNWUXNWMEZCVjNCRUxFVkJRVVZ4UkN4TFFVRkdMRVZCUVdZN1FVRkRRWGhFTEVsQlFVY3NUMEZCU0N4RlFVRlpkME1zVDBGQldpeERRVU5ETEVWQlFVVkRMRk5CUVZNc1ZVRkJXQ3hGUVVGMVFrTXNUVUZCVFN4eFFrRkJOMElzUlVGRVJDeEZRVVZETEZWQlFWTkRMRTFCUVZRc1JVRkJhVUp3UWl4SFFVRnFRaXhGUVVGelFrTXNTVUZCZEVJc1JVRkJORUk3UVVGRE0wSXNUVUZCUjBRc1IwRkJTQ3hGUVVGUkxFOUJRVTluUXl4VFFVRlRSU3hOUVVGVUxFTkJRV2RDYkVNc1IwRkJhRUlzUTBGQlVEdEJRVU5TTEUxQlFVa3dRaXhSUVVGUkxFVkJRVm83UVVGRFFTeFBRVUZKTEVsQlFVbFRMRWxCUVVVc1EwRkJWaXhGUVVGaFFTeEpRVUZGYkVNc1MwRkJTM2xDTEV0QlFVd3NRMEZCVjFVc1RVRkJNVUlzUlVGQmEwTkVMRWRCUVd4RE8wRkJRWFZEVkN4VFFVRk5WeXhKUVVGT0xFTkJRVmR3UXl4TFFVRkxlVUlzUzBGQlRDeERRVUZYVXl4RFFVRllMRVZCUVdOYUxFbEJRWHBDTzBGQlFYWkRMRWRCUTBFc1QwRkJUMU1zVTBGQlUwMHNUMEZCVkN4RFFVRnBRbG9zUzBGQmFrSXNRMEZCVUR0QlFVTkJMRVZCVUVZN1FVRlRRU3hSUVVGUFRTeFRRVUZUVHl4UFFVRm9RanRCUVVOQkxFTkJXa1E3UVVGaFFUbEVMRWRCUVVkcFJTeEZRVUZJTEVkQlFWRnFSU3hIUVVGSFowVXNaMEpCUVZnc1F5eERRVUUyUWlJc0ltWnBiR1VpT2lKUVpXVnlRWFYwYUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCRWFYbGhVMlZzWldOMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOUVhWGxoVTJWc1pXTjBiM0luS1M1RWFYbGhVMlZzWldOMGIzSTdYRzUyWVhJZ1pERWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOUVhWGxoVTJWc1pXTjBiM0luS1R0Y2JuWmhjaUJwYzBKeWIzZHpaWElnUFNBaEtIUjVjR1Z2WmlCM2FXNWtiM2NnUFQwOUlDZDFibVJsWm1sdVpXUW5LVHRjYm1sbUtDRnBjMEp5YjNkelpYSXBJSHNnZG1GeUlGRWdQU0J5WlhGMWFYSmxLQ2R4SnlrN0lIMWNibVZzYzJVZ2V5QjJZWElnVVNBOUlIZHBibVJ2ZHk1Uk95QjlYRzVjYm1sbUtIUjVjR1Z2WmlCSlRrWlBJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dkbUZ5SUVsT1JrOGdQU0JtZFc1amRHbHZiaWh6S1NCN0lHTnZibk52YkdVdWJHOW5LSE1wTzMxY2JtbG1LSFI1Y0dWdlppQlBTeUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSFpoY2lCUFN5QTlJR1oxYm1OMGFXOXVLSE1wSUhzZ1kyOXVjMjlzWlM1c2IyY29jeWs3ZlZ4dVhHNWNibHh1THlvcVhHNHFJRWx1YzNSaGJHeHpJR0VnYm1WM0lFUnBlV0ZPYjJSbElHUmxkbWxqWlNBb2QybDBhQ0JoWkdSeVpYTnpJQ2RwY0NjcElHbHVkRzhnWVc0Z1pYaHBjM1JwYm1jZ2JtVjBkMjl5YXl3Z1lubGNiaW9nWTI5dWRHRmpkR2x1WnlCaGJpQmxlR2x6ZEdsdVp5QkVhWGxoVG05a1pTQmtaWFpwWTJVZ2QybDBhQ0JoWkdSeVpYTnpJQ2RpYjI5MGMzUnlZWEJmYVhBbklEcGNiaW9nSUNBeEtTQkRiMjUwWVdOMElIUm9aU0J1WlhjZ2JtOWtaU0IwYnlCblpYUWdhWFJ6SUhCMVlteHBZeUJyWlhsY2Jpb2dJQ0F5S1NCQlpHUWdkR2hwY3lCd2RXSnNhV01nYTJWNUlIUnZJSFJvWlNCbGVHbHpkR2x1WnlCdWIyUmxJRlJ5ZFhOMFpXUlFaV1Z5Y3lCc2FYTjBYRzRxSUNBZ015a2dRV1JrSUhSb1pTQmxlR2x6ZEdsdVp5QnViMlJsSjNNZ2NIVmliR2xqSUd0bGVTQjBieUIwYUdVZ2JtVjNJRzV2WkdVbmN5QlVjblZ6ZEdWa1VHVmxjbk1nYkdsemRGeHVLaUFnSURRcElFRnpheUIwYUdVZ2JtVjNJRzV2WkdVZ2RHOGdhbTlwYmlCMGFHVWdibVYwZDI5eWF5QmllU0JqWVd4c2FXNW5JRUJ6WldWN1pERW9LUzVxYjJsdUtDbDlYRzRxWEc0cUlFNVBWRVVnT2lCVWFHbHpJRzl3WlhKaGRHbHZiaUJ5WlhGMWFYSmxjeUIwYUdVZ1oybDJaVzRnZFhObGNpQjBieUJvWVhabElISnZiM1FnY205c1pTQnZiaUJpYjNSb0lHNXZaR1Z6WEc0cVhHNHFJRUJ3WVhKaGJTQnBjQ0E2SUhSb1pTQkpVQ0JoWkdSeVpYTnpJRzltSUhSb1pTQnVaWGNnWkdWMmFXTmxYRzRxSUVCd1lYSmhiU0IxYzJWeUlEb2dZU0IxYzJWeWJtRnRaU0IzYVhSb0lISnZiM1FnY205c1pTQnZiaUIwYUdVZ2JtVjNJR1JsZG1salpWeHVLaUJBY0dGeVlXMGdjR0Z6YzNkdmNtUWdPaUIwYUdVZ2NHRnpjM2R2Y21RZ1ptOXlJQ2QxYzJWeUoxeHVLaUJBY0dGeVlXMGdZbTl2ZEhOMGNtRndYMmx3SURvZ2RHaGxJRWxRSUdGa1pISmxjM01nYjJZZ2RHaGxJR0p2YjNSemRISmhjQ0JrWlhacFkyVmNiaW9nUUhCaGNtRnRJR0p2YjNSemRISmhjRjkxYzJWeUlEb2dZU0IxYzJWeUlHbGtaVzUwYVdacFpYSWdkMmwwYUNCeWIyOTBJSEp2YkdVZ2IyNGdkR2hsSUdKdmIzTjBjbUZ3SUdSbGRtbGpaVnh1S2lCQWNHRnlZVzBnWW05dmRITjBjbUZ3WDNCaGMzTjNiM0prSURvZ2RHaGxJSEJoYzNOM2IzSmtJR1p2Y2lBblltOXZkSE4wY21Gd1gzVnpaWEluWEc0cUlFQndZWEpoYlNCaWIyOTBjM1J5WVhCZmJtVjBJRG9nZEdobElFbFFJR0ZrWkhKbGMzTWdkMmhsY21VZ2RHaGxJRzVsZHlCa1pYWnBZMlVnZDJsc2JDQmpiMjV1WldOMElIUnZJSFJvWlNCaWIyOXpkSEpoY0NCdmJtVmNiaW9nUUhCaGNtRnRJR05oYkd4aVlXTnJJRG9nYjJZZ2RHaGxJR1p2Y20wZ1kyRnNiR0poWTJzb2JtVjNYM0JsWlhKZmJtRnRaU3hpYjI5MGMzUnlZWEJmY0dWbGNsOXVZVzFsTENCbGNuSXNJR1JoZEdFcFhHNHFMMXh1WkRFdWFXNXpkR0ZzYkU1dlpHVkZlSFFnUFNCbWRXNWpkR2x2YmlocGNDd2dkWE5sY2l3Z2NHRnpjM2R2Y21Rc0lHSnZiM1J6ZEhKaGNGOXBjQ3dnWW05dmRITjBjbUZ3WDNWelpYSXNJR0p2YjNSemRISmhjRjl3WVhOemQyOXlaQ3dnWW05dmRITjBjbUZ3WDI1bGRDd2dZMkZzYkdKaFkyc3BJSHRjYmx4MGFXWW9kSGx3Wlc5bUlHbHdJQ0U5UFNBbmMzUnlhVzVuSnlrZ2RHaHliM2NnWENKYmFXNXpkR0ZzYkU1dlpHVmRJR2x3SUhOb2IzVnNaQ0JpWlNCaGJpQkpVQ0JoWkdSeVpYTnpYQ0k3WEc1Y2RHbG1LSFI1Y0dWdlppQmliMjkwYzNSeVlYQmZhWEFnSVQwOUlDZHpkSEpwYm1jbktTQjBhSEp2ZHlCY0lsdHBibk4wWVd4c1RtOWtaVjBnWW05dmRITjBjbUZ3WDJsd0lITm9iM1ZzWkNCaVpTQmhiaUJKVUNCaFpHUnlaWE56WENJN1hHNWNkR2xtS0hSNWNHVnZaaUJpYjI5MGMzUnlZWEJmYm1WMElDRTlQU0FuYzNSeWFXNW5KeWtnZEdoeWIzY2dYQ0piYVc1emRHRnNiRTV2WkdWZElHSnZiM1J6ZEhKaGNGOXVaWFFnYzJodmRXeGtJR0psSUdGdUlFbFFJR0ZrWkhKbGMzTmNJanRjYmx4dVhIUXZMeUJEYUdWamF5QmhibVFnUm05eWJXRjBJRlZTU1NBb1JsRkVUaWxjYmx4MGFXWW9ZbTl2ZEhOMGNtRndYMmx3TG1sdVpHVjRUMllvWENKM2N6b3ZMMXdpS1NBaFBUMGdNQ0FtSmlCaWIyOTBjM1J5WVhCZmFYQXVhVzVrWlhoUFppaGNJbmR6Y3pvdkwxd2lLU0FoUFQwZ01Da2dlMXh1WEhSY2RHbG1LR1F4TG1selUyVmpkWEpsWkNncEtTQmliMjkwYzNSeVlYQmZhWEFnUFNCY0luZHpjem92TDF3aUlDc2dZbTl2ZEhOMGNtRndYMmx3TzF4dVhIUmNkR1ZzYzJVZ1ltOXZkSE4wY21Gd1gybHdJRDBnWENKM2N6b3ZMMXdpSUNzZ1ltOXZkSE4wY21Gd1gybHdPMXh1WEhSOVhHNWNkR2xtS0dKdmIzUnpkSEpoY0Y5dVpYUXVhVzVrWlhoUFppaGNJbmR6T2k4dlhDSXBJQ0U5UFNBd0lDWW1JR0p2YjNSemRISmhjRjl1WlhRdWFXNWtaWGhQWmloY0luZHpjem92TDF3aUtTQWhQVDBnTUNrZ2UxeHVYSFJjZEdsbUtHUXhMbWx6VTJWamRYSmxaQ2dwS1NCaWIyOTBjM1J5WVhCZmJtVjBJRDBnWENKM2MzTTZMeTljSWlBcklHSnZiM1J6ZEhKaGNGOXVaWFE3WEc1Y2RGeDBaV3h6WlNCaWIyOTBjM1J5WVhCZmJtVjBJRDBnWENKM2N6b3ZMMXdpSUNzZ1ltOXZkSE4wY21Gd1gyNWxkRHRjYmx4MGZWeHVYRzVjYmx4dVhIUm1kVzVqZEdsdmJpQnFiMmx1S0hCbFpYSXNJR0p2YjNSemRISmhjRjl3WldWeUtTQjdYRzVjZEZ4MFpERW9YQ0lqYzJWc1psd2lLUzVxYjJsdUtHSnZiM1J6ZEhKaGNGOXVaWFFzSUhSeWRXVXNJR1oxYm1OMGFXOXVLSEJsWlhJc0lHVnljaXdnWkdGMFlTbDdYRzVjZEZ4MFhIUnBaaWdoWlhKeUtTQlBTeWhjSWtwUFNVNUZSQ0FoSVNGY0lpazdYRzVjZEZ4MFhIUnlaWFIxY200Z1kyRnNiR0poWTJzb2NHVmxjaXdnWW05dmRITjBjbUZ3WDNCbFpYSXNJR1Z5Y2l3Z1pHRjBZU2s3WEc1Y2RGeDBmU2s3WEc1Y2RIMWNibHh1WEhSa01TNWpiMjV1WldOMFFYTlZjMlZ5S0dsd0xDQjFjMlZ5TENCd1lYTnpkMjl5WkNrdWRHaGxiaWhtZFc1amRHbHZiaWh3WldWeUxDQmxjbklzSUdSaGRHRXBlMXh1WEhSY2RHUXhLRndpSTNObGJHWmNJaWt1WjJsMlpWQjFZbXhwWTB0bGVTaG1kVzVqZEdsdmJpaHdaV1Z5TENCbGNuSXNJR1JoZEdFcElIdGNibHgwWEhSY2RHbG1LR1Z5Y2owOVBTZFRaWEoyYVdObFRtOTBSbTkxYm1RbktTQjdYRzVjZEZ4MFhIUmNkRWxPUms4b1hDSlFaV1Z5SUVGMWRHaGxiblJwWTJGMGFXOXVJR1JwYzJGaWJHVmtJQzR1TGlCa2FYSmxZM1JzZVNCcWIybHVhVzVuWENJcE8xeHVYSFJjZEZ4MFhIUnFiMmx1S0NrN1hHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdhV1lvWlhKeUtTQnlaWFIxY200Z1kyRnNiR0poWTJzb2NHVmxjaXdnYm5Wc2JDd2daWEp5TENCdWRXeHNLVHRjYmx4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUkpUa1pQS0Z3aVFXUmtJSFJ5ZFhOMFpXUWdjR1ZsY2lBblhDSWdLeUJ3WldWeUlDc2dYQ0luSUNocGNEMWNJaUFySUdsd0lDc2dYQ0lwSUhSdklDZGNJaUFySUdKdmIzUnpkSEpoY0Y5cGNDQXJJRndpSnlCM2FYUm9JSEIxWW14cFl5QnJaWGxjWEc1Y0lpQXJJR1JoZEdFdWNIVmliR2xqWDJ0bGVTbGNibHgwWEhSY2RGeDBaREV1WTI5dWJtVmpkRUZ6VlhObGNpaGliMjkwYzNSeVlYQmZhWEFzSUdKdmIzUnpkSEpoY0Y5MWMyVnlMQ0JpYjI5MGMzUnlZWEJmY0dGemMzZHZjbVFwTG5Sb1pXNG9ablZ1WTNScGIyNG9LWHRjYmx4MFhIUmNkRngwWEhSa01TaGNJaU56Wld4bVhDSXBMbUZrWkZSeWRYTjBaV1JRWldWeUtIQmxaWElzSUdSaGRHRXVjSFZpYkdsalgydGxlU3dnWm5WdVkzUnBiMjRvWW05dmRITjBjbUZ3WDNCbFpYSXNJR1Z5Y2l3Z1cyRnNjbVZoWkhsVWNuVnpkR1ZrTENCd2RXSnNhV05mYTJWNVhTa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaWhsY25JcElISmxkSFZ5YmlCallXeHNZbUZqYXlod1pXVnlMQ0JpYjI5MGMzUnlZWEJmY0dWbGNpd2daWEp5TENCdWRXeHNLVHRjYmx4MFhIUmNkRngwWEhSY2RHbG1LR0ZzY21WaFpIbFVjblZ6ZEdWa0tTQkpUa1pQS0hCbFpYSWdLeUJjSWlCaGJISmxZV1I1SUhSeWRYTjBaV1FnWW5rZ1hDSWdLeUJpYjI5MGMzUnlZWEJmY0dWbGNpazdYRzVjZEZ4MFhIUmNkRngwWEhSbGJITmxJRWxPUms4b1ltOXZkSE4wY21Gd1gzQmxaWElnS3lCY0lpaHBjRDFjSWlzZ1ltOXZkSE4wY21Gd1gybHdJQ3RjSWlrZ1lXUmtaV1FnWENJZ0t5QndaV1Z5SUNzZ1hDSW9hWEE5WENJZ0t5QnBjQ0FySUZ3aUtTQmhjeUJoSUZSeWRYTjBaV1FnVUdWbGNsd2lLVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBaREVvSnlOelpXeG1KeWt1WjJsMlpWQjFZbXhwWTB0bGVTaG1kVzVqZEdsdmJpaGZMQ0JsY25Jc0lHUmhkR0VwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwU1U1R1R5aGNJa2x1SUhKbGRIVnliaXdnWVdSa0lGd2lJQ3NnWW05dmRITjBjbUZ3WDNCbFpYSWdLeUJjSWlCMGJ5QmNJaUFySUhCbFpYSWdLeUJjSWlCaGN5QmhJRlJ5ZFhOMFpXUWdVR1ZsY2lCM2FYUm9JSEIxWW14cFl5QnJaWGtnWENJZ0t5QmtZWFJoTG5CMVlteHBZMTlyWlhrcFhHNWNkRngwWEhSY2RGeDBYSFJjZEdReExtTnZibTVsWTNSQmMxVnpaWElvYVhBc0lIVnpaWElzSUhCaGMzTjNiM0prS1M1MGFHVnVLR1oxYm1OMGFXOXVLQ2w3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWkRFb1hDSWpjMlZzWmx3aUtTNWhaR1JVY25WemRHVmtVR1ZsY2loaWIyOTBjM1J5WVhCZmNHVmxjaXdnWkdGMFlTNXdkV0pzYVdOZmEyVjVMQ0JtZFc1amRHbHZiaWh3WldWeUxDQmxjbklzSUZ0aGJISmxZV1I1VkhKMWMzUmxaQ3dnY0hWaWJHbGpYMnRsZVYwcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtS0dWeWNpa2dZMkZzYkdKaFkyc29jR1ZsY2l3Z1ltOXZkSE4wY21Gd1gzQmxaWElzSUdWeWNpd2diblZzYkNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmxiSE5sSUdsbUtHRnNjbVZoWkhsVWNuVnpkR1ZrS1NCSlRrWlBLR0p2YjNSemRISmhjRjl3WldWeUlDc2dYQ0lnWVd4eVpXRmtlU0IwY25WemRHVmtJR0o1SUZ3aUlDc2djR1ZsY2lrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmxiSE5sSUVsT1JrOG9jR1ZsY2lBcklGd2lLR2x3UFZ3aUt5QnBjQ0FyWENJcElHRmtaR1ZrSUZ3aUlDc2dZbTl2ZEhOMGNtRndYM0JsWlhJZ0t5QmNJaWhwY0QxY0lpc2dZbTl2ZEhOMGNtRndYMmx3SUN0Y0lpa2dZWE1nWVNCVWNuVnpkR1ZrSUZCbFpYSmNJaWs3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlBibU5sSUV0bGVYTWdhR0YyWlNCaVpXVnVJR1Y0WTJoaGJtZGxaQ0JoYzJzZ2RHOGdhbTlwYmlCMGFHVWdibVYwZDI5eWExeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBUMHNvWENKTFJWbFRJRTlMSUNFZ1RtOTNMQ0JzWlhRZ1hDSXJjR1ZsY2l0Y0lpaHBjRDFjSWl0cGNDdGNJaWtnYW05cGJpQjBhR1VnYm1WMGQyOXlheUIyYVdFZ1hDSXJZbTl2ZEhOMGNtRndYM0JsWlhJclhDSW9hWEE5WENJclltOXZkSE4wY21Gd1gyNWxkQ3RjSWlrZ0xpNHVYQ0lwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdwdmFXNG9jR1ZsY2l3Z1ltOXZkSE4wY21Gd1gzQmxaWElwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEgwcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOUtUdGNibHgwWEhSY2RGeDBYSFJjZEgwcFhHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJjZEgwcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYSFI5S1R0Y2JuMWNibHh1WEc0dktpb2dVMmh2Y25RZ2RtVnljMmx2YmlCdlppQkFjMlZsZTJReExtbHVjM1JoYkd4T2IyUmxSWGgwZlNBcUwxeHVaREV1YVc1emRHRnNiRTV2WkdVZ1BTQm1kVzVqZEdsdmJpaGliMjkwYzNSeVlYQmZhWEFzSUdKdmIzUnpkSEpoY0Y5dVpYUXNJR05oYkd4aVlXTnJLU0I3WEc1Y2RGeDBkbUZ5SUdsd0lEMGdaREV1WVdSa2NpZ3BPMXh1WEhSY2RIWmhjaUIxYzJWeUlEMGdaREV1ZFhObGNpZ3BPMXh1WEhSY2RIWmhjaUJ3WVhOemQyOXlaQ0E5SUdReExuQmhjM01vS1R0Y2JseDBYSFIyWVhJZ1ltOXZkSE4wY21Gd1gzVnpaWElnUFNCMWMyVnlPMXh1WEhSY2RIWmhjaUJpYjI5MGMzUnlZWEJmY0dGemMzZHZjbVFnUFNCd1lYTnpkMjl5WkR0Y2JseHVYSFJjZEdOdmJuTnZiR1V1Ykc5bklDaGdXMmx1YzNSaGJHeE9iMlJsWFZ4Y2JtbHdPaVI3YVhCOVlDbGNibHh1WEhSY2RISmxkSFZ5YmlCa01TNXBibk4wWVd4c1RtOWtaVVY0ZENocGNDd2dkWE5sY2l3Z2NHRnpjM2R2Y21Rc0lHSnZiM1J6ZEhKaGNGOXBjQ3dnWW05dmRITjBjbUZ3WDNWelpYSXNJR0p2YjNSemRISmhjRjl3WVhOemQyOXlaQ3dnWW05dmRITjBjbUZ3WDI1bGRDd2dZMkZzYkdKaFkyc3BPMXh1ZlZ4dVhHNWNibHh1WEc0dktpcGNiaUFxSUUxaGEyVWdkR2hsSUhObGJHVmpkR1ZrSUVScGVXRk9iMlJsY3lCcWIybHVJR0Z1SUdWNGFYTjBhVzVuSUVScGVXRk9iMlJsY3lCTlpYTm9JRTVsZEhkdmNtc2dZbmtnWTI5dWRHRmpkR2x1WjF4dUlDb2dkR2hsSUdkcGRtVnVJR0p2YjNSemRISmhjQ0J3WldWeWN5NWNiaUFxWEc0Z0tpQk9UMVJGSURvZ1ZHaHBjeUJ2Y0dWeVlYUnBiMjRnY21WeGRXbHlaWE1nY205dmRDQnliMnhsWEc0Z0tseHVJQ29nUUhCaGNtRnRJR0p2YjNSemRISmhjRjlwY0hNZ09pQmhiaUJoY25KaGVTQnZaaUJpYjI5MGMzUnlZWEFnU1ZBZ1lXUmtjbVZ6YzJWeklIUnZJR052Ym5SaFkzUWdkRzhnYW05cGJpQjBhR1VnVG1WMGQyOXlhMXh1SUNvZ1FIQmhjbUZ0SUhCbGNtMWhibVZ1ZENBNklHbG1JSFJ5ZFdVc0lIQmxjbTFoYm1WdWRHeDVJR0ZrWkNCMGFHVWdZbTl2ZEhOMGNtRndJSEJsWlhKeklHRnpJR0YxZEc5dFlYUnBZeUJpYjI5MGMzUnlZWEFnY0dWbGNuTWdabTl5SUhSb1pTQnpaV3hsWTNSbFpDQnViMlJsY3k1Y2JpQXFYRzRnS2k5Y2JrUnBlV0ZUWld4bFkzUnZjaTV3Y205MGIzUjVjR1V1YW05cGJpQTlJR1oxYm1OMGFXOXVLR0p2YjNSemRISmhjRjlwY0hNc0lIQmxjbTFoYm1WdWRDd2dZMkZzYkdKaFkyc3BJSHRjYmx4MGFXWW9kSGx3Wlc5bUlHSnZiM1J6ZEhKaGNGOXBjSE1nUFQwOUlDZHpkSEpwYm1jbktTQmliMjkwYzNSeVlYQmZhWEJ6SUQwZ1d5QmliMjkwYzNSeVlYQmZhWEJ6SUYxY2JseHVYSFJwWmloaWIyOTBjM1J5WVhCZmFYQnpMbU52Ym5OMGNuVmpkRzl5SUNFOVBTQkJjbkpoZVNsY2JseDBYSFIwYUhKdmR5QmNJbXB2YVc0b0tTQTZJR0p2YjNSemRISmhjRjlwY0hNZ2MyaHZkV3hrSUdKbElHRnVJR0Z5Y21GNUlHOW1JSEJsWlhKeklGVlNTWE5jSWx4dVhHNWNkSFJvYVhNdWNtVnhkV1Z6ZENoN1hHNWNkRngwYzJWeWRtbGpaU0E2SUNkdFpYTm9UbVYwZDI5eWF5Y3NYRzVjZEZ4MFpuVnVZem9nSjBwdmFXNG5MRnh1WEhSY2RHUmhkR0U2SUh0Y2JseDBYSFJjZEdKdmIzUnpkSEpoY0Y5cGNITXNYRzVjZEZ4MFhIUndaWEp0WVc1bGJuUmNibHgwWEhSOVhHNWNkSDBzWEc1Y2RGeDBablZ1WTNScGIyNG9jR1ZsY2tsa0xDQmxjbklzSUdSaGRHRXBJSHRjYmx4MFhIUmNkR2xtSUNoMGVYQmxiMllnWTJGc2JHSmhZMnNnUFQwOUlGd2lablZ1WTNScGIyNWNJaWxjYmx4MFhIUmNkRngwWTJGc2JHSmhZMnNvY0dWbGNrbGtMQ0JsY25Jc0lHUmhkR0VwWEc1Y2RGeDBmVnh1WEhRcFhHNTlYRzVjYmx4dUx5b3FYRzRnS2lCRWFYTmpiMjV1WldOMElIUm9aU0J6Wld4bFkzUmxaQ0JFYVhsaFRtOWtaWE1nWm5KdmJTQjBhR1VnWjJsMlpXNGdZbTl2ZEhOMGNtRndJSEJsWlhKelhHNGdLbHh1SUNvZ1RrOVVSU0E2SUZSb2FYTWdiM0JsY21GMGFXOXVJSEpsY1hWcGNtVnpJSEp2YjNRZ2NtOXNaVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQmliMjkwYzNSeVlYQmZhWEJ6SURvZ1lXNGdZWEp5WVhrZ2IyWWdZbTl2ZEhOMGNtRndJRWxRSUdGa1pISmxjM05sY3lCMGJ5QnNaV0YyWlZ4dUlDb2dRSEJoY21GdElHSlFaWEp0WVc1bGJuUWdPaUJwWmlCMGNuVmxMQ0J3WlhKdFlXNWxiblJzZVNCeVpXMXZkbVVnZEdobElHZHBkbVZ1SUhCbFpYSnpJR1p5YjIwZ2RHaGxJR0YxZEc5dFlYUnBZeUJpYjI5MGMzUnlZWEFnY0dWbGNuTWdiR2x6ZEZ4dUlDcGNiaUFxTDF4dVJHbDVZVk5sYkdWamRHOXlMbkJ5YjNSdmRIbHdaUzVzWldGMlpTQTlJR1oxYm1OMGFXOXVLR0p2YjNSemRISmhjRjlwY0hNc0lHSlFaWEp0WVc1bGJuUXNJR05oYkd4aVlXTnJLWHRjYmx4MGFXWW9kSGx3Wlc5bUlHSnZiM1J6ZEhKaGNGOXBjSE1nUFQwOUlDZHpkSEpwYm1jbktTQmliMjkwYzNSeVlYQmZhWEJ6SUQwZ1d5QmliMjkwYzNSeVlYQmZhWEJ6SUYwN1hHNWNkR2xtS0dKdmIzUnpkSEpoY0Y5cGNITXVZMjl1YzNSeWRXTjBiM0lnSVQwOUlFRnljbUY1S1NCMGFISnZkeUJjSW14bFlYWmxLQ2tnT2lCaWIyOTBjM1J5WVhCZmFYQnpJSE5vYjNWc1pDQmlaU0JoYmlCaGNuSmhlU0J2WmlCd1pXVnljeUJWVWtselhDSTdYRzVjZEhSb2FYTXVjbVZ4ZFdWemRDaGNibHgwWEhSN2MyVnlkbWxqWlNBNklDZHRaWE5vVG1WMGQyOXlheWNzSUdaMWJtTTZJQ2RNWldGMlpTY3NJR1JoZEdFNklIc2dZbTl2ZEhOMGNtRndYMmx3Y3pvZ1ltOXZkSE4wY21Gd1gybHdjeXdnWWxCbGNtMWhibVZ1ZERvZ1lsQmxjbTFoYm1WdWRDQjlmU3hjYmx4MFhIUm1kVzVqZEdsdmJpaHdaV1Z5U1dRc0lHVnljaXdnWkdGMFlTa2dleUJwWmloMGVYQmxiMllnWTJGc2JHSmhZMnNnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnWTJGc2JHSmhZMnNvY0dWbGNrbGtMQ0JsY25Jc0lHUmhkR0VwTzMxY2JseDBLVHRjYm4wN1hHNWNibHh1THlvcVhHNGdLaUJCYzJzZ2RHaGxJSE5sYkdWamRHVmtJRVJwZVdGT2IyUmxjeUJtYjNJZ2RHaGxhWElnY0hWaWJHbGpJR3RsZVhOY2JpQXFMMXh1UkdsNVlWTmxiR1ZqZEc5eUxuQnliM1J2ZEhsd1pTNW5hWFpsVUhWaWJHbGpTMlY1SUQwZ1puVnVZM1JwYjI0b1kyRnNiR0poWTJzcGUxeHVYSFJ5WlhSMWNtNGdkR2hwY3k1eVpYRjFaWE4wS0Z4dVhIUmNkSHNnYzJWeWRtbGpaVG9nSjNCbFpYSkJkWFJvSnl4Y2RHWjFibU02SUNkSGFYWmxVSFZpYkdsalMyVjVKeXhjZEdSaGRHRTZJSHQ5SUgwc1hHNWNkRngwWm5WdVkzUnBiMjRvY0dWbGNrbGtMQ0JsY25Jc0lHUmhkR0VwZTJOaGJHeGlZV05yS0hCbFpYSkpaQ3hsY25Jc1pHRjBZU2s3WEc1Y2RIMHBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkJaR1FnWVNCdVpYY2dkSEoxYzNSbFpDQndaV1Z5SUZKVFFTQndkV0pzYVdNZ2EyVjVJSFJ2SUhSb1pTQnpaV3hsWTNSbFpDQkVhWGxoVG05a1pYTmNiaUFxSUU1UFZFVWdPaUJVYUdseklHOXdaWEpoZEdsdmJpQnlaWEYxYVhKbGN5QnliMjkwSUhKdmJHVmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2NHVmxjbDl1WVcxbElEb2dkR2hsSUc1aGJXVWdiMllnZEdobElHNWxkeUIwY25WemRHVmtJRVJwZVdGT2IyUmxJSEJsWlhKY2JpQXFJRUJ3WVhKaGJTQndkV0pzYVdOZmEyVjVJRG9nZEdobElGSlRRU0J3ZFdKc2FXTWdhMlY1SUc5bUlIUm9aU0J1WlhjZ2RISjFjM1JsWkNCRWFYbGhUbTlrWlNCd1pXVnlYRzRnS2k5Y2JrUnBlV0ZUWld4bFkzUnZjaTV3Y205MGIzUjVjR1V1WVdSa1ZISjFjM1JsWkZCbFpYSWdQU0JtZFc1amRHbHZiaWh1WVcxbExDQndkV0pzYVdOZmEyVjVMQ0JqWVd4c1ltRmpheWtnZTF4dVhIUnlaWFIxY200Z2RHaHBjeTV5WlhGMVpYTjBLSHRjYmx4MFhIUnpaWEoyYVdObE9pQW5jR1ZsY2tGMWRHZ25MRnh1WEhSY2RHWjFibU02SUNkQlpHUlVjblZ6ZEdWa1VHVmxjaWNzWEc1Y2RGeDBaR0YwWVRvZ2UxeHVYSFJjZEZ4MGNHVmxjbDl1WVcxbE9pQnVZVzFsTEZ4dVhIUmNkRngwY0hWaWJHbGpYMnRsZVRvZ2NIVmliR2xqWDJ0bGVWeHVYSFJjZEgxY2JseDBmU3hjYmx4MFhIUm1kVzVqZEdsdmJpQW9jR1ZsY2tsa0xHVnljaXhrWVhSaEtTQjdYRzVjZEZ4MFhIUmpZV3hzWW1GamF5QW9jR1ZsY2tsa0xHVnljaXhrWVhSaEtWeHVYSFJjZEgxY2JseDBLVnh1ZlZ4dVhHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2FXWWdkR2hsSUhObGJHVmpkR1ZrSUVScGVXRk9iMlJsY3lCMGNuVnpkQ0IwYUdVZ1oybDJaVzRnY0dWbGNuTmNiaUFxSUVCd1lYSmhiU0J3WldWeWN5QTZJR0Z1SUdGeWNtRjVJRzltSUhCbFpYSWdibUZ0WlhOY2JpQXFMMXh1UkdsNVlWTmxiR1ZqZEc5eUxuQnliM1J2ZEhsd1pTNWhjbVZVY25WemRHVmtJRDBnWm5WdVkzUnBiMjRvY0dWbGNuTXNJR05oYkd4aVlXTnJLWHRjYmx4MGNtVjBkWEp1SUhSb2FYTXVjbVZ4ZFdWemRDaGNibHgwWEhSN0lITmxjblpwWTJVNklDZHdaV1Z5UVhWMGFDY3NYSFJtZFc1ak9pQW5RWEpsVkhKMWMzUmxaQ2NzWEhSa1lYUmhPaUI3SUhCbFpYSnpPaUJ3WldWeWN5QjlJSDBzWEc1Y2RGeDBablZ1WTNScGIyNG9jR1ZsY2tsa0xDQmxjbklzSUdSaGRHRXBJSHRjYmx4MFhIUmNkSFpoY2lCaGJHeFVjblZ6ZEdWa0lEMGdaR0YwWVM1MGNuVnpkR1ZrTzF4dVhIUmNkRngwYVdZb1lXeHNWSEoxYzNSbFpDa2dleUJQU3lod1pXVnljeUFySUZ3aUlHRnlaU0IwY25WemRHVmtJR0o1SUZ3aUlDc2djR1ZsY2tsa0tUc2dZMkZzYkdKaFkyc29jR1ZsY2tsa0xDQjBjblZsS1RzZ2ZWeHVYSFJjZEZ4MFpXeHpaU0I3SUVWU1VpaGNJbE52YldVZ2NHVmxjbk1nYVc0Z1hDSWdLeUJ3WldWeWN5QXJJRndpSUdGeVpTQjFiblJ5ZFhOMFpXUWdZbmtnWENJZ0t5QndaV1Z5U1dRcE95QmpZV3hzWW1GamF5aHdaV1Z5U1dRc0lHWmhiSE5sS1RzZ2ZWeHVYSFJjZEgxY2JseDBLVHRjYm4wN1hHNUVhWGxoVTJWc1pXTjBiM0l1Y0hKdmRHOTBlWEJsTG1selZISjFjM1JsWkNBOUlHWjFibU4wYVc5dUtIQmxaWElzSUdOaGJHeGlZV05yS1NCN0lISmxkSFZ5YmlCMGFHbHpMbUZ5WlZSeWRYTjBaV1FvVzNCbFpYSmRMQ0JqWVd4c1ltRmpheWs3SUgxY2JseHVYRzVrTVM1MGNuVnpkR1ZrVUdWbGNuTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBkbUZ5SUdSbFptVnljbVZrSUQwZ1VTNWtaV1psY2lncE8xeHVYSFJrTVNoY0lpTnpaV3htWENJcExuSmxjWFZsYzNRb1hHNWNkRngwZXlCelpYSjJhV05sT2lBbmNHVmxja0YxZEdnbkxGeDBablZ1WXpvZ0owZGxkRlJ5ZFhOMFpXUlFaV1Z5Y3ljZ2ZTeGNibHgwWEhSbWRXNWpkR2x2Ymlod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNrZ2UxeHVYSFJjZEZ4MGFXWW9aWEp5S1NCeVpYUjFjbTRnWkdWbVpYSnlaV1F1Y21WcVpXTjBLR1Z5Y2lrN1hHNWNkRngwWEhSMllYSWdjR1ZsY25NZ1BTQmJYVHRjYmx4MFhIUmNkR1p2Y2loMllYSWdhVDB3T3lCcFBHUmhkR0V1Y0dWbGNuTXViR1Z1WjNSb095QnBLeXNwSUhCbFpYSnpMbkIxYzJnb1pHRjBZUzV3WldWeWMxdHBYUzV1WVcxbEtUdGNibHgwWEhSY2RISmxkSFZ5YmlCa1pXWmxjbkpsWkM1eVpYTnZiSFpsS0hCbFpYSnpLVHRjYmx4MFhIUjlYRzVjZENrN1hHNWNkSEpsZEhWeWJpQmtaV1psY25KbFpDNXdjbTl0YVhObE8xeHVmVHRjYm1ReExuUndJRDBnWkRFdWRISjFjM1JsWkZCbFpYSnpPeUF2THlCVGFHOXlkR2hoYm1SY2JseHVaREV1WW14aFkydHNhWE4wWldSUVpXVnljeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIyWVhJZ1pHVm1aWEp5WldRZ1BTQlJMbVJsWm1WeUtDazdYRzVjZEdReEtGd2lJM05sYkdaY0lpa3VjbVZ4ZFdWemRDaGNibHgwWEhSN0lITmxjblpwWTJVNklDZHdaV1Z5UVhWMGFDY3NYSFJtZFc1ak9pQW5SMlYwUW14aFkydHNhWE4wWldSUVpXVnljeWNnZlN4Y2JseDBYSFJtZFc1amRHbHZiaWh3WldWeVNXUXNJR1Z5Y2l3Z1pHRjBZU2tnZTF4dVhIUmNkRngwYVdZb1pYSnlLU0J5WlhSMWNtNGdaR1ZtWlhKeVpXUXVjbVZxWldOMEtHVnljaWs3WEc1Y2RGeDBYSFIyWVhJZ2NHVmxjbk1nUFNCYlhUdGNibHgwWEhSY2RHWnZjaWgyWVhJZ2FUMHdPeUJwUEdSaGRHRXVjR1ZsY25NdWJHVnVaM1JvT3lCcEt5c3BJSEJsWlhKekxuQjFjMmdvWkdGMFlTNXdaV1Z5YzF0cFhTNXVZVzFsS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJrWldabGNuSmxaQzV5WlhOdmJIWmxLSEJsWlhKektUdGNibHgwWEhSOVhHNWNkQ2s3WEc1Y2RISmxkSFZ5YmlCa1pXWmxjbkpsWkM1d2NtOXRhWE5sTzF4dWZUdGNibVF4TG1Kd0lEMGdaREV1WW14aFkydHNhWE4wWldSUVpXVnljenNnTHk4Z1UyaHZjblJvWVc1a1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdub2RlLWV2ZW50LWVtaXR0ZXInKTtcblxudmFyIFJUQ0NoYW5uZWwgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuXHRfaW5oZXJpdHMoUlRDQ2hhbm5lbCwgX0V2ZW50RW1pdHRlcik7XG5cblx0ZnVuY3Rpb24gUlRDQ2hhbm5lbChuYW1lLCBkYXRhQ2hhbm5lbENhbGxiYWNrLCBzdHJlYW1DYWxsYmFjaykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSVENDaGFubmVsKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSVENDaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUlRDQ2hhbm5lbCkpLmNhbGwodGhpcykpO1xuXG5cdFx0X3RoaXMubmFtZSA9IG5hbWU7XG5cdFx0X3RoaXMudHlwZSA9ICdOL0EnO1xuXHRcdF90aGlzLmZyZXF1ZW5jeSA9IDIwO1xuXHRcdF90aGlzLl9sYXN0U2VuZFRpbWVzdGFtcCA9IDA7XG5cblx0XHRfdGhpcy5fZGF0YUNoYW5uZWxDYWxsYmFjayA9IGRhdGFDaGFubmVsQ2FsbGJhY2s7XG5cdFx0X3RoaXMuX3N0cmVhbUNhbGxiYWNrID0gc3RyZWFtQ2FsbGJhY2s7XG5cblx0XHRfdGhpcy5fZGF0YUNoYW5uZWwgPSBudWxsO1xuXHRcdF90aGlzLl9idWZmZXIgPSBudWxsO1xuXG5cdFx0Y29uc29sZS5sb2coJ2NyZWF0ZWQgY2hhbm5lbCAnICsgX3RoaXMubmFtZSArICcgIScpO1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhSVENDaGFubmVsLCBbe1xuXHRcdGtleTogJ2Nsb3NlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG5cdFx0XHRpZiAodGhpcy5fZGF0YUNoYW5uZWwgPT0gbnVsbCkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oJ3RyeWluZyB0byBjbG9zZSBub24tb3BlbiBjaGFubmVsICcgKyB0aGlzLm5hbWUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2RhdGFDaGFubmVsLmNsb3NlKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0RGF0YUNoYW5uZWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXREYXRhQ2hhbm5lbChkYXRhQ2hhbm5lbCkge1xuXHRcdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdkYXRhIGNoYW5uZWwgJyArIHRoaXMubmFtZSArICcgY29ubmVjdGVkICEnKTtcblxuXHRcdFx0dGhpcy5fZGF0YUNoYW5uZWwgPSBkYXRhQ2hhbm5lbDtcblxuXHRcdFx0dGhpcy5fZGF0YUNoYW5uZWwuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cblx0XHRcdGRhdGFDaGFubmVsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdFx0XHRcdC8vIEZpcnN0IG1lc3NhZ2UgY2FycmllcyBjaGFubmVsIGRlc2NyaXB0aW9uIGhlYWRlclxuXHRcdFx0XHR2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhtZXNzYWdlLmRhdGEpO1xuXG5cdFx0XHRcdC8vIGV4dHJhY3QgY2hhbm5lbCB0eXBlIChpbnB1dCBvciBvdXRwdXQpXG5cdFx0XHRcdHZhciB0eXBlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlldy5nZXRVaW50OCgwKSk7XG5cdFx0XHRcdGlmICh0eXBlQ2hhciA9PT0gJ08nKSBfdGhpczIudHlwZSA9ICdpbnB1dCc7IC8vUHJvbWV0aGUgT3V0cHV0ID0gQ2xpZW50IElucHV0XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVDaGFyID09PSAnSScpIF90aGlzMi50eXBlID0gJ291dHB1dCc7IC8vUHJvbWV0aGUgSW5wdXQgPSBDbGllbnQgT3V0cHV0XG5cdFx0XHRcdFx0ZWxzZSB0aHJvdyBcIlVucmVjbm9nbml6ZWQgY2hhbm5lbCB0eXBlIDogXCIgKyB0eXBlQ2hhcjtcblxuXHRcdFx0XHQvL2V4dHJhY3QgY2hhbm5lbCBzaXplXG5cdFx0XHRcdHZhciBzaXplID0gdmlldy5nZXRJbnQzMigxLCB0cnVlKTtcblx0XHRcdFx0aWYgKGlzTmFOKHNpemUpKSB0aHJvdyBcIldyb25nIGRhdGFjaGFubmVsIG1lc3NhZ2Ugc2l6ZVwiO1xuXHRcdFx0XHRfdGhpczIuc2l6ZSA9IHNpemU7XG5cdFx0XHRcdF90aGlzMi5fYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTtcblxuXHRcdFx0XHQvLyBTdWJzZXF1ZW50IG1lc3NhZ2VzIGFyZSBmb3J3YXJkZWQgdG8gYXBwcm9wcmlhdGUgaGFuZGxlcnNcblx0XHRcdFx0ZGF0YUNoYW5uZWwub25tZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXMyLl9vbk1lc3NhZ2UobWVzc2FnZSk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGRhdGFDaGFubmVsLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF90aGlzMi5fb25DbG9zZSgpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmICh0eXBlb2YgX3RoaXMyLl9kYXRhQ2hhbm5lbENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0X3RoaXMyLl9kYXRhQ2hhbm5lbENhbGxiYWNrKFwiTi9BXCIsIF90aGlzMik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zb2xlLmxvZygnZGF0YSBjaGFubmVsICcgKyBfdGhpczIubmFtZSArICcgcmVhZHkgIScpO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvKiogQmluZCBhbiBpbmNvbWluZyBSVEMgc3RyZWFtIHRvIHRoaXMgY2hhbm5lbCBcbiAgb25BZGRTdHJlYW0gKHN0cmVhbSkge1xuICBcdHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICBcdGlmKHR5cGVvZiB0aGlzLm9uc3RyZWFtID09PSAnZnVuY3Rpb24nKSB0aGlzLm9uc3RyZWFtKHRoaXMuZG5JZCwgc3RyZWFtKTtcbiAgXHRlbHNlIGNvbnNvbGUud2FybihcIklnbm9yZSBzdHJlYW0gXCIgKyBzdHJlYW0uaWQpO1xuICBcbiAgXHRjb25zb2xlLmxvZygnT3BlbiBzdHJlYW0gJyt0aGlzLm5hbWUpO1xuICB9Ki9cblxuXHRcdC8qKiBXcml0ZSBhIHNjYWxhciB2YWx1ZSB0byB0aGUgZ2l2ZW4gaW5kZXggb24gdGhlIFJUQyBkYXRhY2hhbm5lbCAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICd3cml0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHdyaXRlKGluZGV4LCB2YWx1ZSkge1xuXHRcdFx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuc2l6ZSB8fCBpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9idWZmZXJbaW5kZXhdID0gdmFsdWU7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0U2VuZCgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0LyoqIFdyaXRlIGFuIGFycmF5IG9mIHZhbHVlcyB0byB0aGUgUlRDIGRhdGFjaGFubmVsICovXG5cblx0fSwge1xuXHRcdGtleTogJ3dyaXRlQWxsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gd3JpdGVBbGwodmFsdWVzKSB7XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSB8fCB2YWx1ZXMubGVuZ3RoICE9PSB0aGlzLnNpemUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoaXNOYU4odmFsdWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR0aGlzLl9idWZmZXJbaV0gPSB2YWx1ZXNbaV07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3JlcXVlc3RTZW5kKCk7XG5cdFx0fVxuXG5cdFx0LyoqIEFzayB0byBzZW5kIHRoZSBpbnRlcm5hbCBkYXRhIGJ1ZmZlciB0aHJvdWdoIHRoZSBkYXRhY2hhbm5lbCBhdCB0aGUgZGVmaW5lZCBmcmVxdWVuY3kgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnX3JlcXVlc3RTZW5kJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX3JlcXVlc3RTZW5kKCkge1xuXHRcdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRcdHZhciBkb1NlbmQgPSBmdW5jdGlvbiBkb1NlbmQoKSB7XG5cdFx0XHRcdF90aGlzMy5fc2VuZFJlcXVlc3RlZCA9IGZhbHNlO1xuXHRcdFx0XHRfdGhpczMuX2xhc3RTZW5kVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHRcdHZhciByZXQgPSBfdGhpczMuX3NlbmQoX3RoaXMzLl9idWZmZXIpO1xuXHRcdFx0XHQvL0lmIGF1dG9zZW5kIGlzIHNldCwgYXV0b21hdGljYWxseSBzZW5kIGJ1ZmZlciBhdCB0aGUgZ2l2ZW4gZnJlcXVlbmN5XG5cdFx0XHRcdGlmIChyZXQgJiYgX3RoaXMzLmF1dG9zZW5kKSB7XG5cdFx0XHRcdFx0X3RoaXMzLl9yZXF1ZXN0U2VuZCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX2xhc3RTZW5kVGltZXN0YW1wO1xuXHRcdFx0dmFyIHBlcmlvZCA9IDEwMDAgLyB0aGlzLmZyZXF1ZW5jeTtcblxuXHRcdFx0aWYgKGVsYXBzZWRUaW1lID49IHBlcmlvZCkge1xuXHRcdFx0XHRkb1NlbmQoKTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX3NlbmRSZXF1ZXN0ZWQpIHtcblx0XHRcdFx0dGhpcy5fc2VuZFJlcXVlc3RlZCA9IHRydWU7XG5cdFx0XHRcdHNldFRpbWVvdXQoZG9TZW5kLCBwZXJpb2QgLSBlbGFwc2VkVGltZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqIEFjdHVhbCBzZW5kIHRoZSBpbnRlcm5hbCBkYXRhIGJ1ZmZlciB0aHJvdWdoIHRoZSBSVEMgZGF0YWNoYW5uZWwgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnX3NlbmQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfc2VuZChtc2cpIHtcblx0XHRcdGlmICh0aGlzLmNsb3NlZCB8fCB0aGlzLl9kYXRhQ2hhbm5lbCA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PT0gJ29wZW4nKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dGhpcy5fZGF0YUNoYW5uZWwuc2VuZChtc2cpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignW3J0Yy5jaGFubmVsLndyaXRlXSBleGNlcHRpb24gb2NjdXJlZCB3aGlsZSBzZW5kaW5nIGRhdGEnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignW3J0Yy5jaGFubmVsLndyaXRlXSB3YXJuaW5nIDogd2VicnRjIGRhdGFjaGFubmVsIHN0YXRlID0gJyArIHRoaXMuX2RhdGFDaGFubmVsLnJlYWR5U3RhdGUpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqIENhbGxlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBjaGFubmVsJ3MgUlRDIGRhdGFjaGFubmVsICovXG5cblx0fSwge1xuXHRcdGtleTogJ19vbk1lc3NhZ2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25NZXNzYWdlKG1lc3NhZ2UpIHtcblx0XHRcdHZhciB2YWxBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkobWVzc2FnZS5kYXRhKTtcblx0XHRcdHRoaXMuZW1pdCgndmFsdWUnLCB2YWxBcnJheSk7XG5cdFx0fVxuXG5cdFx0LyoqIENhbGxlZCB3aGVuIHRoZSBjaGFubmVsIGlzIGNsb3NlZCBvbiB0aGUgcmVtb3RlIHNpZGUgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnX29uQ2xvc2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25DbG9zZSgpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdkYXRhIGNoYW5uZWwgJyArIHRoaXMubmFtZSArICcgY2xvc2VkICEnKTtcblx0XHRcdHRoaXMuZW1pdCgnY2xvc2UnKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gUlRDQ2hhbm5lbDtcbn0oRXZlbnRFbWl0dGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSVENDaGFubmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKVVEwTm9ZVzV1Wld3dWFuTWlYU3dpYm1GdFpYTWlPbHNpUlhabGJuUkZiV2wwZEdWeUlpd2ljbVZ4ZFdseVpTSXNJbEpVUTBOb1lXNXVaV3dpTENKdVlXMWxJaXdpWkdGMFlVTm9ZVzV1Wld4RFlXeHNZbUZqYXlJc0luTjBjbVZoYlVOaGJHeGlZV05ySWl3aWRIbHdaU0lzSW1aeVpYRjFaVzVqZVNJc0lsOXNZWE4wVTJWdVpGUnBiV1Z6ZEdGdGNDSXNJbDlrWVhSaFEyaGhibTVsYkVOaGJHeGlZV05ySWl3aVgzTjBjbVZoYlVOaGJHeGlZV05ySWl3aVgyUmhkR0ZEYUdGdWJtVnNJaXdpWDJKMVptWmxjaUlzSW1OdmJuTnZiR1VpTENKc2IyY2lMQ0ozWVhKdUlpd2lZMnh2YzJVaUxDSmtZWFJoUTJoaGJtNWxiQ0lzSW1KcGJtRnllVlI1Y0dVaUxDSnZibTFsYzNOaFoyVWlMQ0oyYVdWM0lpd2lSR0YwWVZacFpYY2lMQ0p0WlhOellXZGxJaXdpWkdGMFlTSXNJblI1Y0dWRGFHRnlJaXdpVTNSeWFXNW5JaXdpWm5KdmJVTm9ZWEpEYjJSbElpd2laMlYwVldsdWREZ2lMQ0p6YVhwbElpd2laMlYwU1c1ME16SWlMQ0pwYzA1aFRpSXNJa1pzYjJGME16SkJjbkpoZVNJc0lsOXZiazFsYzNOaFoyVWlMQ0p2Ym1Oc2IzTmxJaXdpWDI5dVEyeHZjMlVpTENKcGJtUmxlQ0lzSW5aaGJIVmxJaXdpWDNKbGNYVmxjM1JUWlc1a0lpd2lkbUZzZFdWeklpd2lRWEp5WVhraUxDSnBjMEZ5Y21GNUlpd2liR1Z1WjNSb0lpd2lhU0lzSW1SdlUyVnVaQ0lzSWw5elpXNWtVbVZ4ZFdWemRHVmtJaXdpUkdGMFpTSXNJbWRsZEZScGJXVWlMQ0p5WlhRaUxDSmZjMlZ1WkNJc0ltRjFkRzl6Wlc1a0lpd2laV3hoY0hObFpGUnBiV1VpTENKd1pYSnBiMlFpTENKelpYUlVhVzFsYjNWMElpd2liWE5uSWl3aVkyeHZjMlZrSWl3aWNtVmhaSGxUZEdGMFpTSXNJbk5sYm1RaUxDSmxJaXdpWlhKeWIzSWlMQ0oyWVd4QmNuSmhlU0lzSW1WdGFYUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08wRkJRVUVzU1VGQlRVRXNaVUZCWlVNc1VVRkJVU3h2UWtGQlVpeERRVUZ5UWpzN1NVRkZUVU1zVlRzN08wRkJRMHdzY1VKQlFXRkRMRWxCUVdJc1JVRkJiVUpETEcxQ1FVRnVRaXhGUVVGM1EwTXNZMEZCZUVNc1JVRkJkMFE3UVVGQlFUczdRVUZCUVRzN1FVRkhka1FzVVVGQlMwWXNTVUZCVEN4SFFVRlpRU3hKUVVGYU8wRkJRMEVzVVVGQlMwY3NTVUZCVEN4SFFVRlpMRXRCUVZvN1FVRkRRU3hSUVVGTFF5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ08wRkJRMEVzVVVGQlMwTXNhMEpCUVV3c1IwRkJNRUlzUTBGQk1VSTdPMEZCUlVFc1VVRkJTME1zYjBKQlFVd3NSMEZCTkVKTUxHMUNRVUUxUWp0QlFVTkJMRkZCUVV0TkxHVkJRVXdzUjBGQmRVSk1MR05CUVhaQ096dEJRVVZCTEZGQlFVdE5MRmxCUVV3c1IwRkJiMElzU1VGQmNFSTdRVUZEUVN4UlFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlpqczdRVUZGUVVNc1ZVRkJVVU1zUjBGQlVpeERRVUZoTEhGQ1FVRnRRaXhOUVVGTFdDeEpRVUY0UWl4SFFVRTJRaXhKUVVFeFF6dEJRV1IxUkR0QlFXVjJSRHM3T3pzd1FrRkZVVHRCUVVOU0xFOUJRVWtzUzBGQlMxRXNXVUZCVEN4SlFVRnhRaXhKUVVGNlFpeEZRVUVyUWp0QlFVTTVRa1VzV1VGQlVVVXNTVUZCVWl4MVEwRkJhMFFzUzBGQlMxb3NTVUZCZGtRN1FVRkRRVHRCUVVOQk96dEJRVVZFTEZGQlFVdFJMRmxCUVV3c1EwRkJhMEpMTEV0QlFXeENPMEZCUTBFN096dHBRMEZGWlVNc1Z5eEZRVUZoTzBGQlFVRTdPMEZCUXpWQ1NpeFhRVUZSUXl4SFFVRlNMRzFDUVVFMFFpeExRVUZMV0N4SlFVRnFRenM3UVVGRlFTeFJRVUZMVVN4WlFVRk1MRWRCUVc5Q1RTeFhRVUZ3UWpzN1FVRkZRU3hSUVVGTFRpeFpRVUZNTEVOQlFXdENUeXhWUVVGc1FpeEhRVUVyUWl4aFFVRXZRanM3UVVGRlFVUXNaVUZCV1VVc1UwRkJXaXhIUVVGM1FpeHRRa0ZCVnp0QlFVTnNRenRCUVVOQkxGRkJRVWxETEU5QlFVOHNTVUZCU1VNc1VVRkJTaXhEUVVGaFF5eFJRVUZSUXl4SlFVRnlRaXhEUVVGWU96dEJRVVZCTzBGQlEwRXNVVUZCU1VNc1YwRkJWME1zVDBGQlQwTXNXVUZCVUN4RFFVRnZRazRzUzBGQlMwOHNVVUZCVEN4RFFVRmpMRU5CUVdRc1EwRkJjRUlzUTBGQlpqdEJRVU5CTEZGQlFVZElMR0ZCUVdFc1IwRkJhRUlzUlVGQmNVSXNUMEZCUzJ4Q0xFbEJRVXdzUjBGQldTeFBRVUZhTEVOQlFYSkNMRU5CUVRCRE8wRkJRVEZETEZOQlEwc3NTVUZCUjJ0Q0xHRkJRV0VzUjBGQmFFSXNSVUZCY1VJc1QwRkJTMnhDTEVsQlFVd3NSMEZCV1N4UlFVRmFMRU5CUVhKQ0xFTkJRVEpETzBGQlFUTkRMRlZCUTBFc1RVRkJUU3hyUTBGQmEwTnJRaXhSUVVGNFF6czdRVUZGVER0QlFVTkJMRkZCUVVsSkxFOUJRVTlTTEV0QlFVdFRMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2RDTEVsQlFXaENMRU5CUVZnN1FVRkRRU3hSUVVGSFF5eE5RVUZOUml4SlFVRk9MRU5CUVVnc1JVRkJaMElzVFVGQlRTeG5RMEZCVGp0QlFVTm9RaXhYUVVGTFFTeEpRVUZNTEVkQlFWbEJMRWxCUVZvN1FVRkRRU3hYUVVGTGFFSXNUMEZCVEN4SFFVRmxMRWxCUVVsdFFpeFpRVUZLTEVOQlFXbENTQ3hKUVVGcVFpeERRVUZtT3p0QlFVVkJPMEZCUTBGWUxHZENRVUZaUlN4VFFVRmFMRWRCUVhkQ08wRkJRVUVzV1VGQlZ5eFBRVUZMWVN4VlFVRk1MRU5CUVdsQ1ZpeFBRVUZxUWl4RFFVRllPMEZCUVVFc1MwRkJlRUk3UVVGRFFVd3NaMEpCUVZsblFpeFBRVUZhTEVkQlFYTkNPMEZCUVVFc1dVRkJUU3hQUVVGTFF5eFJRVUZNTEVWQlFVNDdRVUZCUVN4TFFVRjBRanM3UVVGRlFTeFJRVUZITEU5QlFVOHNUMEZCUzNwQ0xHOUNRVUZhTEV0QlFYRkRMRlZCUVhoRExFVkJRVzlFTzBGQlEyNUVMRmxCUVV0QkxHOUNRVUZNTEVOQlFUSkNMRXRCUVROQ08wRkJRMEU3TzBGQlJVUkpMRmxCUVZGRExFZEJRVklzYlVKQlFUWkNMRTlCUVV0WUxFbEJRV3hETzBGQlEwRXNTVUY2UWtRN1FVRXdRa0U3TzBGQlJVUTdPenM3T3pzN096dEJRVk5CT3pzN08zZENRVU5QWjBNc1N5eEZRVUZQUXl4TExFVkJRVTg3UVVGRGNFSXNUMEZCUjBRc1VVRkJVU3hEUVVGU0xFbEJRV0ZCTEZGQlFWRXNTMEZCUzFBc1NVRkJNVUlzU1VGQmEwTkZMRTFCUVUxTkxFdEJRVTRzUTBGQmNrTXNSVUZCYlVRN1FVRkRiRVFzVjBGQlR5eExRVUZRTzBGQlEwRTdPMEZCUlVRc1VVRkJTM2hDTEU5QlFVd3NRMEZCWVhWQ0xFdEJRV0lzU1VGQmMwSkRMRXRCUVhSQ08wRkJRMEVzVVVGQlMwTXNXVUZCVER0QlFVTkJMRlZCUVU4c1NVRkJVRHRCUVVOQk96dEJRVVZFT3pzN096SkNRVU5WUXl4TkxFVkJRVkU3UVVGRGFrSXNUMEZCUnl4RFFVRkRReXhOUVVGTlF5eFBRVUZPTEVOQlFXTkdMRTFCUVdRc1EwRkJSQ3hKUVVFd1FrRXNUMEZCVDBjc1RVRkJVQ3hMUVVGclFpeExRVUZMWWl4SlFVRndSQ3hGUVVFd1JEdEJRVU42UkN4WFFVRlBMRXRCUVZBN1FVRkRRVHM3UVVGRlJDeFJRVUZMTEVsQlFVbGpMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1Vvc1QwRkJUMGNzVFVGQk0wSXNSVUZCYlVORExFZEJRVzVETEVWQlFYZERPMEZCUTNaRExGRkJRVWRhTEUxQlFVMVJMRTlCUVU5SkxFTkJRVkFzUTBGQlRpeERRVUZJTEVWQlFYRkNMRTlCUVU4c1MwRkJVRHRCUVVOeVFpeFRRVUZMT1VJc1QwRkJUQ3hEUVVGaE9FSXNRMEZCWWl4SlFVRnJRa29zVDBGQlQwa3NRMEZCVUN4RFFVRnNRanRCUVVOQk96dEJRVVZFTEZGQlFVdE1MRmxCUVV3N1FVRkRRVHM3UVVGRlJEczdPenRwUTBGRFowSTdRVUZCUVRzN1FVRkRaaXhQUVVGSlRTeFRRVUZUTEZOQlFWUkJMRTFCUVZNc1IwRkJUVHRCUVVOc1FpeFhRVUZMUXl4alFVRk1MRWRCUVhOQ0xFdEJRWFJDTzBGQlEwRXNWMEZCUzNCRExHdENRVUZNTEVkQlFUQkNMRWxCUVVseFF5eEpRVUZLTEVkQlFWZERMRTlCUVZnc1JVRkJNVUk3UVVGRFFTeFJRVUZKUXl4TlFVRk5MRTlCUVV0RExFdEJRVXdzUTBGQlZ5eFBRVUZMY0VNc1QwRkJhRUlzUTBGQlZqdEJRVU5CTzBGQlEwRXNVVUZCUjIxRExFOUJRVThzVDBGQlMwVXNVVUZCWml4RlFVRjVRanRCUVVONFFpeFpRVUZMV2l4WlFVRk1PMEZCUTBFN1FVRkRSQ3hKUVZKRU96dEJRVlZCTEU5QlFVbGhMR05CUVdNc1NVRkJTVXdzU1VGQlNpeEhRVUZYUXl4UFFVRllMRXRCUVhWQ0xFdEJRVXQwUXl4clFrRkJPVU03UVVGRFFTeFBRVUZKTWtNc1UwRkJVeXhQUVVGUExFdEJRVXMxUXl4VFFVRjZRanM3UVVGRlFTeFBRVUZITWtNc1pVRkJaVU1zVFVGQmJFSXNSVUZCTUVJN1FVRkRla0pTTzBGQlEwRXNTVUZHUkN4TlFVVlBMRWxCUVVjc1EwRkJReXhMUVVGTFF5eGpRVUZVTEVWQlFYbENPMEZCUXk5Q0xGTkJRVXRCTEdOQlFVd3NSMEZCYzBJc1NVRkJkRUk3UVVGRFFWRXNaVUZCVjFRc1RVRkJXQ3hGUVVGdFFsRXNVMEZCVTBRc1YwRkJOVUk3UVVGRFFUdEJRVVZFT3p0QlFVVkVPenM3TzNkQ1FVTlBSeXhITEVWQlFVczdRVUZEV0N4UFFVRkpMRXRCUVV0RExFMUJRVXdzU1VGQlpTeExRVUZMTTBNc1dVRkJUQ3hKUVVGeFFpeEpRVUY0UXl4RlFVRTRRenRCUVVNM1F5eFhRVUZQTEV0QlFWQTdRVUZEUVN4SlFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTFFTeFpRVUZNTEVOQlFXdENORU1zVlVGQmJFSXNTMEZCYVVNc1RVRkJja01zUlVGQk5rTTdRVUZEYmtRc1VVRkJTVHRCUVVOSUxGVkJRVXMxUXl4WlFVRk1MRU5CUVd0Q05rTXNTVUZCYkVJc1EwRkJkVUpJTEVkQlFYWkNPMEZCUTBFc1MwRkdSQ3hEUVVWRkxFOUJRVTFKTEVOQlFVNHNSVUZCVXp0QlFVTldOVU1zWVVGQlVUWkRMRXRCUVZJc1EwRkJZeXd3UkVGQlpEdEJRVU5CTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBFc1NVRlFUU3hOUVU5Qk8wRkJRMDQzUXl4WlFVRlJSU3hKUVVGU0xFTkJRV0VzT0VSQlFUUkVMRXRCUVV0S0xGbEJRVXdzUTBGQmEwSTBReXhWUVVFelJqdEJRVU5CTEZkQlFVOHNTMEZCVUR0QlFVTkJPMEZCUTBRN08wRkJSVVE3T3pzN05rSkJRMWxxUXl4UExFVkJRVk03UVVGRGNFSXNUMEZCU1hGRExGZEJRVmNzU1VGQlNUVkNMRmxCUVVvc1EwRkJhVUpVTEZGQlFWRkRMRWxCUVhwQ0xFTkJRV1k3UVVGRFFTeFJRVUZMY1VNc1NVRkJUQ3hEUVVGVkxFOUJRVllzUlVGQmJVSkVMRkZCUVc1Q08wRkJRMEU3TzBGQlJVUTdPenM3TmtKQlExazdRVUZEV0RsRExGZEJRVkZETEVkQlFWSXNiVUpCUVRSQ0xFdEJRVXRZTEVsQlFXcERPMEZCUTBFc1VVRkJTM2xFTEVsQlFVd3NRMEZCVlN4UFFVRldPMEZCUTBFN096czdSVUZ1U25WQ05VUXNXVHM3UVVGelNucENOa1FzVDBGQlQwTXNUMEZCVUN4SFFVRnBRalZFTEZWQlFXcENJaXdpWm1sc1pTSTZJbEpVUTBOb1lXNXVaV3d1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCRmRtVnVkRVZ0YVhSMFpYSWdQU0J5WlhGMWFYSmxLQ2R1YjJSbExXVjJaVzUwTFdWdGFYUjBaWEluS1Z4dVhHNWpiR0Z6Y3lCU1ZFTkRhR0Z1Ym1Wc0lHVjRkR1Z1WkhNZ1JYWmxiblJGYldsMGRHVnlJSHRjYmx4MFkyOXVjM1J5ZFdOMGIzSWdLRzVoYldVc0lHUmhkR0ZEYUdGdWJtVnNRMkZzYkdKaFkyc3NJSE4wY21WaGJVTmhiR3hpWVdOcktTQjdYRzVjZEZ4MGMzVndaWElnS0NsY2JseHVYSFJjZEhSb2FYTXVibUZ0WlNBOUlHNWhiV1ZjYmx4MFhIUjBhR2x6TG5SNWNHVWdQU0FuVGk5QkoxeHVYSFJjZEhSb2FYTXVabkpsY1hWbGJtTjVJRDBnTWpCY2JseDBYSFIwYUdsekxsOXNZWE4wVTJWdVpGUnBiV1Z6ZEdGdGNDQTlJREJjYmx4MFhIUmNibHgwWEhSMGFHbHpMbDlrWVhSaFEyaGhibTVsYkVOaGJHeGlZV05ySUQwZ1pHRjBZVU5vWVc1dVpXeERZV3hzWW1GamExeHVYSFJjZEhSb2FYTXVYM04wY21WaGJVTmhiR3hpWVdOcklEMGdjM1J5WldGdFEyRnNiR0poWTJ0Y2JseHVYSFJjZEhSb2FYTXVYMlJoZEdGRGFHRnVibVZzSUQwZ2JuVnNiRnh1WEhSY2RIUm9hWE11WDJKMVptWmxjaUE5SUc1MWJHeGNibHh1WEhSY2RHTnZibk52YkdVdWJHOW5JQ2duWTNKbFlYUmxaQ0JqYUdGdWJtVnNJQ2NyZEdocGN5NXVZVzFsS3ljZ0lTY3BYRzVjZEgxY2JseHVYSFJqYkc5elpTQW9LU0I3WEc1Y2RGeDBhV1lnS0hSb2FYTXVYMlJoZEdGRGFHRnVibVZzSUQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpQW9ZSFJ5ZVdsdVp5QjBieUJqYkc5elpTQnViMjR0YjNCbGJpQmphR0Z1Ym1Wc0lDUjdkR2hwY3k1dVlXMWxmV0FwWEc1Y2RGeDBYSFJ5WlhSMWNtNWNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMbDlrWVhSaFEyaGhibTVsYkM1amJHOXpaU2dwWEc1Y2RIMWNibHh1WEhSelpYUkVZWFJoUTJoaGJtNWxiQ0FvWkdGMFlVTm9ZVzV1Wld3cElIdGNibHgwWEhSamIyNXpiMnhsTG14dlp5aGdaR0YwWVNCamFHRnVibVZzSUNSN2RHaHBjeTV1WVcxbGZTQmpiMjV1WldOMFpXUWdJV0FwWEc1Y2JseDBYSFIwYUdsekxsOWtZWFJoUTJoaGJtNWxiQ0E5SUdSaGRHRkRhR0Z1Ym1Wc1hHNWNibHgwWEhSMGFHbHpMbDlrWVhSaFEyaGhibTVsYkM1aWFXNWhjbmxVZVhCbElEMGdKMkZ5Y21GNVluVm1abVZ5Snp0Y2JseHVYSFJjZEdSaGRHRkRhR0Z1Ym1Wc0xtOXViV1Z6YzJGblpTQTlJRzFsYzNOaFoyVWdQVDRnZTF4dVhIUmNkRngwTHk4Z1JtbHljM1FnYldWemMyRm5aU0JqWVhKeWFXVnpJR05vWVc1dVpXd2daR1Z6WTNKcGNIUnBiMjRnYUdWaFpHVnlYRzVjZEZ4MFhIUnNaWFFnZG1sbGR5QTlJRzVsZHlCRVlYUmhWbWxsZHlodFpYTnpZV2RsTG1SaGRHRXBPMXh1WEc1Y2RGeDBYSFF2THlCbGVIUnlZV04wSUdOb1lXNXVaV3dnZEhsd1pTQW9hVzV3ZFhRZ2IzSWdiM1YwY0hWMEtWeHVYSFJjZEZ4MGJHVjBJSFI1Y0dWRGFHRnlJRDBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoMmFXVjNMbWRsZEZWcGJuUTRLREFwS1R0Y2JseDBYSFJjZEdsbUtIUjVjR1ZEYUdGeUlEMDlQU0FuVHljcElIUm9hWE11ZEhsd1pTQTlJQ2RwYm5CMWRDYzdJQzh2VUhKdmJXVjBhR1VnVDNWMGNIVjBJRDBnUTJ4cFpXNTBJRWx1Y0hWMFhHNWNkRngwWEhSbGJITmxJR2xtS0hSNWNHVkRhR0Z5SUQwOVBTQW5TU2NwSUhSb2FYTXVkSGx3WlNBOUlDZHZkWFJ3ZFhRbk95QXZMMUJ5YjIxbGRHaGxJRWx1Y0hWMElEMGdRMnhwWlc1MElFOTFkSEIxZEZ4dVhIUmNkRngwWld4elpTQjBhSEp2ZHlCY0lsVnVjbVZqYm05bmJtbDZaV1FnWTJoaGJtNWxiQ0IwZVhCbElEb2dYQ0lnS3lCMGVYQmxRMmhoY2p0Y2JseHVYSFJjZEZ4MEx5OWxlSFJ5WVdOMElHTm9ZVzV1Wld3Z2MybDZaVnh1WEhSY2RGeDBiR1YwSUhOcGVtVWdQU0IyYVdWM0xtZGxkRWx1ZERNeUtERXNkSEoxWlNrN1hHNWNkRngwWEhScFppaHBjMDVoVGloemFYcGxLU2tnZEdoeWIzY2dYQ0pYY205dVp5QmtZWFJoWTJoaGJtNWxiQ0J0WlhOellXZGxJSE5wZW1WY0lqdGNibHgwWEhSY2RIUm9hWE11YzJsNlpTQTlJSE5wZW1VN1hHNWNkRngwWEhSMGFHbHpMbDlpZFdabVpYSWdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLSE5wZW1VcE8xeHVYRzVjZEZ4MFhIUXZMeUJUZFdKelpYRjFaVzUwSUcxbGMzTmhaMlZ6SUdGeVpTQm1iM0ozWVhKa1pXUWdkRzhnWVhCd2NtOXdjbWxoZEdVZ2FHRnVaR3hsY25OY2JseDBYSFJjZEdSaGRHRkRhR0Z1Ym1Wc0xtOXViV1Z6YzJGblpTQTlJRzFsYzNOaFoyVWdQVDRnZEdocGN5NWZiMjVOWlhOellXZGxJQ2h0WlhOellXZGxLVnh1WEhSY2RGeDBaR0YwWVVOb1lXNXVaV3d1YjI1amJHOXpaU0E5SUNncElEMCtJSFJvYVhNdVgyOXVRMnh2YzJVZ0tDbGNibHh1WEhSY2RGeDBhV1lvZEhsd1pXOW1JSFJvYVhNdVgyUmhkR0ZEYUdGdWJtVnNRMkZzYkdKaFkyc2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RGeDBkR2hwY3k1ZlpHRjBZVU5vWVc1dVpXeERZV3hzWW1GamF5QW9YQ0pPTDBGY0lpd2dkR2hwY3lsY2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MFkyOXVjMjlzWlM1c2IyY2dLR0JrWVhSaElHTm9ZVzV1Wld3Z0pIdDBhR2x6TG01aGJXVjlJSEpsWVdSNUlDRmdLVnh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkQzhxS2lCQ2FXNWtJR0Z1SUdsdVkyOXRhVzVuSUZKVVF5QnpkSEpsWVcwZ2RHOGdkR2hwY3lCamFHRnVibVZzSUZ4dVhIUnZia0ZrWkZOMGNtVmhiU0FvYzNSeVpXRnRLU0I3WEc1Y2RGeDBkR2hwY3k1emRISmxZVzBnUFNCemRISmxZVzA3WEc1Y2RGeDBhV1lvZEhsd1pXOW1JSFJvYVhNdWIyNXpkSEpsWVcwZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhSb2FYTXViMjV6ZEhKbFlXMG9kR2hwY3k1a2JrbGtMQ0J6ZEhKbFlXMHBPMXh1WEhSY2RHVnNjMlVnWTI5dWMyOXNaUzUzWVhKdUtGd2lTV2R1YjNKbElITjBjbVZoYlNCY0lpQXJJSE4wY21WaGJTNXBaQ2s3WEc1Y2RGeHVYSFJjZEdOdmJuTnZiR1V1Ykc5bktDZFBjR1Z1SUhOMGNtVmhiU0FuSzNSb2FYTXVibUZ0WlNrN1hHNWNkSDBxTDF4dVhHNWNkQzhxS2lCWGNtbDBaU0JoSUhOallXeGhjaUIyWVd4MVpTQjBieUIwYUdVZ1oybDJaVzRnYVc1a1pYZ2diMjRnZEdobElGSlVReUJrWVhSaFkyaGhibTVsYkNBcUwxeHVYSFIzY21sMFpTQW9hVzVrWlhnc0lIWmhiSFZsS1NCN1hHNWNkRngwYVdZb2FXNWtaWGdnUENBd0lIeDhJR2x1WkdWNElENGdkR2hwY3k1emFYcGxJSHg4SUdselRtRk9LSFpoYkhWbEtTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sWEc1Y2RGeDBmVnh1WEc1Y2RGeDBkR2hwY3k1ZlluVm1abVZ5VzJsdVpHVjRYU0E5SUhaaGJIVmxYRzVjZEZ4MGRHaHBjeTVmY21WeGRXVnpkRk5sYm1Rb0tWeHVYSFJjZEhKbGRIVnliaUIwY25WbFhHNWNkSDFjYmx4dVhIUXZLaW9nVjNKcGRHVWdZVzRnWVhKeVlYa2diMllnZG1Gc2RXVnpJSFJ2SUhSb1pTQlNWRU1nWkdGMFlXTm9ZVzV1Wld3Z0tpOWNibHgwZDNKcGRHVkJiR3dnS0haaGJIVmxjeWtnZTF4dVhIUmNkR2xtS0NGQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbGN5a2dmSHdnZG1Gc2RXVnpMbXhsYm1kMGFDQWhQVDBnZEdocGN5NXphWHBsS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVmNibHgwWEhSOVhHNWNibHgwWEhSbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIWmhiSFZsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhSY2RGeDBhV1lvYVhOT1lVNG9kbUZzZFdWelcybGRLU2tnY21WMGRYSnVJR1poYkhObFhHNWNkRngwWEhSMGFHbHpMbDlpZFdabVpYSmJhVjBnUFNCMllXeDFaWE5iYVYxY2JseDBYSFI5WEc1Y2RGeDBYRzVjZEZ4MGRHaHBjeTVmY21WeGRXVnpkRk5sYm1Rb0tWeHVYSFI5WEc1Y2JseDBMeW9xSUVGemF5QjBieUJ6Wlc1a0lIUm9aU0JwYm5SbGNtNWhiQ0JrWVhSaElHSjFabVpsY2lCMGFISnZkV2RvSUhSb1pTQmtZWFJoWTJoaGJtNWxiQ0JoZENCMGFHVWdaR1ZtYVc1bFpDQm1jbVZ4ZFdWdVkza2dLaTljYmx4MFgzSmxjWFZsYzNSVFpXNWtJQ2dwSUh0Y2JseDBYSFJzWlhRZ1pHOVRaVzVrSUQwZ0tDa2dQVDRnZTF4dVhIUmNkRngwZEdocGN5NWZjMlZ1WkZKbGNYVmxjM1JsWkNBOUlHWmhiSE5sWEc1Y2RGeDBYSFIwYUdsekxsOXNZWE4wVTJWdVpGUnBiV1Z6ZEdGdGNDQTlJRzVsZHlCRVlYUmxLQ2t1WjJWMFZHbHRaU2dwWEc1Y2RGeDBYSFJzWlhRZ2NtVjBJRDBnZEdocGN5NWZjMlZ1WkNoMGFHbHpMbDlpZFdabVpYSXBYRzVjZEZ4MFhIUXZMMGxtSUdGMWRHOXpaVzVrSUdseklITmxkQ3dnWVhWMGIyMWhkR2xqWVd4c2VTQnpaVzVrSUdKMVptWmxjaUJoZENCMGFHVWdaMmwyWlc0Z1puSmxjWFZsYm1ONVhHNWNkRngwWEhScFppaHlaWFFnSmlZZ2RHaHBjeTVoZFhSdmMyVnVaQ2tnZTF4dVhIUmNkRngwWEhSMGFHbHpMbDl5WlhGMVpYTjBVMlZ1WkNncFhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwYkdWMElHVnNZWEJ6WldSVWFXMWxJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrZ0xTQjBhR2x6TGw5c1lYTjBVMlZ1WkZScGJXVnpkR0Z0Y0Z4dVhIUmNkR3hsZENCd1pYSnBiMlFnUFNBeE1EQXdJQzhnZEdocGN5NW1jbVZ4ZFdWdVkzbGNibHh1WEhSY2RHbG1LR1ZzWVhCelpXUlVhVzFsSUQ0OUlIQmxjbWx2WkNrZ2UxeHVYSFJjZEZ4MFpHOVRaVzVrS0NsY2JseDBYSFI5SUdWc2MyVWdhV1lvSVhSb2FYTXVYM05sYm1SU1pYRjFaWE4wWldRcElIdGNibHgwWEhSY2RIUm9hWE11WDNObGJtUlNaWEYxWlhOMFpXUWdQU0IwY25WbFhHNWNkRngwWEhSelpYUlVhVzFsYjNWMEtHUnZVMlZ1WkN3Z2NHVnlhVzlrSUMwZ1pXeGhjSE5sWkZScGJXVXBYRzVjZEZ4MGZWeHVYRzVjZEgxY2JseHVYSFF2S2lvZ1FXTjBkV0ZzSUhObGJtUWdkR2hsSUdsdWRHVnlibUZzSUdSaGRHRWdZblZtWm1WeUlIUm9jbTkxWjJnZ2RHaGxJRkpVUXlCa1lYUmhZMmhoYm01bGJDQXFMMXh1WEhSZmMyVnVaQ0FvYlhObktTQjdYRzVjZEZ4MGFXWWdLSFJvYVhNdVkyeHZjMlZrSUh4OElIUm9hWE11WDJSaGRHRkRhR0Z1Ym1Wc0lEMDlJRzUxYkd3cElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVnh1WEhSY2RIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZlpHRjBZVU5vWVc1dVpXd3VjbVZoWkhsVGRHRjBaU0E5UFQwZ0oyOXdaVzRuS1NCN1hHNWNkRngwWEhSMGNua2dlMXh1WEhSY2RGeDBYSFIwYUdsekxsOWtZWFJoUTJoaGJtNWxiQzV6Wlc1a0tHMXpaeWxjYmx4MFhIUmNkSDBnWTJGMFkyZ29aU2tnZTF4dVhIUmNkRngwWEhSamIyNXpiMnhsTG1WeWNtOXlLQ2RiY25SakxtTm9ZVzV1Wld3dWQzSnBkR1ZkSUdWNFkyVndkR2x2YmlCdlkyTjFjbVZrSUhkb2FXeGxJSE5sYm1ScGJtY2daR0YwWVNjcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGNtVjBkWEp1SUhSeWRXVmNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWTI5dWMyOXNaUzUzWVhKdUtDZGJjblJqTG1Ob1lXNXVaV3d1ZDNKcGRHVmRJSGRoY201cGJtY2dPaUIzWldKeWRHTWdaR0YwWVdOb1lXNXVaV3dnYzNSaGRHVWdQU0FuSzNSb2FYTXVYMlJoZEdGRGFHRnVibVZzTG5KbFlXUjVVM1JoZEdVcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBMeW9xSUVOaGJHeGxaQ0IzYUdWdUlHRWdiV1Z6YzJGblpTQnBjeUJ5WldObGFYWmxaQ0JtY205dElIUm9aU0JqYUdGdWJtVnNKM01nVWxSRElHUmhkR0ZqYUdGdWJtVnNJQ292WEc1Y2RGOXZiazFsYzNOaFoyVWdLRzFsYzNOaFoyVXBJSHRjYmx4MFhIUnNaWFFnZG1Gc1FYSnlZWGtnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0cxbGMzTmhaMlV1WkdGMFlTbGNibHgwWEhSMGFHbHpMbVZ0YVhRb0ozWmhiSFZsSnl3Z2RtRnNRWEp5WVhrcFhHNWNkSDFjYmx4MFhHNWNkQzhxS2lCRFlXeHNaV1FnZDJobGJpQjBhR1VnWTJoaGJtNWxiQ0JwY3lCamJHOXpaV1FnYjI0Z2RHaGxJSEpsYlc5MFpTQnphV1JsSUNvdlhHNWNkRjl2YmtOc2IzTmxJQ2dwSUh0Y2JseDBYSFJqYjI1emIyeGxMbXh2WnloZ1pHRjBZU0JqYUdGdWJtVnNJQ1I3ZEdocGN5NXVZVzFsZlNCamJHOXpaV1FnSVdBcFhHNWNkRngwZEdocGN5NWxiV2wwS0NkamJHOXpaU2NwWEc1Y2RIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1ZFTkRhR0Z1Ym1Wc1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSVENQZWVyID0gcmVxdWlyZSgnLi9SVENQZWVyLmpzJyk7XG52YXIgUlRDQ2hhbm5lbCA9IHJlcXVpcmUoJy4vUlRDQ2hhbm5lbC5qcycpO1xuXG52YXIgUlRDQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gUlRDQ29udHJvbGxlcihkYnVzT2JqZWN0LCByZXF1ZXN0ZWRDaGFubmVscykge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgUlRDQ29udHJvbGxlcik7XG5cblx0XHR0aGlzLl9kYnVzT2JqZWN0ID0gZGJ1c09iamVjdDtcblx0XHR0aGlzLl9yZXF1ZXN0ZWRDaGFubmVscyA9IHJlcXVlc3RlZENoYW5uZWxzO1xuXHRcdHRoaXMuX3VzZWRDaGFubmVscyA9IFtdO1xuXG5cdFx0dGhpcy5fcGVlcnMgPSBuZXcgTWFwKCk7XG5cblx0XHR0aGlzLl9wcm9wZXJ0aWVzQ2hhbmdlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIF90aGlzLl9wcm9wZXJ0aWVzQ2hhbmdlZC5hcHBseShfdGhpcywgYXJndW1lbnRzKTtcblx0XHR9O1xuXHRcdHRoaXMuX2RidXNPYmplY3Qub24oJ3Byb3BlcnRpZXMtY2hhbmdlZCcsIHRoaXMuX3Byb3BlcnRpZXNDaGFuZ2VkQ2FsbGJhY2spO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFJUQ0NvbnRyb2xsZXIsIFt7XG5cdFx0a2V5OiAnY29ubmVjdCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG5cdFx0XHR0aGlzLl9kYnVzT2JqZWN0LmluaXRQcm9wZXJ0aWVzQ2hhbmdlZFNpZ25hbCgpO1xuXHRcdFx0dGhpcy5fZGJ1c09iamVjdC5nZXRBbGwoJ2ZyLnBhcnRuZXJpbmcuUlRDJywgdHJ1ZSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZGlzY29ubmVjdCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG5cdFx0XHR2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdFx0XHR2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm9yICh2YXIgX2l0ZXJhdG9yID0gdGhpcy5fcGVlcnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdFx0XHRcdFx0dmFyIF9zdGVwJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAudmFsdWUsIDIpLFxuXHRcdFx0XHRcdCAgICBpZCA9IF9zdGVwJHZhbHVlWzBdLFxuXHRcdFx0XHRcdCAgICBwZWVyID0gX3N0ZXAkdmFsdWVbMV07XG5cblx0XHRcdFx0XHRwZWVyLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG5cdFx0XHRcdF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHRcdFx0XHRcdFx0X2l0ZXJhdG9yLnJldHVybigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0XHRcdFx0XHRcdHRocm93IF9pdGVyYXRvckVycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9kYnVzT2JqZWN0LnJlbW92ZUxpc3RlbmVyKCdwcm9wZXJ0aWVzLWNoYW5nZWQnLCB0aGlzLl9wcm9wZXJ0aWVzQ2hhbmdlZENhbGxiYWNrKTtcblx0XHRcdHRoaXMuX3Byb3BlcnRpZXNDaGFuZ2VkQ2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0dGhpcy5fdXNlZENoYW5uZWxzID0gW107XG5cdFx0XHR0aGlzLl9kYnVzT2JqZWN0LmNsb3NlKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX3Byb3BlcnRpZXNDaGFuZ2VkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX3Byb3BlcnRpZXNDaGFuZ2VkKGlmYWNlLCBjaGFuZ2VkUHJvcGVydGllcywgaW52YWxpZGF0ZWRQcm9wZXJ0aWVzKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0aWYgKGNoYW5nZWRQcm9wZXJ0aWVzID09IG51bGwgfHwgY2hhbmdlZFByb3BlcnRpZXMuTG9jYWxQZWVycyA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly9maW5kIGFuZCBub3RpZnkgbmV3IHBlZXJzXG5cdFx0XHRjaGFuZ2VkUHJvcGVydGllcy5Mb2NhbFBlZXJzLmZvckVhY2goZnVuY3Rpb24gKHBlZXJEYXRhKSB7XG5cdFx0XHRcdGlmICghX3RoaXMyLl9wZWVycy5oYXMocGVlckRhdGFbMF0pKSB7XG5cdFx0XHRcdFx0X3RoaXMyLl9vblBlZXJDb25uZWN0ZWQocGVlckRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9maW5kIGFuZCBub3RpZnkgZGVsZXRlZCBwZWVyc1xuXHRcdFx0dmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0XHRcdHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcblx0XHRcdHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuXHRcdFx0XHRcdHZhciBfc3RlcDIkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDIudmFsdWUsIDIpLFxuXHRcdFx0XHRcdCAgICBwZWVySWQgPSBfc3RlcDIkdmFsdWVbMF0sXG5cdFx0XHRcdFx0ICAgIHBlZXIgPSBfc3RlcDIkdmFsdWVbMV07XG5cblx0XHRcdFx0XHRpZiAoIWNoYW5nZWRQcm9wZXJ0aWVzLkxvY2FsUGVlcnMuZmluZChmdW5jdGlvbiAocCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBbMF0gPT09IHBlZXJJZDtcblx0XHRcdFx0XHR9KSkge1xuXHRcdFx0XHRcdFx0X3RoaXMyLl9vblBlZXJEaXNjb25uZWN0ZWQocGVlcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLl9wZWVyc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuXHRcdFx0XHRcdF9sb29wKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuXHRcdFx0XHRfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcblx0XHRcdFx0XHRcdF9pdGVyYXRvcjIucmV0dXJuKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcblx0XHRcdFx0XHRcdHRocm93IF9pdGVyYXRvckVycm9yMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25QZWVyQ29ubmVjdGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uUGVlckNvbm5lY3RlZChwZWVyRGF0YSkge1xuXHRcdFx0dmFyIGNoYW5uZWxzID0gdGhpcy5fbWF0Y2hDaGFubmVscyhwZWVyRGF0YVsxXSk7XG5cblx0XHRcdGlmIChjaGFubmVscy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuX3BlZXJzLnNldChwZWVyRGF0YVswXSwgbmV3IFJUQ1BlZXIocGVlckRhdGFbMF0sIGNoYW5uZWxzLCB0aGlzLl9kYnVzT2JqZWN0KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIm5vdCB1c2luZyBwZWVyIFwiICsgcGVlckRhdGFbMF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vblBlZXJEaXNjb25uZWN0ZWQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25QZWVyRGlzY29ubmVjdGVkKHBlZXIpIHtcblx0XHRcdHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLl9wZWVycy5kZWxldGUocGVlci5pZCk7XG5cdFx0XHRwZWVyLmNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5uZWwpIHtcblx0XHRcdFx0ZGVsZXRlIF90aGlzMy5fdXNlZENoYW5uZWxzW2NoYW5uZWwubmFtZV07XG5cdFx0XHR9KTtcblx0XHRcdHBlZXIuY2xvc2UoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfbWF0Y2hDaGFubmVscycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9tYXRjaENoYW5uZWxzKHJlY2VpdmVkQ2hhbm5lbHMpIHtcblx0XHRcdHZhciBjaGFubmVscyA9IFtdO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHJlY2VpdmVkQ2hhbm5lbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIG5hbWUgPSByZWNlaXZlZENoYW5uZWxzW2ldO1xuXHRcdFx0XHR2YXIgcmVtb3RlU3RyZWFtSWQgPSBuYW1lLnNwbGl0KFwiXzs6X1wiKVsxXTtcblx0XHRcdFx0bmFtZSA9IG5hbWUuc3BsaXQoXCJfOzpfXCIpWzBdO1xuXG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fcmVxdWVzdGVkQ2hhbm5lbHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgcmVxID0gdGhpcy5fcmVxdWVzdGVkQ2hhbm5lbHNbal07XG5cblx0XHRcdFx0XHRpZiAoIW5hbWUgfHwgIW5hbWUubWF0Y2gocmVxLnJlZ2V4KSB8fCB0aGlzLl91c2VkQ2hhbm5lbHNbbmFtZV0pIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBjaGFubmVsID0gbmV3IFJUQ0NoYW5uZWwobmFtZSwgcmVxLmNiLCByZXEuc3RyZWFtX2NiKTtcblx0XHRcdFx0XHR0aGlzLl91c2VkQ2hhbm5lbHNbbmFtZV0gPSBjaGFubmVsO1xuXHRcdFx0XHRcdGNoYW5uZWxzLnB1c2goY2hhbm5lbCk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdC8qXG4gICAgIC8vIElmIGEgc3RyZWFtIGlkIGlzIHByb3ZpZGVkIGZvciB0aGUgY2hhbm5lbCwgcmVnaXN0ZXIgdGhlIG1hcHBpbmdcbiAgICAgaWYocmVtb3RlU3RyZWFtSWQpIHtcbiAgICAgXHR0aGlzLl9jaGFubmVsc0J5U3RyZWFtID0gdGhpcy5fY2hhbm5lbHNCeVN0cmVhbS5maWx0ZXIoKGNicykgPT4ge1xuICAgICBcdFx0cmV0dXJuIGNicy5zdHJlYW0gIT09IHJlbW90ZVN0cmVhbUlkICYmIGNicy5jaGFubmVsICE9PSBjaGFubmVsXG4gICAgIFx0fSlcbiAgICAgXHR0aGlzLl9jaGFubmVsc0J5U3RyZWFtLnB1c2goe1xuICAgICBcdFx0c3RyZWFtOiByZW1vdGVTdHJlYW1JZCwgXG4gICAgIFx0XHRjaGFubmVsOiBjaGFubmVsXG4gICAgIFx0fSlcbiAgICAgXHRjaGFubmVsLnN0cmVhbUlkID0gc3RyZWFtSWRcbiAgICAgfVxuICAgICAvL2xldCBsb2NhbFN0cmVhbUlkID0gdGhhdC5jaGFubmVsc0J5U3RyZWFtLmZpbHRlcihmdW5jdGlvbihjYnMpe3JldHVybiBjYnMuY2hhbm5lbCA9PT0gbmFtZTsgfSlbMF07IFRPRE86IHdoYXQncyB0aGF0IGdsb2JhbCBjaGFubmVsc0J5U3RyZWFtIG9iaiA/IVxuICAgICBpZihsb2NhbFN0cmVhbUlkKSB7XG4gICAgIFx0dGhpcy5fY2hhbm5lbHNCeVN0cmVhbSA9IHRoaXMuX2NoYW5uZWxzQnlTdHJlYW0uZmlsdGVyKChjYnMpID0+IHtcbiAgICAgXHRcdHJldHVybiBjYnMuc3RyZWFtICE9PSBsb2NhbFN0cmVhbUlkICYmIGNicy5jaGFubmVsICE9PSBuYW1lXG4gICAgIFx0fSlcbiAgICAgXHR0aGlzLl9jaGFubmVsc0J5U3RyZWFtLnB1c2goe1xuICAgICBcdFx0c3RyZWFtOiBsb2NhbFN0cmVhbUlkLCBcbiAgICAgXHRcdGNoYW5uZWw6IG5hbWVcbiAgICAgXHR9KVxuICAgICBcdGNoYW5uZWwubG9jYWxTdHJlYW1JZCA9IGxvY2FsU3RyZWFtSWRcbiAgICAgfSovXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNoYW5uZWxzO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBSVENDb250cm9sbGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJUQ0NvbnRyb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpVUTBOdmJuUnliMnhzWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpVWxSRFVHVmxjaUlzSW5KbGNYVnBjbVVpTENKU1ZFTkRhR0Z1Ym1Wc0lpd2lVbFJEUTI5dWRISnZiR3hsY2lJc0ltUmlkWE5QWW1wbFkzUWlMQ0p5WlhGMVpYTjBaV1JEYUdGdWJtVnNjeUlzSWw5a1luVnpUMkpxWldOMElpd2lYM0psY1hWbGMzUmxaRU5vWVc1dVpXeHpJaXdpWDNWelpXUkRhR0Z1Ym1Wc2N5SXNJbDl3WldWeWN5SXNJazFoY0NJc0lsOXdjbTl3WlhKMGFXVnpRMmhoYm1kbFpFTmhiR3hpWVdOcklpd2lYM0J5YjNCbGNuUnBaWE5EYUdGdVoyVmtJaXdpYjI0aUxDSnBibWwwVUhKdmNHVnlkR2xsYzBOb1lXNW5aV1JUYVdkdVlXd2lMQ0puWlhSQmJHd2lMQ0pwWkNJc0luQmxaWElpTENKamJHOXpaU0lzSW5KbGJXOTJaVXhwYzNSbGJtVnlJaXdpYVdaaFkyVWlMQ0pqYUdGdVoyVmtVSEp2Y0dWeWRHbGxjeUlzSW1sdWRtRnNhV1JoZEdWa1VISnZjR1Z5ZEdsbGN5SXNJa3h2WTJGc1VHVmxjbk1pTENKbWIzSkZZV05vSWl3aWFHRnpJaXdpY0dWbGNrUmhkR0VpTENKZmIyNVFaV1Z5UTI5dWJtVmpkR1ZrSWl3aWNHVmxja2xrSWl3aVptbHVaQ0lzSW5BaUxDSmZiMjVRWldWeVJHbHpZMjl1Ym1WamRHVmtJaXdpWTJoaGJtNWxiSE1pTENKZmJXRjBZMmhEYUdGdWJtVnNjeUlzSW14bGJtZDBhQ0lzSW5ObGRDSXNJbU52Ym5OdmJHVWlMQ0pzYjJjaUxDSmtaV3hsZEdVaUxDSmphR0Z1Ym1Wc0lpd2libUZ0WlNJc0luSmxZMlZwZG1Wa1EyaGhibTVsYkhNaUxDSnBJaXdpY21WdGIzUmxVM1J5WldGdFNXUWlMQ0p6Y0d4cGRDSXNJbW9pTENKeVpYRWlMQ0p0WVhSamFDSXNJbkpsWjJWNElpd2lZMklpTENKemRISmxZVzFmWTJJaUxDSndkWE5vSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdRVUZCUVN4SlFVRk5RU3hWUVVGVlF5eFJRVUZSTEdOQlFWSXNRMEZCYUVJN1FVRkRRU3hKUVVGTlF5eGhRVUZoUkN4UlFVRlJMR2xDUVVGU0xFTkJRVzVDT3p0SlFVZE5SU3hoTzBGQlEwd3NkMEpCUVdGRExGVkJRV0lzUlVGQmVVSkRMR2xDUVVGNlFpeEZRVUUwUXp0QlFVRkJPenRCUVVGQk96dEJRVU16UXl4UFFVRkxReXhYUVVGTUxFZEJRVzFDUml4VlFVRnVRanRCUVVOQkxFOUJRVXRITEd0Q1FVRk1MRWRCUVRCQ1JpeHBRa0ZCTVVJN1FVRkRRU3hQUVVGTFJ5eGhRVUZNTEVkQlFYRkNMRVZCUVhKQ096dEJRVVZCTEU5QlFVdERMRTFCUVV3c1IwRkJZeXhKUVVGSlF5eEhRVUZLTEVWQlFXUTdPMEZCUlVFc1QwRkJTME1zTUVKQlFVd3NSMEZCYTBNN1FVRkJRU3hWUVVGaExFMUJRVXRETEd0Q1FVRk1MSGRDUVVGaU8wRkJRVUVzUjBGQmJFTTdRVUZEUVN4UFFVRkxUaXhYUVVGTUxFTkJRV2xDVHl4RlFVRnFRaXhEUVVGdlFpeHZRa0ZCY0VJc1JVRkJNRU1zUzBGQlMwWXNNRUpCUVM5RE8wRkJRMEU3T3pzN05FSkJSVlU3UVVGRFZpeFJRVUZMVEN4WFFVRk1MRU5CUVdsQ1VTd3lRa0ZCYWtJN1FVRkRRU3hSUVVGTFVpeFhRVUZNTEVOQlFXbENVeXhOUVVGcVFpeERRVUYzUWl4dFFrRkJlRUlzUlVGQk5rTXNTVUZCTjBNN1FVRkRRVHM3T3l0Q1FVVmhPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlEySXNlVUpCUVhWQ0xFdEJRVXRPTEUxQlFUVkNMRGhJUVVGdlF6dEJRVUZCTzBGQlFVRXNVMEZCTVVKUExFVkJRVEJDTzBGQlFVRXNVMEZCZEVKRExFbEJRWE5DT3p0QlFVTnVRMEVzVlVGQlMwTXNTMEZCVER0QlFVTkJPMEZCU0ZrN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZMWWl4UlFVRkxXaXhYUVVGTUxFTkJRV2xDWVN4alFVRnFRaXhEUVVGcFF5eHZRa0ZCYWtNc1JVRkJkVVFzUzBGQlMxSXNNRUpCUVRWRU8wRkJRMEVzVVVGQlMwRXNNRUpCUVV3c1IwRkJhME1zU1VGQmJFTTdRVUZEUVN4UlFVRkxTQ3hoUVVGTUxFZEJRWEZDTEVWQlFYSkNPMEZCUTBFc1VVRkJTMFlzVjBGQlRDeERRVUZwUWxrc1MwRkJha0k3UVVGRFFUczdPM0ZEUVVWdFFrVXNTeXhGUVVGUFF5eHBRaXhGUVVGdFFrTXNjVUlzUlVGQmRVSTdRVUZCUVRzN1FVRkRjRVVzVDBGQlNVUXNjVUpCUVhGQ0xFbEJRWEpDTEVsQlFUWkNRU3hyUWtGQmEwSkZMRlZCUVd4Q0xFbEJRV2RETEVsQlFXcEZMRVZCUVhWRk8wRkJRM1JGTzBGQlEwRTdPMEZCUlVRN1FVRkRRVVlzY1VKQlFXdENSU3hWUVVGc1FpeERRVUUyUWtNc1QwRkJOMElzUTBGQmNVTXNiMEpCUVZrN1FVRkRhRVFzVVVGQlNTeERRVUZETEU5QlFVdG1MRTFCUVV3c1EwRkJXV2RDTEVkQlFWb3NRMEZCWjBKRExGTkJRVk1zUTBGQlZDeERRVUZvUWl4RFFVRk1MRVZCUVcxRE8wRkJRMnhETEZsQlFVdERMR2RDUVVGTUxFTkJRWFZDUkN4UlFVRjJRanRCUVVOQk8wRkJRMFFzU1VGS1JEczdRVUZOUVR0QlFWcHZSVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1UwRmhNVVJGTEUxQllqQkVPMEZCUVVFc1UwRmhiRVJZTEVsQlltdEVPenRCUVdOdVJTeFRRVUZKTEVOQlFVTkpMR3RDUVVGclFrVXNWVUZCYkVJc1EwRkJOa0pOTEVsQlFUZENMRU5CUVcxRE8wRkJRVUVzWVVGQlMwTXNSVUZCUlN4RFFVRkdMRTFCUVZOR0xFMUJRV1E3UVVGQlFTeE5RVUZ1UXl4RFFVRk1MRVZCUVN0RU8wRkJRemxFTEdGQlFVdEhMRzFDUVVGTUxFTkJRVEJDWkN4SlFVRXhRanRCUVVOQk8wRkJhRUpyUlRzN1FVRmhjRVVzTUVKQlFUSkNMRXRCUVV0U0xFMUJRV2hETEcxSlFVRjNRenRCUVVGQk8wRkJTWFpETzBGQmFrSnRSVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQmEwSndSVHM3TzIxRFFVVnBRbWxDTEZFc1JVRkJWVHRCUVVNelFpeFBRVUZKVFN4WFFVRlhMRXRCUVV0RExHTkJRVXdzUTBGQmNVSlFMRk5CUVZNc1EwRkJWQ3hEUVVGeVFpeERRVUZtT3p0QlFVVkJMRTlCUVVsTkxGTkJRVk5GTEUxQlFWUXNSMEZCYTBJc1EwRkJkRUlzUlVGQmVVSTdRVUZEZUVJc1UwRkJTM3BDTEUxQlFVd3NRMEZCV1RCQ0xFZEJRVm9zUTBGQlowSlVMRk5CUVZNc1EwRkJWQ3hEUVVGb1FpeEZRVUUyUWl4SlFVRkpNVUlzVDBGQlNpeERRVUZaTUVJc1UwRkJVeXhEUVVGVUxFTkJRVm9zUlVGQmVVSk5MRkZCUVhwQ0xFVkJRVzFETEV0QlFVc3hRaXhYUVVGNFF5eERRVUUzUWp0QlFVTkJMRWxCUmtRc1RVRkZUenRCUVVOT09FSXNXVUZCVVVNc1IwRkJVaXhEUVVGaExHOUNRVUZyUWxnc1UwRkJVeXhEUVVGVUxFTkJRUzlDTzBGQlEwRTdRVUZEUkRzN08zTkRRVVZ2UWxRc1NTeEZRVUZOTzBGQlFVRTdPMEZCUXpGQ0xGRkJRVXRTTEUxQlFVd3NRMEZCV1RaQ0xFMUJRVm9zUTBGQmJVSnlRaXhMUVVGTFJDeEZRVUY0UWp0QlFVTkJReXhSUVVGTFpTeFJRVUZNTEVOQlFXTlNMRTlCUVdRc1EwRkJkVUlzYlVKQlFWYzdRVUZEYWtNc1YwRkJUeXhQUVVGTGFFSXNZVUZCVEN4RFFVRnRRaXRDTEZGQlFWRkRMRWxCUVROQ0xFTkJRVkE3UVVGRFFTeEpRVVpFTzBGQlIwRjJRaXhSUVVGTFF5eExRVUZNTzBGQlEwRTdPenRwUTBGRlpYVkNMR2RDTEVWQlFXdENPMEZCUTJwRExFOUJRVWxVTEZkQlFWY3NSVUZCWmpzN1FVRkZRU3hSUVVGSkxFbEJRVWxWTEVsQlFVa3NRMEZCV2l4RlFVRmxRU3hKUVVGSlJDeHBRa0ZCYVVKUUxFMUJRWEJETEVWQlFUUkRVU3hIUVVFMVF5eEZRVUZuUkR0QlFVTXZReXhSUVVGSlJpeFBRVUZQUXl4cFFrRkJhVUpETEVOQlFXcENMRU5CUVZnN1FVRkRRU3hSUVVGSlF5eHBRa0ZCYVVKSUxFdEJRVXRKTEV0QlFVd3NRMEZCVnl4TlFVRllMRVZCUVcxQ0xFTkJRVzVDTEVOQlFYSkNPMEZCUTBGS0xGZEJRVTlCTEV0QlFVdEpMRXRCUVV3c1EwRkJWeXhOUVVGWUxFVkJRVzFDTEVOQlFXNUNMRU5CUVZBN08wRkJSVUVzVTBGQlNTeEpRVUZKUXl4SlFVRkpMRU5CUVZvc1JVRkJaVUVzU1VGQlNTeExRVUZMZEVNc2EwSkJRVXdzUTBGQmQwSXlRaXhOUVVFelF5eEZRVUZ0UkZjc1IwRkJia1FzUlVGQmRVUTdRVUZEZEVRc1UwRkJTVU1zVFVGQlRTeExRVUZMZGtNc2EwSkJRVXdzUTBGQmQwSnpReXhEUVVGNFFpeERRVUZXT3p0QlFVVkJMRk5CUVVjc1EwRkJRMHdzU1VGQlJDeEpRVUZUTEVOQlFVTkJMRXRCUVV0UExFdEJRVXdzUTBGQlYwUXNTVUZCU1VVc1MwRkJaaXhEUVVGV0xFbEJRVzFETEV0QlFVdDRReXhoUVVGTUxFTkJRVzFDWjBNc1NVRkJia0lzUTBGQmRFTXNSVUZCWjBVN1FVRkRMMFE3UVVGRFFUczdRVUZGUkN4VFFVRkpSQ3hWUVVGVkxFbEJRVWx5UXl4VlFVRktMRU5CUVdWelF5eEpRVUZtTEVWQlFYRkNUU3hKUVVGSlJ5eEZRVUY2UWl4RlFVRTJRa2dzU1VGQlNVa3NVMEZCYWtNc1EwRkJaRHRCUVVOQkxGVkJRVXN4UXl4aFFVRk1MRU5CUVcxQ1owTXNTVUZCYmtJc1NVRkJNa0pFTEU5QlFUTkNPMEZCUTBGUUxHTkJRVk50UWl4SlFVRlVMRU5CUVdOYUxFOUJRV1E3TzBGQlJVRTdPMEZCUlVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCZFVKQk8wRkJRMFE3TzBGQlJVUXNWVUZCVVZBc1VVRkJVanRCUVVOQk96czdPenM3UVVGSlJtOUNMRTlCUVU5RExFOUJRVkFzUjBGQmFVSnNSQ3hoUVVGcVFpSXNJbVpwYkdVaU9pSlNWRU5EYjI1MGNtOXNiR1Z5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ1VsUkRVR1ZsY2lBOUlISmxjWFZwY21Vb0p5NHZVbFJEVUdWbGNpNXFjeWNwWEc1amIyNXpkQ0JTVkVORGFHRnVibVZzSUQwZ2NtVnhkV2x5WlNnbkxpOVNWRU5EYUdGdWJtVnNMbXB6SnlsY2JseHVYRzVqYkdGemN5QlNWRU5EYjI1MGNtOXNiR1Z5SUh0Y2JseDBZMjl1YzNSeWRXTjBiM0lnS0dSaWRYTlBZbXBsWTNRc0lISmxjWFZsYzNSbFpFTm9ZVzV1Wld4ektTQjdYRzVjZEZ4MGRHaHBjeTVmWkdKMWMwOWlhbVZqZENBOUlHUmlkWE5QWW1wbFkzUmNibHgwWEhSMGFHbHpMbDl5WlhGMVpYTjBaV1JEYUdGdWJtVnNjeUE5SUhKbGNYVmxjM1JsWkVOb1lXNXVaV3h6WEc1Y2RGeDBkR2hwY3k1ZmRYTmxaRU5vWVc1dVpXeHpJRDBnVzExY2JseHVYSFJjZEhSb2FYTXVYM0JsWlhKeklEMGdibVYzSUUxaGNDZ3BYRzVjYmx4MFhIUjBhR2x6TGw5d2NtOXdaWEowYVdWelEyaGhibWRsWkVOaGJHeGlZV05ySUQwZ0tDNHVMbUZ5WjNNcElEMCtJSFJvYVhNdVgzQnliM0JsY25ScFpYTkRhR0Z1WjJWa0tDNHVMbUZ5WjNNcFhHNWNkRngwZEdocGN5NWZaR0oxYzA5aWFtVmpkQzV2YmlnbmNISnZjR1Z5ZEdsbGN5MWphR0Z1WjJWa0p5d2dkR2hwY3k1ZmNISnZjR1Z5ZEdsbGMwTm9ZVzVuWldSRFlXeHNZbUZqYXlsY2JseDBmVnh1WEc1Y2RHTnZibTVsWTNRZ0tDa2dlMXh1WEhSY2RIUm9hWE11WDJSaWRYTlBZbXBsWTNRdWFXNXBkRkJ5YjNCbGNuUnBaWE5EYUdGdVoyVmtVMmxuYm1Gc0tDbGNibHgwWEhSMGFHbHpMbDlrWW5WelQySnFaV04wTG1kbGRFRnNiQ2duWm5JdWNHRnlkRzVsY21sdVp5NVNWRU1uTENCMGNuVmxLVnh1WEhSOVhHNWNibHgwWkdselkyOXVibVZqZENBb0tTQjdYRzVjZEZ4MFptOXlJQ2hzWlhRZ1cybGtMQ0J3WldWeVhjS2diMllnZEdocGN5NWZjR1ZsY25NcElIdGNibHgwWEhSY2RIQmxaWEl1WTJ4dmMyVW9LVnh1WEhSY2RIMWNibHh1WEhSY2RIUm9hWE11WDJSaWRYTlBZbXBsWTNRdWNtVnRiM1psVEdsemRHVnVaWElnS0Nkd2NtOXdaWEowYVdWekxXTm9ZVzVuWldRbkxDQjBhR2x6TGw5d2NtOXdaWEowYVdWelEyaGhibWRsWkVOaGJHeGlZV05yS1Z4dVhIUmNkSFJvYVhNdVgzQnliM0JsY25ScFpYTkRhR0Z1WjJWa1EyRnNiR0poWTJzZ1BTQnVkV3hzWEc1Y2RGeDBkR2hwY3k1ZmRYTmxaRU5vWVc1dVpXeHpJRDBnVzExY2JseDBYSFIwYUdsekxsOWtZblZ6VDJKcVpXTjBMbU5zYjNObElDZ3BYRzVjZEgxY2JseHVYSFJmY0hKdmNHVnlkR2xsYzBOb1lXNW5aV1FnS0dsbVlXTmxMQ0JqYUdGdVoyVmtVSEp2Y0dWeWRHbGxjeXdnYVc1MllXeHBaR0YwWldSUWNtOXdaWEowYVdWektTQjdYRzVjZEZ4MGFXWWdLR05vWVc1blpXUlFjbTl3WlhKMGFXVnpJRDA5SUc1MWJHd2dmSHpDb0dOb1lXNW5aV1JRY205d1pYSjBhV1Z6TGt4dlkyRnNVR1ZsY25NZ1BUMGdiblZzYkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2TDJacGJtUWdZVzVrSUc1dmRHbG1lU0J1WlhjZ2NHVmxjbk5jYmx4MFhIUmphR0Z1WjJWa1VISnZjR1Z5ZEdsbGN5NU1iMk5oYkZCbFpYSnpMbVp2Y2tWaFkyZ29jR1ZsY2tSaGRHRWdQVDRnZTF4dVhIUmNkRngwYVdZZ0tDRjBhR2x6TGw5d1pXVnljeTVvWVhNb2NHVmxja1JoZEdGYk1GMHBLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVYMjl1VUdWbGNrTnZibTVsWTNSbFpDQW9jR1ZsY2tSaGRHRXBYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTbGNibHh1WEhSY2RDOHZabWx1WkNCaGJtUWdibTkwYVdaNUlHUmxiR1YwWldRZ2NHVmxjbk5jYmx4MFhIUm1iM0lnS0d4bGRDQmJjR1ZsY2tsa0xDQndaV1Z5WFNCdlppQjBhR2x6TGw5d1pXVnljeWtnZTF4dVhIUmNkRngwYVdZZ0tDRmphR0Z1WjJWa1VISnZjR1Z5ZEdsbGN5NU1iMk5oYkZCbFpYSnpMbVpwYm1RZ0tIQWdQVDRnY0Zzd1hTQTlQVDBnY0dWbGNrbGtLU2tnZTF4dVhIUmNkRngwWEhSMGFHbHpMbDl2YmxCbFpYSkVhWE5qYjI1dVpXTjBaV1FnS0hCbFpYSXBYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBYMjl1VUdWbGNrTnZibTVsWTNSbFpDQW9jR1ZsY2tSaGRHRXBJSHRjYmx4MFhIUnNaWFFnWTJoaGJtNWxiSE1nUFNCMGFHbHpMbDl0WVhSamFFTm9ZVzV1Wld4eklDaHdaV1Z5UkdGMFlWc3hYU2xjYmx4dVhIUmNkR2xtSUNoamFHRnVibVZzY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzVjZEZ4MFhIUjBhR2x6TGw5d1pXVnljeTV6WlhRb2NHVmxja1JoZEdGYk1GMHNJRzVsZHlCU1ZFTlFaV1Z5S0hCbFpYSkVZWFJoV3pCZExDQmphR0Z1Ym1Wc2N5d2dkR2hwY3k1ZlpHSjFjMDlpYW1WamRDa3BYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEdOdmJuTnZiR1V1Ykc5bklDaGNJbTV2ZENCMWMybHVaeUJ3WldWeUlGd2lLM0JsWlhKRVlYUmhXekJkS1Z4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEY5dmJsQmxaWEpFYVhOamIyNXVaV04wWldRZ0tIQmxaWElwSUh0Y2JseDBYSFIwYUdsekxsOXdaV1Z5Y3k1a1pXeGxkR1VvY0dWbGNpNXBaQ2xjYmx4MFhIUndaV1Z5TG1Ob1lXNXVaV3h6TG1admNrVmhZMmdnS0dOb1lXNXVaV3dnUFQ0Z2UxeHVYSFJjZEZ4MFpHVnNaWFJsSUhSb2FYTXVYM1Z6WldSRGFHRnVibVZzYzF0amFHRnVibVZzTG01aGJXVmRYRzVjZEZ4MGZTbGNibHgwWEhSd1pXVnlMbU5zYjNObEtDbGNibHgwZlZ4dVhHNWNkRjl0WVhSamFFTm9ZVzV1Wld4eklDaHlaV05sYVhabFpFTm9ZVzV1Wld4ektTQjdYRzVjZEZ4MGJHVjBJR05vWVc1dVpXeHpJRDBnVzEwN1hHNWNibHgwWEhSbWIzSW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2NtVmpaV2wyWldSRGFHRnVibVZzY3k1c1pXNW5kR2c3SUdrckt5bDdYRzVjZEZ4MFhIUnNaWFFnYm1GdFpTQTlJSEpsWTJWcGRtVmtRMmhoYm01bGJITmJhVjA3WEc1Y2RGeDBYSFJzWlhRZ2NtVnRiM1JsVTNSeVpXRnRTV1FnUFNCdVlXMWxMbk53YkdsMEtGd2lYenM2WDF3aUtWc3hYVHRjYmx4MFhIUmNkRzVoYldVZ1BTQnVZVzFsTG5Od2JHbDBLRndpWHpzNlgxd2lLVnN3WFR0Y2JseHVYSFJjZEZ4MFptOXlLR3hsZENCcUlEMGdNRHNnYWlBOElIUm9hWE11WDNKbGNYVmxjM1JsWkVOb1lXNXVaV3h6TG14bGJtZDBhRHNnYWlzcktYdGNibHgwWEhSY2RGeDBiR1YwSUhKbGNTQTlJSFJvYVhNdVgzSmxjWFZsYzNSbFpFTm9ZVzV1Wld4elcycGRPMXh1WEhSY2JseDBYSFJjZEZ4MGFXWW9JVzVoYldVZ2ZId2dJVzVoYldVdWJXRjBZMmdvY21WeExuSmxaMlY0S1NCOGZDQjBhR2x6TGw5MWMyVmtRMmhoYm01bGJITmJibUZ0WlYwcElIdGNibHgwWEhSY2RGeDBYSFJqYjI1MGFXNTFaU0JjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2JseDBYSFJjZEZ4MGJHVjBJR05vWVc1dVpXd2dQU0J1WlhjZ1VsUkRRMmhoYm01bGJDaHVZVzFsTENCeVpYRXVZMklzSUhKbGNTNXpkSEpsWVcxZlkySXBYRzVjZEZ4MFhIUmNkSFJvYVhNdVgzVnpaV1JEYUdGdWJtVnNjMXR1WVcxbFhTQTlJR05vWVc1dVpXeGNibHgwWEhSY2RGeDBZMmhoYm01bGJITXVjSFZ6YUNoamFHRnVibVZzS1Z4dVhHNWNkRngwWEhSY2RHSnlaV0ZyWEc1Y2JseDBYSFJjZEZ4MEx5cGNibHgwWEhSY2RGeDBMeThnU1dZZ1lTQnpkSEpsWVcwZ2FXUWdhWE1nY0hKdmRtbGtaV1FnWm05eUlIUm9aU0JqYUdGdWJtVnNMQ0J5WldkcGMzUmxjaUIwYUdVZ2JXRndjR2x1WjF4dVhIUmNkRngwWEhScFppaHlaVzF2ZEdWVGRISmxZVzFKWkNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdVgyTm9ZVzV1Wld4elFubFRkSEpsWVcwZ1BTQjBhR2x6TGw5amFHRnVibVZzYzBKNVUzUnlaV0Z0TG1acGJIUmxjaWdvWTJKektTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1kySnpMbk4wY21WaGJTQWhQVDBnY21WdGIzUmxVM1J5WldGdFNXUWdKaVlnWTJKekxtTm9ZVzV1Wld3Z0lUMDlJR05vWVc1dVpXeGNibHgwWEhSY2RGeDBYSFI5S1Z4dVhIUmNkRngwWEhSY2RIUm9hWE11WDJOb1lXNXVaV3h6UW5sVGRISmxZVzB1Y0hWemFDaDdYRzVjZEZ4MFhIUmNkRngwWEhSemRISmxZVzA2SUhKbGJXOTBaVk4wY21WaGJVbGtMQ0JjYmx4MFhIUmNkRngwWEhSY2RHTm9ZVzV1Wld3NklHTm9ZVzV1Wld4Y2JseDBYSFJjZEZ4MFhIUjlLVnh1WEhSY2RGeDBYSFJjZEdOb1lXNXVaV3d1YzNSeVpXRnRTV1FnUFNCemRISmxZVzFKWkZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RDOHZiR1YwSUd4dlkyRnNVM1J5WldGdFNXUWdQU0IwYUdGMExtTm9ZVzV1Wld4elFubFRkSEpsWVcwdVptbHNkR1Z5S0daMWJtTjBhVzl1S0dOaWN5bDdjbVYwZFhKdUlHTmljeTVqYUdGdWJtVnNJRDA5UFNCdVlXMWxPeUI5S1Zzd1hUc2dWRTlFVHpvZ2QyaGhkQ2R6SUhSb1lYUWdaMnh2WW1Gc0lHTm9ZVzV1Wld4elFubFRkSEpsWVcwZ2IySnFJRDhoWEc1Y2RGeDBYSFJjZEdsbUtHeHZZMkZzVTNSeVpXRnRTV1FwSUh0Y2JseDBYSFJjZEZ4MFhIUjBhR2x6TGw5amFHRnVibVZzYzBKNVUzUnlaV0Z0SUQwZ2RHaHBjeTVmWTJoaGJtNWxiSE5DZVZOMGNtVmhiUzVtYVd4MFpYSW9LR05pY3lrZ1BUNGdlMXh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdOaWN5NXpkSEpsWVcwZ0lUMDlJR3h2WTJGc1UzUnlaV0Z0U1dRZ0ppWWdZMkp6TG1Ob1lXNXVaV3dnSVQwOUlHNWhiV1ZjYmx4MFhIUmNkRngwWEhSOUtWeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdVgyTm9ZVzV1Wld4elFubFRkSEpsWVcwdWNIVnphQ2g3WEc1Y2RGeDBYSFJjZEZ4MFhIUnpkSEpsWVcwNklHeHZZMkZzVTNSeVpXRnRTV1FzSUZ4dVhIUmNkRngwWEhSY2RGeDBZMmhoYm01bGJEb2dibUZ0WlZ4dVhIUmNkRngwWEhSY2RIMHBYRzVjZEZ4MFhIUmNkRngwWTJoaGJtNWxiQzVzYjJOaGJGTjBjbVZoYlVsa0lEMGdiRzlqWVd4VGRISmxZVzFKWkZ4dVhIUmNkRngwWEhSOUtpOWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnSUdOb1lXNXVaV3h6TzF4dVhIUjlYRzU5WEc1Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNWRU5EYjI1MGNtOXNiR1Z5WEc0aVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ25vZGUtZXZlbnQtZW1pdHRlcicpO1xudmFyIG1lc3NhZ2VpZnkgPSByZXF1aXJlKCcuL21lc3NhZ2VpZnktYnJvd3Nlci5qcycpO1xuXG52YXIgUlRDUGVlciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG5cdF9pbmhlcml0cyhSVENQZWVyLCBfRXZlbnRFbWl0dGVyKTtcblxuXHRmdW5jdGlvbiBSVENQZWVyKGlkLCBjaGFubmVscywgZGJ1c09iamVjdCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSVENQZWVyKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSVENQZWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUlRDUGVlcikpLmNhbGwodGhpcykpO1xuXG5cdFx0X3RoaXMuaWQgPSBpZDtcblx0XHRfdGhpcy5jaGFubmVscyA9IGNoYW5uZWxzO1xuXHRcdF90aGlzLl9kYnVzT2JqZWN0ID0gZGJ1c09iamVjdDtcblxuXHRcdC8vZGVmYXVsdCB0dXJuIHNlcnZlcnNcdFxuXHRcdF90aGlzLl90dXJuU2VydmVycyA9IFt7IHVybHM6IFtcInN0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDJcIl0gfV07XG5cblx0XHRfdGhpcy5fY29ubmVjdCgpO1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhSVENQZWVyLCBbe1xuXHRcdGtleTogJ2Nsb3NlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0Y29uc29sZS5sb2coXCJQZWVyIFwiICsgdGhpcy5pZCArIFwiIGNsb3NlZCAhXCIpO1xuXHRcdFx0dGhpcy5jaGFubmVscy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG5cdFx0XHRcdHJldHVybiBjLmNsb3NlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuY2hhbm5lbHMgPSBbXTtcblxuXHRcdFx0dGhpcy5fc2VuZFNpZ25hbGluZ01lc3NhZ2Uoe1xuXHRcdFx0XHRmdW5jOiAnQ2xvc2UnXG5cdFx0XHR9KTtcblxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdF90aGlzMi5fZGlzY29ubmVjdFNpZ25hbGluZygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmICh0aGlzLl9wZWVyQ29ubmVjdGlvbiA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3BlZXJDb25uZWN0aW9uLmNsb3NlKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX2Nvbm5lY3QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfY29ubmVjdCgpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwidHJ5aW5nIHRvIGNvbm5lY3QgdG8gcGVlciBcIiArIHRoaXMuaWQgKyBcIi4uLlwiKTtcblxuXHRcdFx0dGhpcy5fY29ubmVjdFNpZ25hbGluZygpO1xuXHRcdH1cblxuXHRcdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLyBTaWduYWxpbmcgbWV0aG9kcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdfY29ubmVjdFNpZ25hbGluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9jb25uZWN0U2lnbmFsaW5nKCkge1xuXHRcdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRcdHRoaXMuX2RidXNPYmplY3QuY2FsbCgnZnIucGFydG5lcmluZy5SVEMuQ29ubmVjdCcsIHtcblx0XHRcdFx0bG9jYWxQZWVySWQ6IHRoaXMuaWQsXG5cdFx0XHRcdGNoYW5uZWxzOiB0aGlzLmNoYW5uZWxzLm1hcChmdW5jdGlvbiAoYykge1xuXHRcdFx0XHRcdHJldHVybiBjLm5hbWU7XG5cdFx0XHRcdH0pXG5cdFx0XHR9LCBmdW5jdGlvbiAoXywgZXJyLCBzZXNzaW9uVG9rZW4pIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJzZXNzaW9uIHRva2VuIGZvciBwZWVyIFwiICsgX3RoaXMzLmlkICsgXCIgOiBcIiArIHNlc3Npb25Ub2tlbik7XG5cdFx0XHRcdF90aGlzMy5fZGJ1c09iamVjdC5fZDFpbnN0KF90aGlzMy5fZGJ1c09iamVjdC5fcGVlcklkKS5vcGVuU29ja2V0KCcvdmFyL3J1bi9kaXlhL3J0Yy5zb2NrJywgZnVuY3Rpb24gKF8sIGVyciwgc29ja2V0KSB7XG5cdFx0XHRcdFx0c29ja2V0LndyaXRlKHNlc3Npb25Ub2tlbiArICdcXG4nKTtcblxuXHRcdFx0XHRcdF90aGlzMy5fb25TaWduYWxpbmdDb25uZWN0ZWQobWVzc2FnZWlmeShzb2NrZXQpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfZGlzY29ubmVjdFNpZ25hbGluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9kaXNjb25uZWN0U2lnbmFsaW5nKCkge1xuXHRcdFx0Y29uc29sZS5sb2coJ2Rpc2Nvbm5lY3Rpbmcgc2lnbmFsaW5nIGZvciBwZWVyICcgKyB0aGlzLmlkKTtcblx0XHRcdHRoaXMuX3NpZ25hbGluZy5kaXNjb25uZWN0KCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX29uU2lnbmFsaW5nQ29ubmVjdGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uU2lnbmFsaW5nQ29ubmVjdGVkKHNvY2tldCkge1xuXHRcdFx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdzaWduYWxpbmcgY29ubmVjdGVkIGZvciBwZWVyICcgKyB0aGlzLmlkKTtcblx0XHRcdHRoaXMuX3NpZ25hbGluZyA9IHNvY2tldDtcblxuXHRcdFx0dGhpcy5fc2lnbmFsaW5nLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0X3RoaXM0Ll9vblNpZ25hbGluZ01lc3NhZ2UoSlNPTi5wYXJzZShkYXRhKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfc2VuZFNpZ25hbGluZ01lc3NhZ2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfc2VuZFNpZ25hbGluZ01lc3NhZ2UobWVzc2FnZSkge1xuXHRcdFx0dmFyIGRhdGEgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcblx0XHRcdHRoaXMuX3NpZ25hbGluZy5zZW5kTWVzc2FnZShkYXRhKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25TaWduYWxpbmdNZXNzYWdlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uU2lnbmFsaW5nTWVzc2FnZShtZXNzYWdlKSB7XG5cdFx0XHRzd2l0Y2ggKG1lc3NhZ2UuZnVuYykge1xuXHRcdFx0XHRjYXNlIFwiVHVybkluZm9cIjpcblx0XHRcdFx0XHR0aGlzLl9vblR1cm5JbmZvKG1lc3NhZ2UpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiUmVtb3RlT2ZmZXJcIjpcblx0XHRcdFx0XHR0aGlzLl9vblJlbW90ZU9mZmVyKG1lc3NhZ2UpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiUmVtb3RlSUNFQ2FuZGlkYXRlXCI6XG5cdFx0XHRcdFx0dGhpcy5fb25SZW1vdGVJQ0VDYW5kaWRhdGUobWVzc2FnZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLy8vLy8vIFJlbW90ZSBwZWVyIG1lc3NhZ2VzIGhhbmRsaW5nICAgICAvLy8vLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0fSwge1xuXHRcdGtleTogJ19vblR1cm5JbmZvJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uVHVybkluZm8odHVybkluZm9zKSB7XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkodHVybkluZm9zLnNlcnZlcnMpKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX3R1cm5TZXJ2ZXJzID0gdHVybkluZm9zLnNlcnZlcnMubWFwKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR1cmxzOiBbc2VydmVyLnVybF0sXG5cdFx0XHRcdFx0dXNlcm5hbWU6IHNlcnZlci51c2VybmFtZSxcblx0XHRcdFx0XHRjcmVkZW50aWFsOiBzZXJ2ZXIucGFzc3dvcmRcblx0XHRcdFx0fTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vblJlbW90ZU9mZmVyJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uUmVtb3RlT2ZmZXIob2ZmZXIpIHtcblx0XHRcdHZhciBfdGhpczUgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG5cdFx0XHRcdGljZVNlcnZlcnM6IHRoaXMuX3R1cm5TZXJ2ZXJzLFxuXHRcdFx0XHRpY2VUcmFuc3BvcnRQb2xpY3k6ICdhbGwnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdG1hbmRhdG9yeToge1xuXHRcdFx0XHRcdER0bHNTcnRwS2V5QWdyZWVtZW50OiB0cnVlLFxuXHRcdFx0XHRcdE9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsXG5cdFx0XHRcdFx0T2ZmZXJUb1JlY2VpdmVWaWRlbzogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Lyp0aGlzLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzKSB7IHBlZXIuYWRkU3RyZWFtKHMpO30pOyovXG5cblx0XHRcdHRoaXMuX3BlZXJDb25uZWN0aW9uLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuXHRcdFx0XHRzZHA6IG9mZmVyLnNkcCxcblx0XHRcdFx0dHlwZTogb2ZmZXIudHlwZVxuXHRcdFx0fSkpO1xuXG5cdFx0XHR0aGlzLl9wZWVyQ29ubmVjdGlvbi5jcmVhdGVBbnN3ZXIoZnVuY3Rpb24gKGxvY2FsU0RQKSB7XG5cdFx0XHRcdHJldHVybiBfdGhpczUuX29uTG9jYWxTRFAobG9jYWxTRFApO1xuXHRcdFx0fSwgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRyZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0fSwgeyBtYW5kYXRvcnk6IHsgT2ZmZXJUb1JlY2VpdmVBdWRpbzogdHJ1ZSwgT2ZmZXJUb1JlY2VpdmVWaWRlbzogdHJ1ZSB9IH0pO1xuXG5cdFx0XHR0aGlzLl9wZWVyQ29ubmVjdGlvbi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzNS5fb25JQ0VDb25uZWN0aW9uU3RhdGVDaGFuZ2UoKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLl9wZWVyQ29ubmVjdGlvbi5vbmljZWNhbmRpZGF0ZSA9IGZ1bmN0aW9uIChjYW5kaWRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzNS5fb25Mb2NhbElDRUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuXHRcdFx0fTtcblx0XHRcdHRoaXMuX3BlZXJDb25uZWN0aW9uLm9uZGF0YWNoYW5uZWwgPSBmdW5jdGlvbiAoY2hhbm5lbCkge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXM1Ll9vbkRhdGFDaGFubmVsKGNoYW5uZWwpO1xuXHRcdFx0fTtcblx0XHRcdHRoaXMuX3BlZXJDb25uZWN0aW9uLm9uYWRkc3RyZWFtID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXM1Ll9vbkFkZFN0cmVhbShzdHJlYW0pO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25SZW1vdGVJQ0VDYW5kaWRhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVJQ0VDYW5kaWRhdGUoZXZ0KSB7XG5cdFx0XHR2YXIgY2FuZGlkYXRlID0gbmV3IFJUQ0ljZUNhbmRpZGF0ZShldnQuY2FuZGlkYXRlKTtcblx0XHRcdHRoaXMuX3BlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShjYW5kaWRhdGUsIGZ1bmN0aW9uICgpIHt9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcdC8vLy8vLyBsb2NhbCBwZWVyIGNvbm5lY3Rpb24gZXZlbnRzIC8vLy8vLy8vLy9cblx0XHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX29uTG9jYWxTRFAnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25Mb2NhbFNEUChsb2NhbFNEUCkge1xuXHRcdFx0dGhpcy5fcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihsb2NhbFNEUCk7XG5cblx0XHRcdHRoaXMuX3NlbmRTaWduYWxpbmdNZXNzYWdlKHtcblx0XHRcdFx0ZnVuYzogXCJBbnN3ZXJcIixcblx0XHRcdFx0dHlwZTogbG9jYWxTRFAudHlwZSxcblx0XHRcdFx0c2RwOiBsb2NhbFNEUC5zZHBcblx0XHRcdH0pO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vbkxvY2FsSUNFQ2FuZGlkYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uTG9jYWxJQ0VDYW5kaWRhdGUoZXZ0KSB7XG5cdFx0XHR0aGlzLl9zZW5kU2lnbmFsaW5nTWVzc2FnZSh7XG5cdFx0XHRcdGZ1bmM6ICdJQ0VDYW5kaWRhdGUnLFxuXHRcdFx0XHRjYW5kaWRhdGU6IGV2dC5jYW5kaWRhdGVcblx0XHRcdH0pO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vbklDRUNvbm5lY3Rpb25TdGF0ZUNoYW5nZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9vbklDRUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSgpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiSUNFIGNvbm5lY3Rpb24gc3RhdGUgOiBcIiArIHRoaXMuX3BlZXJDb25uZWN0aW9uLmljZUNvbm5lY3Rpb25TdGF0ZSk7XG5cdFx0XHQvKmlmKHBlZXIuaWNlQ29ubmVjdGlvblN0YXRlID09PSAnY29ubmVjdGVkJyl7XG4gICBcdHRoYXQuY29ubmVjdGVkID0gdHJ1ZTtcbiAgIFx0aWYodGhhdC5zdWJzY3JpcHRpb24pIHRoYXQuc3Vic2NyaXB0aW9uLmNsb3NlKCk7XG4gICB9XG4gICBlbHNlIGlmKHBlZXIuaWNlQ29ubmVjdGlvblN0YXRlID09PSAnZGlzY29ubmVjdGVkJyB8fCBwZWVyLmljZUNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nsb3NlZCcgfHwgcGVlci5pY2VDb25uZWN0aW9uU3RhdGUgPT09ICdmYWlsZWQnKXtcbiAgIFx0aWYoIXRoYXQuY2xvc2VkKSB0aGF0Ll9yZWNvbm5lY3QoKTtcbiAgIH0qL1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vbkRhdGFDaGFubmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uRGF0YUNoYW5uZWwoZXZ0KSB7XG5cdFx0XHR2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZmluZChmdW5jdGlvbiAoYykge1xuXHRcdFx0XHRyZXR1cm4gYy5uYW1lID09PSBldnQuY2hhbm5lbC5sYWJlbDtcblx0XHRcdH0pO1xuXHRcdFx0aWYgKGNoYW5uZWwgPT0gbnVsbCkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oJ25vIG1hdGNoaW5nIGNoYW5uZWwgZm91bmQgZm9yICcgKyBldnQuY2hhbm5lbC5sYWJlbCArICcuIENsb3NpbmcuLi4nKTtcblx0XHRcdFx0ZXZ0LmNoYW5uZWwuY2xvc2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjaGFubmVsLnNldERhdGFDaGFubmVsKGV2dC5jaGFubmVsKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdfb25BZGRTdHJlYW0nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25BZGRTdHJlYW0oc3RyZWFtKSB7XG5cdFx0XHQvKnRoYXQuY29ubmVjdGVkID0gdHJ1ZTtcbiAgIHRoYXQucnRjLl9vbkFkZFN0cmVhbSh0aGF0LmRuSWQsIGV2dC5zdHJlYW0pOyovXG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFJUQ1BlZXI7XG59KEV2ZW50RW1pdHRlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gUlRDUGVlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSlVRMUJsWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpUlhabGJuUkZiV2wwZEdWeUlpd2ljbVZ4ZFdseVpTSXNJbTFsYzNOaFoyVnBabmtpTENKU1ZFTlFaV1Z5SWl3aWFXUWlMQ0pqYUdGdWJtVnNjeUlzSW1SaWRYTlBZbXBsWTNRaUxDSmZaR0oxYzA5aWFtVmpkQ0lzSWw5MGRYSnVVMlZ5ZG1WeWN5SXNJblZ5YkhNaUxDSmZZMjl1Ym1WamRDSXNJbU52Ym5OdmJHVWlMQ0pzYjJjaUxDSm1iM0pGWVdOb0lpd2lZeUlzSW1Oc2IzTmxJaXdpWDNObGJtUlRhV2R1WVd4cGJtZE5aWE56WVdkbElpd2lablZ1WXlJc0luTmxkRlJwYldWdmRYUWlMQ0pmWkdselkyOXVibVZqZEZOcFoyNWhiR2x1WnlJc0lsOXdaV1Z5UTI5dWJtVmpkR2x2YmlJc0lsOWpiMjV1WldOMFUybG5ibUZzYVc1bklpd2lZMkZzYkNJc0lteHZZMkZzVUdWbGNrbGtJaXdpYldGd0lpd2libUZ0WlNJc0lsOGlMQ0psY25JaUxDSnpaWE56YVc5dVZHOXJaVzRpTENKZlpERnBibk4wSWl3aVgzQmxaWEpKWkNJc0ltOXdaVzVUYjJOclpYUWlMQ0p6YjJOclpYUWlMQ0ozY21sMFpTSXNJbDl2YmxOcFoyNWhiR2x1WjBOdmJtNWxZM1JsWkNJc0lsOXphV2R1WVd4cGJtY2lMQ0prYVhOamIyNXVaV04wSWl3aWIyNGlMQ0pmYjI1VGFXZHVZV3hwYm1kTlpYTnpZV2RsSWl3aVNsTlBUaUlzSW5CaGNuTmxJaXdpWkdGMFlTSXNJbTFsYzNOaFoyVWlMQ0p6ZEhKcGJtZHBabmtpTENKelpXNWtUV1Z6YzJGblpTSXNJbDl2YmxSMWNtNUpibVp2SWl3aVgyOXVVbVZ0YjNSbFQyWm1aWElpTENKZmIyNVNaVzF2ZEdWSlEwVkRZVzVrYVdSaGRHVWlMQ0owZFhKdVNXNW1iM01pTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKelpYSjJaWEp6SWl3aWMyVnlkbVZ5SWl3aWRYSnNJaXdpZFhObGNtNWhiV1VpTENKamNtVmtaVzUwYVdGc0lpd2ljR0Z6YzNkdmNtUWlMQ0p2Wm1abGNpSXNJbEpVUTFCbFpYSkRiMjV1WldOMGFXOXVJaXdpYVdObFUyVnlkbVZ5Y3lJc0ltbGpaVlJ5WVc1emNHOXlkRkJ2YkdsamVTSXNJbTFoYm1SaGRHOXllU0lzSWtSMGJITlRjblJ3UzJWNVFXZHlaV1Z0Wlc1MElpd2lUMlptWlhKVWIxSmxZMlZwZG1WQmRXUnBieUlzSWs5bVptVnlWRzlTWldObGFYWmxWbWxrWlc4aUxDSnpaWFJTWlcxdmRHVkVaWE5qY21sd2RHbHZiaUlzSWxKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJpSXNJbk5rY0NJc0luUjVjR1VpTENKamNtVmhkR1ZCYm5OM1pYSWlMQ0pmYjI1TWIyTmhiRk5FVUNJc0lteHZZMkZzVTBSUUlpd2laWEp5YjNJaUxDSnZibWxqWldOdmJtNWxZM1JwYjI1emRHRjBaV05vWVc1blpTSXNJbDl2YmtsRFJVTnZibTVsWTNScGIyNVRkR0YwWlVOb1lXNW5aU0lzSW05dWFXTmxZMkZ1Wkdsa1lYUmxJaXdpWDI5dVRHOWpZV3hKUTBWRFlXNWthV1JoZEdVaUxDSmpZVzVrYVdSaGRHVWlMQ0p2Ym1SaGRHRmphR0Z1Ym1Wc0lpd2lYMjl1UkdGMFlVTm9ZVzV1Wld3aUxDSmphR0Z1Ym1Wc0lpd2liMjVoWkdSemRISmxZVzBpTENKZmIyNUJaR1JUZEhKbFlXMGlMQ0p6ZEhKbFlXMGlMQ0psZG5RaUxDSlNWRU5KWTJWRFlXNWthV1JoZEdVaUxDSmhaR1JKWTJWRFlXNWthV1JoZEdVaUxDSnpaWFJNYjJOaGJFUmxjMk55YVhCMGFXOXVJaXdpYVdObFEyOXVibVZqZEdsdmJsTjBZWFJsSWl3aVptbHVaQ0lzSW14aFltVnNJaXdpZDJGeWJpSXNJbk5sZEVSaGRHRkRhR0Z1Ym1Wc0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3p0QlFVRkJMRWxCUVUxQkxHVkJRV1ZETEZGQlFWRXNiMEpCUVZJc1EwRkJja0k3UVVGRFFTeEpRVUZOUXl4aFFVRmhSQ3hSUVVGUkxIbENRVUZTTEVOQlFXNUNPenRKUVVWTlJTeFBPenM3UVVGRFRDeHJRa0ZCWVVNc1JVRkJZaXhGUVVGcFFrTXNVVUZCYWtJc1JVRkJNa0pETEZWQlFUTkNMRVZCUVhWRE8wRkJRVUU3TzBGQlFVRTdPMEZCUlhSRExGRkJRVXRHTEVWQlFVd3NSMEZCVlVFc1JVRkJWanRCUVVOQkxGRkJRVXRETEZGQlFVd3NSMEZCWjBKQkxGRkJRV2hDTzBGQlEwRXNVVUZCUzBVc1YwRkJUQ3hIUVVGdFFrUXNWVUZCYmtJN08wRkJSVUU3UVVGRFFTeFJRVUZMUlN4WlFVRk1MRWRCUVc5Q0xFTkJRVVVzUlVGQlEwTXNUVUZCVFN4RFFVRkZMRGhDUVVGR0xFTkJRVkFzUlVGQlJpeERRVUZ3UWpzN1FVRkZRU3hSUVVGTFF5eFJRVUZNTzBGQlZITkRPMEZCVlhSRE96czdPekJDUVVWUk8wRkJRVUU3TzBGQlExSkRMRmRCUVZGRExFZEJRVklzUTBGQldTeFZRVUZSTEV0QlFVdFNMRVZCUVdJc1IwRkJaMElzVjBGQk5VSTdRVUZEUVN4UlFVRkxReXhSUVVGTUxFTkJRV05STEU5QlFXUXNRMEZCZFVJN1FVRkJRU3hYUVVGTFF5eEZRVUZGUXl4TFFVRkdMRVZCUVV3N1FVRkJRU3hKUVVGMlFqdEJRVU5CTEZGQlFVdFdMRkZCUVV3c1IwRkJaMElzUlVGQmFFSTdPMEZCUjBFc1VVRkJTMWNzY1VKQlFVd3NRMEZCTkVJN1FVRkRNMEpETEZWQlFVMDdRVUZFY1VJc1NVRkJOVUk3TzBGQlNVRkRMR05CUVZjc1dVRkJUVHRCUVVOb1FpeFhRVUZMUXl4dlFrRkJURHRCUVVOQkxFbEJSa1E3TzBGQlNVRXNUMEZCU1N4TFFVRkxReXhsUVVGTUxFbEJRWGRDTEVsQlFUVkNMRVZCUVd0RE8wRkJRMnBETzBGQlEwRTdRVUZEUkN4UlFVRkxRU3hsUVVGTUxFTkJRWEZDVEN4TFFVRnlRanRCUVVOQk96czdOa0pCUlZjN1FVRkRXRW9zVjBGQlVVTXNSMEZCVWl4RFFVRlpMQ3RDUVVFMlFpeExRVUZMVWl4RlFVRnNReXhIUVVGeFF5eExRVUZxUkRzN1FVRkZRU3hSUVVGTGFVSXNhVUpCUVV3N1FVRkRRVHM3UVVGRlJEdEJRVU5CTzBGQlEwRTdPenM3YzBOQlJYRkNPMEZCUVVFN08wRkJRM0JDTEZGQlFVdGtMRmRCUVV3c1EwRkJhVUpsTEVsQlFXcENMRU5CUVhOQ0xESkNRVUYwUWl4RlFVRnRSRHRCUVVOc1JFTXNhVUpCUVdFc1MwRkJTMjVDTEVWQlJHZERPMEZCUld4RVF5eGpRVUZWTEV0QlFVdEJMRkZCUVV3c1EwRkJZMjFDTEVkQlFXUXNRMEZCYlVJN1FVRkJRU3haUVVGTFZpeEZRVUZGVnl4SlFVRlFPMEZCUVVFc1MwRkJia0k3UVVGR2QwTXNTVUZCYmtRc1JVRkhSeXhWUVVGRFF5eERRVUZFTEVWQlFVbERMRWRCUVVvc1JVRkJVME1zV1VGQlZDeEZRVUV3UWp0QlFVTTFRbXBDTEZsQlFWRkRMRWRCUVZJc1EwRkJXU3cwUWtGQk1FSXNUMEZCUzFJc1JVRkJMMElzUjBGQmEwTXNTMEZCYkVNc1IwRkJkME4zUWl4WlFVRndSRHRCUVVOQkxGZEJRVXR5UWl4WFFVRk1MRU5CUVdsQ2MwSXNUMEZCYWtJc1EwRkJlVUlzVDBGQlMzUkNMRmRCUVV3c1EwRkJhVUoxUWl4UFFVRXhReXhGUVVGdFJFTXNWVUZCYmtRc1EwRkJPRVFzZDBKQlFUbEVMRVZCUVhkR0xGVkJRVU5NTEVOQlFVUXNSVUZCU1VNc1IwRkJTaXhGUVVGVFN5eE5RVUZVTEVWQlFXOUNPMEZCUXpOSFFTeFpRVUZQUXl4TFFVRlFMRU5CUVdkQ1RDeFpRVUZvUWpzN1FVRkZRU3haUVVGTFRTeHhRa0ZCVEN4RFFVRXlRbWhETEZkQlFWYzRRaXhOUVVGWUxFTkJRVE5DTzBGQlEwRXNTMEZLUkR0QlFVdEJMRWxCVmtRN1FVRlhRVHM3TzNsRFFVVjFRanRCUVVOMlFuSkNMRmRCUVZGRExFZEJRVklzZFVOQlFXZEVMRXRCUVV0U0xFVkJRWEpFTzBGQlEwRXNVVUZCU3l0Q0xGVkJRVXdzUTBGQlowSkRMRlZCUVdoQ08wRkJRMEU3T3p0M1EwRkZjMEpLTEUwc1JVRkJVVHRCUVVGQk96dEJRVU01UW5KQ0xGZEJRVkZETEVkQlFWSXNRMEZCV1N4clEwRkJaME1zUzBGQlMxSXNSVUZCYWtRN1FVRkRRU3hSUVVGTEswSXNWVUZCVEN4SFFVRnJRa2dzVFVGQmJFSTdPMEZCUlVFc1VVRkJTMGNzVlVGQlRDeERRVUZuUWtVc1JVRkJhRUlzUTBGQmJVSXNVMEZCYmtJc1JVRkJPRUlzWjBKQlFWRTdRVUZEY2tNc1YwRkJTME1zYlVKQlFVd3NRMEZCZVVKRExFdEJRVXRETEV0QlFVd3NRMEZCVjBNc1NVRkJXQ3hEUVVGNlFqdEJRVU5CTEVsQlJrUTdRVUZIUVRzN08zZERRVVZ6UWtNc1R5eEZRVUZUTzBGQlF5OUNMRTlCUVVsRUxFOUJRVTlHTEV0QlFVdEpMRk5CUVV3c1EwRkJaMEpFTEU5QlFXaENMRU5CUVZnN1FVRkRRU3hSUVVGTFVDeFZRVUZNTEVOQlFXZENVeXhYUVVGb1FpeERRVUUyUWtnc1NVRkJOMEk3UVVGRFFUczdPM05EUVVWdlFrTXNUeXhGUVVGVE8wRkJRemRDTEZkQlFWRkJMRkZCUVZGNlFpeEpRVUZvUWp0QlFVTkRMRk5CUVVzc1ZVRkJURHRCUVVORExGVkJRVXMwUWl4WFFVRk1MRU5CUVd0Q1NDeFBRVUZzUWp0QlFVTkJPMEZCUTBRc1UwRkJTeXhoUVVGTU8wRkJRME1zVlVGQlMwa3NZMEZCVEN4RFFVRnhRa29zVDBGQmNrSTdRVUZEUVR0QlFVTkVMRk5CUVVzc2IwSkJRVXc3UVVGRFF5eFZRVUZMU3l4eFFrRkJUQ3hEUVVFMFFrd3NUMEZCTlVJN1FVRkRRVHRCUVVORU8wRkJRME03UVVGWVJqdEJRV0ZCT3p0QlFVVkVPMEZCUTBFN1FVRkRRVHM3T3pzNFFrRkZZVTBzVXl4RlFVRlhPMEZCUTNaQ0xFOUJRVWtzUTBGQlEwTXNUVUZCVFVNc1QwRkJUaXhEUVVGalJpeFZRVUZWUnl4UFFVRjRRaXhEUVVGTUxFVkJRWFZET3p0QlFVVjJReXhSUVVGTE0wTXNXVUZCVEN4SFFVRnZRbmRETEZWQlFWVkhMRTlCUVZZc1EwRkJhMEl6UWl4SFFVRnNRaXhEUVVGelFpeHJRa0ZCVlR0QlFVTnVSQ3hYUVVGUE8wRkJRMDVtTEZkQlFVMHNRMEZCUlRKRExFOUJRVTlETEVkQlFWUXNRMEZFUVR0QlFVVk9ReXhsUVVGVlJpeFBRVUZQUlN4UlFVWllPMEZCUjA1RExHbENRVUZaU0N4UFFVRlBTVHRCUVVoaUxFdEJRVkE3UVVGTFFTeEpRVTV0UWl4RFFVRndRanRCUVU5Qk96czdhVU5CUldWRExFc3NSVUZCVHp0QlFVRkJPenRCUVVOMFFpeFJRVUZMY2tNc1pVRkJUQ3hIUVVGMVFpeEpRVUZKYzBNc2FVSkJRVW9zUTBGQmMwSTdRVUZETlVORExHZENRVUZaTEV0QlFVdHVSQ3haUVVReVFqdEJRVVUxUTI5RUxIZENRVUZ2UWp0QlFVWjNRaXhKUVVGMFFpeEZRVWR3UWp0QlFVTkdReXhsUVVGWE8wRkJRMVpETERKQ1FVRnpRaXhKUVVSYU8wRkJSVlpETERCQ1FVRnhRaXhKUVVaWU8wRkJSMVpETERCQ1FVRnZRanRCUVVoV08wRkJSRlFzU1VGSWIwSXNRMEZCZGtJN08wRkJWMEU3TzBGQlJVRXNVVUZCU3pWRExHVkJRVXdzUTBGQmNVSTJReXh2UWtGQmNrSXNRMEZCTUVNc1NVRkJTVU1zY1VKQlFVb3NRMEZCTUVJN1FVRkRia1ZETEZOQlFVdFdMRTFCUVUxVkxFZEJSSGRFTzBGQlJXNUZReXhWUVVGTldDeE5RVUZOVnp0QlFVWjFSQ3hKUVVFeFFpeERRVUV4UXpzN1FVRkxRU3hSUVVGTGFFUXNaVUZCVEN4RFFVRnhRbWxFTEZsQlFYSkNMRU5CUTBNN1FVRkJRU3hYUVVGWkxFOUJRVXRETEZkQlFVd3NRMEZCYVVKRExGRkJRV3BDTEVOQlFWbzdRVUZCUVN4SlFVUkVMRVZCUlVNN1FVRkJRU3hYUVVGUE5VUXNVVUZCVVRaRUxFdEJRVklzUTBGQlpUZERMRWRCUVdZc1EwRkJVRHRCUVVGQkxFbEJSa1FzUlVGSFF5eEZRVUZGYTBNc1YwRkJWeXhGUVVGSFJTeHhRa0ZCY1VJc1NVRkJlRUlzUlVGQk9FSkRMSEZDUVVGeFFpeEpRVUZ1UkN4RlFVRmlMRVZCU0VRN08wRkJUVUVzVVVGQlN6VkRMR1ZCUVV3c1EwRkJjVUp4UkN3d1FrRkJja0lzUjBGQmEwUTdRVUZCUVN4WFFVRk5MRTlCUVV0RExESkNRVUZNTEVWQlFVNDdRVUZCUVN4SlFVRnNSRHRCUVVOQkxGRkJRVXQwUkN4bFFVRk1MRU5CUVhGQ2RVUXNZMEZCY2tJc1IwRkJjME03UVVGQlFTeFhRVUZoTEU5QlFVdERMRzlDUVVGTUxFTkJRVEpDUXl4VFFVRXpRaXhEUVVGaU8wRkJRVUVzU1VGQmRFTTdRVUZEUVN4UlFVRkxla1FzWlVGQlRDeERRVUZ4UWpCRUxHRkJRWEpDTEVkQlFYRkRPMEZCUVVFc1YwRkJWeXhQUVVGTFF5eGpRVUZNTEVOQlFYRkNReXhQUVVGeVFpeERRVUZZTzBGQlFVRXNTVUZCY2tNN1FVRkRRU3hSUVVGTE5VUXNaVUZCVEN4RFFVRnhRalpFTEZkQlFYSkNMRWRCUVcxRE8wRkJRVUVzVjBGQlZTeFBRVUZMUXl4WlFVRk1MRU5CUVcxQ1F5eE5RVUZ1UWl4RFFVRldPMEZCUVVFc1NVRkJia003UVVGRFFUczdPM2REUVVWelFrTXNSeXhGUVVGTE8wRkJRek5DTEU5QlFVbFFMRmxCUVZrc1NVRkJTVkVzWlVGQlNpeERRVUZ2UWtRc1NVRkJTVkFzVTBGQmVFSXNRMEZCYUVJN1FVRkRRU3hSUVVGTGVrUXNaVUZCVEN4RFFVRnhRbXRGTEdWQlFYSkNMRU5CUVhGRFZDeFRRVUZ5UXl4RlFVRm5SQ3haUVVGTkxFTkJRVVVzUTBGQmVFUXNSVUZCTUVRN1FVRkJRU3hYUVVGUGJFVXNVVUZCVVVNc1IwRkJVaXhEUVVGWlpTeEhRVUZhTEVOQlFWQTdRVUZCUVN4SlFVRXhSRHRCUVVOQk96dEJRVVZFTzBGQlEwRTdRVUZEUVRzN096czdPRUpCUjJFMFF5eFJMRVZCUVZVN1FVRkRkRUlzVVVGQlMyNUVMR1ZCUVV3c1EwRkJjVUp0UlN4dFFrRkJja0lzUTBGQmVVTm9RaXhSUVVGNlF6czdRVUZGUVN4UlFVRkxka1FzY1VKQlFVd3NRMEZCTWtJN1FVRkRNVUpETEZWQlFVMHNVVUZFYjBJN1FVRkZNVUp0UkN4VlFVRk5SeXhUUVVGVFNDeEpRVVpYTzBGQlJ6RkNSQ3hUUVVGTFNTeFRRVUZUU2p0QlFVaFpMRWxCUVROQ08wRkJTMEU3T3p0MVEwRkZjVUpwUWl4SExFVkJRVXM3UVVGRE1VSXNVVUZCUzNCRkxIRkNRVUZNTEVOQlFUUkNPMEZCUXpOQ1F5eFZRVUZOTEdOQlJIRkNPMEZCUlROQ05FUXNaVUZCVjA4c1NVRkJTVkE3UVVGR1dTeEpRVUUxUWp0QlFVbEJPenM3WjBSQlJUaENPMEZCUXpsQ2JFVXNWMEZCVVVNc1IwRkJVaXhEUVVGWkxEUkNRVUUwUWl4TFFVRkxVU3hsUVVGTUxFTkJRWEZDYjBVc2EwSkJRVGRFTzBGQlEwRTdPenM3T3pzN1FVRlBRVHM3TzJsRFFVVmxTaXhITEVWQlFVczdRVUZEY0VJc1QwRkJTVW9zVlVGQlZTeExRVUZMTTBVc1VVRkJUQ3hEUVVGamIwWXNTVUZCWkN4RFFVRnRRanRCUVVGQkxGZEJRVXN6UlN4RlFVRkZWeXhKUVVGR0xFdEJRVmN5UkN4SlFVRkpTaXhQUVVGS0xFTkJRVmxWTEV0QlFUVkNPMEZCUVVFc1NVRkJia0lzUTBGQlpEdEJRVU5CTEU5QlFVbFdMRmRCUVZjc1NVRkJaaXhGUVVGeFFqdEJRVU53UW5KRkxGbEJRVkZuUml4SlFVRlNMRzlEUVVFclExQXNTVUZCU1Vvc1QwRkJTaXhEUVVGWlZTeExRVUV6UkR0QlFVTkJUaXhSUVVGSlNpeFBRVUZLTEVOQlFWbHFSU3hMUVVGYU8wRkJRMEU3UVVGRFFUczdRVUZGUkdsRkxGZEJRVkZaTEdOQlFWSXNRMEZCZDBKU0xFbEJRVWxLTEU5QlFUVkNPMEZCUTBFN096c3JRa0ZGWVVjc1RTeEZRVUZSTzBGQlEzSkNPenRCUVVWQk96czdPMFZCTDB4dlFtNUdMRms3TzBGQmJVMTBRalpHTEU5QlFVOURMRTlCUVZBc1IwRkJhVUl6Uml4UFFVRnFRaUlzSW1acGJHVWlPaUpTVkVOUVpXVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnUlhabGJuUkZiV2wwZEdWeUlEMGdjbVZ4ZFdseVpTZ25ibTlrWlMxbGRtVnVkQzFsYldsMGRHVnlKeWxjYm1OdmJuTjBJRzFsYzNOaFoyVnBabmtnUFNCeVpYRjFhWEpsS0NjdUwyMWxjM05oWjJWcFpua3RZbkp2ZDNObGNpNXFjeWNwWEc1Y2JtTnNZWE56SUZKVVExQmxaWElnWlhoMFpXNWtjeUJGZG1WdWRFVnRhWFIwWlhJZ2UxeHVYSFJqYjI1emRISjFZM1J2Y2lBb2FXUXNJR05vWVc1dVpXeHpMQ0JrWW5WelQySnFaV04wS1NCN1hHNWNkRngwYzNWd1pYSWdLQ2xjYmx4MFhIUjBhR2x6TG1sa0lEMGdhV1JjYmx4MFhIUjBhR2x6TG1Ob1lXNXVaV3h6SUQwZ1kyaGhibTVsYkhOY2JseDBYSFIwYUdsekxsOWtZblZ6VDJKcVpXTjBJRDBnWkdKMWMwOWlhbVZqZEZ4dVhHNWNkRngwTHk5a1pXWmhkV3gwSUhSMWNtNGdjMlZ5ZG1WeWMxeDBYRzVjZEZ4MGRHaHBjeTVmZEhWeWJsTmxjblpsY25NZ1BTQmJJSHQxY214ek9pQmJJRndpYzNSMWJqcHpkSFZ1TG13dVoyOXZaMnhsTG1OdmJUb3hPVE13TWx3aUlGMTlJRjA3WEc1Y2JseDBYSFIwYUdsekxsOWpiMjV1WldOMElDZ3BYRzVjZEgxY2JseHVYSFJqYkc5elpTQW9LU0I3WEc1Y2RGeDBZMjl1YzI5c1pTNXNiMmNvWENKUVpXVnlJRndpSzNSb2FYTXVhV1FyWENJZ1kyeHZjMlZrSUNGY0lpbGNibHgwWEhSMGFHbHpMbU5vWVc1dVpXeHpMbVp2Y2tWaFkyZ2dLR01nUFQ0Z1l5NWpiRzl6WlNncEtWeHVYSFJjZEhSb2FYTXVZMmhoYm01bGJITWdQU0JiWFZ4dVhHNWNibHgwWEhSMGFHbHpMbDl6Wlc1a1UybG5ibUZzYVc1blRXVnpjMkZuWlNBb2UxeHVYSFJjZEZ4MFpuVnVZem9nSjBOc2IzTmxKMXh1WEhSY2RIMHBYRzVjYmx4MFhIUnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNibHgwWEhSY2RIUm9hWE11WDJScGMyTnZibTVsWTNSVGFXZHVZV3hwYm1jZ0tDbGNibHgwWEhSOUtWeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdVgzQmxaWEpEYjI1dVpXTjBhVzl1SUQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEhKbGRIVnlibHh1WEhSY2RIMWNibHgwWEhSMGFHbHpMbDl3WldWeVEyOXVibVZqZEdsdmJpNWpiRzl6WlNncFhHNWNkSDFjYmx4dVhIUmZZMjl1Ym1WamRDQW9LU0I3WEc1Y2RGeDBZMjl1YzI5c1pTNXNiMmNvWENKMGNubHBibWNnZEc4Z1kyOXVibVZqZENCMGJ5QndaV1Z5SUZ3aUszUm9hWE11YVdRclhDSXVMaTVjSWlsY2JseDBYRzVjZEZ4MGRHaHBjeTVmWTI5dWJtVmpkRk5wWjI1aGJHbHVaeUFvS1Z4dVhIUjlYRzVjYmx4MEx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNibHgwTHk4dkx5OHZMeTh2THk4dkx5OHZMeUJUYVdkdVlXeHBibWNnYldWMGFHOWtjeUF2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JseDBMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dVhIUmZZMjl1Ym1WamRGTnBaMjVoYkdsdVp5QW9LU0I3WEc1Y2RGeDBkR2hwY3k1ZlpHSjFjMDlpYW1WamRDNWpZV3hzS0NkbWNpNXdZWEowYm1WeWFXNW5MbEpVUXk1RGIyNXVaV04wSnl3Z2UxeHVYSFJjZEZ4MGJHOWpZV3hRWldWeVNXUTZJSFJvYVhNdWFXUXNYRzVjZEZ4MFhIUmphR0Z1Ym1Wc2N6b2dkR2hwY3k1amFHRnVibVZzY3k1dFlYQWdLR01nUFQ0Z1l5NXVZVzFsS1Z4dVhIUmNkSDBzSUNoZkxDQmxjbklzSUhObGMzTnBiMjVVYjJ0bGJpa2dQVDRnZTF4dVhIUmNkRngwWTI5dWMyOXNaUzVzYjJjb1hDSnpaWE56YVc5dUlIUnZhMlZ1SUdadmNpQndaV1Z5SUZ3aUszUm9hWE11YVdRclhDSWdPaUJjSWl0elpYTnphVzl1Vkc5clpXNHBYRzVjZEZ4MFhIUjBhR2x6TGw5a1luVnpUMkpxWldOMExsOWtNV2x1YzNRb2RHaHBjeTVmWkdKMWMwOWlhbVZqZEM1ZmNHVmxja2xrS1M1dmNHVnVVMjlqYTJWMEtDY3ZkbUZ5TDNKMWJpOWthWGxoTDNKMFl5NXpiMk5ySnl3Z0tGOHNJR1Z5Y2l3Z2MyOWphMlYwS1NBOVBpQjdYRzVjZEZ4MFhIUmNkSE52WTJ0bGRDNTNjbWwwWlNoZ0pIdHpaWE56YVc5dVZHOXJaVzU5WEZ4dVlDbGNkRnh1WEc1Y2RGeDBYSFJjZEhSb2FYTXVYMjl1VTJsbmJtRnNhVzVuUTI5dWJtVmpkR1ZrS0cxbGMzTmhaMlZwWm5rb2MyOWphMlYwS1NsY2JseDBYSFJjZEgwcFhHNWNkRngwZlNsY2JseDBmVnh1WEc1Y2RGOWthWE5qYjI1dVpXTjBVMmxuYm1Gc2FXNW5JQ2dwSUh0Y2JseDBYSFJqYjI1emIyeGxMbXh2WnloZ1pHbHpZMjl1Ym1WamRHbHVaeUJ6YVdkdVlXeHBibWNnWm05eUlIQmxaWElnSkh0MGFHbHpMbWxrZldBcFhHNWNkRngwZEdocGN5NWZjMmxuYm1Gc2FXNW5MbVJwYzJOdmJtNWxZM1FvS1Z4dVhIUjlYRzVjYmx4MFgyOXVVMmxuYm1Gc2FXNW5RMjl1Ym1WamRHVmtJQ2h6YjJOclpYUXBJSHRjYmx4MFhIUmpiMjV6YjJ4bExteHZaeWduYzJsbmJtRnNhVzVuSUdOdmJtNWxZM1JsWkNCbWIzSWdjR1ZsY2lBbkszUm9hWE11YVdRcFhHNWNkRngwZEdocGN5NWZjMmxuYm1Gc2FXNW5JRDBnYzI5amEyVjBYRzVjZEZ4MFhIUmNibHgwWEhSMGFHbHpMbDl6YVdkdVlXeHBibWN1YjI0b0oyMWxjM05oWjJVbkxDQmtZWFJoSUQwK0lIdGNibHgwWEhSY2RIUm9hWE11WDI5dVUybG5ibUZzYVc1blRXVnpjMkZuWlNoS1UwOU9MbkJoY25ObEtHUmhkR0VwS1Z4dVhIUmNkSDBwWEc1Y2RIMWNibHh1WEhSZmMyVnVaRk5wWjI1aGJHbHVaMDFsYzNOaFoyVWdLRzFsYzNOaFoyVXBJSHRjYmx4MFhIUnNaWFFnWkdGMFlTQTlJRXBUVDA0dWMzUnlhVzVuYVdaNUlDaHRaWE56WVdkbEtWeHVYSFJjZEhSb2FYTXVYM05wWjI1aGJHbHVaeTV6Wlc1a1RXVnpjMkZuWlNBb1pHRjBZU2xjYmx4MGZWeHVYRzVjZEY5dmJsTnBaMjVoYkdsdVowMWxjM05oWjJVZ0tHMWxjM05oWjJVcElIdGNibHgwWEhSemQybDBZMmdnS0cxbGMzTmhaMlV1Wm5WdVl5a2dlMXh1WEhSY2RGeDBZMkZ6WlNCY0lsUjFjbTVKYm1adlhDSTZYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVWSFZ5YmtsdVptOGdLRzFsYzNOaFoyVXBYRzVjZEZ4MFhIUmNkR0p5WldGcklGeHVYSFJjZEZ4MFkyRnpaU0JjSWxKbGJXOTBaVTltWm1WeVhDSTZYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVVbVZ0YjNSbFQyWm1aWElnS0cxbGMzTmhaMlVwWEc1Y2RGeDBYSFJjZEdKeVpXRnJYRzVjZEZ4MFhIUmpZWE5sSUZ3aVVtVnRiM1JsU1VORlEyRnVaR2xrWVhSbFhDSTZYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyOXVVbVZ0YjNSbFNVTkZRMkZ1Wkdsa1lYUmxJQ2h0WlhOellXZGxLVnh1WEhSY2RGeDBYSFJpY21WaGExeHVYSFJjZEZ4MFpHVm1ZWFZzZERwY2JseDBYSFJjZEZ4MFluSmxZV3RjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4MEx5OHZMeTh2THk4dkx5OHZMeTh2SUZKbGJXOTBaU0J3WldWeUlHMWxjM05oWjJWeklHaGhibVJzYVc1bklDQWdJQ0F2THk4dkx5OHZMeTh2THk4dlhHNWNkQzh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1WEc1Y2RGOXZibFIxY201SmJtWnZJQ2gwZFhKdVNXNW1iM01wSUh0Y2JseDBYSFJwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvZEhWeWJrbHVabTl6TG5ObGNuWmxjbk1wS1NCeVpYUjFjbTVjYmx4dVhIUmNkSFJvYVhNdVgzUjFjbTVUWlhKMlpYSnpJRDBnZEhWeWJrbHVabTl6TG5ObGNuWmxjbk11YldGd0tITmxjblpsY2lBOVBpQjdJRnh1WEhSY2RGeDBjbVYwZFhKdUlIc2dYRzVjZEZ4MFhIUmNkSFZ5YkhNNklGc2djMlZ5ZG1WeUxuVnliQ0JkTENCY2JseDBYSFJjZEZ4MGRYTmxjbTVoYldVNklITmxjblpsY2k1MWMyVnlibUZ0WlN3Z1hHNWNkRngwWEhSY2RHTnlaV1JsYm5ScFlXdzZJSE5sY25abGNpNXdZWE56ZDI5eVpDQmNibHgwWEhSY2RIMGdYRzVjZEZ4MGZTbGNibHgwZlZ4dVhIUmNibHgwWDI5dVVtVnRiM1JsVDJabVpYSWdLRzltWm1WeUtTQjdYRzVjZEZ4MGRHaHBjeTVmY0dWbGNrTnZibTVsWTNScGIyNGdQU0J1WlhjZ1VsUkRVR1ZsY2tOdmJtNWxZM1JwYjI0b2UxeHVYSFJjZEZ4MGFXTmxVMlZ5ZG1WeWN6b2dkR2hwY3k1ZmRIVnlibE5sY25abGNuTXNYRzVjZEZ4MFhIUnBZMlZVY21GdWMzQnZjblJRYjJ4cFkzazZJQ2RoYkd3blhHNWNkRngwZlN3Z2UxeHVYSFJjZEZ4MGJXRnVaR0YwYjNKNU9pQjdYRzVjZEZ4MFhIUmNkRVIwYkhOVGNuUndTMlY1UVdkeVpXVnRaVzUwT2lCMGNuVmxMQ0JjYmx4MFhIUmNkRngwVDJabVpYSlViMUpsWTJWcGRtVkJkV1JwYnpvZ2RISjFaU3dnWEc1Y2RGeDBYSFJjZEU5bVptVnlWRzlTWldObGFYWmxWbWxrWlc4NmRISjFaVnh1WEhSY2RGeDBmVnh1WEhSY2RIMHBYRzVjYmx4MFhIUXZLblJvYVhNdWMzUnlaV0Z0Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hNcElIc2djR1ZsY2k1aFpHUlRkSEpsWVcwb2N5azdmU2s3S2k5Y2JseHVYSFJjZEhSb2FYTXVYM0JsWlhKRGIyNXVaV04wYVc5dUxuTmxkRkpsYlc5MFpVUmxjMk55YVhCMGFXOXVLRzVsZHlCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNG9lMXh1WEhSY2RGeDBjMlJ3T2lCdlptWmxjaTV6WkhBc0lGeHVYSFJjZEZ4MGRIbHdaVG9nYjJabVpYSXVkSGx3WlZ4dVhIUmNkSDBwS1Z4dVhHNWNkRngwZEdocGN5NWZjR1ZsY2tOdmJtNWxZM1JwYjI0dVkzSmxZWFJsUVc1emQyVnlLRnh1WEhSY2RGeDBiRzlqWVd4VFJGQWdQVDRnZEdocGN5NWZiMjVNYjJOaGJGTkVVQ2hzYjJOaGJGTkVVQ2tzSUZ4dVhIUmNkRngwWlhKeUlEMCtJR052Ym5OdmJHVXVaWEp5YjNJZ0tHVnljaWtzWEc1Y2RGeDBYSFI3SUcxaGJtUmhkRzl5ZVRvZ2V5QmNkRTltWm1WeVZHOVNaV05sYVhabFFYVmthVzg2SUhSeWRXVXNJRTltWm1WeVZHOVNaV05sYVhabFZtbGtaVzg2SUhSeWRXVWdmWDFjYmx4MFhIUXBYRzVjYmx4MFhIUjBhR2x6TGw5d1pXVnlRMjl1Ym1WamRHbHZiaTV2Ym1salpXTnZibTVsWTNScGIyNXpkR0YwWldOb1lXNW5aU0E5SUNncElEMCtJSFJvYVhNdVgyOXVTVU5GUTI5dWJtVmpkR2x2YmxOMFlYUmxRMmhoYm1kbElDZ3BYRzVjZEZ4MGRHaHBjeTVmY0dWbGNrTnZibTVsWTNScGIyNHViMjVwWTJWallXNWthV1JoZEdVZ1BTQmpZVzVrYVdSaGRHVWdQVDRnZEdocGN5NWZiMjVNYjJOaGJFbERSVU5oYm1ScFpHRjBaU0FvWTJGdVpHbGtZWFJsS1Z4dVhIUmNkSFJvYVhNdVgzQmxaWEpEYjI1dVpXTjBhVzl1TG05dVpHRjBZV05vWVc1dVpXd2dQU0JqYUdGdWJtVnNJRDArSUhSb2FYTXVYMjl1UkdGMFlVTm9ZVzV1Wld3Z0tHTm9ZVzV1Wld3cFhHNWNkRngwZEdocGN5NWZjR1ZsY2tOdmJtNWxZM1JwYjI0dWIyNWhaR1J6ZEhKbFlXMGdQU0J6ZEhKbFlXMGdQVDRnZEdocGN5NWZiMjVCWkdSVGRISmxZVzBnS0hOMGNtVmhiU2xjYmx4MGZWeHVYRzVjZEY5dmJsSmxiVzkwWlVsRFJVTmhibVJwWkdGMFpTQW9aWFowS1NCN1hHNWNkRngwYkdWMElHTmhibVJwWkdGMFpTQTlJRzVsZHlCU1ZFTkpZMlZEWVc1a2FXUmhkR1VvWlhaMExtTmhibVJwWkdGMFpTbGNibHgwWEhSMGFHbHpMbDl3WldWeVEyOXVibVZqZEdsdmJpNWhaR1JKWTJWRFlXNWthV1JoZEdVb1kyRnVaR2xrWVhSbExDQW9LU0E5UGlCN2ZTd2daWEp5SUQwK0lHTnZibk52YkdVdWJHOW5LR1Z5Y2lrcE8xeHVYSFI5WEc1Y2JseDBMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1WEhRdkx5OHZMeThnYkc5allXd2djR1ZsY2lCamIyNXVaV04wYVc5dUlHVjJaVzUwY3lBdkx5OHZMeTh2THk4dlhHNWNkQzh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4MFhHNWNibHgwWDI5dVRHOWpZV3hUUkZBZ0tHeHZZMkZzVTBSUUtTQjdYRzVjZEZ4MGRHaHBjeTVmY0dWbGNrTnZibTVsWTNScGIyNHVjMlYwVEc5allXeEVaWE5qY21sd2RHbHZiaWhzYjJOaGJGTkVVQ2s3WEc1Y2JseDBYSFIwYUdsekxsOXpaVzVrVTJsbmJtRnNhVzVuVFdWemMyRm5aU2g3WEc1Y2RGeDBYSFJtZFc1ak9pQmNJa0Z1YzNkbGNsd2lMRnh1WEhSY2RGeDBkSGx3WlRvZ2JHOWpZV3hUUkZBdWRIbHdaU3hjYmx4MFhIUmNkSE5rY0RvZ2JHOWpZV3hUUkZBdWMyUndYRzVjZEZ4MGZTbGNibHgwZlZ4dVhHNWNkRjl2Ymt4dlkyRnNTVU5GUTJGdVpHbGtZWFJsSUNobGRuUXBJSHRjYmx4MFhIUjBhR2x6TGw5elpXNWtVMmxuYm1Gc2FXNW5UV1Z6YzJGblpTQW9lMXh1WEhSY2RGeDBablZ1WXpvZ0owbERSVU5oYm1ScFpHRjBaU2NzWEc1Y2RGeDBYSFJqWVc1a2FXUmhkR1U2SUdWMmRDNWpZVzVrYVdSaGRHVmNibHgwWEhSOUtWeHVYSFI5WEc1Y2JseDBYMjl1U1VORlEyOXVibVZqZEdsdmJsTjBZWFJsUTJoaGJtZGxJQ2dwSUh0Y2JseDBYSFJqYjI1emIyeGxMbXh2WnloY0lrbERSU0JqYjI1dVpXTjBhVzl1SUhOMFlYUmxJRG9nWENJZ0t5QjBhR2x6TGw5d1pXVnlRMjl1Ym1WamRHbHZiaTVwWTJWRGIyNXVaV04wYVc5dVUzUmhkR1VwWEc1Y2RGeDBMeXBwWmlod1pXVnlMbWxqWlVOdmJtNWxZM1JwYjI1VGRHRjBaU0E5UFQwZ0oyTnZibTVsWTNSbFpDY3BlMXh1WEhSY2RGeDBkR2hoZEM1amIyNXVaV04wWldRZ1BTQjBjblZsTzF4dVhIUmNkRngwYVdZb2RHaGhkQzV6ZFdKelkzSnBjSFJwYjI0cElIUm9ZWFF1YzNWaWMyTnlhWEIwYVc5dUxtTnNiM05sS0NrN1hHNWNkRngwZlZ4dVhIUmNkR1ZzYzJVZ2FXWW9jR1ZsY2k1cFkyVkRiMjV1WldOMGFXOXVVM1JoZEdVZ1BUMDlJQ2RrYVhOamIyNXVaV04wWldRbklIeDhJSEJsWlhJdWFXTmxRMjl1Ym1WamRHbHZibE4wWVhSbElEMDlQU0FuWTJ4dmMyVmtKeUI4ZkNCd1pXVnlMbWxqWlVOdmJtNWxZM1JwYjI1VGRHRjBaU0E5UFQwZ0oyWmhhV3hsWkNjcGUxeHVYSFJjZEZ4MGFXWW9JWFJvWVhRdVkyeHZjMlZrS1NCMGFHRjBMbDl5WldOdmJtNWxZM1FvS1R0Y2JseDBYSFI5S2k5Y2JseDBmVnh1WEc1Y2RGOXZia1JoZEdGRGFHRnVibVZzSUNobGRuUXBJSHRjYmx4MFhIUnNaWFFnWTJoaGJtNWxiQ0E5SUhSb2FYTXVZMmhoYm01bGJITXVabWx1WkNoaklEMCtJR011Ym1GdFpTQTlQVDBnWlhaMExtTm9ZVzV1Wld3dWJHRmlaV3dwWEc1Y2RGeDBhV1lnS0dOb1lXNXVaV3dnUFQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwWTI5dWMyOXNaUzUzWVhKdUlDaGdibThnYldGMFkyaHBibWNnWTJoaGJtNWxiQ0JtYjNWdVpDQm1iM0lnSkh0bGRuUXVZMmhoYm01bGJDNXNZV0psYkgwdUlFTnNiM05wYm1jdUxpNWdLVnh1WEhSY2RGeDBaWFowTG1Ob1lXNXVaV3d1WTJ4dmMyVW9LVnh1WEhSY2RGeDBjbVYwZFhKdUlGeHVYSFJjZEgxY2JseHVYSFJjZEdOb1lXNXVaV3d1YzJWMFJHRjBZVU5vWVc1dVpXd2dLR1YyZEM1amFHRnVibVZzS1Z4dVhIUjlYRzVjYmx4MFgyOXVRV1JrVTNSeVpXRnRJQ2h6ZEhKbFlXMHBJSHRjYmx4MFhIUXZLblJvWVhRdVkyOXVibVZqZEdWa0lEMGdkSEoxWlR0Y2JseDBYSFIwYUdGMExuSjBZeTVmYjI1QlpHUlRkSEpsWVcwb2RHaGhkQzVrYmtsa0xDQmxkblF1YzNSeVpXRnRLVHNxTDF4dVhIUjlYRzU5WEc1Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNWRU5RWldWeVhHNGlYWDA9IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdidWZmZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc29ja2V0KSB7XG5cdGlmIChzb2NrZXQuX21lc3NhZ2VpZmllZCkgcmV0dXJuIHNvY2tldDtcblx0c29ja2V0Ll9tZXNzYWdlaWZpZWQgPSB0cnVlO1xuXG5cdC8vc3RydWN0dXJlcyBmb3IgYnVpbGRpbmcgbWVzc2FnZXMgZnJvbSB1bml4IHNvY2tldCBieXRlc3RyZWFtXG5cdHZhciBtc2dCdWZTaXplID0gODE5MjA7XG5cdHZhciBtc2dCdWYgPSBuZXcgQnVmZmVyKG1zZ0J1ZlNpemUpO1xuXHR2YXIgdG1wQnVmID0gbmV3IEJ1ZmZlcihtc2dCdWZTaXplKTtcblx0dmFyIGJ1ZlBvcyA9IDA7XG5cblx0Ly9saXN0ZW4gdG8gc29ja2V0IGV2ZW50c1xuXHRzb2NrZXQub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdHZhciBsZW4gPSBkYXRhLmxlbmd0aDtcblx0XHR2YXIgbXNnQ29tcGxldGUgPSBmYWxzZTtcblxuXHRcdC8vU2l6ZSB1cCBtc2dCdWYgaWYgaXQgaXMgdG9vIHNtYWxsIFxuXHRcdGlmIChidWZQb3MgKyBkYXRhLmxlbmd0aCA+IG1zZ0J1ZlNpemUpIHtcblx0XHRcdG1zZ0J1ZlNpemUgPSBtc2dCdWZTaXplICsgMiAqIGRhdGEubGVuZ3RoO1xuXHRcdFx0dG1wQnVmID0gbmV3IEJ1ZmZlcihtc2dCdWZTaXplKTtcblx0XHRcdG1zZ0J1Zi5jb3B5KHRtcEJ1Zik7XG5cdFx0XHRtc2dCdWYgPSB0bXBCdWY7XG5cdFx0XHR0bXBCdWYgPSBuZXcgQnVmZmVyKG1zZ0J1ZlNpemUpO1xuXHRcdH1cblxuXHRcdC8vY29weSBuZXcgY2h1bmsgaW50byBtc2dCdWZcblx0XHRkYXRhLmNvcHkobXNnQnVmLCBidWZQb3MsIDAsIGRhdGEubGVuZ3RoKTtcblxuXHRcdGJ1ZlBvcyArPSBsZW47XG5cblx0XHRkbyB7XG5cdFx0XHRtc2dDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdFx0Ly9yZWFkIG1lc3NhZ2UgbGVuZ3RoXG5cdFx0XHR2YXIgbXNnTGVuZ3RoID0gbXNnQnVmLnJlYWRJbnQzMkxFKDApO1xuXG5cdFx0XHQvL2lmIGJ1ZmZlciBjb250YWlucyBtb3JlIHRoYW4gbXNnTGVuZ3RoLCBhIG1lc3NhZ2UgaXMgcmVhZHkgdG8gYmUgc2VudCB0byB1c2VyXG5cdFx0XHRpZiAoYnVmUG9zID4gbXNnTGVuZ3RoKSB7XG5cdFx0XHRcdC8vZXh0cmFjdCBtZXNzYWdlIGZyb20gYnVmZmVyXG5cdFx0XHRcdHZhciBuZXdNZXNzYWdlID0gbXNnQnVmLnRvU3RyaW5nKCd1dGY4JywgNCwgNCArIG1zZ0xlbmd0aCk7XG5cblx0XHRcdFx0Ly9zZW5kIG1lc3NhZ2UgdG8gdXNlclxuXHRcdFx0XHRzb2NrZXQuZW1pdCgnbWVzc2FnZScsIG5ld01lc3NhZ2UpO1xuXG5cdFx0XHRcdC8vZGVsZXRlIG1lc3NhZ2UgZnJvbSBidWZmZXJcblx0XHRcdFx0bXNnQnVmLmNvcHkodG1wQnVmLCAwLCA0ICsgbXNnTGVuZ3RoLCBtc2dCdWZTaXplIC0gNCAtIG1zZ0xlbmd0aCk7XG5cdFx0XHRcdHRtcEJ1Zi5jb3B5KG1zZ0J1Zik7XG5cdFx0XHRcdGJ1ZlBvcyAtPSA0ICsgbXNnTGVuZ3RoO1xuXG5cdFx0XHRcdG1zZ0NvbXBsZXRlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9IHdoaWxlIChtc2dDb21wbGV0ZSAmJiBidWZQb3MgPiAwKTsgLy9yZWFkIG1lc3NhZ2VzIHdoaWxlIHRoZXJlIGFyZSBjb21wbGV0ZSBtZXNzYWdlcyBhbmQgdGhlIGJ1ZmZlciBpcyBub3QgZW1wdHlcblx0fSk7XG5cblx0c29ja2V0LnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0XHQvL21lc3NhZ2Ugc2l6ZSArIDQgYnl0ZXMgZm9yIHN0b3JpbmcgbWVzc2FnZSBsZW5ndGhcblx0XHR2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihtZXNzYWdlLmxlbmd0aCArIDQpO1xuXG5cdFx0YnVmZmVyLndyaXRlSW50MzJMRShtZXNzYWdlLmxlbmd0aCwgMCk7XG5cdFx0YnVmZmVyLndyaXRlKG1lc3NhZ2UsIDQpO1xuXG5cdFx0c29ja2V0LndyaXRlKGJ1ZmZlcik7XG5cdH07XG5cblx0cmV0dXJuIHNvY2tldDtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcilcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl6WlhKMmFXTmxjeTl5ZEdNdmJXVnpjMkZuWldsbWVTMWljbTkzYzJWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxGRkJRVkVzVVVGQlVqczdRVUZIUVN4UFFVRlBMRTlCUVZBc1IwRkJhVUlzVlVGQlZTeE5RVUZXTEVWQlFXdENPMEZCUTJ4RExFdEJRVWtzVDBGQlR5eGhRVUZZTEVWQlFUQkNMRTlCUVU4c1RVRkJVRHRCUVVNeFFpeFJRVUZQTEdGQlFWQXNSMEZCZFVJc1NVRkJka0k3TzBGQlJVRTdRVUZEUVN4TFFVRkpMR0ZCUVdFc1MwRkJha0k3UVVGRFFTeExRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGaU8wRkJRMEVzUzBGQlNTeFRRVUZUTEVsQlFVa3NUVUZCU2l4RFFVRlhMRlZCUVZnc1EwRkJZanRCUVVOQkxFdEJRVWtzVTBGQlV5eERRVUZpT3p0QlFVVkJPMEZCUTBFc1VVRkJUeXhGUVVGUUxFTkJRVlVzVFVGQlZpeEZRVUZyUWl4blFrRkJVVHRCUVVONlFpeE5RVUZKTEUxQlFVMHNTMEZCU3l4TlFVRm1PMEZCUTBFc1RVRkJTU3hqUVVGakxFdEJRV3hDT3p0QlFVVkJPMEZCUTBFc1RVRkJSeXhUUVVGVExFdEJRVXNzVFVGQlpDeEhRVUYxUWl4VlFVRXhRaXhGUVVGeFF6dEJRVU53UXl4blFrRkJZU3hoUVVGaExFbEJRVVVzUzBGQlN5eE5RVUZxUXp0QlFVTkJMRmxCUVZNc1NVRkJTU3hOUVVGS0xFTkJRVmNzVlVGQldDeERRVUZVTzBGQlEwRXNWVUZCVHl4SlFVRlFMRU5CUVZrc1RVRkJXanRCUVVOQkxGbEJRVk1zVFVGQlZEdEJRVU5CTEZsQlFWTXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGVU8wRkJRMEU3TzBGQlJVUTdRVUZEUVN4UFFVRkxMRWxCUVV3c1EwRkJWU3hOUVVGV0xFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ0xFTkJRVEZDTEVWQlFUWkNMRXRCUVVzc1RVRkJiRU03TzBGQlJVRXNXVUZCVlN4SFFVRldPenRCUVVWQkxFdEJRVVU3UVVGRFJDeHBRa0ZCWXl4TFFVRmtPMEZCUTBFN1FVRkRRU3hQUVVGSkxGbEJRVmtzVDBGQlR5eFhRVUZRTEVOQlFXMUNMRU5CUVc1Q0xFTkJRV2hDT3p0QlFVVkJPMEZCUTBFc1QwRkJSeXhUUVVGVExGTkJRVm9zUlVGQmMwSTdRVUZEY2tJN1FVRkRRU3hSUVVGSkxHRkJRV0VzVDBGQlR5eFJRVUZRTEVOQlFXZENMRTFCUVdoQ0xFVkJRWFZDTEVOQlFYWkNMRVZCUVhsQ0xFbEJRVVVzVTBGQk0wSXNRMEZCYWtJN08wRkJSVUU3UVVGRFFTeFhRVUZQTEVsQlFWQXNRMEZCV1N4VFFVRmFMRVZCUVhWQ0xGVkJRWFpDT3p0QlFVVkJPMEZCUTBFc1YwRkJUeXhKUVVGUUxFTkJRVmtzVFVGQldpeEZRVUZ2UWl4RFFVRndRaXhGUVVGMVFpeEpRVUZGTEZOQlFYcENMRVZCUVc5RExHRkJRVmNzUTBGQldDeEhRVUZoTEZOQlFXcEVPMEZCUTBFc1YwRkJUeXhKUVVGUUxFTkJRVmtzVFVGQldqdEJRVU5CTEdOQlFWY3NTVUZCU1N4VFFVRm1PenRCUVVWQkxHdENRVUZqTEVsQlFXUTdRVUZEUVR0QlFVTkVMRWRCY0VKRUxGRkJiMEpUTEdWQlFXVXNVMEZCVXl4RFFYQkNha01zUlVGc1FubENMRU5CYzBOWE8wRkJRM0JETEVWQmRrTkVPenRCUVhsRFFTeFJRVUZQTEZkQlFWQXNSMEZCY1VJc1ZVRkJWU3hQUVVGV0xFVkJRVzFDTzBGQlEzWkRPMEZCUTBFc1RVRkJTU3hUUVVGVExFbEJRVWtzVFVGQlNpeERRVUZaTEZGQlFWRXNUVUZCVWl4SFFVRmxMRU5CUVROQ0xFTkJRV0k3TzBGQlJVRXNVMEZCVHl4WlFVRlFMRU5CUVc5Q0xGRkJRVkVzVFVGQk5VSXNSVUZCYjBNc1EwRkJjRU03UVVGRFFTeFRRVUZQTEV0QlFWQXNRMEZCWVN4UFFVRmlMRVZCUVhOQ0xFTkJRWFJDT3p0QlFVVkJMRk5CUVU4c1MwRkJVQ3hEUVVGaExFMUJRV0k3UVVGRFFTeEZRVkpFT3p0QlFWVkJMRkZCUVU4c1RVRkJVRHRCUVVOQkxFTkJMMFJFSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnlaWEYxYVhKbEtDZGlkV1ptWlhJbktWeHVYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0hOdlkydGxkQ2tnZTF4dVhIUnBaaUFvYzI5amEyVjBMbDl0WlhOellXZGxhV1pwWldRcElISmxkSFZ5YmlCemIyTnJaWFJjYmx4MGMyOWphMlYwTGw5dFpYTnpZV2RsYVdacFpXUWdQU0IwY25WbFhHNWNibHgwTHk5emRISjFZM1IxY21WeklHWnZjaUJpZFdsc1pHbHVaeUJ0WlhOellXZGxjeUJtY205dElIVnVhWGdnYzI5amEyVjBJR0o1ZEdWemRISmxZVzFjYmx4MGJHVjBJRzF6WjBKMVpsTnBlbVVnUFNBNE1Ua3lNRHRjYmx4MGJHVjBJRzF6WjBKMVppQTlJRzVsZHlCQ2RXWm1aWElvYlhOblFuVm1VMmw2WlNrN1hHNWNkR3hsZENCMGJYQkNkV1lnUFNCdVpYY2dRblZtWm1WeUtHMXpaMEoxWmxOcGVtVXBPMXh1WEhSc1pYUWdZblZtVUc5eklEMGdNRHRjYmx4dVhIUXZMMnhwYzNSbGJpQjBieUJ6YjJOclpYUWdaWFpsYm5SelhHNWNkSE52WTJ0bGRDNXZiaWduWkdGMFlTY3NJR1JoZEdFZ1BUNGdlMXh1WEhSY2RHeGxkQ0JzWlc0Z1BTQmtZWFJoTG14bGJtZDBhRnh1WEhSY2RHeGxkQ0J0YzJkRGIyMXdiR1YwWlNBOUlHWmhiSE5sWEc1Y2JseDBYSFF2TDFOcGVtVWdkWEFnYlhOblFuVm1JR2xtSUdsMElHbHpJSFJ2YnlCemJXRnNiQ0JjYmx4MFhIUnBaaWhpZFdaUWIzTWdLeUJrWVhSaExteGxibWQwYUNBK0lHMXpaMEoxWmxOcGVtVXBlMXh1WEhSY2RGeDBiWE5uUW5WbVUybDZaU0E5SUcxelowSjFabE5wZW1VZ0t5QXlLbVJoZEdFdWJHVnVaM1JvWEc1Y2RGeDBYSFIwYlhCQ2RXWWdQU0J1WlhjZ1FuVm1abVZ5S0cxelowSjFabE5wZW1VcFhHNWNkRngwWEhSdGMyZENkV1l1WTI5d2VTaDBiWEJDZFdZcFhHNWNkRngwWEhSdGMyZENkV1lnUFNCMGJYQkNkV1pjYmx4MFhIUmNkSFJ0Y0VKMVppQTlJRzVsZHlCQ2RXWm1aWElvYlhOblFuVm1VMmw2WlNsY2JseDBYSFI5WEc1Y2JseDBYSFF2TDJOdmNIa2dibVYzSUdOb2RXNXJJR2x1ZEc4Z2JYTm5RblZtWEc1Y2RGeDBaR0YwWVM1amIzQjVLRzF6WjBKMVppd2dZblZtVUc5ekxDQXdMQ0JrWVhSaExteGxibWQwYUNsY2JseHVYSFJjZEdKMVpsQnZjeUFyUFNCc1pXNWNibHh1WEhSY2RHUnZlMXh1WEhSY2RGeDBiWE5uUTI5dGNHeGxkR1VnUFNCbVlXeHpaVnh1WEhSY2RGeDBMeTl5WldGa0lHMWxjM05oWjJVZ2JHVnVaM1JvWEc1Y2RGeDBYSFJzWlhRZ2JYTm5UR1Z1WjNSb0lEMGdiWE5uUW5WbUxuSmxZV1JKYm5Rek1reEZLREFwWEc1Y2JseDBYSFJjZEM4dmFXWWdZblZtWm1WeUlHTnZiblJoYVc1eklHMXZjbVVnZEdoaGJpQnRjMmRNWlc1bmRHZ3NJR0VnYldWemMyRm5aU0JwY3lCeVpXRmtlU0IwYnlCaVpTQnpaVzUwSUhSdklIVnpaWEpjYmx4MFhIUmNkR2xtS0dKMVpsQnZjeUErSUcxeloweGxibWQwYUNsN1hHNWNkRngwWEhSY2RDOHZaWGgwY21GamRDQnRaWE56WVdkbElHWnliMjBnWW5WbVptVnlYRzVjZEZ4MFhIUmNkR3hsZENCdVpYZE5aWE56WVdkbElEMGdiWE5uUW5WbUxuUnZVM1J5YVc1bktDZDFkR1k0Snl3MExEUXJiWE5uVEdWdVozUm9LVnh1WEc1Y2RGeDBYSFJjZEM4dmMyVnVaQ0J0WlhOellXZGxJSFJ2SUhWelpYSmNibHgwWEhSY2RGeDBjMjlqYTJWMExtVnRhWFFvSjIxbGMzTmhaMlVuTENCdVpYZE5aWE56WVdkbEtWeHVYRzVjZEZ4MFhIUmNkQzh2WkdWc1pYUmxJRzFsYzNOaFoyVWdabkp2YlNCaWRXWm1aWEpjYmx4MFhIUmNkRngwYlhOblFuVm1MbU52Y0hrb2RHMXdRblZtTENBd0xDQTBLMjF6WjB4bGJtZDBhQ3dnYlhOblFuVm1VMmw2WlMwMExXMXpaMHhsYm1kMGFDbGNibHgwWEhSY2RGeDBkRzF3UW5WbUxtTnZjSGtvYlhOblFuVm1LVnh1WEhSY2RGeDBYSFJpZFdaUWIzTWdMVDBnS0RRZ0t5QnRjMmRNWlc1bmRHZ3BYRzVjYmx4MFhIUmNkRngwYlhOblEyOXRjR3hsZEdVZ1BTQjBjblZsWEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0IzYUdsc1pTQW9iWE5uUTI5dGNHeGxkR1VnSmlZZ1luVm1VRzl6SUQ0Z01Da2dMeTl5WldGa0lHMWxjM05oWjJWeklIZG9hV3hsSUhSb1pYSmxJR0Z5WlNCamIyMXdiR1YwWlNCdFpYTnpZV2RsY3lCaGJtUWdkR2hsSUdKMVptWmxjaUJwY3lCdWIzUWdaVzF3ZEhsY2JseDBmU2xjYmx4dVhIUnpiMk5yWlhRdWMyVnVaRTFsYzNOaFoyVWdQU0JtZFc1amRHbHZiaUFvYldWemMyRm5aU2tnZTF4dVhIUmNkQzh2YldWemMyRm5aU0J6YVhwbElDc2dOQ0JpZVhSbGN5Qm1iM0lnYzNSdmNtbHVaeUJ0WlhOellXZGxJR3hsYm1kMGFGeHVYSFJjZEd4bGRDQmlkV1ptWlhJZ1BTQnVaWGNnUW5WbVptVnlJQ2h0WlhOellXZGxMbXhsYm1kMGFDczBLVnh1WEc1Y2RGeDBZblZtWm1WeUxuZHlhWFJsU1c1ME16Sk1SU2h0WlhOellXZGxMbXhsYm1kMGFDd2dNQ2xjYmx4MFhIUmlkV1ptWlhJdWQzSnBkR1VvYldWemMyRm5aU3dnTkNsY2JseDBYSFJjYmx4MFhIUnpiMk5yWlhRdWQzSnBkR1VvWW5WbVptVnlLVnh1WEhSOVhHNWNibHgwY21WMGRYSnVJSE52WTJ0bGRGeHVmVnh1WEc1Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGl5YVNlbGVjdG9yID0gcmVxdWlyZSgnLi4vLi4vRGl5YVNlbGVjdG9yJykuRGl5YVNlbGVjdG9yO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ25vZGUtZXZlbnQtZW1pdHRlcicpO1xuXG5yZXF1aXJlKCd3ZWJydGMtYWRhcHRlcicpO1xuXG52YXIgUlRDQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vUlRDQ29udHJvbGxlci5qcycpO1xuXG52YXIgUlRDID0gZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBSVEMoc2VsZWN0b3IpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgUlRDKTtcblxuXHRcdHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0dGhpcy5fcnRjQ29udHJvbGxlcnMgPSBbXTtcblxuXHRcdHRoaXMuX3JlcXVlc3RlZENoYW5uZWxzID0gW107XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoUlRDLCBbe1xuXHRcdGtleTogJ3VzZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHVzZShuYW1lX3JlZ2V4LCB0eXBlLCBvbmRhdGFjaGFubmVsX2NhbGxiYWNrLCBvbmFkZHN0cmVhbV9jYWxsYmFjaykge1xuXHRcdFx0dGhpcy5fcmVxdWVzdGVkQ2hhbm5lbHMucHVzaCh7IHJlZ2V4OiBuYW1lX3JlZ2V4LCB0eXBlOiB0eXBlLCBjYjogb25kYXRhY2hhbm5lbF9jYWxsYmFjaywgc3RyZWFtX2NiOiBvbmFkZHN0cmVhbV9jYWxsYmFjayB9KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2Nvbm5lY3QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0KCkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFx0dGhpcy5fcnRjQ29udHJvbGxlcnMgPSB0aGlzLl9zZWxlY3Rvci5kYnVzT2JqZWN0KCdmci5wYXJ0bmVyaW5nLlJUQycsICcvZnIvcGFydG5lcmluZy9SVEMnKS5tYXAoZnVuY3Rpb24gKG9iamVjdCkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFJUQ0NvbnRyb2xsZXIob2JqZWN0LCBfdGhpcy5fcmVxdWVzdGVkQ2hhbm5lbHMpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuX3J0Y0NvbnRyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcblx0XHRcdFx0cmV0dXJuIGMuY29ubmVjdCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZGlzY29ubmVjdCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG5cdFx0XHR0aGlzLl9ydGNDb250cm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG5cdFx0XHRcdHJldHVybiBjLmRpc2Nvbm5lY3QoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBSVEM7XG59KCk7XG5cbkRpeWFTZWxlY3Rvci5wcm90b3R5cGUucnRjID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gbmV3IFJUQyh0aGlzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkowWXk1cWN5SmRMQ0p1WVcxbGN5STZXeUpFYVhsaFUyVnNaV04wYjNJaUxDSnlaWEYxYVhKbElpd2lSWFpsYm5SRmJXbDBkR1Z5SWl3aVVsUkRRMjl1ZEhKdmJHeGxjaUlzSWxKVVF5SXNJbk5sYkdWamRHOXlJaXdpWDNObGJHVmpkRzl5SWl3aVgzSjBZME52Ym5SeWIyeHNaWEp6SWl3aVgzSmxjWFZsYzNSbFpFTm9ZVzV1Wld4eklpd2libUZ0WlY5eVpXZGxlQ0lzSW5SNWNHVWlMQ0p2Ym1SaGRHRmphR0Z1Ym1Wc1gyTmhiR3hpWVdOcklpd2liMjVoWkdSemRISmxZVzFmWTJGc2JHSmhZMnNpTENKd2RYTm9JaXdpY21WblpYZ2lMQ0pqWWlJc0luTjBjbVZoYlY5allpSXNJbVJpZFhOUFltcGxZM1FpTENKdFlYQWlMQ0p2WW1wbFkzUWlMQ0ptYjNKRllXTm9JaXdpWXlJc0ltTnZibTVsWTNRaUxDSmthWE5qYjI1dVpXTjBJaXdpY0hKdmRHOTBlWEJsSWl3aWNuUmpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGQlFTeEpRVUZOUVN4bFFVRmxReXhSUVVGUkxHOUNRVUZTTEVWQlFUaENSQ3haUVVGdVJEdEJRVU5CTEVsQlFVMUZMR1ZCUVdWRUxGRkJRVkVzYjBKQlFWSXNRMEZCY2tJN08wRkJSVUZCTEZGQlFWRXNaMEpCUVZJN08wRkJSVUVzU1VGQlRVVXNaMEpCUVdkQ1JpeFJRVUZSTEc5Q1FVRlNMRU5CUVhSQ096dEpRVTFOUnl4SE8wRkJRMHdzWTBGQllVTXNVVUZCWWl4RlFVRjFRanRCUVVGQk96dEJRVU4wUWl4UFFVRkxReXhUUVVGTUxFZEJRV2xDUkN4UlFVRnFRanRCUVVOQkxFOUJRVXRGTEdWQlFVd3NSMEZCZFVJc1JVRkJka0k3TzBGQlJVRXNUMEZCUzBNc2EwSkJRVXdzUjBGQk1FSXNSVUZCTVVJN1FVRkRRVHM3T3p0elFrRkZTVU1zVlN4RlFVRlpReXhKTEVWQlFVMURMSE5DTEVWQlFYZENReXh2UWl4RlFVRnhRanRCUVVOdVJTeFJRVUZMU2l4clFrRkJUQ3hEUVVGM1Frc3NTVUZCZUVJc1EwRkJOa0lzUlVGQlEwTXNUMEZCVDB3c1ZVRkJVaXhGUVVGdlFrTXNUVUZCUzBFc1NVRkJla0lzUlVGQkswSkxMRWxCUVVsS0xITkNRVUZ1UXl4RlFVRXlSRXNzVjBGQlYwb3NiMEpCUVhSRkxFVkJRVGRDTzBGQlEwRXNWVUZCVHl4SlFVRlFPMEZCUTBFN096czBRa0ZGVlR0QlFVRkJPenRCUVVOV0xGRkJRVXRNTEdWQlFVd3NSMEZCZFVJc1MwRkJTMFFzVTBGQlRDeERRVUZsVnl4VlFVRm1MRU5CUVRCQ0xHMUNRVUV4UWl4RlFVRXJReXh2UWtGQkwwTXNSVUZCY1VWRExFZEJRWEpGTEVOQlFYbEZMR3RDUVVGVk8wRkJRM3BITEZkQlFVOHNTVUZCU1dZc1lVRkJTaXhEUVVGclFtZENMRTFCUVd4Q0xFVkJRVEJDTEUxQlFVdFlMR3RDUVVFdlFpeERRVUZRTzBGQlEwRXNTVUZHYzBJc1EwRkJka0k3TzBGQlNVRXNVVUZCUzBRc1pVRkJUQ3hEUVVGeFFtRXNUMEZCY2tJc1EwRkJPRUk3UVVGQlFTeFhRVUZMUXl4RlFVRkZReXhQUVVGR0xFVkJRVXc3UVVGQlFTeEpRVUU1UWp0QlFVTkJPenM3SzBKQlJXRTdRVUZEWWl4UlFVRkxaaXhsUVVGTUxFTkJRWEZDWVN4UFFVRnlRaXhEUVVFNFFqdEJRVUZCTEZkQlFVdERMRVZCUVVWRkxGVkJRVVlzUlVGQlREdEJRVUZCTEVsQlFUbENPMEZCUTBFN096czdPenRCUVVsR2RrSXNZVUZCWVhkQ0xGTkJRV0lzUTBGQmRVSkRMRWRCUVhaQ0xFZEJRVFpDTEZsQlFWazdRVUZEZUVNc1VVRkJUeXhKUVVGSmNrSXNSMEZCU2l4RFFVRlJMRWxCUVZJc1EwRkJVRHRCUVVOQkxFTkJSa1FpTENKbWFXeGxJam9pY25SakxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTI5dWMzUWdSR2w1WVZObGJHVmpkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2UkdsNVlWTmxiR1ZqZEc5eUp5a3VSR2w1WVZObGJHVmpkRzl5WEc1amIyNXpkQ0JGZG1WdWRFVnRhWFIwWlhJZ1BTQnlaWEYxYVhKbEtDZHViMlJsTFdWMlpXNTBMV1Z0YVhSMFpYSW5LVnh1WEc1eVpYRjFhWEpsS0NkM1pXSnlkR010WVdSaGNIUmxjaWNwWEc1Y2JtTnZibk4wSUZKVVEwTnZiblJ5YjJ4c1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDFKVVEwTnZiblJ5YjJ4c1pYSXVhbk1uS1Z4dVhHNWNibHh1WEc1Y2JtTnNZWE56SUZKVVF5QjdYRzVjZEdOdmJuTjBjblZqZEc5eUlDaHpaV3hsWTNSdmNpa2dlMXh1WEhSY2RIUm9hWE11WDNObGJHVmpkRzl5SUQwZ2MyVnNaV04wYjNKY2RGeHVYSFJjZEhSb2FYTXVYM0owWTBOdmJuUnliMnhzWlhKeklEMGdXMTFjYmx4dVhIUmNkSFJvYVhNdVgzSmxjWFZsYzNSbFpFTm9ZVzV1Wld4eklEMGdXMTFjYmx4MGZWeHVYRzVjZEhWelpTQW9ibUZ0WlY5eVpXZGxlQ3dnZEhsd1pTd2diMjVrWVhSaFkyaGhibTVsYkY5allXeHNZbUZqYXl3Z2IyNWhaR1J6ZEhKbFlXMWZZMkZzYkdKaFkyc3BlMXh1WEhSY2RIUm9hWE11WDNKbGNYVmxjM1JsWkVOb1lXNXVaV3h6TG5CMWMyZ29lM0psWjJWNE9pQnVZVzFsWDNKbFoyVjRMQ0IwZVhCbE9uUjVjR1VzSUdOaU9pQnZibVJoZEdGamFHRnVibVZzWDJOaGJHeGlZV05yTENCemRISmxZVzFmWTJJNklHOXVZV1JrYzNSeVpXRnRYMk5oYkd4aVlXTnJmU2s3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMWNibHh1WEhSamIyNXVaV04wSUNncElIdGNibHgwWEhSMGFHbHpMbDl5ZEdORGIyNTBjbTlzYkdWeWN5QTlJSFJvYVhNdVgzTmxiR1ZqZEc5eUxtUmlkWE5QWW1wbFkzUW9KMlp5TG5CaGNuUnVaWEpwYm1jdVVsUkRKeXdnSnk5bWNpOXdZWEowYm1WeWFXNW5MMUpVUXljcExtMWhjQ2h2WW1wbFkzUWdQVDRnZTF4dVhIUmNkRngwY21WMGRYSnVJRzVsZHlCU1ZFTkRiMjUwY205c2JHVnlLRzlpYW1WamRDd2dkR2hwY3k1ZmNtVnhkV1Z6ZEdWa1EyaGhibTVsYkhNcFhHNWNkRngwZlNsY2JseHVYSFJjZEhSb2FYTXVYM0owWTBOdmJuUnliMnhzWlhKekxtWnZja1ZoWTJnZ0tHTWdQVDRnWXk1amIyNXVaV04wS0NrcFhHNWNkSDFjYmx4dVhIUmthWE5qYjI1dVpXTjBJQ2dwSUh0Y2JseDBYSFIwYUdsekxsOXlkR05EYjI1MGNtOXNiR1Z5Y3k1bWIzSkZZV05vSUNoaklEMCtJR011WkdselkyOXVibVZqZENncEtWeHVYSFI5WEc1OVhHNWNibHh1UkdsNVlWTmxiR1ZqZEc5eUxuQnliM1J2ZEhsd1pTNXlkR01nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEhKbGRIVnliaUJ1WlhjZ1VsUkRLSFJvYVhNcFhHNTlYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxudmFyIERpeWFTZWxlY3RvciA9IHJlcXVpcmUoJy4uLy4uL0RpeWFTZWxlY3Rvci5qcycpLkRpeWFTZWxlY3RvcjtcblxuRGl5YVNlbGVjdG9yLnByb3RvdHlwZS5zaGVsbCA9IGZ1bmN0aW9uIChjb21tYW5kLCBhcmdzLCBjb2xzLCByb3dzLCB0ZXJtLCBjYWxsYmFjaykge1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdHRoaXMucmVxdWVzdCh7XG5cdFx0c2VydmljZTogJ3NoZWxsJyxcblx0XHRmdW5jOiAnUmVnaXN0ZXJQcm9jZXNzJyxcblx0XHRkYXRhOiB7XG5cdFx0XHRjb21tYW5kOiBjb21tYW5kLFxuXHRcdFx0YXJnczogYXJncyxcblx0XHRcdGNvbHM6IGNvbHMsXG5cdFx0XHRyb3dzOiByb3dzLFxuXHRcdFx0dGVybTogdGVybVxuXHRcdH1cblx0fSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCB0ZXJtSWQpIHtcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2socGVlcklkLCBlcnIsIG51bGwpO1xuXG5cdFx0X3RoaXMuX2Nvbm5lY3Rpb24uX2QxaW5zdChwZWVySWQpLm9wZW5Tb2NrZXQoJy92YXIvcnVuL2RpeWEvc2hlbGwuc29jaycsIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgc29ja2V0KSB7XG5cdFx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2socGVlcklkLCBlcnIsIG51bGwpO1xuXG5cdFx0XHRzb2NrZXQud3JpdGUodGVybUlkICsgJ1xcbicpO1xuXG5cdFx0XHRjYWxsYmFjayhwZWVySWQsIG51bGwsIHtcblx0XHRcdFx0c29ja2V0OiBzb2NrZXQsXG5cblx0XHRcdFx0cmVzaXplOiBmdW5jdGlvbiByZXNpemUoY29scywgcm93cykge1xuXHRcdFx0XHRcdF90aGlzLl9jb25uZWN0aW9uLl9kMWluc3QocGVlcklkKS5yZXF1ZXN0KHtcblx0XHRcdFx0XHRcdHNlcnZpY2U6ICdzaGVsbCcsXG5cdFx0XHRcdFx0XHRmdW5jOiAnUmVzaXplU2hlbGwnLFxuXHRcdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0XHRwcm9jZXNzX2lkOiB0ZXJtSWQsXG5cdFx0XHRcdFx0XHRcdGNvbHM6IGNvbHMsXG5cdFx0XHRcdFx0XHRcdHJvd3M6IHJvd3Ncblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdyZXNpemVkIHRlcm0gJyArIHRlcm1JZCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuXHRcdFx0XHRcdHNvY2tldC5kaXNjb25uZWN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE5vWld4c0xtcHpJbDBzSW01aGJXVnpJanBiSWtScGVXRlRaV3hsWTNSdmNpSXNJbkpsY1hWcGNtVWlMQ0p3Y205MGIzUjVjR1VpTENKemFHVnNiQ0lzSW1OdmJXMWhibVFpTENKaGNtZHpJaXdpWTI5c2N5SXNJbkp2ZDNNaUxDSjBaWEp0SWl3aVkyRnNiR0poWTJzaUxDSnlaWEYxWlhOMElpd2ljMlZ5ZG1salpTSXNJbVoxYm1NaUxDSmtZWFJoSWl3aWNHVmxja2xrSWl3aVpYSnlJaXdpZEdWeWJVbGtJaXdpWDJOdmJtNWxZM1JwYjI0aUxDSmZaREZwYm5OMElpd2liM0JsYmxOdlkydGxkQ0lzSW5OdlkydGxkQ0lzSW5keWFYUmxJaXdpY21WemFYcGxJaXdpY0hKdlkyVnpjMTlwWkNJc0ltTnZibk52YkdVaUxDSnNiMmNpTENKamJHOXpaU0lzSW1ScGMyTnZibTVsWTNRaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCVFVFc1pVRkJaVU1zVVVGQlVTeDFRa0ZCVWl4RlFVRnBRMFFzV1VGQmRFUTdPMEZCUjBGQkxHRkJRV0ZGTEZOQlFXSXNRMEZCZFVKRExFdEJRWFpDTEVkQlFTdENMRlZCUVZWRExFOUJRVllzUlVGQmJVSkRMRWxCUVc1Q0xFVkJRWGxDUXl4SlFVRjZRaXhGUVVFclFrTXNTVUZCTDBJc1JVRkJjVU5ETEVsQlFYSkRMRVZCUVRKRFF5eFJRVUV6UXl4RlFVRnhSRHRCUVVGQk96dEJRVU51Uml4TlFVRkxReXhQUVVGTUxFTkJRV0U3UVVGRFdrTXNWMEZCVXl4UFFVUkhPMEZCUlZwRExGRkJRVTBzYVVKQlJrMDdRVUZIV2tNc1VVRkJUVHRCUVVOTVZDeHRRa0ZFU3p0QlFVVk1ReXhoUVVaTE8wRkJSMHhETEdGQlNFczdRVUZKVEVNc1lVRktTenRCUVV0TVF6dEJRVXhMTzBGQlNFMHNSVUZCWWl4RlFWZEZMRlZCUVVOTkxFMUJRVVFzUlVGQlUwTXNSMEZCVkN4RlFVRmpReXhOUVVGa0xFVkJRWGxDTzBGQlF6RkNMRTFCUVVsRUxFZEJRVW9zUlVGQlV5eFBRVUZQVGl4VFFVRlRTeXhOUVVGVUxFVkJRV2xDUXl4SFFVRnFRaXhGUVVGelFpeEpRVUYwUWl4RFFVRlFPenRCUVVWVUxGRkJRVXRGTEZkQlFVd3NRMEZCYVVKRExFOUJRV3BDTEVOQlFYbENTaXhOUVVGNlFpeEZRVUZwUTBzc1ZVRkJha01zUTBGQk5FTXNNRUpCUVRWRExFVkJRWGRGTEZWQlFVTk1MRTFCUVVRc1JVRkJVME1zUjBGQlZDeEZRVUZqU3l4TlFVRmtMRVZCUVhsQ08wRkJRMmhITEU5QlFVbE1MRWRCUVVvc1JVRkJVeXhQUVVGUFRpeFRRVUZWU3l4TlFVRldMRVZCUVd0Q1F5eEhRVUZzUWl4RlFVRjFRaXhKUVVGMlFpeERRVUZRT3p0QlFVVlVTeXhWUVVGUFF5eExRVUZRTEVOQlFXZENUQ3hOUVVGb1FqczdRVUZIUVZBc1dVRkJWVXNzVFVGQlZpeEZRVUZyUWl4SlFVRnNRaXhGUVVGM1FqdEJRVU4yUWswc1dVRkJVVUVzVFVGRVpUczdRVUZIZGtKRkxGbEJRVkVzWjBKQlFVTm9RaXhKUVVGRUxFVkJRVTlETEVsQlFWQXNSVUZCWjBJN1FVRkRka0lzVjBGQlMxVXNWMEZCVEN4RFFVRnBRa01zVDBGQmFrSXNRMEZCZVVKS0xFMUJRWHBDTEVWQlFXbERTaXhQUVVGcVF5eERRVUY1UXp0QlFVTjRRME1zWlVGQlV5eFBRVVFyUWp0QlFVVjRRME1zV1VGQlRTeGhRVVpyUXp0QlFVZDRRME1zV1VGQlRUdEJRVU5NVlN4dFFrRkJXVkFzVFVGRVVEdEJRVVZNVml4aFFVRk5RU3hKUVVaRU8wRkJSMHhETEdGQlFVMUJPMEZCU0VRN1FVRklhME1zVFVGQmVrTXNSVUZSUnl4VlFVRkRUeXhOUVVGRUxFVkJRVk5ETEVkQlFWUXNSVUZCWTBZc1NVRkJaQ3hGUVVGMVFqdEJRVU42UWxjc1kwRkJVVU1zUjBGQlVpeHRRa0ZCTkVKVUxFMUJRVFZDTzBGQlEwRXNUVUZXUkR0QlFWZEJMRXRCWm5OQ096dEJRV2xDZGtKVkxGZEJRVThzYVVKQlFVMDdRVUZEV2s0c1dVRkJUMDhzVlVGQlVEdEJRVU5CTzBGQmJrSnpRaXhKUVVGNFFqdEJRWEZDUVN4SFFUTkNSRHRCUVRSQ1FTeEZRVEZEUkR0QlFUSkRRU3hEUVRWRFJDSXNJbVpwYkdVaU9pSlRhR1ZzYkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU52Ym5OMElFUnBlV0ZUWld4bFkzUnZjaUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMFJwZVdGVFpXeGxZM1J2Y2k1cWN5Y3BMa1JwZVdGVFpXeGxZM1J2Y2x4dVhHNWNia1JwZVdGVFpXeGxZM1J2Y2k1d2NtOTBiM1I1Y0dVdWMyaGxiR3dnUFNCbWRXNWpkR2x2YmlBb1kyOXRiV0Z1WkN3Z1lYSm5jeXdnWTI5c2N5d2djbTkzY3l3Z2RHVnliU3dnWTJGc2JHSmhZMnNwSUh0Y2JseDBkR2hwY3k1eVpYRjFaWE4wS0h0Y2JseDBYSFJ6WlhKMmFXTmxPaUFuYzJobGJHd25MRnh1WEhSY2RHWjFibU02SUNkU1pXZHBjM1JsY2xCeWIyTmxjM01uTEZ4dVhIUmNkR1JoZEdFNklIdGNibHgwWEhSY2RHTnZiVzFoYm1Rc1hHNWNkRngwWEhSaGNtZHpMRnh1WEhSY2RGeDBZMjlzY3l4Y2JseDBYSFJjZEhKdmQzTXNYRzVjZEZ4MFhIUjBaWEp0WEc1Y2RGeDBmVnh1WEhSOVhHNWNkQ3dnS0hCbFpYSkpaQ3dnWlhKeUxDQjBaWEp0U1dRcElEMCtJSHRjYmx4MFhIUnBaaUFvWlhKeUtTQnlaWFIxY200Z1kyRnNiR0poWTJzb2NHVmxja2xrTENCbGNuSXNJRzUxYkd3cFhHNWNkRngwWEc1Y2RGeDBkR2hwY3k1ZlkyOXVibVZqZEdsdmJpNWZaREZwYm5OMEtIQmxaWEpKWkNrdWIzQmxibE52WTJ0bGRDZ25MM1poY2k5eWRXNHZaR2w1WVM5emFHVnNiQzV6YjJOckp5d2dLSEJsWlhKSlpDd2daWEp5TENCemIyTnJaWFFwSUQwK0lIdGNibHgwWEhSY2RHbG1JQ2hsY25JcElISmxkSFZ5YmlCallXeHNZbUZqYXlBb2NHVmxja2xrTENCbGNuSXNJRzUxYkd3cFhHNWNibHgwWEhSY2RITnZZMnRsZEM1M2NtbDBaU2hnSkh0MFpYSnRTV1I5WEZ4dVlDbGNibHh1WEc1Y2RGeDBYSFJqWVd4c1ltRmpheUFvY0dWbGNrbGtMQ0J1ZFd4c0xDQjdYRzVjZEZ4MFhIUmNkSE52WTJ0bGREb2djMjlqYTJWMExGeHVYSFJjZEZ4MFhIUmNibHgwWEhSY2RGeDBjbVZ6YVhwbE9pQW9ZMjlzY3l3Z2NtOTNjeWtnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdVgyTnZibTVsWTNScGIyNHVYMlF4YVc1emRDaHdaV1Z5U1dRcExuSmxjWFZsYzNRb2UxeHVYSFJjZEZ4MFhIUmNkRngwYzJWeWRtbGpaVG9nSjNOb1pXeHNKeXhjYmx4MFhIUmNkRngwWEhSY2RHWjFibU02SUNkU1pYTnBlbVZUYUdWc2JDY3NYRzVjZEZ4MFhIUmNkRngwWEhSa1lYUmhPaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEJ5YjJObGMzTmZhV1E2SUhSbGNtMUpaQ3hjYmx4MFhIUmNkRngwWEhSY2RGeDBZMjlzY3pvZ1kyOXNjeXhjYmx4MFhIUmNkRngwWEhSY2RGeDBjbTkzY3pvZ2NtOTNjMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDBzSUNod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNrZ1BUNGdlMXh1WEhSY2RGeDBYSFJjZEZ4MFkyOXVjMjlzWlM1c2IyY29ZSEpsYzJsNlpXUWdkR1Z5YlNBa2UzUmxjbTFKWkgxZ0tWeHVYSFJjZEZ4MFhIUmNkSDBwWEc1Y2RGeDBYSFJjZEgwc1hHNWNibHgwWEhSY2RGeDBZMnh2YzJVNklDZ3BJRDArSUh0Y2JseDBYSFJjZEZ4MFhIUnpiMk5yWlhRdVpHbHpZMjl1Ym1WamRDZ3BYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwWEc1Y2RGeDBmU2xjYmx4MGZTbGNibjFjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBDb3B5cmlnaHQgOiBQYXJ0bmVyaW5nIDMuMCAoMjAwNy0yMDE2KVxuICogQXV0aG9yIDogU3lsdmFpbiBNYWjDqSA8c3lsdmFpbi5tYWhlQHBhcnRuZXJpbmcuZnI+XG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgZGl5YS1zZGsuXG4gKlxuICogZGl5YS1zZGsgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogZGl5YS1zZGsgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggZGl5YS1zZGsuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogbWF5YS1jbGllbnRcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgUGFydG5lcmluZyBSb2JvdGljcywgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IHZlcnNpb25cbiAqXHQzLjAgb2YgdGhlIExpY2Vuc2UuIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZVxuICogdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW5cbiAqIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVJcbiAqIFBVUlBPU0UuIFNlZSB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5LlxuICovXG5cbnZhciBpc0Jyb3dzZXIgPSAhKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcbmlmICghaXNCcm93c2VyKSB7XG5cdHZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbn0gZWxzZSB7XG5cdHZhciBQcm9taXNlID0gd2luZG93LlByb21pc2U7XG59XG52YXIgRGl5YVNlbGVjdG9yID0gcmVxdWlyZSgnLi4vLi4vRGl5YVNlbGVjdG9yJykuRGl5YVNlbGVjdG9yO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBNZXNzYWdlID0gcmVxdWlyZSgnLi4vbWVzc2FnZScpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLyBMb2dnaW5nIHV0aWxpdHkgbWV0aG9kcyAvLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnZhciBERUJVRyA9IHRydWU7XG52YXIgTG9nZ2VyID0ge1xuXHRsb2c6IGZ1bmN0aW9uIGxvZyhtZXNzYWdlKSB7XG5cdFx0aWYgKERFQlVHKSBjb25zb2xlLmxvZyhtZXNzYWdlKTtcblx0fSxcblxuXHRlcnJvcjogZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuXHRcdGlmIChERUJVRykgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcblx0fVxufTtcblxuLyoqXG4gKlx0Y2FsbGJhY2sgOiBmdW5jdGlvbiBjYWxsZWQgYWZ0ZXIgbW9kZWwgdXBkYXRlZFxuICogKi9cbmZ1bmN0aW9uIFN0YXR1cyhzZWxlY3Rvcikge1xuXHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdHRoaXMuX2NvZGVyID0gc2VsZWN0b3IuZW5jb2RlKCk7XG5cdHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuXG5cdC8qKiBtb2RlbCBvZiByb2JvdCA6IGF2YWlsYWJsZSBwYXJ0cyBhbmQgc3RhdHVzICoqL1xuXHR0aGlzLnJvYm90TW9kZWwgPSBbXTtcblx0dGhpcy5fcm9ib3RNb2RlbEluaXQgPSBmYWxzZTtcblxuXHQvKioqIHN0cnVjdHVyZSBvZiBkYXRhIGNvbmZpZyAqKipcbiBcdCBjcml0ZXJpYSA6XG4gXHQgICB0aW1lOiBhbGwgMyB0aW1lIGNyaXRlcmlhIHNob3VsZCBub3QgYmUgZGVmaW5lZCBhdCB0aGUgc2FtZSB0aW1lLiAocmFuZ2Ugd291bGQgYmUgZ2l2ZW4gdXApXG4gXHQgICAgIGJlZzoge1tudWxsXSx0aW1lfSAobnVsbCBtZWFucyBtb3N0IHJlY2VudCkgLy8gc3RvcmVkIGEgVVRDIGluIG1zIChudW0pXG4gXHQgICAgIGVuZDoge1tudWxsXSwgdGltZX0gKG51bGwgbWVhbnMgbW9zdCBvbGRlc3QpIC8vIHN0b3JlZCBhcyBVVEMgaW4gbXMgKG51bSlcbiBcdCAgICAgcmFuZ2U6IHtbbnVsbF0sIHRpbWV9IChyYW5nZSBvZiB0aW1lKHBvc2l0aXZlKSApIC8vIGluIHMgKG51bSlcbiBcdCAgIHJvYm90OiB7QXJyYXlPZiBJRCBvciBbXCJhbGxcIl19XG4gXHQgICBwbGFjZToge0FycmF5T2YgSUQgb3IgW1wiYWxsXCJdfVxuIFx0IG9wZXJhdG9yOiB7W2xhc3RdLCBtYXgsIG1veSwgc2R9IC0oIG1heWJlIG1veSBzaG91bGQgYmUgZGVmYXVsdFxuIFx0IC4uLlxuIFx0XHQgcGFydHMgOiB7W251bGxdIG9yIEFycmF5T2YgUGFydHNJZH0gdG8gZ2V0IGVycm9yc1xuIFx0IHN0YXR1cyA6IHtbbnVsbF0gb3IgQXJyYXlPZiBTdGF0dXNOYW1lfSB0byBnZXQgc3RhdHVzXG4gXHRcdCBzYW1wbGluZzoge1tudWxsXSBvciBpbnR9XG4gKi9cblx0dGhpcy5kYXRhQ29uZmlnID0ge1xuXHRcdGNyaXRlcmlhOiB7XG5cdFx0XHR0aW1lOiB7XG5cdFx0XHRcdGJlZzogbnVsbCxcblx0XHRcdFx0ZW5kOiBudWxsLFxuXHRcdFx0XHRyYW5nZTogbnVsbCAvLyBpbiBzXG5cdFx0XHR9LFxuXHRcdFx0cm9ib3Q6IG51bGxcblx0XHR9LFxuXHRcdG9wZXJhdG9yOiAnbGFzdCcsXG5cdFx0cGFydHM6IG51bGwsXG5cdFx0c3RhdHVzOiBudWxsXG5cdH07XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuLyoqXG4gKiBHZXQgcm9ib3RNb2RlbCA6XG4gKiB7XG4gKiAgcGFydHM6IHtcbiAqXHRcdFwicGFydFhYXCI6IHtcbiAqIFx0XHRcdCBlcnJvcnNEZXNjcjogeyBlbmNvdW50ZXJlZCBlcnJvcnMgaW5kZXhlZCBieSBlcnJvcklkcz4wIH1cbiAqXHRcdFx0XHQ+IENvbmZpZyBvZiBlcnJvcnMgOlxuICpcdFx0XHRcdFx0Y3JpdExldmVsOiBGTE9BVCwgLy8gY291bGQgYmUgaW50Li4uXG4gKiBcdFx0XHRcdFx0bXNnOiBTVFJJTkcsXG4gKlx0XHRcdFx0XHRzdG9wU2VydmljZUlkOiBTVFJJTkcsXG4gKlx0XHRcdFx0XHRydW5TY3JpcHQ6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gKlx0XHRcdFx0XHRtaXNzaW9uTWFzazogU2VxdWVsaXplLklOVEVHRVIsXG4gKlx0XHRcdFx0XHRydW5MZXZlbDogU2VxdWVsaXplLklOVEVHRVJcbiAqXHRcdFx0ZXJyb3I6W0ZMT0FULCAuLi5dLCAvLyBjb3VsZCBiZSBpbnQuLi5cbiAqXHRcdFx0dGltZTpbRkxPQVQsIC4uLl0sXG4gKlx0XHRcdHJvYm90OltGTE9BVCwgLi4uXSxcbiAqXHRcdFx0Ly8vIHBsYWNlOltGTE9BVCwgLi4uXSwgbm90IGltcGxlbWVudGVkIHlldFxuICpcdFx0fSxcbiAqXHQgXHQuLi4gKFwiUGFydFlZXCIpXG4gKiAgfSxcbiAqICBzdGF0dXM6IHtcbiAqXHRcdFwic3RhdHVzWFhcIjoge1xuICpcdFx0XHRcdGRhdGE6W0ZMT0FULCAuLi5dLCAvLyBjb3VsZCBiZSBpbnQuLi5cbiAqXHRcdFx0XHR0aW1lOltGTE9BVCwgLi4uXSxcbiAqXHRcdFx0XHRyb2JvdDpbRkxPQVQsIC4uLl0sXG4gKlx0XHRcdFx0Ly8vIHBsYWNlOltGTE9BVCwgLi4uXSwgbm90IGltcGxlbWVudGVkIHlldFxuICpcdFx0XHRcdHJhbmdlOiBbRkxPQVQsIEZMT0FUXSxcbiAqXHRcdFx0XHRsYWJlbDogc3RyaW5nXG4gKlx0XHRcdH0sXG4gKlx0IFx0Li4uIChcIlN0YXR1c1lZXCIpXG4gKiAgfVxuICogfVxuICovXG5TdGF0dXMucHJvdG90eXBlLmdldFJvYm90TW9kZWwgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLnJvYm90TW9kZWw7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhQ29uZmlnIGNvbmZpZyBmb3IgZGF0YSByZXF1ZXN0XG4gKiBpZiBkYXRhQ29uZmlnIGlzIGRlZmluZSA6IHNldCBhbmQgcmV0dXJuIHRoaXNcbiAqXHQgQHJldHVybiB7U3RhdHVzfSB0aGlzXG4gKiBlbHNlXG4gKlx0IEByZXR1cm4ge09iamVjdH0gY3VycmVudCBkYXRhQ29uZmlnXG4gKi9cblN0YXR1cy5wcm90b3R5cGUuRGF0YUNvbmZpZyA9IGZ1bmN0aW9uIChuZXdEYXRhQ29uZmlnKSB7XG5cdGlmIChuZXdEYXRhQ29uZmlnKSB7XG5cdFx0dGhpcy5kYXRhQ29uZmlnID0gbmV3RGF0YUNvbmZpZztcblx0XHRyZXR1cm4gdGhpcztcblx0fSBlbHNlIHJldHVybiB0aGlzLmRhdGFDb25maWc7XG59O1xuLyoqXG4gKiBUTyBCRSBJTVBMRU1FTlRFRCA6IG9wZXJhdG9yIG1hbmFnZW1lbnQgaW4gRE4tU3RhdHVzXG4gKiBAcGFyYW0gIHtTdHJpbmd9XHQgbmV3T3BlcmF0b3IgOiB7W2xhc3RdLCBtYXgsIG1veSwgc2R9XG4gKiBAcmV0dXJuIHtTdGF0dXN9IHRoaXMgLSBjaGFpbmFibGVcbiAqIFNldCBvcGVyYXRvciBjcml0ZXJpYS5cbiAqIERlcGVuZHMgb24gbmV3T3BlcmF0b3JcbiAqXHRAcGFyYW0ge1N0cmluZ30gbmV3T3BlcmF0b3JcbiAqXHRAcmV0dXJuIHRoaXNcbiAqIEdldCBvcGVyYXRvciBjcml0ZXJpYS5cbiAqXHRAcmV0dXJuIHtTdHJpbmd9IG9wZXJhdG9yXG4gKi9cblN0YXR1cy5wcm90b3R5cGUuRGF0YU9wZXJhdG9yID0gZnVuY3Rpb24gKG5ld09wZXJhdG9yKSB7XG5cdGlmIChuZXdPcGVyYXRvcikge1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5vcGVyYXRvciA9IG5ld09wZXJhdG9yO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9IGVsc2UgcmV0dXJuIHRoaXMuZGF0YUNvbmZpZy5vcGVyYXRvcjtcbn07XG4vKipcbiAqIERlcGVuZHMgb24gbnVtU2FtcGxlc1xuICogQHBhcmFtIHtpbnR9IG51bWJlciBvZiBzYW1wbGVzIGluIGRhdGFNb2RlbFxuICogaWYgZGVmaW5lZCA6IHNldCBudW1iZXIgb2Ygc2FtcGxlc1xuICpcdEByZXR1cm4ge1N0YXR1c30gdGhpc1xuICogZWxzZVxuICpcdEByZXR1cm4ge2ludH0gbnVtYmVyIG9mIHNhbXBsZXNcbiAqKi9cblN0YXR1cy5wcm90b3R5cGUuRGF0YVNhbXBsaW5nID0gZnVuY3Rpb24gKG51bVNhbXBsZXMpIHtcblx0aWYgKG51bVNhbXBsZXMpIHtcblx0XHR0aGlzLmRhdGFDb25maWcuc2FtcGxpbmcgPSBudW1TYW1wbGVzO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9IGVsc2UgcmV0dXJuIHRoaXMuZGF0YUNvbmZpZy5zYW1wbGluZztcbn07XG4vKipcbiAqIFNldCBvciBnZXQgZGF0YSB0aW1lIGNyaXRlcmlhIGJlZyBhbmQgZW5kLlxuICogSWYgcGFyYW0gZGVmaW5lZFxuICpcdEBwYXJhbSB7RGF0ZX0gbmV3VGltZUJlZyAvLyBtYXkgYmUgbnVsbFxuICpcdEBwYXJhbSB7RGF0ZX0gbmV3VGltZUVuZCAvLyBtYXkgYmUgbnVsbFxuICpcdEByZXR1cm4ge1N0YXR1c30gdGhpc1xuICogSWYgbm8gcGFyYW0gZGVmaW5lZDpcbiAqXHRAcmV0dXJuIHtPYmplY3R9IFRpbWUgb2JqZWN0OiBmaWVsZHMgYmVnIGFuZCBlbmQuXG4gKi9cblN0YXR1cy5wcm90b3R5cGUuRGF0YVRpbWUgPSBmdW5jdGlvbiAobmV3VGltZUJlZywgbmV3VGltZUVuZCwgbmV3UmFuZ2UpIHtcblx0aWYgKG5ld1RpbWVCZWcgfHwgbmV3VGltZUVuZCB8fCBuZXdSYW5nZSkge1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLmJlZyA9IG5ld1RpbWVCZWcuZ2V0VGltZSgpO1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLmVuZCA9IG5ld1RpbWVFbmQuZ2V0VGltZSgpO1xuXHRcdHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLnJhbmdlID0gbmV3UmFuZ2U7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSByZXR1cm4ge1xuXHRcdGJlZzogbmV3IERhdGUodGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnRpbWUuYmVnKSxcblx0XHRlbmQ6IG5ldyBEYXRlKHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLmVuZCksXG5cdFx0cmFuZ2U6IG5ldyBEYXRlKHRoaXMuZGF0YUNvbmZpZy5jcml0ZXJpYS50aW1lLnJhbmdlKVxuXHR9O1xufTtcbi8qKlxuICogRGVwZW5kcyBvbiByb2JvdElkc1xuICogU2V0IHJvYm90IGNyaXRlcmlhLlxuICpcdEBwYXJhbSB7QXJyYXlbSW50XX0gcm9ib3RJZHMgbGlzdCBvZiByb2JvdCBJZHNcbiAqIEdldCByb2JvdCBjcml0ZXJpYS5cbiAqXHRAcmV0dXJuIHtBcnJheVtJbnRdfSBsaXN0IG9mIHJvYm90IElkc1xuICovXG5TdGF0dXMucHJvdG90eXBlLkRhdGFSb2JvdElkcyA9IGZ1bmN0aW9uIChyb2JvdElkcykge1xuXHRpZiAocm9ib3RJZHMpIHtcblx0XHR0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEucm9ib3QgPSByb2JvdElkcztcblx0XHRyZXR1cm4gdGhpcztcblx0fSBlbHNlIHJldHVybiB0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEucm9ib3Q7XG59O1xuLyoqXG4gKiBEZXBlbmRzIG9uIHBsYWNlSWRzIC8vIG5vdCByZWxldmFudD8sIG5vdCBpbXBsZW1lbnRlZCB5ZXRcbiAqIFNldCBwbGFjZSBjcml0ZXJpYS5cbiAqXHRAcGFyYW0ge0FycmF5W0ludF19IHBsYWNlSWRzIGxpc3Qgb2YgcGxhY2UgSWRzXG4gKiBHZXQgcGxhY2UgY3JpdGVyaWEuXG4gKlx0QHJldHVybiB7QXJyYXlbSW50XX0gbGlzdCBvZiBwbGFjZSBJZHNcbiAqL1xuU3RhdHVzLnByb3RvdHlwZS5EYXRhUGxhY2VJZHMgPSBmdW5jdGlvbiAocGxhY2VJZHMpIHtcblx0aWYgKHBsYWNlSWRzKSB7XG5cdFx0dGhpcy5kYXRhQ29uZmlnLmNyaXRlcmlhLnBsYWNlSWQgPSBwbGFjZUlkcztcblx0XHRyZXR1cm4gdGhpcztcblx0fSBlbHNlIHJldHVybiB0aGlzLmRhdGFDb25maWcuY3JpdGVyaWEucGxhY2U7XG59O1xuLyoqXG4gKiBHZXQgZGF0YSBieSBzZW5zb3IgbmFtZS5cbiAqXHRAcGFyYW0ge0FycmF5W1N0cmluZ119IHNlbnNvck5hbWUgbGlzdCBvZiBzZW5zb3JzXG4gKi9cblN0YXR1cy5wcm90b3R5cGUuZ2V0RGF0YUJ5TmFtZSA9IGZ1bmN0aW9uIChzZW5zb3JOYW1lcykge1xuXHR2YXIgZGF0YSA9IFtdO1xuXHRmb3IgKHZhciBuIGluIHNlbnNvck5hbWVzKSB7XG5cdFx0ZGF0YS5wdXNoKHRoaXMuZGF0YU1vZGVsW3NlbnNvck5hbWVzW25dXSk7XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBlcnJvci9zdGF0dXMgdXBkYXRlc1xuICovXG5TdGF0dXMucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gKHJvYm90TmFtZXMsIGNhbGxiYWNrKSB7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dGhpcy5zZWxlY3Rvci5zZXRNYXhMaXN0ZW5lcnMoMCk7XG5cdHRoaXMuc2VsZWN0b3IuX2Nvbm5lY3Rpb24uc2V0TWF4TGlzdGVuZXJzKDApO1xuXHR2YXIgc2VuZERhdGEgPSBbXTtcblx0dmFyIHJvYm90SWRzID0gW107XG5cdHJldHVybiBQcm9taXNlLnRyeShmdW5jdGlvbiAoXykge1xuXHRcdHZhciByZXEgPSBfdGhpcy5zZWxlY3Rvci5yZXF1ZXN0KHtcblx0XHRcdHNlcnZpY2U6ICdzdGF0dXMnLFxuXHRcdFx0ZnVuYzogJ0dldE1hbmFnZWRPYmplY3RzJyxcblx0XHRcdG9iajoge1xuXHRcdFx0XHRpbnRlcmZhY2U6ICdvcmcuZnJlZWRlc2t0b3AuREJ1cy5PYmplY3RNYW5hZ2VyJ1xuXHRcdFx0fVxuXHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgb2JqRGF0YSkge1xuXHRcdFx0Ly8gZ2V0IGFsbCBvYmplY3QgcGF0aHMsIGludGVyZmFjZXMgYW5kIHByb3BlcnRpZXMgY2hpbGRyZW4gb2YgU3RhdHVzXG5cdFx0XHR2YXIgcm9ib3ROYW1lID0gJyc7XG5cdFx0XHR2YXIgcm9ib3RJZCA9IDE7XG5cblx0XHRcdHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKG9iamVjdFBhdGgpIHtcblx0XHRcdFx0aWYgKG9iakRhdGFbb2JqZWN0UGF0aF1bJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90J10gIT0gbnVsbCkge1xuXHRcdFx0XHRcdHJvYm90TmFtZSA9IG9iakRhdGFbb2JqZWN0UGF0aF1bJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90J10uUm9ib3ROYW1lO1xuXHRcdFx0XHRcdHJvYm90SWQgPSBvYmpEYXRhW29iamVjdFBhdGhdWydmci5wYXJ0bmVyaW5nLlN0YXR1cy5Sb2JvdCddLlJvYm90SWQ7XG5cdFx0XHRcdFx0cm9ib3RJZHNbcm9ib3ROYW1lXSA9IHJvYm90SWQ7XG5cdFx0XHRcdFx0X3RoaXMuZ2V0QWxsU3RhdHVzZXMocm9ib3ROYW1lLCBmdW5jdGlvbiAobW9kZWwpIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKG1vZGVsKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob2JqRGF0YVtvYmplY3RQYXRoXVsnZnIucGFydG5lcmluZy5TdGF0dXMuUGFydCddICE9IG51bGwpIHtcblx0XHRcdFx0XHR2YXIgc3VicyA9IF90aGlzLnNlbGVjdG9yLnN1YnNjcmliZSh7IC8vIHN1YnNjcmliZXMgdG8gc3RhdHVzIGNoYW5nZXMgZm9yIGFsbCBwYXJ0c1xuXHRcdFx0XHRcdFx0c2VydmljZTogJ3N0YXR1cycsXG5cdFx0XHRcdFx0XHRmdW5jOiAnQ3VycmVudFN0YXR1c0NoYW5nZWQnLFxuXHRcdFx0XHRcdFx0b2JqOiB7XG5cdFx0XHRcdFx0XHRcdGludGVyZmFjZTogJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlBhcnQnLFxuXHRcdFx0XHRcdFx0XHRwYXRoOiBvYmplY3RQYXRoXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZGF0YTogcm9ib3ROYW1lc1xuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRcdFx0aWYgKGVyciAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdExvZ2dlci5lcnJvcihcIlN0YXR1c1N1YnNjcmliZTpcIiArIGVycik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyb2JvdE5hbWUgPSBvYmplY3RQYXRoLnNwbGl0KFwiL1wiKVs1XTtcblx0XHRcdFx0XHRcdFx0cm9ib3RJZCA9IHJvYm90SWRzW3JvYm90TmFtZV07XG5cdFx0XHRcdFx0XHRcdHNlbmREYXRhWzBdID0gZGF0YTtcblx0XHRcdFx0XHRcdFx0X3RoaXMuX2dldFJvYm90TW9kZWxGcm9tUmVjdjIoc2VuZERhdGEsIHJvYm90SWQsIHJvYm90TmFtZSk7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzLnJvYm90TW9kZWwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF90aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Zm9yICh2YXIgb2JqZWN0UGF0aCBpbiBvYmpEYXRhKSB7XG5cdFx0XHRcdF9sb29wKG9iamVjdFBhdGgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0TG9nZ2VyLmVycm9yKGVycik7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBDbG9zZSBhbGwgc3Vic2NyaXB0aW9uc1xuICovXG5TdGF0dXMucHJvdG90eXBlLmNsb3NlU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0Zm9yICh2YXIgaSBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbnNbaV0uY2xvc2UoKTtcblx0fVxuXHR0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcblx0dGhpcy5yb2JvdE1vZGVsID0gW107XG59O1xuXG4vKipcbiAqIEdldCBkYXRhIGdpdmVuIGRhdGFDb25maWcuXG4gKiBAcGFyYW0ge2Z1bmN9IGNhbGxiYWNrIDogY2FsbGVkIGFmdGVyIHVwZGF0ZVxuICogVE9ETyBVU0UgUFJPTUlTRVxuICovXG5TdGF0dXMucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRhdGFDb25maWcpIHtcblx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0dmFyIGRhdGFNb2RlbCA9IHt9O1xuXHRyZXR1cm4gUHJvbWlzZS50cnkoZnVuY3Rpb24gKF8pIHtcblx0XHRpZiAoZGF0YUNvbmZpZyAhPSBudWxsKSBfdGhpczIuRGF0YUNvbmZpZyhkYXRhQ29uZmlnKTtcblx0XHQvLyBjb25zb2xlLmxvZyhcIlJlcXVlc3Q6IFwiK0pTT04uc3RyaW5naWZ5KGRhdGFDb25maWcpKTtcblx0XHRfdGhpczIuc2VsZWN0b3IucmVxdWVzdCh7XG5cdFx0XHRzZXJ2aWNlOiBcInN0YXR1c1wiLFxuXHRcdFx0ZnVuYzogXCJEYXRhUmVxdWVzdFwiLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHR0eXBlOiBcInNwbFJlcVwiLFxuXHRcdFx0XHRkYXRhQ29uZmlnOiBfdGhpczIuZGF0YUNvbmZpZ1xuXHRcdFx0fVxuXHRcdH0sIGZ1bmN0aW9uIChkbklkLCBlcnIsIGRhdGEpIHtcblx0XHRcdGlmIChlcnIgIT0gbnVsbCkge1xuXHRcdFx0XHRMb2dnZXIuZXJyb3IoXCJbXCIgKyBfdGhpczIuZGF0YUNvbmZpZy5zZW5zb3JzICsgXCJdIFJlY3YgZXJyOiBcIiArIEpTT04uc3RyaW5naWZ5KGVycikpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGF0YS5oZWFkZXIuZXJyb3IgIT0gbnVsbCkge1xuXHRcdFx0XHQvLyBUT0RPIDogY2hlY2svdXNlIGVyciBzdGF0dXMgYW5kIGFkYXB0IGJlaGF2aW9yIGFjY29yZGluZ2x5XG5cdFx0XHRcdExvZ2dlci5lcnJvcihcIlVwZGF0ZURhdGE6XFxuXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhLmhlYWRlci5yZXFDb25maWcpKTtcblx0XHRcdFx0TG9nZ2VyLmVycm9yKFwiRGF0YSByZXF1ZXN0IGZhaWxlZCAoXCIgKyBkYXRhLmhlYWRlci5lcnJvci5zdCArIFwiKTogXCIgKyBkYXRhLmhlYWRlci5lcnJvci5tc2cpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvL0xvZ2dlci5sb2coSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhTW9kZWwpKTtcblx0XHRcdGRhdGFNb2RlbCA9IF90aGlzMi5fZ2V0RGF0YU1vZGVsRnJvbVJlY3YoZGF0YSk7XG5cblx0XHRcdExvZ2dlci5sb2coX3RoaXMyLmdldERhdGFNb2RlbCgpKTtcblx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2suYmluZChfdGhpczIpOyAvLyBiaW5kIGNhbGxiYWNrIHdpdGggU3RhdHVzXG5cdFx0XHRjYWxsYmFjayhkYXRhTW9kZWwpOyAvLyBjYWxsYmFjayBmdW5jXG5cdFx0fSk7XG5cdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRMb2dnZXIuZXJyb3IoZXJyKTtcblx0fSk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBpbnRlcm5hbCByb2JvdCBtb2RlbCB3aXRoIHJlY2VpdmVkIGRhdGEgKHZlcnNpb24gMilcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBkYXRhIHJlY2VpdmVkIGZyb20gRGl5YU5vZGUgYnkgd2Vic29ja2V0XG4gKiBAcmV0dXJuIHtbdHlwZV19XHRcdFtkZXNjcmlwdGlvbl1cbiAqL1xuU3RhdHVzLnByb3RvdHlwZS5fZ2V0Um9ib3RNb2RlbEZyb21SZWN2MiA9IGZ1bmN0aW9uIChkYXRhLCByb2JvdElkLCByb2JvdE5hbWUpIHtcblx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0aWYgKHRoaXMucm9ib3RNb2RlbCA9PSBudWxsKSB0aGlzLnJvYm90TW9kZWwgPSBbXTtcblxuXHRpZiAodGhpcy5yb2JvdE1vZGVsW3JvYm90SWRdICE9IG51bGwpIHRoaXMucm9ib3RNb2RlbFtyb2JvdElkXS5wYXJ0cyA9IHt9OyAvLyByZXNldCBwYXJ0c1xuXG5cdGlmICh0aGlzLnJvYm90TW9kZWxbcm9ib3RJZF0gPT0gbnVsbCkgdGhpcy5yb2JvdE1vZGVsW3JvYm90SWRdID0ge307XG5cblx0dGhpcy5yb2JvdE1vZGVsW3JvYm90SWRdID0ge1xuXHRcdHJvYm90OiB7XG5cdFx0XHRuYW1lOiByb2JvdE5hbWVcblx0XHR9XG5cdH07XG5cblx0LyoqIGV4dHJhY3QgcGFydHMgaW5mbyAqKi9cblx0dGhpcy5yb2JvdE1vZGVsW3JvYm90SWRdLnBhcnRzID0ge307XG5cdHZhciByUGFydHMgPSB0aGlzLnJvYm90TW9kZWxbcm9ib3RJZF0ucGFydHM7XG5cblx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG5cdFx0dmFyIHBhcnRJZCA9IGRbMF07XG5cdFx0dmFyIGNhdGVnb3J5ID0gZFsxXTtcblx0XHR2YXIgcGFydE5hbWUgPSBkWzJdO1xuXHRcdHZhciBsYWJlbCA9IGRbM107XG5cdFx0dmFyIHRpbWUgPSBkWzRdO1xuXHRcdHZhciBjb2RlID0gZFs1XTtcblx0XHR2YXIgY29kZVJlZiA9IGRbNl07XG5cdFx0dmFyIG1zZyA9IGRbN107XG5cdFx0dmFyIGNyaXRMZXZlbCA9IGRbOF07XG5cdFx0dmFyIGRlc2NyaXB0aW9uID0gZFs5XTtcblxuXHRcdGlmIChyUGFydHNbcGFydElkXSA9PSBudWxsKSB7XG5cdFx0XHRyUGFydHNbcGFydElkXSA9IHt9O1xuXHRcdH1cblx0XHQvKiB1cGRhdGUgcGFydCBjYXRlZ29yeSAqL1xuXHRcdHJQYXJ0c1twYXJ0SWRdLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG5cdFx0LyogdXBkYXRlIHBhcnQgbmFtZSAqL1xuXHRcdHJQYXJ0c1twYXJ0SWRdLm5hbWUgPSBwYXJ0TmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdC8qIHVwZGF0ZSBwYXJ0IGxhYmVsICovXG5cdFx0clBhcnRzW3BhcnRJZF0ubGFiZWwgPSBsYWJlbDtcblxuXHRcdC8qIHVwZGF0ZSBlcnJvciAqL1xuXHRcdC8qKiB1cGRhdGUgZXJyb3JMaXN0ICoqL1xuXHRcdGlmIChyUGFydHNbcGFydElkXS5lcnJvckxpc3QgPT0gbnVsbCkgclBhcnRzW3BhcnRJZF0uZXJyb3JMaXN0ID0ge307XG5cblx0XHRpZiAoclBhcnRzW3BhcnRJZF0uZXJyb3JMaXN0W2NvZGVSZWZdID09IG51bGwpIHJQYXJ0c1twYXJ0SWRdLmVycm9yTGlzdFtjb2RlUmVmXSA9IHtcblx0XHRcdG1zZzogbXNnLFxuXHRcdFx0Y3JpdExldmVsOiBjcml0TGV2ZWwsXG5cdFx0XHRkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cblx0XHR9O1xuXHRcdHZhciBldnRzX3RtcCA9IHtcblx0XHRcdHRpbWU6IF90aGlzMy5fY29kZXIuZnJvbSh0aW1lKSxcblx0XHRcdGNvZGU6IF90aGlzMy5fY29kZXIuZnJvbShjb2RlKSxcblx0XHRcdGNvZGVSZWY6IF90aGlzMy5fY29kZXIuZnJvbShjb2RlUmVmKVxuXHRcdH07XG5cdFx0LyoqIGlmIHJlY2VpdmVkIGxpc3Qgb2YgZXZlbnRzICoqL1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGV2dHNfdG1wLmNvZGUpIHx8IEFycmF5LmlzQXJyYXkoZXZ0c190bXAudGltZSkgfHwgQXJyYXkuaXNBcnJheShldnRzX3RtcC5jb2RlUmVmKSkge1xuXHRcdFx0aWYgKGV2dHNfdG1wLmNvZGUubGVuZ3RoID09PSBldnRzX3RtcC5jb2RlUmVmLmxlbmd0aCAmJiBldnRzX3RtcC5jb2RlLmxlbmd0aCA9PT0gZXZ0c190bXAudGltZS5sZW5ndGgpIHtcblx0XHRcdFx0LyoqIGJ1aWxkIGxpc3Qgb2YgZXZlbnRzICoqL1xuXHRcdFx0XHRyUGFydHNbcGFydElkXS5ldnRzID0gW107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZXZ0c190bXAuY29kZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHJQYXJ0c1twYXJ0SWRdLmV2dHMucHVzaCh7XG5cdFx0XHRcdFx0XHR0aW1lOiBldnRzX3RtcC50aW1lW2ldLFxuXHRcdFx0XHRcdFx0Y29kZTogZXZ0c190bXAuY29kZVtpXSxcblx0XHRcdFx0XHRcdGNvZGVSZWY6IGV2dHNfdG1wLmNvZGVSZWZbaV1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIExvZ2dlci5lcnJvcihcIlN0YXR1czpJbmNvbnNpc3RhbnQgbGVuZ3RocyBvZiBidWZmZXJzICh0aW1lL2NvZGUvY29kZVJlZilcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8qKiBqdXN0IGluIGNhc2UsIHRvIHByb3ZpZGUgYmFja3dhcmQgY29tcGF0aWJpbGl0eSAqKi9cblx0XHRcdC8qKiBzZXQgcmVjZWl2ZWQgZXZlbnQgKiovXG5cdFx0XHRyUGFydHNbcGFydElkXS5ldnRzID0gW3tcblx0XHRcdFx0dGltZTogZXZ0c190bXAudGltZSxcblx0XHRcdFx0Y29kZTogZXZ0c190bXAuY29kZSxcblx0XHRcdFx0Y29kZVJlZjogZXZ0c190bXAuY29kZVJlZlxuXHRcdFx0fV07XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKiBjcmVhdGUgU3RhdHVzIHNlcnZpY2UgKiovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLlN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyBTdGF0dXModGhpcyk7XG59O1xuXG4vKipcbiAqIFNldCBvbiBzdGF0dXNcbiAqIEBwYXJhbSByb2JvdE5hbWUgdG8gZmluZCBzdGF0dXMgdG8gbW9kaWZ5XG4gKiBAcGFyYW0gcGFydE5hbWUgXHR0byBmaW5kIHN0YXR1cyB0byBtb2RpZnlcbiAqIEBwYXJhbSBjb2RlXHRcdG5ld0NvZGVcbiAqIEBwYXJhbSBzb3VyY2VcdFx0c291cmNlXG4gKiBAcGFyYW0gY2FsbGJhY2tcdFx0cmV0dXJuIGNhbGxiYWNrICg8Ym9vbD5zdWNjZXNzKVxuICovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChyb2JvdE5hbWUsIHBhcnROYW1lLCBjb2RlLCBzb3VyY2UsIGNhbGxiYWNrKSB7XG5cdHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdHJldHVybiBQcm9taXNlLnRyeShmdW5jdGlvbiAoXykge1xuXHRcdHZhciBvYmplY3RQYXRoID0gXCIvZnIvcGFydG5lcmluZy9TdGF0dXMvUm9ib3RzL1wiICsgcm9ib3ROYW1lICsgXCIvUGFydHMvXCIgKyBwYXJ0TmFtZTtcblx0XHRfdGhpczQucmVxdWVzdCh7XG5cdFx0XHRzZXJ2aWNlOiBcInN0YXR1c1wiLFxuXHRcdFx0ZnVuYzogXCJTZXRQYXJ0XCIsXG5cdFx0XHRvYmo6IHtcblx0XHRcdFx0aW50ZXJmYWNlOiAnZnIucGFydG5lcmluZy5TdGF0dXMuUGFydCcsXG5cdFx0XHRcdHBhdGg6IG9iamVjdFBhdGhcblx0XHRcdH0sXG5cdFx0XHRkYXRhOiB7XG5cdFx0XHRcdC8vcm9ib3ROYW1lOiByb2JvdE5hbWUsXG5cdFx0XHRcdGNvZGU6IGNvZGUsXG5cdFx0XHRcdC8vcGFydE5hbWU6IHBhcnROYW1lLFxuXHRcdFx0XHRzb3VyY2U6IHNvdXJjZSB8IDFcblx0XHRcdH1cblx0XHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRcdGlmIChlcnIgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayh0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRcdExvZ2dlci5lcnJvcihlcnIpO1xuXHR9KTtcbn07XG5cbi8qKlxuICogR2V0IG9uZSBzdGF0dXNcbiAqIEBwYXJhbSByb2JvdE5hbWUgdG8gZ2V0IHN0YXR1c1xuICogQHBhcmFtIHBhcnROYW1lIFx0dG8gZ2V0IHN0YXR1c1xuICogQHBhcmFtIGNhbGxiYWNrXHRcdHJldHVybiBjYWxsYmFjaygtMSBpZiBub3QgZm91bmQvZGF0YSBvdGhlcndpc2UpXG4gKiBAcGFyYW0gX2Z1bGwgXHRtb3JlIGRhdGEgYWJvdXQgc3RhdHVzXG4gKi9cblN0YXR1cy5wcm90b3R5cGUuZ2V0U3RhdHVzID0gZnVuY3Rpb24gKHJvYm90TmFtZSwgcGFydE5hbWUsIGNhbGxiYWNrIC8qLCBfZnVsbCovKSB7XG5cdHZhciBfdGhpczUgPSB0aGlzO1xuXG5cdHZhciBzZW5kRGF0YSA9IFtdO1xuXHRyZXR1cm4gUHJvbWlzZS50cnkoZnVuY3Rpb24gKF8pIHtcblx0XHR2YXIgcmVxID0gX3RoaXM1LnNlbGVjdG9yLnJlcXVlc3Qoe1xuXHRcdFx0c2VydmljZTogJ3N0YXR1cycsXG5cdFx0XHRmdW5jOiAnR2V0TWFuYWdlZE9iamVjdHMnLFxuXHRcdFx0b2JqOiB7XG5cdFx0XHRcdGludGVyZmFjZTogJ29yZy5mcmVlZGVza3RvcC5EQnVzLk9iamVjdE1hbmFnZXInXG5cdFx0XHR9XG5cdFx0fSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBvYmpEYXRhKSB7XG5cblx0XHRcdHZhciBvYmplY3RQYXRoUm9ib3QgPSBcIi9mci9wYXJ0bmVyaW5nL1N0YXR1cy9Sb2JvdHMvXCIgKyByb2JvdE5hbWU7XG5cdFx0XHR2YXIgb2JqZWN0UGF0aFBhcnQgPSBcIi9mci9wYXJ0bmVyaW5nL1N0YXR1cy9Sb2JvdHMvXCIgKyByb2JvdE5hbWUgKyBcIi9QYXJ0cy9cIiArIHBhcnROYW1lO1xuXHRcdFx0dmFyIHJvYm90SWQgPSBvYmpEYXRhW29iamVjdFBhdGhSb2JvdF1bJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90J10uUm9ib3RJZDtcblx0XHRcdF90aGlzNS5zZWxlY3Rvci5yZXF1ZXN0KHtcblx0XHRcdFx0c2VydmljZTogXCJzdGF0dXNcIixcblx0XHRcdFx0ZnVuYzogXCJHZXRQYXJ0XCIsXG5cdFx0XHRcdG9iajoge1xuXHRcdFx0XHRcdGludGVyZmFjZTogJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlBhcnQnLFxuXHRcdFx0XHRcdHBhdGg6IG9iamVjdFBhdGhQYXJ0XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uIChwZWVySWQsIGVyciwgZGF0YSkge1xuXHRcdFx0XHRzZW5kRGF0YS5wdXNoKGRhdGEpO1xuXHRcdFx0XHRfdGhpczUuX2dldFJvYm90TW9kZWxGcm9tUmVjdjIoc2VuZERhdGEsIHJvYm90SWQsIHJvYm90TmFtZSk7XG5cdFx0XHRcdGlmIChlcnIgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKC0xKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhfdGhpczUucm9ib3RNb2RlbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0TG9nZ2VyLmVycm9yKGVycik7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIHN0YXR1c1xuICogQHBhcmFtIHJvYm90TmFtZSB0byBnZXQgc3RhdHVzXG4gKiBAcGFyYW0gcGFydE5hbWUgXHR0byBnZXQgc3RhdHVzXG4gKiBAcGFyYW0gY2FsbGJhY2tcdFx0cmV0dXJuIGNhbGxiYWNrKC0xIGlmIG5vdCBmb3VuZC9kYXRhIG90aGVyd2lzZSlcbiAqIEBwYXJhbSBfZnVsbCBcdG1vcmUgZGF0YSBhYm91dCBzdGF0dXNcbiAqL1xuU3RhdHVzLnByb3RvdHlwZS5nZXRBbGxTdGF0dXNlcyA9IGZ1bmN0aW9uIChyb2JvdE5hbWUsIGNhbGxiYWNrKSB7XG5cdHZhciBfdGhpczYgPSB0aGlzO1xuXG5cdHZhciByZXEgPSB0aGlzLnNlbGVjdG9yLnJlcXVlc3Qoe1xuXHRcdHNlcnZpY2U6ICdzdGF0dXMnLFxuXHRcdGZ1bmM6ICdHZXRNYW5hZ2VkT2JqZWN0cycsXG5cdFx0b2JqOiB7XG5cdFx0XHRpbnRlcmZhY2U6ICdvcmcuZnJlZWRlc2t0b3AuREJ1cy5PYmplY3RNYW5hZ2VyJ1xuXHRcdH1cblx0fSwgZnVuY3Rpb24gKHBlZXJJZCwgZXJyLCBvYmpEYXRhKSB7XG5cdFx0Ly8gZ2V0IGFsbCBvYmplY3QgcGF0aHMsIGludGVyZmFjZXMgYW5kIHByb3BlcnRpZXMgY2hpbGRyZW4gb2YgU3RhdHVzXG5cdFx0dmFyIG9iamVjdFBhdGggPSBcIi9mci9wYXJ0bmVyaW5nL1N0YXR1cy9Sb2JvdHMvXCIgKyByb2JvdE5hbWU7XG5cdFx0aWYgKG9iakRhdGFbb2JqZWN0UGF0aF0gIT0gbnVsbCkge1xuXHRcdFx0aWYgKG9iakRhdGFbb2JqZWN0UGF0aF1bJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90J10gIT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgcm9ib3RJZCA9IG9iakRhdGFbb2JqZWN0UGF0aF1bJ2ZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90J10uUm9ib3RJZDtcblx0XHRcdFx0Ly92YXIgZnVsbCA9IF9mdWxsIHx8IGZhbHNlO1xuXHRcdFx0XHRfdGhpczYuc2VsZWN0b3IucmVxdWVzdCh7XG5cdFx0XHRcdFx0c2VydmljZTogXCJzdGF0dXNcIixcblx0XHRcdFx0XHRmdW5jOiBcIkdldEFsbFBhcnRzXCIsXG5cdFx0XHRcdFx0b2JqOiB7XG5cdFx0XHRcdFx0XHRpbnRlcmZhY2U6ICdmci5wYXJ0bmVyaW5nLlN0YXR1cy5Sb2JvdCcsXG5cdFx0XHRcdFx0XHRwYXRoOiBvYmplY3RQYXRoXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCBmdW5jdGlvbiAocGVlcklkLCBlcnIsIGRhdGEpIHtcblx0XHRcdFx0XHRpZiAoZXJyICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKC0xKTtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRfdGhpczYuX2dldFJvYm90TW9kZWxGcm9tUmVjdjIoZGF0YSwgcm9ib3RJZCwgcm9ib3ROYW1lKTtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzNi5yb2JvdE1vZGVsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0TG9nZ2VyLmVycm9yKFwiSW50ZXJmYWNlIGZyLnBhcnRuZXJpbmcuU3RhdHVzLlJvYm90IGRvZXNuJ3QgZXhpc3QhXCIpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRMb2dnZXIuZXJyb3IoXCJPYmplY3RQYXRoIFwiICsgb2JqZWN0UGF0aCArIFwiIGRvZXNuJ3QgZXhpc3QhXCIpO1xuXHRcdH1cblx0fSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OMFlYUjFjeTVxY3lKZExDSnVZVzFsY3lJNld5SnBjMEp5YjNkelpYSWlMQ0ozYVc1a2IzY2lMQ0pRY205dGFYTmxJaXdpY21WeGRXbHlaU0lzSWtScGVXRlRaV3hsWTNSdmNpSXNJblYwYVd3aUxDSk5aWE56WVdkbElpd2lSRVZDVlVjaUxDSk1iMmRuWlhJaUxDSnNiMmNpTENKdFpYTnpZV2RsSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVUzUmhkSFZ6SWl3aWMyVnNaV04wYjNJaUxDSmZZMjlrWlhJaUxDSmxibU52WkdVaUxDSnpkV0p6WTNKcGNIUnBiMjV6SWl3aWNtOWliM1JOYjJSbGJDSXNJbDl5YjJKdmRFMXZaR1ZzU1c1cGRDSXNJbVJoZEdGRGIyNW1hV2NpTENKamNtbDBaWEpwWVNJc0luUnBiV1VpTENKaVpXY2lMQ0psYm1RaUxDSnlZVzVuWlNJc0luSnZZbTkwSWl3aWIzQmxjbUYwYjNJaUxDSndZWEowY3lJc0luTjBZWFIxY3lJc0luQnliM1J2ZEhsd1pTSXNJbWRsZEZKdlltOTBUVzlrWld3aUxDSkVZWFJoUTI5dVptbG5JaXdpYm1WM1JHRjBZVU52Ym1acFp5SXNJa1JoZEdGUGNHVnlZWFJ2Y2lJc0ltNWxkMDl3WlhKaGRHOXlJaXdpUkdGMFlWTmhiWEJzYVc1bklpd2liblZ0VTJGdGNHeGxjeUlzSW5OaGJYQnNhVzVuSWl3aVJHRjBZVlJwYldVaUxDSnVaWGRVYVcxbFFtVm5JaXdpYm1WM1ZHbHRaVVZ1WkNJc0ltNWxkMUpoYm1kbElpd2laMlYwVkdsdFpTSXNJa1JoZEdVaUxDSkVZWFJoVW05aWIzUkpaSE1pTENKeWIySnZkRWxrY3lJc0lrUmhkR0ZRYkdGalpVbGtjeUlzSW5Cc1lXTmxTV1J6SWl3aWNHeGhZMlZKWkNJc0luQnNZV05sSWl3aVoyVjBSR0YwWVVKNVRtRnRaU0lzSW5ObGJuTnZjazVoYldWeklpd2laR0YwWVNJc0ltNGlMQ0p3ZFhOb0lpd2laR0YwWVUxdlpHVnNJaXdpZDJGMFkyZ2lMQ0p5YjJKdmRFNWhiV1Z6SWl3aVkyRnNiR0poWTJzaUxDSnpaWFJOWVhoTWFYTjBaVzVsY25NaUxDSmZZMjl1Ym1WamRHbHZiaUlzSW5ObGJtUkVZWFJoSWl3aWRISjVJaXdpY21WeElpd2ljbVZ4ZFdWemRDSXNJbk5sY25acFkyVWlMQ0ptZFc1aklpd2liMkpxSWl3aWFXNTBaWEptWVdObElpd2ljR1ZsY2tsa0lpd2laWEp5SWl3aWIySnFSR0YwWVNJc0luSnZZbTkwVG1GdFpTSXNJbkp2WW05MFNXUWlMQ0p2WW1wbFkzUlFZWFJvSWl3aVVtOWliM1JPWVcxbElpd2lVbTlpYjNSSlpDSXNJbWRsZEVGc2JGTjBZWFIxYzJWeklpd2liVzlrWld3aUxDSnpkV0p6SWl3aWMzVmljMk55YVdKbElpd2ljR0YwYUNJc0luTndiR2wwSWl3aVgyZGxkRkp2WW05MFRXOWtaV3hHY205dFVtVmpkaklpTENKallYUmphQ0lzSW1Oc2IzTmxVM1ZpYzJOeWFYQjBhVzl1Y3lJc0lta2lMQ0pqYkc5elpTSXNJbWRsZEVSaGRHRWlMQ0owZVhCbElpd2laRzVKWkNJc0luTmxibk52Y25NaUxDSktVMDlPSWl3aWMzUnlhVzVuYVdaNUlpd2lhR1ZoWkdWeUlpd2ljbVZ4UTI5dVptbG5JaXdpYzNRaUxDSnRjMmNpTENKZloyVjBSR0YwWVUxdlpHVnNSbkp2YlZKbFkzWWlMQ0puWlhSRVlYUmhUVzlrWld3aUxDSmlhVzVrSWl3aWJtRnRaU0lzSW5KUVlYSjBjeUlzSW1admNrVmhZMmdpTENKd1lYSjBTV1FpTENKa0lpd2lZMkYwWldkdmNua2lMQ0p3WVhKMFRtRnRaU0lzSW14aFltVnNJaXdpWTI5a1pTSXNJbU52WkdWU1pXWWlMQ0pqY21sMFRHVjJaV3dpTENKa1pYTmpjbWx3ZEdsdmJpSXNJblJ2VEc5M1pYSkRZWE5sSWl3aVpYSnliM0pNYVhOMElpd2laWFowYzE5MGJYQWlMQ0ptY205dElpd2lRWEp5WVhraUxDSnBjMEZ5Y21GNUlpd2liR1Z1WjNSb0lpd2laWFowY3lJc0luTmxkRk4wWVhSMWN5SXNJbk52ZFhKalpTSXNJbWRsZEZOMFlYUjFjeUlzSW05aWFtVmpkRkJoZEdoU2IySnZkQ0lzSW05aWFtVmpkRkJoZEdoUVlYSjBJaXdpUlhKeWIzSWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmQwSkJPenM3T3pzN096czdPenM3TzBGQllVRXNTVUZCU1VFc1dVRkJXU3hGUVVGRkxFOUJRVTlETEUxQlFWQXNTMEZCYTBJc1YwRkJjRUlzUTBGQmFFSTdRVUZEUVN4SlFVRkhMRU5CUVVORUxGTkJRVW9zUlVGQlpUdEJRVUZGTEV0QlFVbEZMRlZCUVZWRExGRkJRVkVzVlVGQlVpeERRVUZrTzBGQlFXOURMRU5CUVhKRUxFMUJRMHM3UVVGQlJTeExRVUZKUkN4VlFVRlZSQ3hQUVVGUFF5eFBRVUZ5UWp0QlFVRXJRanRCUVVOMFF5eEpRVUZKUlN4bFFVRmxSQ3hSUVVGUkxHOUNRVUZTTEVWQlFUaENReXhaUVVGcVJEdEJRVU5CTEVsQlFVbERMRTlCUVU5R0xGRkJRVkVzVFVGQlVpeERRVUZZT3p0QlFVVkJMRWxCUVVsSExGVkJRVlZJTEZGQlFWRXNXVUZCVWl4RFFVRmtPenRCUVVkQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4SlFVRkpTU3hSUVVGUkxFbEJRVm83UVVGRFFTeEpRVUZKUXl4VFFVRlRPMEZCUTFwRExFMUJRVXNzWVVGQlUwTXNUMEZCVkN4RlFVRnBRanRCUVVOeVFpeE5RVUZIU0N4TFFVRklMRVZCUVZWSkxGRkJRVkZHTEVkQlFWSXNRMEZCV1VNc1QwRkJXanRCUVVOV0xFVkJTRmM3TzBGQlMxcEZMRkZCUVU4c1pVRkJVMFlzVDBGQlZDeEZRVUZwUWp0QlFVTjJRaXhOUVVGSFNDeExRVUZJTEVWQlFWVkpMRkZCUVZGRExFdEJRVklzUTBGQlkwWXNUMEZCWkR0QlFVTldPMEZCVUZjc1EwRkJZanM3UVVGVlFUczdPMEZCUjBFc1UwRkJVMGNzVFVGQlZDeERRVUZuUWtNc1VVRkJhRUlzUlVGQmVVSTdRVUZEZUVJc1RVRkJTMEVzVVVGQlRDeEhRVUZuUWtFc1VVRkJhRUk3UVVGRFFTeE5RVUZMUXl4TlFVRk1MRWRCUVdORUxGTkJRVk5GTEUxQlFWUXNSVUZCWkR0QlFVTkJMRTFCUVV0RExHRkJRVXdzUjBGQmNVSXNSVUZCY2tJN08wRkJSVUU3UVVGRFFTeE5RVUZMUXl4VlFVRk1MRWRCUVd0Q0xFVkJRV3hDTzBGQlEwRXNUVUZCUzBNc1pVRkJUQ3hIUVVGMVFpeExRVUYyUWpzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN1FVRm5Ra0VzVFVGQlMwTXNWVUZCVEN4SFFVRnJRanRCUVVOcVFrTXNXVUZCVlR0QlFVTlVReXhUUVVGTk8wRkJRMHhETEZOQlFVc3NTVUZFUVR0QlFVVk1ReXhUUVVGTExFbEJSa0U3UVVGSFRFTXNWMEZCVHl4SlFVaEdMRU5CUjA4N1FVRklVQ3hKUVVSSE8wRkJUVlJETEZWQlFVODdRVUZPUlN4SFFVUlBPMEZCVTJwQ1F5eFpRVUZWTEUxQlZFODdRVUZWYWtKRExGTkJRVThzU1VGV1ZUdEJRVmRxUWtNc1ZVRkJVVHRCUVZoVExFVkJRV3hDT3p0QlFXTkJMRkZCUVU4c1NVRkJVRHRCUVVOQk8wRkJRMFE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRV2xEUVdoQ0xFOUJRVTlwUWl4VFFVRlFMRU5CUVdsQ1F5eGhRVUZxUWl4SFFVRnBReXhaUVVGVk8wRkJRekZETEZGQlFVOHNTMEZCUzJJc1ZVRkJXanRCUVVOQkxFTkJSa1E3TzBGQlNVRTdPenM3T3pzN1FVRlBRVXdzVDBGQlQybENMRk5CUVZBc1EwRkJhVUpGTEZWQlFXcENMRWRCUVRoQ0xGVkJRVk5ETEdGQlFWUXNSVUZCZFVJN1FVRkRjRVFzUzBGQlIwRXNZVUZCU0N4RlFVRnJRanRCUVVOcVFpeFBRVUZMWWl4VlFVRk1MRWRCUVdkQ1lTeGhRVUZvUWp0QlFVTkJMRk5CUVU4c1NVRkJVRHRCUVVOQkxFVkJTRVFzVFVGTFF5eFBRVUZQTEV0QlFVdGlMRlZCUVZvN1FVRkRSQ3hEUVZCRU8wRkJVVUU3T3pzN096czdPenM3TzBGQlYwRlFMRTlCUVU5cFFpeFRRVUZRTEVOQlFXbENTU3haUVVGcVFpeEhRVUZuUXl4VlFVRlRReXhYUVVGVUxFVkJRWEZDTzBGQlEzQkVMRXRCUVVkQkxGZEJRVWdzUlVGQlowSTdRVUZEWml4UFFVRkxaaXhWUVVGTUxFTkJRV2RDVHl4UlFVRm9RaXhIUVVFeVFsRXNWMEZCTTBJN1FVRkRRU3hUUVVGUExFbEJRVkE3UVVGRFFTeEZRVWhFTEUxQlMwTXNUMEZCVHl4TFFVRkxaaXhWUVVGTUxFTkJRV2RDVHl4UlFVRjJRanRCUVVORUxFTkJVRVE3UVVGUlFUczdPenM3T3pzN1FVRlJRV1FzVDBGQlQybENMRk5CUVZBc1EwRkJhVUpOTEZsQlFXcENMRWRCUVdkRExGVkJRVk5ETEZWQlFWUXNSVUZCYjBJN1FVRkRia1FzUzBGQlIwRXNWVUZCU0N4RlFVRmxPMEZCUTJRc1QwRkJTMnBDTEZWQlFVd3NRMEZCWjBKclFpeFJRVUZvUWl4SFFVRXlRa1FzVlVGQk0wSTdRVUZEUVN4VFFVRlBMRWxCUVZBN1FVRkRRU3hGUVVoRUxFMUJTME1zVDBGQlR5eExRVUZMYWtJc1ZVRkJUQ3hEUVVGblFtdENMRkZCUVhaQ08wRkJRMFFzUTBGUVJEdEJRVkZCT3pzN096czdPenM3UVVGVFFYcENMRTlCUVU5cFFpeFRRVUZRTEVOQlFXbENVeXhSUVVGcVFpeEhRVUUwUWl4VlFVRlRReXhWUVVGVUxFVkJRVzlDUXl4VlFVRndRaXhGUVVGblEwTXNVVUZCYUVNc1JVRkJlVU03UVVGRGNFVXNTMEZCUjBZc1kwRkJZME1zVlVGQlpDeEpRVUUwUWtNc1VVRkJMMElzUlVGQmVVTTdRVUZEZUVNc1QwRkJTM1JDTEZWQlFVd3NRMEZCWjBKRExGRkJRV2hDTEVOQlFYbENReXhKUVVGNlFpeERRVUU0UWtNc1IwRkJPVUlzUjBGQmIwTnBRaXhYUVVGWFJ5eFBRVUZZTEVWQlFYQkRPMEZCUTBFc1QwRkJTM1pDTEZWQlFVd3NRMEZCWjBKRExGRkJRV2hDTEVOQlFYbENReXhKUVVGNlFpeERRVUU0UWtVc1IwRkJPVUlzUjBGQmIwTnBRaXhYUVVGWFJTeFBRVUZZTEVWQlFYQkRPMEZCUTBFc1QwRkJTM1pDTEZWQlFVd3NRMEZCWjBKRExGRkJRV2hDTEVOQlFYbENReXhKUVVGNlFpeERRVUU0UWtjc1MwRkJPVUlzUjBGQmMwTnBRaXhSUVVGMFF6dEJRVU5CTEZOQlFVOHNTVUZCVUR0QlFVTkJMRVZCVEVRc1RVRlBReXhQUVVGUE8wRkJRMDV1UWl4UFFVRkxMRWxCUVVseFFpeEpRVUZLTEVOQlFWTXNTMEZCUzNoQ0xGVkJRVXdzUTBGQlowSkRMRkZCUVdoQ0xFTkJRWGxDUXl4SlFVRjZRaXhEUVVFNFFrTXNSMEZCZGtNc1EwRkVRenRCUVVWT1F5eFBRVUZMTEVsQlFVbHZRaXhKUVVGS0xFTkJRVk1zUzBGQlMzaENMRlZCUVV3c1EwRkJaMEpETEZGQlFXaENMRU5CUVhsQ1F5eEpRVUY2UWl4RFFVRTRRa1VzUjBGQmRrTXNRMEZHUXp0QlFVZE9ReXhUUVVGUExFbEJRVWx0UWl4SlFVRktMRU5CUVZNc1MwRkJTM2hDTEZWQlFVd3NRMEZCWjBKRExGRkJRV2hDTEVOQlFYbENReXhKUVVGNlFpeERRVUU0UWtjc1MwRkJka003UVVGSVJDeEZRVUZRTzBGQlMwUXNRMEZpUkR0QlFXTkJPenM3T3pzN08wRkJUMEZhTEU5QlFVOXBRaXhUUVVGUUxFTkJRV2xDWlN4WlFVRnFRaXhIUVVGblF5eFZRVUZUUXl4UlFVRlVMRVZCUVd0Q08wRkJRMnBFTEV0QlFVZEJMRkZCUVVnc1JVRkJZVHRCUVVOYUxFOUJRVXN4UWl4VlFVRk1MRU5CUVdkQ1F5eFJRVUZvUWl4RFFVRjVRa3NzUzBGQmVrSXNSMEZCYVVOdlFpeFJRVUZxUXp0QlFVTkJMRk5CUVU4c1NVRkJVRHRCUVVOQkxFVkJTRVFzVFVGTFF5eFBRVUZQTEV0QlFVc3hRaXhWUVVGTUxFTkJRV2RDUXl4UlFVRm9RaXhEUVVGNVFrc3NTMEZCYUVNN1FVRkRSQ3hEUVZCRU8wRkJVVUU3T3pzN096czdRVUZQUVdJc1QwRkJUMmxDTEZOQlFWQXNRMEZCYVVKcFFpeFpRVUZxUWl4SFFVRm5ReXhWUVVGVFF5eFJRVUZVTEVWQlFXdENPMEZCUTJwRUxFdEJRVWRCTEZGQlFVZ3NSVUZCWVR0QlFVTmFMRTlCUVVzMVFpeFZRVUZNTEVOQlFXZENReXhSUVVGb1FpeERRVUY1UWpSQ0xFOUJRWHBDTEVkQlFXMURSQ3hSUVVGdVF6dEJRVU5CTEZOQlFVOHNTVUZCVUR0QlFVTkJMRVZCU0VRc1RVRkxReXhQUVVGUExFdEJRVXMxUWl4VlFVRk1MRU5CUVdkQ1F5eFJRVUZvUWl4RFFVRjVRalpDTEV0QlFXaERPMEZCUTBRc1EwRlFSRHRCUVZGQk96czdPMEZCU1VGeVF5eFBRVUZQYVVJc1UwRkJVQ3hEUVVGcFFuRkNMR0ZCUVdwQ0xFZEJRV2xETEZWQlFWTkRMRmRCUVZRc1JVRkJjVUk3UVVGRGNrUXNTMEZCU1VNc1QwRkJTeXhGUVVGVU8wRkJRMEVzVFVGQlNTeEpRVUZKUXl4RFFVRlNMRWxCUVdGR0xGZEJRV0lzUlVGQk1FSTdRVUZEZWtKRExFOUJRVXRGTEVsQlFVd3NRMEZCVlN4TFFVRkxReXhUUVVGTUxFTkJRV1ZLTEZsQlFWbEZMRU5CUVZvc1EwRkJaaXhEUVVGV08wRkJRMEU3UVVGRFJDeFJRVUZQUkN4SlFVRlFPMEZCUTBFc1EwRk9SRHM3UVVGUlFUczdPMEZCUjBGNFF5eFBRVUZQYVVJc1UwRkJVQ3hEUVVGcFFqSkNMRXRCUVdwQ0xFZEJRWGxDTEZWQlFWVkRMRlZCUVZZc1JVRkJjMEpETEZGQlFYUkNMRVZCUVdkRE8wRkJRVUU3TzBGQlEzaEVMRTFCUVVzM1F5eFJRVUZNTEVOQlFXTTRReXhsUVVGa0xFTkJRVGhDTEVOQlFUbENPMEZCUTBFc1RVRkJTemxETEZGQlFVd3NRMEZCWXl0RExGZEJRV1FzUTBGQk1FSkVMR1ZCUVRGQ0xFTkJRVEJETEVOQlFURkRPMEZCUTBFc1MwRkJTVVVzVjBGQlZ5eEZRVUZtTzBGQlEwRXNTMEZCU1doQ0xGZEJRVmNzUlVGQlpqdEJRVU5CTEZGQlFVODFReXhSUVVGUk5rUXNSMEZCVWl4RFFVRlpMR0ZCUVVzN1FVRkRka0lzVFVGQlNVTXNUVUZCVFN4TlFVRkxiRVFzVVVGQlRDeERRVUZqYlVRc1QwRkJaQ3hEUVVGelFqdEJRVU12UWtNc1dVRkJVeXhSUVVSelFqdEJRVVV2UWtNc1UwRkJUU3h0UWtGR2VVSTdRVUZITDBKRExGRkJRVXM3UVVGRFNrTXNaVUZCVnp0QlFVUlFPMEZCU0RCQ0xFZEJRWFJDTEVWQlRWQXNWVUZCUTBNc1RVRkJSQ3hGUVVGVFF5eEhRVUZVTEVWQlFXTkRMRTlCUVdRc1JVRkJNRUk3UVVGQlJUdEJRVU01UWl4UFFVRkpReXhaUVVGWkxFVkJRV2hDTzBGQlEwRXNUMEZCU1VNc1ZVRkJWU3hEUVVGa096dEJRVVkwUWl3NFFrRkhia0pETEZWQlNHMUNPMEZCU1ROQ0xGRkJRVWxJTEZGQlFWRkhMRlZCUVZJc1JVRkJiMElzTkVKQlFYQkNMRXRCUVhGRUxFbEJRWHBFTEVWQlFTdEVPMEZCUXpsRVJpeHBRa0ZCV1VRc1VVRkJVVWNzVlVGQlVpeEZRVUZ2UWl3MFFrRkJjRUlzUlVGQmEwUkRMRk5CUVRsRU8wRkJRMEZHTEdWQlFWVkdMRkZCUVZGSExGVkJRVklzUlVGQmIwSXNORUpCUVhCQ0xFVkJRV3RFUlN4UFFVRTFSRHRCUVVOQkwwSXNZMEZCVXpKQ0xGTkJRVlFzU1VGQmMwSkRMRTlCUVhSQ08wRkJRMEVzVjBGQlMwa3NZMEZCVEN4RFFVRnZRa3dzVTBGQmNFSXNSVUZCSzBJc1ZVRkJWVTBzUzBGQlZpeEZRVUZwUWp0QlFVTXZRM0JDTEdWQlFWTnZRaXhMUVVGVU8wRkJRMEVzVFVGR1JEdEJRVWRCTzBGQlEwUXNVVUZCU1ZBc1VVRkJVVWNzVlVGQlVpeEZRVUZ2UWl3eVFrRkJjRUlzUzBGQmIwUXNTVUZCZUVRc1JVRkJPRVE3UVVGRE4wUXNVMEZCU1Vzc1QwRkJUeXhOUVVGTGJFVXNVVUZCVEN4RFFVRmpiVVVzVTBGQlpDeERRVUYzUWl4RlFVRkRPMEZCUTI1RFppeGxRVUZUTEZGQlJIbENPMEZCUld4RFF5eFpRVUZOTEhOQ1FVWTBRanRCUVVkc1EwTXNWMEZCU3p0QlFVTktReXhyUWtGQlZ5d3lRa0ZFVUR0QlFVVktZU3hoUVVGTlVEdEJRVVpHTEU5QlNEWkNPMEZCVDJ4RGRFSXNXVUZCVFVzN1FVRlFORUlzVFVGQmVFSXNSVUZSVWl4VlFVRkRXU3hOUVVGRUxFVkJRVk5ETEVkQlFWUXNSVUZCWTJ4Q0xFbEJRV1FzUlVGQmRVSTdRVUZEZWtJc1ZVRkJTV3RDTEU5QlFVOHNTVUZCV0N4RlFVRnBRanRCUVVOb1FpOUVMR05CUVU5SkxFdEJRVkFzUTBGQllTeHhRa0ZCY1VJeVJDeEhRVUZzUXp0QlFVTkJMRTlCUmtRc1RVRkZUenRCUVVOT1JTeHRRa0ZCV1VVc1YwRkJWMUVzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhGUVVGelFpeERRVUYwUWl4RFFVRmFPMEZCUTBGVUxHbENRVUZWTlVJc1UwRkJVekpDTEZOQlFWUXNRMEZCVmp0QlFVTkJXQ3huUWtGQlV5eERRVUZVTEVsQlFXTlVMRWxCUVdRN1FVRkRRU3hoUVVGTEswSXNkVUpCUVV3c1EwRkJOa0owUWl4UlFVRTNRaXhGUVVGMVExa3NUMEZCZGtNc1JVRkJaMFJFTEZOQlFXaEVPMEZCUTBFc1YwRkJTU3hQUVVGUFpDeFJRVUZRTEV0QlFXOUNMRlZCUVhoQ0xFVkJRME5CTEZOQlFWTXNUVUZCUzNwRExGVkJRV1E3UVVGRFJEdEJRVU5FTEUxQmJrSlZMRU5CUVZnN1FVRnZRa0VzVjBGQlMwUXNZVUZCVEN4RFFVRnRRbk5ETEVsQlFXNUNMRU5CUVhkQ2VVSXNTVUZCZUVJN1FVRkRRVHRCUVd4RE1FSTdPMEZCUnpWQ0xGRkJRVXNzU1VGQlNVd3NWVUZCVkN4SlFVRjFRa2dzVDBGQmRrSXNSVUZCWjBNN1FVRkJRU3hWUVVGMlFrY3NWVUZCZFVJN1FVRm5ReTlDTzBGQlEwUXNSMEV4UTFNc1EwRkJWanRCUVRKRFFTeEZRVFZEVFN4RlFUUkRTbFVzUzBFMVEwa3NRMEUwUTBVc1pVRkJUenRCUVVObU4wVXNVMEZCVDBrc1MwRkJVQ3hEUVVGaE1rUXNSMEZCWWp0QlFVTkJMRVZCT1VOTkxFTkJRVkE3UVVGcFJFRXNRMEYwUkVRN08wRkJkMFJCT3pzN1FVRkhRVEZFTEU5QlFVOXBRaXhUUVVGUUxFTkJRV2xDZDBRc2EwSkJRV3BDTEVkQlFYTkRMRmxCUVZVN1FVRkRMME1zVFVGQlNTeEpRVUZKUXl4RFFVRlNMRWxCUVdFc1MwRkJTM1JGTEdGQlFXeENMRVZCUVdsRE8wRkJRMmhETEU5QlFVdEJMR0ZCUVV3c1EwRkJiVUp6UlN4RFFVRnVRaXhGUVVGelFrTXNTMEZCZEVJN1FVRkRRVHRCUVVORUxFMUJRVXQyUlN4aFFVRk1MRWRCUVc5Q0xFVkJRWEJDTzBGQlEwRXNUVUZCUzBNc1ZVRkJUQ3hIUVVGclFpeEZRVUZzUWp0QlFVTkJMRU5CVGtRN08wRkJVVUU3T3pzN08wRkJTMEZNTEU5QlFVOXBRaXhUUVVGUUxFTkJRV2xDTWtRc1QwRkJha0lzUjBGQk1rSXNWVUZCVXpsQ0xGRkJRVlFzUlVGQmJVSjJReXhWUVVGdVFpeEZRVUU0UWp0QlFVRkJPenRCUVVONFJDeExRVUZKYjBNc1dVRkJXU3hGUVVGb1FqdEJRVU5CTEZGQlFVOTBSQ3hSUVVGUk5rUXNSMEZCVWl4RFFVRlpMR0ZCUVVzN1FVRkRka0lzVFVGQlJ6TkRMR05CUVdNc1NVRkJha0lzUlVGRFF5eFBRVUZMV1N4VlFVRk1MRU5CUVdkQ1dpeFZRVUZvUWp0QlFVTkVPMEZCUTBFc1UwRkJTMDRzVVVGQlRDeERRVUZqYlVRc1QwRkJaQ3hEUVVGelFqdEJRVU55UWtNc1dVRkJVeXhSUVVSWk8wRkJSWEpDUXl4VFFVRk5MR0ZCUm1VN1FVRkhja0prTEZOQlFVMDdRVUZEVEhGRExGVkJRVXNzVVVGRVFUdEJRVVZNZEVVc1owSkJRVmtzVDBGQlMwRTdRVUZHV2p0QlFVaGxMRWRCUVhSQ0xFVkJUMGNzVlVGQlEzVkZMRWxCUVVRc1JVRkJUM0JDTEVkQlFWQXNSVUZCV1d4Q0xFbEJRVm9zUlVGQmNVSTdRVUZEZGtJc1QwRkJTV3RDTEU5QlFVOHNTVUZCV0N4RlFVRnBRanRCUVVOb1FpOUVMRmRCUVU5SkxFdEJRVkFzUTBGQllTeE5RVUZOTEU5QlFVdFJMRlZCUVV3c1EwRkJaMEozUlN4UFFVRjBRaXhIUVVGblF5eGpRVUZvUXl4SFFVRnBSRU1zUzBGQlMwTXNVMEZCVEN4RFFVRmxka0lzUjBGQlppeERRVUU1UkR0QlFVTkJPMEZCUTBFN1FVRkRSQ3hQUVVGSGJFSXNTMEZCU3pCRExFMUJRVXdzUTBGQldXNUdMRXRCUVZvc1NVRkJjVUlzU1VGQmVFSXNSVUZCT0VJN1FVRkROMEk3UVVGRFFVb3NWMEZCVDBrc1MwRkJVQ3hEUVVGaExHdENRVUZuUW1sR0xFdEJRVXRETEZOQlFVd3NRMEZCWlhwRExFdEJRVXN3UXl4TlFVRk1MRU5CUVZsRExGTkJRVE5DTEVOQlFUZENPMEZCUTBGNFJpeFhRVUZQU1N4TFFVRlFMRU5CUVdFc01FSkJRWGRDZVVNc1MwRkJTekJETEUxQlFVd3NRMEZCV1c1R0xFdEJRVm9zUTBGQmEwSnhSaXhGUVVFeFF5eEhRVUUyUXl4TFFVRTNReXhIUVVGdFJEVkRMRXRCUVVzd1F5eE5RVUZNTEVOQlFWbHVSaXhMUVVGYUxFTkJRV3RDYzBZc1IwRkJiRVk3UVVGRFFUdEJRVU5CTzBGQlEwUTdRVUZEUVRGRExHVkJRVmtzVDBGQlN6SkRMSEZDUVVGTUxFTkJRVEpDT1VNc1NVRkJNMElzUTBGQldqczdRVUZGUVRkRExGVkJRVTlETEVkQlFWQXNRMEZCVnl4UFFVRkxNa1lzV1VGQlRDeEZRVUZZTzBGQlEwRjZReXhqUVVGWFFTeFRRVUZUTUVNc1NVRkJWQ3hSUVVGWUxFTkJablZDTEVOQlpWTTdRVUZEYUVNeFF5eFpRVUZUU0N4VFFVRlVMRVZCYUVKMVFpeERRV2RDUmp0QlFVTnlRaXhIUVhoQ1JEdEJRWGxDUVN4RlFUZENUU3hGUVRaQ1NqWkNMRXRCTjBKSkxFTkJOa0pGTEdWQlFVODdRVUZEWmpkRkxGTkJRVTlKTEV0QlFWQXNRMEZCWVRKRUxFZEJRV0k3UVVGRFFTeEZRUzlDVFN4RFFVRlFPMEZCWjBOQkxFTkJiRU5FT3p0QlFYRkRRVHM3T3pzN1FVRkxRVEZFTEU5QlFVOXBRaXhUUVVGUUxFTkJRV2xDYzBRc2RVSkJRV3BDTEVkQlFUSkRMRlZCUVZNdlFpeEpRVUZVTEVWQlFXVnhRaXhQUVVGbUxFVkJRWGRDUkN4VFFVRjRRaXhGUVVGdFF6dEJRVUZCT3p0QlFVTTNSU3hMUVVGSExFdEJRVXQyUkN4VlFVRk1MRWxCUVcxQ0xFbEJRWFJDTEVWQlEwTXNTMEZCUzBFc1ZVRkJUQ3hIUVVGclFpeEZRVUZzUWpzN1FVRkZSQ3hMUVVGSExFdEJRVXRCTEZWQlFVd3NRMEZCWjBKM1JDeFBRVUZvUWl4TFFVRTBRaXhKUVVFdlFpeEZRVU5ETEV0QlFVdDRSQ3hWUVVGTUxFTkJRV2RDZDBRc1QwRkJhRUlzUlVGQmVVSTVReXhMUVVGNlFpeEhRVUZwUXl4RlFVRnFReXhEUVV3MFJTeERRVXQyUXpzN1FVRkZkRU1zUzBGQlJ5eExRVUZMVml4VlFVRk1MRU5CUVdkQ2QwUXNUMEZCYUVJc1MwRkJORUlzU1VGQkwwSXNSVUZEUXl4TFFVRkxlRVFzVlVGQlRDeERRVUZuUW5kRUxFOUJRV2hDTEVsQlFUSkNMRVZCUVROQ096dEJRVVZFTEUxQlFVdDRSQ3hWUVVGTUxFTkJRV2RDZDBRc1QwRkJhRUlzU1VGQk1rSTdRVUZETVVKb1JDeFRRVUZQTzBGQlEwNDBSU3hUUVVGTk4wSTdRVUZFUVR0QlFVUnRRaXhGUVVFelFqczdRVUZOUVR0QlFVTkJMRTFCUVV0MlJDeFZRVUZNTEVOQlFXZENkMFFzVDBGQmFFSXNSVUZCZVVJNVF5eExRVUY2UWl4SFFVRnBReXhGUVVGcVF6dEJRVU5CTEV0QlFVa3lSU3hUUVVGVExFdEJRVXR5Uml4VlFVRk1MRU5CUVdkQ2QwUXNUMEZCYUVJc1JVRkJlVUk1UXl4TFFVRjBRenM3UVVGRlFYbENMRTFCUVV0dFJDeFBRVUZNTEVOQlFXRXNZVUZCU3p0QlFVTnFRaXhOUVVGSlF5eFRRVUZUUXl4RlFVRkZMRU5CUVVZc1EwRkJZanRCUVVOQkxFMUJRVWxETEZkQlFWZEVMRVZCUVVVc1EwRkJSaXhEUVVGbU8wRkJRMEVzVFVGQlNVVXNWMEZCVjBZc1JVRkJSU3hEUVVGR0xFTkJRV1k3UVVGRFFTeE5RVUZKUnl4UlFVRlJTQ3hGUVVGRkxFTkJRVVlzUTBGQldqdEJRVU5CTEUxQlFVbHdSaXhQUVVGUGIwWXNSVUZCUlN4RFFVRkdMRU5CUVZnN1FVRkRRU3hOUVVGSlNTeFBRVUZQU2l4RlFVRkZMRU5CUVVZc1EwRkJXRHRCUVVOQkxFMUJRVWxMTEZWQlFWVk1MRVZCUVVVc1EwRkJSaXhEUVVGa08wRkJRMEVzVFVGQlNWSXNUVUZCVFZFc1JVRkJSU3hEUVVGR0xFTkJRVlk3UVVGRFFTeE5RVUZKVFN4WlFVRlpUaXhGUVVGRkxFTkJRVVlzUTBGQmFFSTdRVUZEUVN4TlFVRkpUeXhqUVVGalVDeEZRVUZGTEVOQlFVWXNRMEZCYkVJN08wRkJSVUVzVFVGQlNVZ3NUMEZCVDBVc1RVRkJVQ3hMUVVGclFpeEpRVUYwUWl4RlFVRTBRanRCUVVNelFrWXNWVUZCVDBVc1RVRkJVQ3hKUVVGcFFpeEZRVUZxUWp0QlFVTkJPMEZCUTBRN1FVRkRRVVlzVTBGQlQwVXNUVUZCVUN4RlFVRmxSU3hSUVVGbUxFZEJRVEJDUVN4UlFVRXhRanRCUVVOQk8wRkJRMEZLTEZOQlFVOUZMRTFCUVZBc1JVRkJaVWdzU1VGQlppeEhRVUZ6UWswc1UwRkJVMDBzVjBGQlZDeEZRVUYwUWp0QlFVTkJPMEZCUTBGWUxGTkJRVTlGTEUxQlFWQXNSVUZCWlVrc1MwRkJaaXhIUVVGMVFrRXNTMEZCZGtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTEUxQlFVbE9MRTlCUVU5RkxFMUJRVkFzUlVGQlpWVXNVMEZCWml4SlFVRTBRaXhKUVVGb1F5eEZRVU5EV2l4UFFVRlBSU3hOUVVGUUxFVkJRV1ZWTEZOQlFXWXNSMEZCTWtJc1JVRkJNMEk3TzBGQlJVUXNUVUZCU1Zvc1QwRkJUMFVzVFVGQlVDeEZRVUZsVlN4VFFVRm1MRU5CUVhsQ1NpeFBRVUY2UWl4TFFVRnhReXhKUVVGNlF5eEZRVU5EVWl4UFFVRlBSU3hOUVVGUUxFVkJRV1ZWTEZOQlFXWXNRMEZCZVVKS0xFOUJRWHBDTEVsQlFXOURPMEZCUTI1RFlpeFJRVUZMUVN4SFFVUTRRanRCUVVWdVEyTXNZMEZCVjBFc1UwRkdkMEk3UVVGSGJrTkRMR2RDUVVGaFFUdEJRVWh6UWl4SFFVRndRenRCUVV0RUxFMUJRVWxITEZkQlFWYzdRVUZEWkRsR0xGTkJRVTBzVDBGQlMxQXNUVUZCVEN4RFFVRlpjMGNzU1VGQldpeERRVUZwUWk5R0xFbEJRV3BDTEVOQlJGRTdRVUZGWkhkR0xGTkJRVTBzVDBGQlN5OUdMRTFCUVV3c1EwRkJXWE5ITEVsQlFWb3NRMEZCYVVKUUxFbEJRV3BDTEVOQlJsRTdRVUZIWkVNc1dVRkJVeXhQUVVGTGFFY3NUVUZCVEN4RFFVRlpjMGNzU1VGQldpeERRVUZwUWs0c1QwRkJha0k3UVVGSVN5eEhRVUZtTzBGQlMwRTdRVUZEUVN4TlFVRkpUeXhOUVVGTlF5eFBRVUZPTEVOQlFXTklMRk5CUVZOT0xFbEJRWFpDTEV0QlFXZERVU3hOUVVGTlF5eFBRVUZPTEVOQlFXTklMRk5CUVZNNVJpeEpRVUYyUWl4RFFVRm9ReXhKUVVOQlowY3NUVUZCVFVNc1QwRkJUaXhEUVVGalNDeFRRVUZUVEN4UFFVRjJRaXhEUVVSS0xFVkJRM0ZETzBGQlEzQkRMRTlCUVVsTExGTkJRVk5PTEVsQlFWUXNRMEZCWTFVc1RVRkJaQ3hMUVVGNVFrb3NVMEZCVTB3c1QwRkJWQ3hEUVVGcFFsTXNUVUZCTVVNc1NVRkRRVW9zVTBGQlUwNHNTVUZCVkN4RFFVRmpWU3hOUVVGa0xFdEJRWGxDU2l4VFFVRlRPVVlzU1VGQlZDeERRVUZqYTBjc1RVRkVNME1zUlVGRGJVUTdRVUZEYkVRN1FVRkRRV3BDTEZkQlFVOUZMRTFCUVZBc1JVRkJaV2RDTEVsQlFXWXNSMEZCYzBJc1JVRkJkRUk3UVVGRFFTeFRRVUZMTEVsQlFVbHNReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVrMlFpeFRRVUZUVGl4SlFVRlVMRU5CUVdOVkxFMUJRV3hETEVWQlFUQkRha01zUjBGQk1VTXNSVUZCSzBNN1FVRkRPVU5uUWl4WlFVRlBSU3hOUVVGUUxFVkJRV1ZuUWl4SlFVRm1MRU5CUVc5Q2JFVXNTVUZCY0VJc1EwRkJlVUk3UVVGRGVFSnFReXhaUVVGTk9FWXNVMEZCVXpsR0xFbEJRVlFzUTBGQlkybEZMRU5CUVdRc1EwRkVhMEk3UVVGRmVFSjFRaXhaUVVGTlRTeFRRVUZUVGl4SlFVRlVMRU5CUVdOMlFpeERRVUZrTEVOQlJtdENPMEZCUjNoQ2QwSXNaVUZCVTBzc1UwRkJVMHdzVDBGQlZDeERRVUZwUW5oQ0xFTkJRV3BDTzBGQlNHVXNUVUZCZWtJN1FVRkxRVHRCUVVORUxFbEJXRVFzVFVGWlN5OUZMRTlCUVU5SkxFdEJRVkFzUTBGQllTdzBSRUZCWWp0QlFVTk1MRWRCWmtRc1RVRm5Ra3M3UVVGQlJUdEJRVU5PTzBGQlEwRXlSaXhWUVVGUFJTeE5RVUZRTEVWQlFXVm5RaXhKUVVGbUxFZEJRWE5DTEVOQlFVTTdRVUZEZEVKdVJ5eFZRVUZOT0VZc1UwRkJVemxHTEVsQlJFODdRVUZGZEVKM1JpeFZRVUZOVFN4VFFVRlRUaXhKUVVaUE8wRkJSM1JDUXl4aFFVRlRTeXhUUVVGVFREdEJRVWhKTEVsQlFVUXNRMEZCZEVJN1FVRkxRVHRCUVVORUxFVkJMMFJFTzBGQlowVkJMRU5CY0VaRU96dEJRWE5HUVR0QlFVTkJNMGNzWVVGQllUQkNMRk5CUVdJc1EwRkJkVUpxUWl4TlFVRjJRaXhIUVVGblF5eFpRVUZWTzBGQlEzcERMRkZCUVU4c1NVRkJTVUVzVFVGQlNpeERRVUZYTEVsQlFWZ3NRMEZCVUR0QlFVTkJMRU5CUmtRN08wRkJTVUU3T3pzN096czdPMEZCVVVGVUxHRkJRV0V3UWl4VFFVRmlMRU5CUVhWQ05FWXNVMEZCZGtJc1IwRkJiVU1zVlVGQlZXcEVMRk5CUVZZc1JVRkJjVUp0UXl4UlFVRnlRaXhGUVVFclFrVXNTVUZCTDBJc1JVRkJjVU5oTEUxQlFYSkRMRVZCUVRaRGFFVXNVVUZCTjBNc1JVRkJkVVE3UVVGQlFUczdRVUZEZWtZc1VVRkJUM3BFTEZGQlFWRTJSQ3hIUVVGU0xFTkJRVmtzWVVGQlN6dEJRVU4yUWl4TlFVRkpXU3hoUVVGaExHdERRVUZyUTBZc1UwRkJiRU1zUjBGQk9FTXNVMEZCT1VNc1IwRkJNRVJ0UXl4UlFVRXpSVHRCUVVOQkxGTkJRVXN6UXl4UFFVRk1MRU5CUVdFN1FVRkRXa01zV1VGQlV5eFJRVVJITzBGQlJWcERMRk5CUVUwc1UwRkdUVHRCUVVkYVF5eFJRVUZMTzBGQlEwcERMR1ZCUVZjc01rSkJSRkE3UVVGRlNtRXNWVUZCVFZBN1FVRkdSaXhKUVVoUE8wRkJUMXAwUWl4VFFVRk5PMEZCUTB3N1FVRkRRWGxFTEZWQlFVMUJMRWxCUmtRN1FVRkhURHRCUVVOQllTeFpRVUZSUVN4VFFVRlRPMEZCU2xvN1FVRlFUU3hIUVVGaUxFVkJZVWNzVlVGQlEzSkVMRTFCUVVRc1JVRkJVME1zUjBGQlZDeEZRVUZqYkVJc1NVRkJaQ3hGUVVGMVFqdEJRVU42UWl4UFFVRkphMElzVDBGQlR5eEpRVUZZTEVWQlFXbENPMEZCUTJoQ0xGRkJRVWtzVDBGQlQxb3NVVUZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UTBFc1UwRkJVeXhMUVVGVU8wRkJRM0JETEVsQlJrUXNUVUZIU3p0QlFVTktMRkZCUVVrc1QwRkJUMEVzVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlEwRXNVMEZCVXl4SlFVRlVPMEZCUTNCRE8wRkJRMFFzUjBGd1FrUTdRVUZ4UWtFc1JVRjJRazBzUlVGMVFrb3dRaXhMUVhaQ1NTeERRWFZDUlN4bFFVRlBPMEZCUTJZM1JTeFRRVUZQU1N4TFFVRlFMRU5CUVdFeVJDeEhRVUZpTzBGQlEwRXNSVUY2UWswc1EwRkJVRHRCUVRCQ1FTeERRVE5DUkRzN1FVRTJRa0U3T3pzN096czdRVUZQUVRGRUxFOUJRVTlwUWl4VFFVRlFMRU5CUVdsQ09FWXNVMEZCYWtJc1IwRkJOa0lzVlVGQlZXNUVMRk5CUVZZc1JVRkJjVUp0UXl4UlFVRnlRaXhGUVVFclFtcEVMRkZCUVM5Q0xFTkJRWFZETEZkQlFYWkRMRVZCUVc5RU8wRkJRVUU3TzBGQlEyaEdMRXRCUVVsSExGZEJRVmNzUlVGQlpqdEJRVU5CTEZGQlFVODFSQ3hSUVVGUk5rUXNSMEZCVWl4RFFVRlpMR0ZCUVVzN1FVRkRka0lzVFVGQlNVTXNUVUZCVFN4UFFVRkxiRVFzVVVGQlRDeERRVUZqYlVRc1QwRkJaQ3hEUVVGelFqdEJRVU12UWtNc1dVRkJVeXhSUVVSelFqdEJRVVV2UWtNc1UwRkJUU3h0UWtGR2VVSTdRVUZITDBKRExGRkJRVXM3UVVGRFNrTXNaVUZCVnp0QlFVUlFPMEZCU0RCQ0xFZEJRWFJDTEVWQlRWQXNWVUZCUTBNc1RVRkJSQ3hGUVVGVFF5eEhRVUZVTEVWQlFXTkRMRTlCUVdRc1JVRkJNRUk3TzBGQlJUVkNMRTlCUVVseFJDeHJRa0ZCYTBJc2EwTkJRV3REY0VRc1UwRkJlRVE3UVVGRFFTeFBRVUZKY1VRc2FVSkJRV2xDTEd0RFFVRnJRM0pFTEZOQlFXeERMRWRCUVRoRExGTkJRVGxETEVkQlFUQkViVU1zVVVGQkwwVTdRVUZEUVN4UFFVRkpiRU1zVlVGQlZVWXNVVUZCVVhGRUxHVkJRVklzUlVGQmVVSXNORUpCUVhwQ0xFVkJRWFZFYUVRc1QwRkJja1U3UVVGRFFTeFZRVUZMTDBRc1VVRkJUQ3hEUVVGamJVUXNUMEZCWkN4RFFVRnpRanRCUVVOeVFrTXNZVUZCVXl4UlFVUlpPMEZCUlhKQ1F5eFZRVUZOTEZOQlJtVTdRVUZIY2tKRExGTkJRVXM3UVVGRFNrTXNaMEpCUVZjc01rSkJSRkE3UVVGRlNtRXNWMEZCVFRSRE8wRkJSa1k3UVVGSVowSXNTVUZCZEVJc1JVRlBSeXhWUVVGRGVFUXNUVUZCUkN4RlFVRlRReXhIUVVGVUxFVkJRV05zUWl4SlFVRmtMRVZCUVhWQ08wRkJRM3BDVXl4aFFVRlRVQ3hKUVVGVUxFTkJRV05HTEVsQlFXUTdRVUZEUVN4WFFVRkxLMElzZFVKQlFVd3NRMEZCTmtKMFFpeFJRVUUzUWl4RlFVRjFRMWtzVDBGQmRrTXNSVUZCWjBSRUxGTkJRV2hFTzBGQlEwRXNVVUZCU1VZc1QwRkJUeXhKUVVGWUxFVkJRV2xDTzBGQlEyaENMRk5CUVVrc1QwRkJUMW9zVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlEwRXNVMEZCVXl4RFFVRkRMRU5CUVZZN1FVRkRjRU1zUzBGR1JDeE5RVWRMTzBGQlEwb3NVMEZCU1N4UFFVRlBRU3hSUVVGUUxFdEJRVzlDTEZWQlFYaENMRVZCUVc5RFFTeFRRVUZUTEU5QlFVdDZReXhWUVVGa08wRkJRM0JETzBGQlEwUXNTVUZvUWtRN1FVRnBRa0VzUjBFMVFsTXNRMEZCVmp0QlFUWkNRU3hGUVRsQ1RTeEZRVGhDU20xRkxFdEJPVUpKTEVOQk9FSkZMR1ZCUVU4N1FVRkRaamRGTEZOQlFVOUpMRXRCUVZBc1EwRkJZVEpFTEVkQlFXSTdRVUZEUVN4RlFXaERUU3hEUVVGUU8wRkJhVU5CTEVOQmJrTkVPenRCUVhGRFFUczdPenM3T3p0QlFVOUJNVVFzVDBGQlQybENMRk5CUVZBc1EwRkJhVUpuUkN4alFVRnFRaXhIUVVGclF5eFZRVUZWVEN4VFFVRldMRVZCUVhGQ1pDeFJRVUZ5UWl4RlFVRXJRanRCUVVGQk96dEJRVU5vUlN4TFFVRkpTeXhOUVVGTkxFdEJRVXRzUkN4UlFVRk1MRU5CUVdOdFJDeFBRVUZrTEVOQlFYTkNPMEZCUXk5Q1F5eFhRVUZUTEZGQlJITkNPMEZCUlM5Q1F5eFJRVUZOTEcxQ1FVWjVRanRCUVVjdlFrTXNUMEZCU3p0QlFVTktReXhqUVVGWE8wRkJSRkE3UVVGSU1FSXNSVUZCZEVJc1JVRk5VQ3hWUVVGRFF5eE5RVUZFTEVWQlFWTkRMRWRCUVZRc1JVRkJZME1zVDBGQlpDeEZRVUV3UWp0QlFVRkZPMEZCUXpsQ0xFMUJRVWxITEdGQlFXRXNhME5CUVd0RFJpeFRRVUZ1UkR0QlFVTkJMRTFCUVVsRUxGRkJRVkZITEZWQlFWSXNTMEZCZFVJc1NVRkJNMElzUlVGQmFVTTdRVUZEYUVNc1QwRkJTVWdzVVVGQlVVY3NWVUZCVWl4RlFVRnZRaXcwUWtGQmNFSXNTMEZCY1VRc1NVRkJla1FzUlVGQkswUTdRVUZET1VRc1VVRkJTVVFzVlVGQlZVWXNVVUZCVVVjc1ZVRkJVaXhGUVVGdlFpdzBRa0ZCY0VJc1JVRkJhMFJGTEU5QlFXaEZPMEZCUTBFN1FVRkRRU3hYUVVGTEwwUXNVVUZCVEN4RFFVRmpiVVFzVDBGQlpDeERRVUZ6UWp0QlFVTnlRa01zWTBGQlV5eFJRVVJaTzBGQlJYSkNReXhYUVVGTkxHRkJSbVU3UVVGSGNrSkRMRlZCUVVzN1FVRkRTa01zYVVKQlFWY3NORUpCUkZBN1FVRkZTbUVzV1VGQlRWQTdRVUZHUmp0QlFVaG5RaXhMUVVGMFFpeEZRVTlITEZWQlFVTk1MRTFCUVVRc1JVRkJVME1zUjBGQlZDeEZRVUZqYkVJc1NVRkJaQ3hGUVVGMVFqdEJRVU42UWl4VFFVRkphMElzVDBGQlR5eEpRVUZZTEVWQlFXbENPMEZCUTJoQ0xGVkJRVWtzVDBGQlQxb3NVVUZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UTBFc1UwRkJVeXhEUVVGRExFTkJRVlk3UVVGRGNFTXNXVUZCVFN4SlFVRkpiMFVzUzBGQlNpeERRVUZWZUVRc1IwRkJWaXhEUVVGT08wRkJRMEVzVFVGSVJDeE5RVWxMTzBGQlEwb3NZVUZCUzJFc2RVSkJRVXdzUTBGQk5rSXZRaXhKUVVFM1FpeEZRVUZ0UTNGQ0xFOUJRVzVETEVWQlFUUkRSQ3hUUVVFMVF6dEJRVU5CTEZWQlFVa3NUMEZCVDJRc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRMEVzVTBGQlV5eFBRVUZMZWtNc1ZVRkJaRHRCUVVOd1F6dEJRVU5FTEV0QmFFSkVPMEZCYVVKQkxFbEJjRUpFTEUxQmIwSlBPMEZCUTA1V0xGZEJRVTlKTEV0QlFWQXNRMEZCWVN4eFJFRkJZanRCUVVOQk8wRkJRMFFzUjBGNFFrUXNUVUYzUWs4N1FVRkRUa29zVlVGQlQwa3NTMEZCVUN4RFFVRmhMR2RDUVVGblFpdEVMRlZCUVdoQ0xFZEJRVFpDTEdsQ1FVRXhRenRCUVVOQk8wRkJRMFFzUlVGdVExTXNRMEZCVmp0QlFXOURRU3hEUVhKRFJDSXNJbVpwYkdVaU9pSnpkR0YwZFhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2x4dUlDb2dRMjl3ZVhKcFoyaDBJRG9nVUdGeWRHNWxjbWx1WnlBekxqQWdLREl3TURjdE1qQXhOaWxjYmlBcUlFRjFkR2h2Y2lBNklGTjViSFpoYVc0Z1RXRm93NmtnUEhONWJIWmhhVzR1YldGb1pVQndZWEowYm1WeWFXNW5MbVp5UGx4dUlDcGNiaUFxSUZSb2FYTWdabWxzWlNCcGN5QndZWEowSUc5bUlHUnBlV0V0YzJSckxseHVJQ3BjYmlBcUlHUnBlV0V0YzJScklHbHpJR1p5WldVZ2MyOW1kSGRoY21VNklIbHZkU0JqWVc0Z2NtVmthWE4wY21saWRYUmxJR2wwSUdGdVpDOXZjaUJ0YjJScFpubGNiaUFxSUdsMElIVnVaR1Z5SUhSb1pTQjBaWEp0Y3lCdlppQjBhR1VnUjA1VklFeGxjM05sY2lCSFpXNWxjbUZzSUZCMVlteHBZeUJNYVdObGJuTmxJR0Z6SUhCMVlteHBjMmhsWkNCaWVWeHVJQ29nZEdobElFWnlaV1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2Yml3Z1pXbDBhR1Z5SUhabGNuTnBiMjRnTXlCdlppQjBhR1VnVEdsalpXNXpaU3dnYjNKY2JpQXFJR0Z1ZVNCc1lYUmxjaUIyWlhKemFXOXVMbHh1SUNwY2JpQXFJR1JwZVdFdGMyUnJJR2x6SUdScGMzUnlhV0oxZEdWa0lHbHVJSFJvWlNCb2IzQmxJSFJvWVhRZ2FYUWdkMmxzYkNCaVpTQjFjMlZtZFd3c1hHNGdLaUJpZFhRZ1YwbFVTRTlWVkNCQlRsa2dWMEZTVWtGT1ZGazdJSGRwZEdodmRYUWdaWFpsYmlCMGFHVWdhVzF3YkdsbFpDQjNZWEp5WVc1MGVTQnZabHh1SUNvZ1RVVlNRMGhCVGxSQlFrbE1TVlJaSUc5eUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GTGlBZ1UyVmxJSFJvWlZ4dUlDb2dSMDVWSUV4bGMzTmxjaUJIWlc1bGNtRnNJRkIxWW14cFl5Qk1hV05sYm5ObElHWnZjaUJ0YjNKbElHUmxkR0ZwYkhNdVhHNGdLbHh1SUNvZ1dXOTFJSE5vYjNWc1pDQm9ZWFpsSUhKbFkyVnBkbVZrSUdFZ1kyOXdlU0J2WmlCMGFHVWdSMDVWSUV4bGMzTmxjaUJIWlc1bGNtRnNJRkIxWW14cFl5Qk1hV05sYm5ObFhHNGdLaUJoYkc5dVp5QjNhWFJvSUdScGVXRXRjMlJyTGlBZ1NXWWdibTkwTENCelpXVWdQR2gwZEhBNkx5OTNkM2N1WjI1MUxtOXlaeTlzYVdObGJuTmxjeTgrTGx4dUlDb3ZYRzVjYmx4dVhHNWNibHh1THlvZ2JXRjVZUzFqYkdsbGJuUmNiaUFxSUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TkN3Z1VHRnlkRzVsY21sdVp5QlNiMkp2ZEdsamN5d2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcUlGUm9hWE1nYkdsaWNtRnllU0JwY3lCbWNtVmxJSE52Wm5SM1lYSmxPeUI1YjNVZ1kyRnVJSEpsWkdsemRISnBZblYwWlNCcGRDQmhibVF2YjNKY2JpQXFJRzF2WkdsbWVTQnBkQ0IxYm1SbGNpQjBhR1VnZEdWeWJYTWdiMllnZEdobElFZE9WU0JNWlhOelpYSWdSMlZ1WlhKaGJDQlFkV0pzYVdOY2JpQXFJRXhwWTJWdWMyVWdZWE1nY0hWaWJHbHphR1ZrSUdKNUlIUm9aU0JHY21WbElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNDdJSFpsY25OcGIyNWNiaUFxWEhRekxqQWdiMllnZEdobElFeHBZMlZ1YzJVdUlGUm9hWE1nYkdsaWNtRnllU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnBiaUIwYUdVZ2FHOXdaVnh1SUNvZ2RHaGhkQ0JwZENCM2FXeHNJR0psSUhWelpXWjFiQ3dnWW5WMElGZEpWRWhQVlZRZ1FVNVpJRmRCVWxKQlRsUlpPeUIzYVhSb2IzVjBJR1YyWlc1Y2JpQXFJSFJvWlNCcGJYQnNhV1ZrSUhkaGNuSmhiblI1SUc5bUlFMUZVa05JUVU1VVFVSkpURWxVV1NCdmNpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZKY2JpQXFJRkJWVWxCUFUwVXVJRk5sWlNCMGFHVWdSMDVWSUV4bGMzTmxjaUJIWlc1bGNtRnNJRkIxWW14cFl5Qk1hV05sYm5ObElHWnZjaUJ0YjNKbElHUmxkR0ZwYkhNdVhHNGdLaUJaYjNVZ2MyaHZkV3hrSUdoaGRtVWdjbVZqWldsMlpXUWdZU0JqYjNCNUlHOW1JSFJvWlNCSFRsVWdUR1Z6YzJWeUlFZGxibVZ5WVd3Z1VIVmliR2xqWEc0Z0tpQk1hV05sYm5ObElHRnNiMjVuSUhkcGRHZ2dkR2hwY3lCc2FXSnlZWEo1TGx4dUlDb3ZYRzVjYm5aaGNpQnBjMEp5YjNkelpYSWdQU0FoS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkMWJtUmxabWx1WldRbktUdGNibWxtS0NGcGMwSnliM2R6WlhJcElIc2dkbUZ5SUZCeWIyMXBjMlVnUFNCeVpYRjFhWEpsS0NkaWJIVmxZbWx5WkNjcE95QjlYRzVsYkhObElIc2dkbUZ5SUZCeWIyMXBjMlVnUFNCM2FXNWtiM2N1VUhKdmJXbHpaVHNnZlZ4dWRtRnlJRVJwZVdGVFpXeGxZM1J2Y2lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDBScGVXRlRaV3hsWTNSdmNpY3BMa1JwZVdGVFpXeGxZM1J2Y2p0Y2JuWmhjaUIxZEdsc0lEMGdjbVZ4ZFdseVpTZ25kWFJwYkNjcE8xeHVYRzUyWVhJZ1RXVnpjMkZuWlNBOUlISmxjWFZwY21Vb0p5NHVMMjFsYzNOaFoyVW5LVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeUJNYjJkbmFXNW5JSFYwYVd4cGRIa2diV1YwYUc5a2N5QXZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYm5aaGNpQkVSVUpWUnlBOUlIUnlkV1U3WEc1MllYSWdURzluWjJWeUlEMGdlMXh1WEhSc2IyYzZJR1oxYm1OMGFXOXVLRzFsYzNOaFoyVXBlMXh1WEhSY2RHbG1LRVJGUWxWSEtTQmpiMjV6YjJ4bExteHZaeWh0WlhOellXZGxLVHRjYmx4MGZTeGNibHh1WEhSbGNuSnZjam9nWm5WdVkzUnBiMjRvYldWemMyRm5aU2w3WEc1Y2RGeDBhV1lvUkVWQ1ZVY3BJR052Ym5OdmJHVXVaWEp5YjNJb2JXVnpjMkZuWlNrN1hHNWNkSDFjYm4wN1hHNWNiaThxS2x4dUlDcGNkR05oYkd4aVlXTnJJRG9nWm5WdVkzUnBiMjRnWTJGc2JHVmtJR0ZtZEdWeUlHMXZaR1ZzSUhWd1pHRjBaV1JjYmlBcUlDb3ZYRzVtZFc1amRHbHZiaUJUZEdGMGRYTW9jMlZzWldOMGIzSXBlMXh1WEhSMGFHbHpMbk5sYkdWamRHOXlJRDBnYzJWc1pXTjBiM0k3WEc1Y2RIUm9hWE11WDJOdlpHVnlJRDBnYzJWc1pXTjBiM0l1Wlc1amIyUmxLQ2s3WEc1Y2RIUm9hWE11YzNWaWMyTnlhWEIwYVc5dWN5QTlJRnRkTzF4dVhHNWNkQzhxS2lCdGIyUmxiQ0J2WmlCeWIySnZkQ0E2SUdGMllXbHNZV0pzWlNCd1lYSjBjeUJoYm1RZ2MzUmhkSFZ6SUNvcUwxeHVYSFIwYUdsekxuSnZZbTkwVFc5a1pXd2dQU0JiWFR0Y2JseDBkR2hwY3k1ZmNtOWliM1JOYjJSbGJFbHVhWFFnUFNCbVlXeHpaVHRjYmx4dVhIUXZLaW9xSUhOMGNuVmpkSFZ5WlNCdlppQmtZWFJoSUdOdmJtWnBaeUFxS2lwY2JseDBYSFFnWTNKcGRHVnlhV0VnT2x4dVhIUmNkQ0FnSUhScGJXVTZJR0ZzYkNBeklIUnBiV1VnWTNKcGRHVnlhV0VnYzJodmRXeGtJRzV2ZENCaVpTQmtaV1pwYm1Wa0lHRjBJSFJvWlNCellXMWxJSFJwYldVdUlDaHlZVzVuWlNCM2IzVnNaQ0JpWlNCbmFYWmxiaUIxY0NsY2JseDBYSFFnSUNBZ0lHSmxaem9nZTF0dWRXeHNYU3gwYVcxbGZTQW9iblZzYkNCdFpXRnVjeUJ0YjNOMElISmxZMlZ1ZENrZ0x5OGdjM1J2Y21Wa0lHRWdWVlJESUdsdUlHMXpJQ2h1ZFcwcFhHNWNkRngwSUNBZ0lDQmxibVE2SUh0YmJuVnNiRjBzSUhScGJXVjlJQ2h1ZFd4c0lHMWxZVzV6SUcxdmMzUWdiMnhrWlhOMEtTQXZMeUJ6ZEc5eVpXUWdZWE1nVlZSRElHbHVJRzF6SUNodWRXMHBYRzVjZEZ4MElDQWdJQ0J5WVc1blpUb2dlMXR1ZFd4c1hTd2dkR2x0WlgwZ0tISmhibWRsSUc5bUlIUnBiV1VvY0c5emFYUnBkbVVwSUNrZ0x5OGdhVzRnY3lBb2JuVnRLVnh1WEhSY2RDQWdJSEp2WW05ME9pQjdRWEp5WVhsUFppQkpSQ0J2Y2lCYlhDSmhiR3hjSWwxOVhHNWNkRngwSUNBZ2NHeGhZMlU2SUh0QmNuSmhlVTltSUVsRUlHOXlJRnRjSW1Gc2JGd2lYWDFjYmx4MFhIUWdiM0JsY21GMGIzSTZJSHRiYkdGemRGMHNJRzFoZUN3Z2JXOTVMQ0J6WkgwZ0xTZ2diV0Y1WW1VZ2JXOTVJSE5vYjNWc1pDQmlaU0JrWldaaGRXeDBYRzVjZEZ4MElDNHVMbHh1WEc1Y2RGeDBJSEJoY25SeklEb2dlMXR1ZFd4c1hTQnZjaUJCY25KaGVVOW1JRkJoY25SelNXUjlJSFJ2SUdkbGRDQmxjbkp2Y25OY2JseDBYSFFnYzNSaGRIVnpJRG9nZTF0dWRXeHNYU0J2Y2lCQmNuSmhlVTltSUZOMFlYUjFjMDVoYldWOUlIUnZJR2RsZENCemRHRjBkWE5jYmx4dVhIUmNkQ0J6WVcxd2JHbHVaem9nZTF0dWRXeHNYU0J2Y2lCcGJuUjlYRzVjZENvdlhHNWNkSFJvYVhNdVpHRjBZVU52Ym1acFp5QTlJSHRjYmx4MFhIUmpjbWwwWlhKcFlUb2dlMXh1WEhSY2RGeDBkR2x0WlRvZ2UxeHVYSFJjZEZ4MFhIUmlaV2M2SUc1MWJHd3NYRzVjZEZ4MFhIUmNkR1Z1WkRvZ2JuVnNiQ3hjYmx4MFhIUmNkRngwY21GdVoyVTZJRzUxYkd3Z0x5OGdhVzRnYzF4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEhKdlltOTBPaUJ1ZFd4c1hHNWNkRngwZlN4Y2JseDBYSFJ2Y0dWeVlYUnZjam9nSjJ4aGMzUW5MRnh1WEhSY2RIQmhjblJ6T2lCdWRXeHNMRnh1WEhSY2RITjBZWFIxY3pvZ2JuVnNiRnh1WEhSOU8xeHVYRzVjZEhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmk4cUtseHVJQ29nUjJWMElISnZZbTkwVFc5a1pXd2dPbHh1SUNvZ2UxeHVJQ29nSUhCaGNuUnpPaUI3WEc0Z0tseDBYSFJjSW5CaGNuUllXRndpT2lCN1hHNGdLaUJjZEZ4MFhIUWdaWEp5YjNKelJHVnpZM0k2SUhzZ1pXNWpiM1Z1ZEdWeVpXUWdaWEp5YjNKeklHbHVaR1Y0WldRZ1lua2daWEp5YjNKSlpITStNQ0I5WEc0Z0tseDBYSFJjZEZ4MFBpQkRiMjVtYVdjZ2IyWWdaWEp5YjNKeklEcGNiaUFxWEhSY2RGeDBYSFJjZEdOeWFYUk1aWFpsYkRvZ1JreFBRVlFzSUM4dklHTnZkV3hrSUdKbElHbHVkQzR1TGx4dUlDb2dYSFJjZEZ4MFhIUmNkRzF6WnpvZ1UxUlNTVTVITEZ4dUlDcGNkRngwWEhSY2RGeDBjM1J2Y0ZObGNuWnBZMlZKWkRvZ1UxUlNTVTVITEZ4dUlDcGNkRngwWEhSY2RGeDBjblZ1VTJOeWFYQjBPaUJUWlhGMVpXeHBlbVV1VTFSU1NVNUhMRnh1SUNwY2RGeDBYSFJjZEZ4MGJXbHpjMmx2YmsxaGMyczZJRk5sY1hWbGJHbDZaUzVKVGxSRlIwVlNMRnh1SUNwY2RGeDBYSFJjZEZ4MGNuVnVUR1YyWld3NklGTmxjWFZsYkdsNlpTNUpUbFJGUjBWU1hHNGdLbHgwWEhSY2RHVnljbTl5T2x0R1RFOUJWQ3dnTGk0dVhTd2dMeThnWTI5MWJHUWdZbVVnYVc1MExpNHVYRzRnS2x4MFhIUmNkSFJwYldVNlcwWk1UMEZVTENBdUxpNWRMRnh1SUNwY2RGeDBYSFJ5YjJKdmREcGJSa3hQUVZRc0lDNHVMbDBzWEc0Z0tseDBYSFJjZEM4dkx5QndiR0ZqWlRwYlJreFBRVlFzSUM0dUxsMHNJRzV2ZENCcGJYQnNaVzFsYm5SbFpDQjVaWFJjYmlBcVhIUmNkSDBzWEc0Z0tseDBJRngwTGk0dUlDaGNJbEJoY25SWldWd2lLVnh1SUNvZ0lIMHNYRzRnS2lBZ2MzUmhkSFZ6T2lCN1hHNGdLbHgwWEhSY0luTjBZWFIxYzFoWVhDSTZJSHRjYmlBcVhIUmNkRngwWEhSa1lYUmhPbHRHVEU5QlZDd2dMaTR1WFN3Z0x5OGdZMjkxYkdRZ1ltVWdhVzUwTGk0dVhHNGdLbHgwWEhSY2RGeDBkR2x0WlRwYlJreFBRVlFzSUM0dUxsMHNYRzRnS2x4MFhIUmNkRngwY205aWIzUTZXMFpNVDBGVUxDQXVMaTVkTEZ4dUlDcGNkRngwWEhSY2RDOHZMeUJ3YkdGalpUcGJSa3hQUVZRc0lDNHVMbDBzSUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0I1WlhSY2JpQXFYSFJjZEZ4MFhIUnlZVzVuWlRvZ1cwWk1UMEZVTENCR1RFOUJWRjBzWEc0Z0tseDBYSFJjZEZ4MGJHRmlaV3c2SUhOMGNtbHVaMXh1SUNwY2RGeDBYSFI5TEZ4dUlDcGNkQ0JjZEM0dUxpQW9YQ0pUZEdGMGRYTlpXVndpS1Z4dUlDb2dJSDFjYmlBcUlIMWNiaUFxTDF4dVUzUmhkSFZ6TG5CeWIzUnZkSGx3WlM1blpYUlNiMkp2ZEUxdlpHVnNJRDBnWm5WdVkzUnBiMjRvS1h0Y2JseDBjbVYwZFhKdUlIUm9hWE11Y205aWIzUk5iMlJsYkR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JoZEdGRGIyNW1hV2NnWTI5dVptbG5JR1p2Y2lCa1lYUmhJSEpsY1hWbGMzUmNiaUFxSUdsbUlHUmhkR0ZEYjI1bWFXY2dhWE1nWkdWbWFXNWxJRG9nYzJWMElHRnVaQ0J5WlhSMWNtNGdkR2hwYzF4dUlDcGNkQ0JBY21WMGRYSnVJSHRUZEdGMGRYTjlJSFJvYVhOY2JpQXFJR1ZzYzJWY2JpQXFYSFFnUUhKbGRIVnliaUI3VDJKcVpXTjBmU0JqZFhKeVpXNTBJR1JoZEdGRGIyNW1hV2RjYmlBcUwxeHVVM1JoZEhWekxuQnliM1J2ZEhsd1pTNUVZWFJoUTI5dVptbG5JRDBnWm5WdVkzUnBiMjRvYm1WM1JHRjBZVU52Ym1acFp5bDdYRzVjZEdsbUtHNWxkMFJoZEdGRGIyNW1hV2NwSUh0Y2JseDBYSFIwYUdsekxtUmhkR0ZEYjI1bWFXYzlibVYzUkdGMFlVTnZibVpwWnp0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEhSbGJITmxYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaR0YwWVVOdmJtWnBaenRjYm4wN1hHNHZLaXBjYmlBcUlGUlBJRUpGSUVsTlVFeEZUVVZPVkVWRUlEb2diM0JsY21GMGIzSWdiV0Z1WVdkbGJXVnVkQ0JwYmlCRVRpMVRkR0YwZFhOY2JpQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMWNkQ0J1WlhkUGNHVnlZWFJ2Y2lBNklIdGJiR0Z6ZEYwc0lHMWhlQ3dnYlc5NUxDQnpaSDFjYmlBcUlFQnlaWFIxY200Z2UxTjBZWFIxYzMwZ2RHaHBjeUF0SUdOb1lXbHVZV0pzWlZ4dUlDb2dVMlYwSUc5d1pYSmhkRzl5SUdOeWFYUmxjbWxoTGx4dUlDb2dSR1Z3Wlc1a2N5QnZiaUJ1WlhkUGNHVnlZWFJ2Y2x4dUlDcGNkRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnVaWGRQY0dWeVlYUnZjbHh1SUNwY2RFQnlaWFIxY200Z2RHaHBjMXh1SUNvZ1IyVjBJRzl3WlhKaGRHOXlJR055YVhSbGNtbGhMbHh1SUNwY2RFQnlaWFIxY200Z2UxTjBjbWx1WjMwZ2IzQmxjbUYwYjNKY2JpQXFMMXh1VTNSaGRIVnpMbkJ5YjNSdmRIbHdaUzVFWVhSaFQzQmxjbUYwYjNJZ1BTQm1kVzVqZEdsdmJpaHVaWGRQY0dWeVlYUnZjaWw3WEc1Y2RHbG1LRzVsZDA5d1pYSmhkRzl5S1NCN1hHNWNkRngwZEdocGN5NWtZWFJoUTI5dVptbG5MbTl3WlhKaGRHOXlJRDBnYm1WM1QzQmxjbUYwYjNJN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDFjYmx4MFpXeHpaVnh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVJoZEdGRGIyNW1hV2N1YjNCbGNtRjBiM0k3WEc1OU8xeHVMeW9xWEc0Z0tpQkVaWEJsYm1SeklHOXVJRzUxYlZOaGJYQnNaWE5jYmlBcUlFQndZWEpoYlNCN2FXNTBmU0J1ZFcxaVpYSWdiMllnYzJGdGNHeGxjeUJwYmlCa1lYUmhUVzlrWld4Y2JpQXFJR2xtSUdSbFptbHVaV1FnT2lCelpYUWdiblZ0WW1WeUlHOW1JSE5oYlhCc1pYTmNiaUFxWEhSQWNtVjBkWEp1SUh0VGRHRjBkWE45SUhSb2FYTmNiaUFxSUdWc2MyVmNiaUFxWEhSQWNtVjBkWEp1SUh0cGJuUjlJRzUxYldKbGNpQnZaaUJ6WVcxd2JHVnpYRzRnS2lvdlhHNVRkR0YwZFhNdWNISnZkRzkwZVhCbExrUmhkR0ZUWVcxd2JHbHVaeUE5SUdaMWJtTjBhVzl1S0c1MWJWTmhiWEJzWlhNcGUxeHVYSFJwWmlodWRXMVRZVzF3YkdWektTQjdYRzVjZEZ4MGRHaHBjeTVrWVhSaFEyOXVabWxuTG5OaGJYQnNhVzVuSUQwZ2JuVnRVMkZ0Y0d4bGN6dGNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlZ4dVhIUmxiSE5sWEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WkdGMFlVTnZibVpwWnk1ellXMXdiR2x1Wnp0Y2JuMDdYRzR2S2lwY2JpQXFJRk5sZENCdmNpQm5aWFFnWkdGMFlTQjBhVzFsSUdOeWFYUmxjbWxoSUdKbFp5QmhibVFnWlc1a0xseHVJQ29nU1dZZ2NHRnlZVzBnWkdWbWFXNWxaRnh1SUNwY2RFQndZWEpoYlNCN1JHRjBaWDBnYm1WM1ZHbHRaVUpsWnlBdkx5QnRZWGtnWW1VZ2JuVnNiRnh1SUNwY2RFQndZWEpoYlNCN1JHRjBaWDBnYm1WM1ZHbHRaVVZ1WkNBdkx5QnRZWGtnWW1VZ2JuVnNiRnh1SUNwY2RFQnlaWFIxY200Z2UxTjBZWFIxYzMwZ2RHaHBjMXh1SUNvZ1NXWWdibThnY0dGeVlXMGdaR1ZtYVc1bFpEcGNiaUFxWEhSQWNtVjBkWEp1SUh0UFltcGxZM1I5SUZScGJXVWdiMkpxWldOME9pQm1hV1ZzWkhNZ1ltVm5JR0Z1WkNCbGJtUXVYRzRnS2k5Y2JsTjBZWFIxY3k1d2NtOTBiM1I1Y0dVdVJHRjBZVlJwYldVZ1BTQm1kVzVqZEdsdmJpaHVaWGRVYVcxbFFtVm5MRzVsZDFScGJXVkZibVFzSUc1bGQxSmhibWRsS1h0Y2JseDBhV1lvYm1WM1ZHbHRaVUpsWnlCOGZDQnVaWGRVYVcxbFJXNWtJSHg4SUc1bGQxSmhibWRsS1NCN1hHNWNkRngwZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMblJwYldVdVltVm5JRDBnYm1WM1ZHbHRaVUpsWnk1blpYUlVhVzFsS0NrN1hHNWNkRngwZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMblJwYldVdVpXNWtJRDBnYm1WM1ZHbHRaVVZ1WkM1blpYUlVhVzFsS0NrN1hHNWNkRngwZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMblJwYldVdWNtRnVaMlVnUFNCdVpYZFNZVzVuWlR0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEhSbGJITmxYRzVjZEZ4MGNtVjBkWEp1SUh0Y2JseDBYSFJjZEdKbFp6b2dibVYzSUVSaGRHVW9kR2hwY3k1a1lYUmhRMjl1Wm1sbkxtTnlhWFJsY21saExuUnBiV1V1WW1WbktTeGNibHgwWEhSY2RHVnVaRG9nYm1WM0lFUmhkR1VvZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMblJwYldVdVpXNWtLU3hjYmx4MFhIUmNkSEpoYm1kbE9pQnVaWGNnUkdGMFpTaDBhR2x6TG1SaGRHRkRiMjVtYVdjdVkzSnBkR1Z5YVdFdWRHbHRaUzV5WVc1blpTbGNibHgwWEhSOU8xeHVmVHRjYmk4cUtseHVJQ29nUkdWd1pXNWtjeUJ2YmlCeWIySnZkRWxrYzF4dUlDb2dVMlYwSUhKdlltOTBJR055YVhSbGNtbGhMbHh1SUNwY2RFQndZWEpoYlNCN1FYSnlZWGxiU1c1MFhYMGdjbTlpYjNSSlpITWdiR2x6ZENCdlppQnliMkp2ZENCSlpITmNiaUFxSUVkbGRDQnliMkp2ZENCamNtbDBaWEpwWVM1Y2JpQXFYSFJBY21WMGRYSnVJSHRCY25KaGVWdEpiblJkZlNCc2FYTjBJRzltSUhKdlltOTBJRWxrYzF4dUlDb3ZYRzVUZEdGMGRYTXVjSEp2ZEc5MGVYQmxMa1JoZEdGU2IySnZkRWxrY3lBOUlHWjFibU4wYVc5dUtISnZZbTkwU1dSektYdGNibHgwYVdZb2NtOWliM1JKWkhNcElIdGNibHgwWEhSMGFHbHpMbVJoZEdGRGIyNW1hV2N1WTNKcGRHVnlhV0V1Y205aWIzUWdQU0J5YjJKdmRFbGtjenRjYmx4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MGZWeHVYSFJsYkhObFhHNWNkRngwY21WMGRYSnVJSFJvYVhNdVpHRjBZVU52Ym1acFp5NWpjbWwwWlhKcFlTNXliMkp2ZER0Y2JuMDdYRzR2S2lwY2JpQXFJRVJsY0dWdVpITWdiMjRnY0d4aFkyVkpaSE1nTHk4Z2JtOTBJSEpsYkdWMllXNTBQeXdnYm05MElHbHRjR3hsYldWdWRHVmtJSGxsZEZ4dUlDb2dVMlYwSUhCc1lXTmxJR055YVhSbGNtbGhMbHh1SUNwY2RFQndZWEpoYlNCN1FYSnlZWGxiU1c1MFhYMGdjR3hoWTJWSlpITWdiR2x6ZENCdlppQndiR0ZqWlNCSlpITmNiaUFxSUVkbGRDQndiR0ZqWlNCamNtbDBaWEpwWVM1Y2JpQXFYSFJBY21WMGRYSnVJSHRCY25KaGVWdEpiblJkZlNCc2FYTjBJRzltSUhCc1lXTmxJRWxrYzF4dUlDb3ZYRzVUZEdGMGRYTXVjSEp2ZEc5MGVYQmxMa1JoZEdGUWJHRmpaVWxrY3lBOUlHWjFibU4wYVc5dUtIQnNZV05sU1dSektYdGNibHgwYVdZb2NHeGhZMlZKWkhNcElIdGNibHgwWEhSMGFHbHpMbVJoZEdGRGIyNW1hV2N1WTNKcGRHVnlhV0V1Y0d4aFkyVkpaQ0E5SUhCc1lXTmxTV1J6TzF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlYRzVjZEdWc2MyVmNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWtZWFJoUTI5dVptbG5MbU55YVhSbGNtbGhMbkJzWVdObE8xeHVmVHRjYmk4cUtseHVJQ29nUjJWMElHUmhkR0VnWW5rZ2MyVnVjMjl5SUc1aGJXVXVYRzRnS2x4MFFIQmhjbUZ0SUh0QmNuSmhlVnRUZEhKcGJtZGRmU0J6Wlc1emIzSk9ZVzFsSUd4cGMzUWdiMllnYzJWdWMyOXljMXh1SUNvdlhHNVRkR0YwZFhNdWNISnZkRzkwZVhCbExtZGxkRVJoZEdGQ2VVNWhiV1VnUFNCbWRXNWpkR2x2YmloelpXNXpiM0pPWVcxbGN5bDdYRzVjZEhaaGNpQmtZWFJoUFZ0ZE8xeHVYSFJtYjNJb2RtRnlJRzRnYVc0Z2MyVnVjMjl5VG1GdFpYTXBJSHRjYmx4MFhIUmtZWFJoTG5CMWMyZ29kR2hwY3k1a1lYUmhUVzlrWld4YmMyVnVjMjl5VG1GdFpYTmJibDFkS1R0Y2JseDBmVnh1WEhSeVpYUjFjbTRnWkdGMFlUdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1UzVmljMk55YVdKbElIUnZJR1Z5Y205eUwzTjBZWFIxY3lCMWNHUmhkR1Z6WEc0Z0tpOWNibE4wWVhSMWN5NXdjbTkwYjNSNWNHVXVkMkYwWTJnZ1BTQm1kVzVqZEdsdmJpQW9jbTlpYjNST1lXMWxjeXdnWTJGc2JHSmhZMnNwSUh0Y2JseDBkR2hwY3k1elpXeGxZM1J2Y2k1elpYUk5ZWGhNYVhOMFpXNWxjbk1vTUNrN1hHNWNkSFJvYVhNdWMyVnNaV04wYjNJdVgyTnZibTVsWTNScGIyNHVjMlYwVFdGNFRHbHpkR1Z1WlhKektEQXBPMXh1WEhSc1pYUWdjMlZ1WkVSaGRHRWdQU0JiWFR0Y2JseDBiR1YwSUhKdlltOTBTV1J6SUQwZ1cxMDdYRzVjZEhKbGRIVnliaUJRY205dGFYTmxMblJ5ZVNoZklEMCtJSHRjYmx4MFhIUnNaWFFnY21WeElEMGdkR2hwY3k1elpXeGxZM1J2Y2k1eVpYRjFaWE4wS0h0Y2JseDBYSFJjZEhObGNuWnBZMlU2SUNkemRHRjBkWE1uTEZ4dVhIUmNkRngwWm5WdVl6b2dKMGRsZEUxaGJtRm5aV1JQWW1wbFkzUnpKeXhjYmx4MFhIUmNkRzlpYWpvZ2UxeHVYSFJjZEZ4MFhIUnBiblJsY21aaFkyVTZJQ2R2Y21jdVpuSmxaV1JsYzJ0MGIzQXVSRUoxY3k1UFltcGxZM1JOWVc1aFoyVnlKeXhjYmx4MFhIUmNkSDFjYmx4MFhIUjlMQ0FvY0dWbGNrbGtMQ0JsY25Jc0lHOWlha1JoZEdFcElEMCtJSHNnTHk4Z1oyVjBJR0ZzYkNCdlltcGxZM1FnY0dGMGFITXNJR2x1ZEdWeVptRmpaWE1nWVc1a0lIQnliM0JsY25ScFpYTWdZMmhwYkdSeVpXNGdiMllnVTNSaGRIVnpYRzVjZEZ4MFhIUnNaWFFnY205aWIzUk9ZVzFsSUQwZ0p5YzdYRzVjZEZ4MFhIUnNaWFFnY205aWIzUkpaQ0E5SURFN1hHNWNkRngwWEhSbWIzSWdLR3hsZENCdlltcGxZM1JRWVhSb0lHbHVJRzlpYWtSaGRHRXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tHOWlha1JoZEdGYmIySnFaV04wVUdGMGFGMWJKMlp5TG5CaGNuUnVaWEpwYm1jdVUzUmhkSFZ6TGxKdlltOTBKMTBnSVQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwWEhSY2RISnZZbTkwVG1GdFpTQTlJRzlpYWtSaGRHRmJiMkpxWldOMFVHRjBhRjFiSjJaeUxuQmhjblJ1WlhKcGJtY3VVM1JoZEhWekxsSnZZbTkwSjEwdVVtOWliM1JPWVcxbE8xeHVYSFJjZEZ4MFhIUmNkSEp2WW05MFNXUWdQU0J2WW1wRVlYUmhXMjlpYW1WamRGQmhkR2hkV3lkbWNpNXdZWEowYm1WeWFXNW5MbE4wWVhSMWN5NVNiMkp2ZENkZExsSnZZbTkwU1dRN1hHNWNkRngwWEhSY2RGeDBjbTlpYjNSSlpITmJjbTlpYjNST1lXMWxYU0E5SUhKdlltOTBTV1E3WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTVuWlhSQmJHeFRkR0YwZFhObGN5aHliMkp2ZEU1aGJXVXNJR1oxYm1OMGFXOXVJQ2h0YjJSbGJDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFkyRnNiR0poWTJzb2JXOWtaV3dwTzF4dVhIUmNkRngwWEhSY2RIMHBYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwYVdZZ0tHOWlha1JoZEdGYmIySnFaV04wVUdGMGFGMWJKMlp5TG5CaGNuUnVaWEpwYm1jdVUzUmhkSFZ6TGxCaGNuUW5YU0FoUFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFJjZEZ4MGJHVjBJSE4xWW5NZ1BTQjBhR2x6TG5ObGJHVmpkRzl5TG5OMVluTmpjbWxpWlNoN0x5OGdjM1ZpYzJOeWFXSmxjeUIwYnlCemRHRjBkWE1nWTJoaGJtZGxjeUJtYjNJZ1lXeHNJSEJoY25SelhHNWNkRngwWEhSY2RGeDBYSFJ6WlhKMmFXTmxPaUFuYzNSaGRIVnpKeXhjYmx4MFhIUmNkRngwWEhSY2RHWjFibU02SUNkRGRYSnlaVzUwVTNSaGRIVnpRMmhoYm1kbFpDY3NYRzVjZEZ4MFhIUmNkRngwWEhSdlltbzZJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBhVzUwWlhKbVlXTmxPaUFuWm5JdWNHRnlkRzVsY21sdVp5NVRkR0YwZFhNdVVHRnlkQ2NzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEJoZEdnNklHOWlhbVZqZEZCaGRHaGNibHgwWEhSY2RGeDBYSFJjZEgwc1hHNWNkRngwWEhSY2RGeDBYSFJrWVhSaE9pQnliMkp2ZEU1aGJXVnpYRzVjZEZ4MFhIUmNkRngwZlN3Z0tIQmxaWEpKWkN3Z1pYSnlMQ0JrWVhSaEtTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvWlhKeUlDRTlJRzUxYkd3cElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFRHOW5aMlZ5TG1WeWNtOXlLRndpVTNSaGRIVnpVM1ZpYzJOeWFXSmxPbHdpSUNzZ1pYSnlLVHRjYmx4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKdlltOTBUbUZ0WlNBOUlHOWlhbVZqZEZCaGRHZ3VjM0JzYVhRb1hDSXZYQ0lwV3pWZE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSeWIySnZkRWxrSUQwZ2NtOWliM1JKWkhOYmNtOWliM1JPWVcxbFhUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGMyVnVaRVJoZEdGYk1GMGdQU0JrWVhSaE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbDluWlhSU2IySnZkRTF2WkdWc1JuSnZiVkpsWTNZeUtITmxibVJFWVhSaExDQnliMkp2ZEVsa0xDQnliMkp2ZEU1aGJXVXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHTmhiR3hpWVdOcktIUm9hWE11Y205aWIzUk5iMlJsYkNrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZTazdYRzVjZEZ4MFhIUmNkRngwZEdocGN5NXpkV0p6WTNKcGNIUnBiMjV6TG5CMWMyZ29jM1ZpY3lrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtWeHVYSFI5S1M1allYUmphQ2hsY25JZ1BUNGdlMXh1WEhSY2RFeHZaMmRsY2k1bGNuSnZjaWhsY25JcE8xeHVYSFI5S1Z4dVhHNWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1EyeHZjMlVnWVd4c0lITjFZbk5qY21sd2RHbHZibk5jYmlBcUwxeHVVM1JoZEhWekxuQnliM1J2ZEhsd1pTNWpiRzl6WlZOMVluTmpjbWx3ZEdsdmJuTWdQU0JtZFc1amRHbHZiaWdwZTF4dVhIUm1iM0lvZG1GeUlHa2dhVzRnZEdocGN5NXpkV0p6WTNKcGNIUnBiMjV6S1NCN1hHNWNkRngwZEdocGN5NXpkV0p6WTNKcGNIUnBiMjV6VzJsZExtTnNiM05sS0NrN1hHNWNkSDFjYmx4MGRHaHBjeTV6ZFdKelkzSnBjSFJwYjI1eklEMWJYVHRjYmx4MGRHaHBjeTV5YjJKdmRFMXZaR1ZzSUQwZ1cxMDdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFZGxkQ0JrWVhSaElHZHBkbVZ1SUdSaGRHRkRiMjVtYVdjdVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OOUlHTmhiR3hpWVdOcklEb2dZMkZzYkdWa0lHRm1kR1Z5SUhWd1pHRjBaVnh1SUNvZ1ZFOUVUeUJWVTBVZ1VGSlBUVWxUUlZ4dUlDb3ZYRzVUZEdGMGRYTXVjSEp2ZEc5MGVYQmxMbWRsZEVSaGRHRWdQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheXdnWkdGMFlVTnZibVpwWnlsN1hHNWNkSFpoY2lCa1lYUmhUVzlrWld3Z1BTQjdmVHRjYmx4MGNtVjBkWEp1SUZCeWIyMXBjMlV1ZEhKNUtGOGdQVDRnZTF4dVhIUmNkR2xtS0dSaGRHRkRiMjVtYVdjZ0lUMGdiblZzYkNsY2JseDBYSFJjZEhSb2FYTXVSR0YwWVVOdmJtWnBaeWhrWVhSaFEyOXVabWxuS1R0Y2JseDBYSFF2THlCamIyNXpiMnhsTG14dlp5aGNJbEpsY1hWbGMzUTZJRndpSzBwVFQwNHVjM1J5YVc1bmFXWjVLR1JoZEdGRGIyNW1hV2NwS1R0Y2JseDBYSFIwYUdsekxuTmxiR1ZqZEc5eUxuSmxjWFZsYzNRb2UxeHVYSFJjZEZ4MGMyVnlkbWxqWlRvZ1hDSnpkR0YwZFhOY0lpeGNibHgwWEhSY2RHWjFibU02SUZ3aVJHRjBZVkpsY1hWbGMzUmNJaXhjYmx4MFhIUmNkR1JoZEdFNklIdGNibHgwWEhSY2RGeDBkSGx3WlRwY0luTndiRkpsY1Z3aUxGeHVYSFJjZEZ4MFhIUmtZWFJoUTI5dVptbG5PaUIwYUdsekxtUmhkR0ZEYjI1bWFXZGNibHgwWEhSY2RIMWNibHgwWEhSOUxDQW9aRzVKWkN3Z1pYSnlMQ0JrWVhSaEtTQTlQaUI3WEc1Y2RGeDBYSFJwWmlBb1pYSnlJQ0U5SUc1MWJHd3BJSHRjYmx4MFhIUmNkRngwVEc5bloyVnlMbVZ5Y205eUtGd2lXMXdpSUNzZ2RHaHBjeTVrWVhSaFEyOXVabWxuTG5ObGJuTnZjbk1nS3lCY0lsMGdVbVZqZGlCbGNuSTZJRndpSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvWlhKeUtTazdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHgwWEhSY2RHbG1LR1JoZEdFdWFHVmhaR1Z5TG1WeWNtOXlJQ0U5SUc1MWJHd3BJSHRjYmx4MFhIUmNkRngwTHk4Z1ZFOUVUeUE2SUdOb1pXTnJMM1Z6WlNCbGNuSWdjM1JoZEhWeklHRnVaQ0JoWkdGd2RDQmlaV2hoZG1sdmNpQmhZMk52Y21ScGJtZHNlVnh1WEhSY2RGeDBYSFJNYjJkblpYSXVaWEp5YjNJb1hDSlZjR1JoZEdWRVlYUmhPbHhjYmx3aUswcFRUMDR1YzNSeWFXNW5hV1o1S0dSaGRHRXVhR1ZoWkdWeUxuSmxjVU52Ym1acFp5a3BPMXh1WEhSY2RGeDBYSFJNYjJkblpYSXVaWEp5YjNJb1hDSkVZWFJoSUhKbGNYVmxjM1FnWm1GcGJHVmtJQ2hjSWl0a1lYUmhMbWhsWVdSbGNpNWxjbkp2Y2k1emRDdGNJaWs2SUZ3aUsyUmhkR0V1YUdWaFpHVnlMbVZ5Y205eUxtMXpaeWs3WEc1Y2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkQzh2VEc5bloyVnlMbXh2WnloS1UwOU9Mbk4wY21sdVoybG1lU2gwYUdsekxtUmhkR0ZOYjJSbGJDa3BPMXh1WEhSY2RGeDBaR0YwWVUxdlpHVnNJRDBnZEdocGN5NWZaMlYwUkdGMFlVMXZaR1ZzUm5KdmJWSmxZM1lvWkdGMFlTazdYRzVjYmx4MFhIUmNkRXh2WjJkbGNpNXNiMmNvZEdocGN5NW5aWFJFWVhSaFRXOWtaV3dvS1NrN1hHNWNkRngwWEhSallXeHNZbUZqYXlBOUlHTmhiR3hpWVdOckxtSnBibVFvZEdocGN5azdJQzh2SUdKcGJtUWdZMkZzYkdKaFkyc2dkMmwwYUNCVGRHRjBkWE5jYmx4MFhIUmNkR05oYkd4aVlXTnJLR1JoZEdGTmIyUmxiQ2s3SUM4dklHTmhiR3hpWVdOcklHWjFibU5jYmx4MFhIUjlLVHRjYmx4MGZTa3VZMkYwWTJnb1pYSnlJRDArSUh0Y2JseDBYSFJNYjJkblpYSXVaWEp5YjNJb1pYSnlLVnh1WEhSOUtWeHVmVHRjYmx4dVhHNHZLaXBjYmlBcUlGVndaR0YwWlNCcGJuUmxjbTVoYkNCeWIySnZkQ0J0YjJSbGJDQjNhWFJvSUhKbFkyVnBkbVZrSUdSaGRHRWdLSFpsY25OcGIyNGdNaWxjYmlBcUlFQndZWEpoYlNBZ2UwOWlhbVZqZEgwZ1pHRjBZU0JrWVhSaElISmxZMlZwZG1Wa0lHWnliMjBnUkdsNVlVNXZaR1VnWW5rZ2QyVmljMjlqYTJWMFhHNGdLaUJBY21WMGRYSnVJSHRiZEhsd1pWMTlYSFJjZEZ0a1pYTmpjbWx3ZEdsdmJsMWNiaUFxTDF4dVUzUmhkSFZ6TG5CeWIzUnZkSGx3WlM1ZloyVjBVbTlpYjNSTmIyUmxiRVp5YjIxU1pXTjJNaUE5SUdaMWJtTjBhVzl1S0dSaGRHRXNJSEp2WW05MFNXUXNJSEp2WW05MFRtRnRaU2tnZTF4dVhIUnBaaWgwYUdsekxuSnZZbTkwVFc5a1pXd2dQVDBnYm5Wc2JDbGNibHgwWEhSMGFHbHpMbkp2WW05MFRXOWtaV3dnUFNCYlhUdGNibHh1WEhScFppaDBhR2x6TG5KdlltOTBUVzlrWld4YmNtOWliM1JKWkYwZ0lUMGdiblZzYkNsY2JseDBYSFIwYUdsekxuSnZZbTkwVFc5a1pXeGJjbTlpYjNSSlpGMHVjR0Z5ZEhNZ1BTQjdmVHNnTHk4Z2NtVnpaWFFnY0dGeWRITmNibHh1WEhScFppaDBhR2x6TG5KdlltOTBUVzlrWld4YmNtOWliM1JKWkYwZ1BUMGdiblZzYkNsY2JseDBYSFIwYUdsekxuSnZZbTkwVFc5a1pXeGJjbTlpYjNSSlpGMGdQU0I3ZlR0Y2JseHVYSFIwYUdsekxuSnZZbTkwVFc5a1pXeGJjbTlpYjNSSlpGMGdQU0I3WEc1Y2RGeDBjbTlpYjNRNklIdGNibHgwWEhSY2RHNWhiV1U2SUhKdlltOTBUbUZ0WlZ4dVhIUmNkSDFjYmx4MGZUdGNibHh1WEhRdktpb2daWGgwY21GamRDQndZWEowY3lCcGJtWnZJQ29xTDF4dVhIUjBhR2x6TG5KdlltOTBUVzlrWld4YmNtOWliM1JKWkYwdWNHRnlkSE1nUFNCN2ZUdGNibHgwYkdWMElISlFZWEowY3lBOUlIUm9hWE11Y205aWIzUk5iMlJsYkZ0eWIySnZkRWxrWFM1d1lYSjBjenRjYmx4dVhIUmtZWFJoTG1admNrVmhZMmdvWkNBOVBpQjdYRzVjZEZ4MGJHVjBJSEJoY25SSlpDQTlJR1JiTUYwN1hHNWNkRngwYkdWMElHTmhkR1ZuYjNKNUlEMGdaRnN4WFR0Y2JseDBYSFJzWlhRZ2NHRnlkRTVoYldVZ1BTQmtXekpkTzF4dVhIUmNkR3hsZENCc1lXSmxiQ0E5SUdSYk0xMDdYRzVjZEZ4MGJHVjBJSFJwYldVZ1BTQmtXelJkTzF4dVhIUmNkR3hsZENCamIyUmxJRDBnWkZzMVhUdGNibHgwWEhSc1pYUWdZMjlrWlZKbFppQTlJR1JiTmwwN1hHNWNkRngwYkdWMElHMXpaeUE5SUdSYk4xMDdYRzVjZEZ4MGJHVjBJR055YVhSTVpYWmxiQ0E5SUdSYk9GMDdYRzVjZEZ4MGJHVjBJR1JsYzJOeWFYQjBhVzl1SUQwZ1pGczVYVHRjYmx4dVhIUmNkR2xtSUNoeVVHRnlkSE5iY0dGeWRFbGtYU0E5UFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFJ5VUdGeWRITmJjR0Z5ZEVsa1hTQTlJSHQ5TzF4dVhIUmNkSDFjYmx4MFhIUXZLaUIxY0dSaGRHVWdjR0Z5ZENCallYUmxaMjl5ZVNBcUwxeHVYSFJjZEhKUVlYSjBjMXR3WVhKMFNXUmRMbU5oZEdWbmIzSjVJRDBnWTJGMFpXZHZjbms3WEc1Y2RGeDBMeW9nZFhCa1lYUmxJSEJoY25RZ2JtRnRaU0FxTDF4dVhIUmNkSEpRWVhKMGMxdHdZWEowU1dSZExtNWhiV1VnUFNCd1lYSjBUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1WEhSY2RDOHFJSFZ3WkdGMFpTQndZWEowSUd4aFltVnNJQ292WEc1Y2RGeDBjbEJoY25SelczQmhjblJKWkYwdWJHRmlaV3dnUFNCc1lXSmxiRHRjYmx4dVhIUmNkQzhxSUhWd1pHRjBaU0JsY25KdmNpQXFMMXh1WEhSY2RDOHFLaUIxY0dSaGRHVWdaWEp5YjNKTWFYTjBJQ29xTDF4dVhIUmNkR2xtSUNoeVVHRnlkSE5iY0dGeWRFbGtYUzVsY25KdmNreHBjM1FnUFQwZ2JuVnNiQ2xjYmx4MFhIUmNkSEpRWVhKMGMxdHdZWEowU1dSZExtVnljbTl5VEdsemRDQTlJSHQ5TzF4dVhHNWNkRngwYVdZZ0tISlFZWEowYzF0d1lYSjBTV1JkTG1WeWNtOXlUR2x6ZEZ0amIyUmxVbVZtWFNBOVBTQnVkV3hzS1Z4dVhIUmNkRngwY2xCaGNuUnpXM0JoY25SSlpGMHVaWEp5YjNKTWFYTjBXMk52WkdWU1pXWmRJRDBnZTF4dVhIUmNkRngwWEhSdGMyYzZJRzF6Wnl4Y2JseDBYSFJjZEZ4MFkzSnBkRXhsZG1Wc09pQmpjbWwwVEdWMlpXd3NYRzVjZEZ4MFhIUmNkR1JsYzJOeWFYQjBhVzl1T2lCa1pYTmpjbWx3ZEdsdmJseHVYSFJjZEZ4MGZUdGNibHgwWEhSc1pYUWdaWFowYzE5MGJYQWdQU0I3WEc1Y2RGeDBYSFIwYVcxbE9pQjBhR2x6TGw5amIyUmxjaTVtY205dEtIUnBiV1VwTEZ4dVhIUmNkRngwWTI5a1pUb2dkR2hwY3k1ZlkyOWtaWEl1Wm5KdmJTaGpiMlJsS1N4Y2JseDBYSFJjZEdOdlpHVlNaV1k2SUhSb2FYTXVYMk52WkdWeUxtWnliMjBvWTI5a1pWSmxaaWxjYmx4MFhIUjlPMXh1WEhSY2RDOHFLaUJwWmlCeVpXTmxhWFpsWkNCc2FYTjBJRzltSUdWMlpXNTBjeUFxS2k5Y2JseDBYSFJwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsZG5SelgzUnRjQzVqYjJSbEtTQjhmQ0JCY25KaGVTNXBjMEZ5Y21GNUtHVjJkSE5mZEcxd0xuUnBiV1VwWEc1Y2RGeDBYSFI4ZkNCQmNuSmhlUzVwYzBGeWNtRjVLR1YyZEhOZmRHMXdMbU52WkdWU1pXWXBLU0I3WEc1Y2RGeDBYSFJwWmlBb1pYWjBjMTkwYlhBdVkyOWtaUzVzWlc1bmRHZ2dQVDA5SUdWMmRITmZkRzF3TG1OdlpHVlNaV1l1YkdWdVozUm9YRzVjZEZ4MFhIUmNkQ1ltSUdWMmRITmZkRzF3TG1OdlpHVXViR1Z1WjNSb0lEMDlQU0JsZG5SelgzUnRjQzUwYVcxbExteGxibWQwYUNrZ2UxeHVYSFJjZEZ4MFhIUXZLaW9nWW5WcGJHUWdiR2x6ZENCdlppQmxkbVZ1ZEhNZ0tpb3ZYRzVjZEZ4MFhIUmNkSEpRWVhKMGMxdHdZWEowU1dSZExtVjJkSE1nUFNCYlhUdGNibHgwWEhSY2RGeDBabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JsZG5SelgzUnRjQzVqYjJSbExteGxibWQwYURzZ2FTc3JLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNsQmhjblJ6VzNCaGNuUkpaRjB1WlhaMGN5NXdkWE5vS0h0Y2JseDBYSFJjZEZ4MFhIUmNkSFJwYldVNklHVjJkSE5mZEcxd0xuUnBiV1ZiYVYwc1hHNWNkRngwWEhSY2RGeDBYSFJqYjJSbE9pQmxkblJ6WDNSdGNDNWpiMlJsVzJsZExGeHVYSFJjZEZ4MFhIUmNkRngwWTI5a1pWSmxaam9nWlhaMGMxOTBiWEF1WTI5a1pWSmxabHRwWFZ4dVhIUmNkRngwWEhSY2RIMHBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJsYkhObElFeHZaMmRsY2k1bGNuSnZjaWhjSWxOMFlYUjFjenBKYm1OdmJuTnBjM1JoYm5RZ2JHVnVaM1JvY3lCdlppQmlkV1ptWlhKeklDaDBhVzFsTDJOdlpHVXZZMjlrWlZKbFppbGNJaWs3WEc1Y2RGeDBmVnh1WEhSY2RHVnNjMlVnZXlBdktpb2dhblZ6ZENCcGJpQmpZWE5sTENCMGJ5QndjbTkyYVdSbElHSmhZMnQzWVhKa0lHTnZiWEJoZEdsaWFXeHBkSGtnS2lvdlhHNWNkRngwWEhRdktpb2djMlYwSUhKbFkyVnBkbVZrSUdWMlpXNTBJQ29xTDF4dVhIUmNkRngwY2xCaGNuUnpXM0JoY25SSlpGMHVaWFowY3lBOUlGdDdYRzVjZEZ4MFhIUmNkSFJwYldVNklHVjJkSE5mZEcxd0xuUnBiV1VzWEc1Y2RGeDBYSFJjZEdOdlpHVTZJR1YyZEhOZmRHMXdMbU52WkdVc1hHNWNkRngwWEhSY2RHTnZaR1ZTWldZNklHVjJkSE5mZEcxd0xtTnZaR1ZTWldaY2JseDBYSFJjZEgxZE8xeHVYSFJjZEgxY2JseDBmU2xjYm4wN1hHNWNiaThxS2lCamNtVmhkR1VnVTNSaGRIVnpJSE5sY25acFkyVWdLaW92WEc1RWFYbGhVMlZzWldOMGIzSXVjSEp2ZEc5MGVYQmxMbE4wWVhSMWN5QTlJR1oxYm1OMGFXOXVLQ2w3WEc1Y2RISmxkSFZ5YmlCdVpYY2dVM1JoZEhWektIUm9hWE1wTzF4dWZUdGNibHh1THlvcVhHNGdLaUJUWlhRZ2IyNGdjM1JoZEhWelhHNGdLaUJBY0dGeVlXMGdjbTlpYjNST1lXMWxJSFJ2SUdacGJtUWdjM1JoZEhWeklIUnZJRzF2WkdsbWVWeHVJQ29nUUhCaGNtRnRJSEJoY25ST1lXMWxJRngwZEc4Z1ptbHVaQ0J6ZEdGMGRYTWdkRzhnYlc5a2FXWjVYRzRnS2lCQWNHRnlZVzBnWTI5a1pWeDBYSFJ1WlhkRGIyUmxYRzRnS2lCQWNHRnlZVzBnYzI5MWNtTmxYSFJjZEhOdmRYSmpaVnh1SUNvZ1FIQmhjbUZ0SUdOaGJHeGlZV05yWEhSY2RISmxkSFZ5YmlCallXeHNZbUZqYXlBb1BHSnZiMncrYzNWalkyVnpjeWxjYmlBcUwxeHVSR2w1WVZObGJHVmpkRzl5TG5CeWIzUnZkSGx3WlM1elpYUlRkR0YwZFhNZ1BTQm1kVzVqZEdsdmJpQW9jbTlpYjNST1lXMWxMQ0J3WVhKMFRtRnRaU3dnWTI5a1pTd2djMjkxY21ObExDQmpZV3hzWW1GamF5a2dlMXh1WEhSeVpYUjFjbTRnVUhKdmJXbHpaUzUwY25rb1h5QTlQaUI3WEc1Y2RGeDBkbUZ5SUc5aWFtVmpkRkJoZEdnZ1BTQmNJaTltY2k5d1lYSjBibVZ5YVc1bkwxTjBZWFIxY3k5U2IySnZkSE12WENJZ0t5QnliMkp2ZEU1aGJXVWdLeUJjSWk5UVlYSjBjeTljSWlBcklIQmhjblJPWVcxbE8xeHVYSFJjZEhSb2FYTXVjbVZ4ZFdWemRDaDdYRzVjZEZ4MFhIUnpaWEoyYVdObE9pQmNJbk4wWVhSMWMxd2lMRnh1WEhSY2RGeDBablZ1WXpvZ1hDSlRaWFJRWVhKMFhDSXNYRzVjZEZ4MFhIUnZZbW82SUh0Y2JseDBYSFJjZEZ4MGFXNTBaWEptWVdObE9pQW5abkl1Y0dGeWRHNWxjbWx1Wnk1VGRHRjBkWE11VUdGeWRDY3NYRzVjZEZ4MFhIUmNkSEJoZEdnNklHOWlhbVZqZEZCaGRHaGNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmtZWFJoT2lCN1hHNWNkRngwWEhSY2RDOHZjbTlpYjNST1lXMWxPaUJ5YjJKdmRFNWhiV1VzWEc1Y2RGeDBYSFJjZEdOdlpHVTZJR052WkdVc1hHNWNkRngwWEhSY2RDOHZjR0Z5ZEU1aGJXVTZJSEJoY25ST1lXMWxMRnh1WEhSY2RGeDBYSFJ6YjNWeVkyVTZJSE52ZFhKalpTQjhJREZjYmx4MFhIUmNkSDFjYmx4MFhIUjlMQ0FvY0dWbGNrbGtMQ0JsY25Jc0lHUmhkR0VwSUQwK0lIdGNibHgwWEhSY2RHbG1JQ2hsY25JZ0lUMGdiblZzYkNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktTQmpZV3hzWW1GamF5aG1ZV3h6WlNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSbGJITmxJSHRjYmx4MFhIUmNkRngwYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtnWTJGc2JHSmhZMnNvZEhKMVpTazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEgwcExtTmhkR05vS0dWeWNpQTlQaUI3WEc1Y2RGeDBURzluWjJWeUxtVnljbTl5S0dWeWNpbGNibHgwZlNsY2JuMDdYRzVjYmk4cUtseHVJQ29nUjJWMElHOXVaU0J6ZEdGMGRYTmNiaUFxSUVCd1lYSmhiU0J5YjJKdmRFNWhiV1VnZEc4Z1oyVjBJSE4wWVhSMWMxeHVJQ29nUUhCaGNtRnRJSEJoY25ST1lXMWxJRngwZEc4Z1oyVjBJSE4wWVhSMWMxeHVJQ29nUUhCaGNtRnRJR05oYkd4aVlXTnJYSFJjZEhKbGRIVnliaUJqWVd4c1ltRmpheWd0TVNCcFppQnViM1FnWm05MWJtUXZaR0YwWVNCdmRHaGxjbmRwYzJVcFhHNGdLaUJBY0dGeVlXMGdYMloxYkd3Z1hIUnRiM0psSUdSaGRHRWdZV0p2ZFhRZ2MzUmhkSFZ6WEc0Z0tpOWNibE4wWVhSMWN5NXdjbTkwYjNSNWNHVXVaMlYwVTNSaGRIVnpJRDBnWm5WdVkzUnBiMjRnS0hKdlltOTBUbUZ0WlN3Z2NHRnlkRTVoYldVc0lHTmhiR3hpWVdOckx5b3NJRjltZFd4c0tpOHBJSHRjYmx4MGJHVjBJSE5sYm1SRVlYUmhJRDBnVzExY2JseDBjbVYwZFhKdUlGQnliMjFwYzJVdWRISjVLRjhnUFQ0Z2UxeHVYSFJjZEd4bGRDQnlaWEVnUFNCMGFHbHpMbk5sYkdWamRHOXlMbkpsY1hWbGMzUW9lMXh1WEhSY2RGeDBjMlZ5ZG1salpUb2dKM04wWVhSMWN5Y3NYRzVjZEZ4MFhIUm1kVzVqT2lBblIyVjBUV0Z1WVdkbFpFOWlhbVZqZEhNbkxGeHVYSFJjZEZ4MGIySnFPaUI3WEc1Y2RGeDBYSFJjZEdsdWRHVnlabUZqWlRvZ0oyOXlaeTVtY21WbFpHVnphM1J2Y0M1RVFuVnpMazlpYW1WamRFMWhibUZuWlhJbkxGeHVYSFJjZEZ4MGZWeHVYSFJjZEgwc0lDaHdaV1Z5U1dRc0lHVnljaXdnYjJKcVJHRjBZU2tnUFQ0Z2UxeHVYRzVjZEZ4MFhIUnNaWFFnYjJKcVpXTjBVR0YwYUZKdlltOTBJRDBnWENJdlpuSXZjR0Z5ZEc1bGNtbHVaeTlUZEdGMGRYTXZVbTlpYjNSekwxd2lJQ3NnY205aWIzUk9ZVzFsTzF4dVhIUmNkRngwYkdWMElHOWlhbVZqZEZCaGRHaFFZWEowSUQwZ1hDSXZabkl2Y0dGeWRHNWxjbWx1Wnk5VGRHRjBkWE12VW05aWIzUnpMMXdpSUNzZ2NtOWliM1JPWVcxbElDc2dYQ0l2VUdGeWRITXZYQ0lnS3lCd1lYSjBUbUZ0WlR0Y2JseDBYSFJjZEd4bGRDQnliMkp2ZEVsa0lEMGdiMkpxUkdGMFlWdHZZbXBsWTNSUVlYUm9VbTlpYjNSZFd5ZG1jaTV3WVhKMGJtVnlhVzVuTGxOMFlYUjFjeTVTYjJKdmRDZGRMbEp2WW05MFNXUmNibHgwWEhSY2RIUm9hWE11YzJWc1pXTjBiM0l1Y21WeGRXVnpkQ2g3WEc1Y2RGeDBYSFJjZEhObGNuWnBZMlU2SUZ3aWMzUmhkSFZ6WENJc1hHNWNkRngwWEhSY2RHWjFibU02SUZ3aVIyVjBVR0Z5ZEZ3aUxGeHVYSFJjZEZ4MFhIUnZZbW82SUh0Y2JseDBYSFJjZEZ4MFhIUnBiblJsY21aaFkyVTZJQ2RtY2k1d1lYSjBibVZ5YVc1bkxsTjBZWFIxY3k1UVlYSjBKeXhjYmx4MFhIUmNkRngwWEhSd1lYUm9PaUJ2WW1wbFkzUlFZWFJvVUdGeWRGeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlMQ0FvY0dWbGNrbGtMQ0JsY25Jc0lHUmhkR0VwSUQwK0lIdGNibHgwWEhSY2RGeDBjMlZ1WkVSaGRHRXVjSFZ6YUNoa1lYUmhLVnh1WEhSY2RGeDBYSFIwYUdsekxsOW5aWFJTYjJKdmRFMXZaR1ZzUm5KdmJWSmxZM1l5S0hObGJtUkVZWFJoTENCeWIySnZkRWxrTENCeWIySnZkRTVoYldVcE8xeHVYSFJjZEZ4MFhIUnBaaUFvWlhKeUlDRTlJRzUxYkd3cElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb2RIbHdaVzltSUdOaGJHeGlZV05ySUQwOVBTQW5ablZ1WTNScGIyNG5LU0JqWVd4c1ltRmpheWd0TVNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJqWVd4c1ltRmpheUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dZMkZzYkdKaFkyc29kR2hwY3k1eWIySnZkRTF2WkdWc0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU2s3WEc1Y2RGeDBmU2xjYmx4MGZTa3VZMkYwWTJnb1pYSnlJRDArSUh0Y2JseDBYSFJNYjJkblpYSXVaWEp5YjNJb1pYSnlLVnh1WEhSOUtWeHVmVHRjYmx4dUx5b3FYRzRnS2lCSFpYUWdZV3hzSUhOMFlYUjFjMXh1SUNvZ1FIQmhjbUZ0SUhKdlltOTBUbUZ0WlNCMGJ5Qm5aWFFnYzNSaGRIVnpYRzRnS2lCQWNHRnlZVzBnY0dGeWRFNWhiV1VnWEhSMGJ5Qm5aWFFnYzNSaGRIVnpYRzRnS2lCQWNHRnlZVzBnWTJGc2JHSmhZMnRjZEZ4MGNtVjBkWEp1SUdOaGJHeGlZV05yS0MweElHbG1JRzV2ZENCbWIzVnVaQzlrWVhSaElHOTBhR1Z5ZDJselpTbGNiaUFxSUVCd1lYSmhiU0JmWm5Wc2JDQmNkRzF2Y21VZ1pHRjBZU0JoWW05MWRDQnpkR0YwZFhOY2JpQXFMMXh1VTNSaGRIVnpMbkJ5YjNSdmRIbHdaUzVuWlhSQmJHeFRkR0YwZFhObGN5QTlJR1oxYm1OMGFXOXVJQ2h5YjJKdmRFNWhiV1VzSUdOaGJHeGlZV05yS1NCN1hHNWNkR3hsZENCeVpYRWdQU0IwYUdsekxuTmxiR1ZqZEc5eUxuSmxjWFZsYzNRb2UxeHVYSFJjZEhObGNuWnBZMlU2SUNkemRHRjBkWE1uTEZ4dVhIUmNkR1oxYm1NNklDZEhaWFJOWVc1aFoyVmtUMkpxWldOMGN5Y3NYRzVjZEZ4MGIySnFPaUI3WEc1Y2RGeDBYSFJwYm5SbGNtWmhZMlU2SUNkdmNtY3VabkpsWldSbGMydDBiM0F1UkVKMWN5NVBZbXBsWTNSTllXNWhaMlZ5Snl4Y2JseDBYSFI5WEc1Y2RIMHNJQ2h3WldWeVNXUXNJR1Z5Y2l3Z2IySnFSR0YwWVNrZ1BUNGdleUF2THlCblpYUWdZV3hzSUc5aWFtVmpkQ0J3WVhSb2N5d2dhVzUwWlhKbVlXTmxjeUJoYm1RZ2NISnZjR1Z5ZEdsbGN5QmphR2xzWkhKbGJpQnZaaUJUZEdGMGRYTmNibHgwWEhSc1pYUWdiMkpxWldOMFVHRjBhQ0E5SUZ3aUwyWnlMM0JoY25SdVpYSnBibWN2VTNSaGRIVnpMMUp2WW05MGN5OWNJaUFySUhKdlltOTBUbUZ0WlR0Y2JseDBYSFJwWmlBb2IySnFSR0YwWVZ0dlltcGxZM1JRWVhSb1hTQWhQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUnBaaUFvYjJKcVJHRjBZVnR2WW1wbFkzUlFZWFJvWFZzblpuSXVjR0Z5ZEc1bGNtbHVaeTVUZEdGMGRYTXVVbTlpYjNRblhTQWhQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUmNkR3hsZENCeWIySnZkRWxrSUQwZ2IySnFSR0YwWVZ0dlltcGxZM1JRWVhSb1hWc25abkl1Y0dGeWRHNWxjbWx1Wnk1VGRHRjBkWE11VW05aWIzUW5YUzVTYjJKdmRFbGtYRzVjZEZ4MFhIUmNkQzh2ZG1GeUlHWjFiR3dnUFNCZlpuVnNiQ0I4ZkNCbVlXeHpaVHRjYmx4MFhIUmNkRngwZEdocGN5NXpaV3hsWTNSdmNpNXlaWEYxWlhOMEtIdGNibHgwWEhSY2RGeDBYSFJ6WlhKMmFXTmxPaUJjSW5OMFlYUjFjMXdpTEZ4dVhIUmNkRngwWEhSY2RHWjFibU02SUZ3aVIyVjBRV3hzVUdGeWRITmNJaXhjYmx4MFhIUmNkRngwWEhSdlltbzZJSHRjYmx4MFhIUmNkRngwWEhSY2RHbHVkR1Z5Wm1GalpUb2dKMlp5TG5CaGNuUnVaWEpwYm1jdVUzUmhkSFZ6TGxKdlltOTBKeXhjYmx4MFhIUmNkRngwWEhSY2RIQmhkR2c2SUc5aWFtVmpkRkJoZEdoY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBzSUNod1pXVnlTV1FzSUdWeWNpd2daR0YwWVNrZ1BUNGdlMXh1WEhSY2RGeDBYSFJjZEdsbUlDaGxjbklnSVQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJqWVd4c1ltRmpheUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dZMkZzYkdKaFkyc29MVEVwTzF4dVhIUmNkRngwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHVnljaWxjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxsOW5aWFJTYjJKdmRFMXZaR1ZzUm5KdmJWSmxZM1l5S0dSaGRHRXNJSEp2WW05MFNXUXNJSEp2WW05MFRtRnRaU2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktTQmpZV3hzWW1GamF5aDBhR2x6TG5KdlltOTBUVzlrWld3cE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSTWIyZG5aWEl1WlhKeWIzSW9YQ0pKYm5SbGNtWmhZMlVnWm5JdWNHRnlkRzVsY21sdVp5NVRkR0YwZFhNdVVtOWliM1FnWkc5bGMyNG5kQ0JsZUdsemRDRmNJaWxjYmx4MFhIUmNkSDFjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFRHOW5aMlZ5TG1WeWNtOXlLRndpVDJKcVpXTjBVR0YwYUNCY0lpQXJJRzlpYW1WamRGQmhkR2dnS3lCY0lpQmtiMlZ6YmlkMElHVjRhWE4wSVZ3aUtWeHVYSFJjZEgxY2JseDBmU2xjYm4wN1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBtYXlhLWNsaWVudFxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBQYXJ0bmVyaW5nIFJvYm90aWNzLCBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgdmVyc2lvblxuICpcdDMuMCBvZiB0aGUgTGljZW5zZS4gVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlXG4gKiB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlblxuICogdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUlxuICogUFVSUE9TRS4gU2VlIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnkuXG4gKi9cblxuLyoqXG4gKiBNYW5hZ2VtZW50IG9mIGNoYW5uZWwgZW5jb2RpbmdcbiAqIC0gYmFzZTY0IGNvZGluZ1xuICogLSBub25lXG4gKiBEYXRhIGZvcm1hdCA6XG4gKlx0XHR0OiB7J2I2NCcsJ25vbmUnfVxuICpcdFx0YjogPGlmIGI2ND4gezQsOH1cbiAqXHRcdGQ6IGVuY29kZWQgZGF0YSB7YnVmZmVyIG9yIEFycmF5fVxuICpcdFx0czogc2l6ZVxuICovXG5cbnZhciBEaXlhU2VsZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9EaXlhU2VsZWN0b3InKS5EaXlhU2VsZWN0b3I7XG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZS02NCcpO1xuXG4vKipcbiAqIERlZmF1bHQgOiBubyBlbmNvZGluZ1xuICogKi9cbmZ1bmN0aW9uIE5vQ29kaW5nKCkge1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuKlxuKi9cbk5vQ29kaW5nLnByb3RvdHlwZS5mcm9tID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0aWYgKGRhdGEuZCA9PT0gJ251bWJlcicgfHwgQXJyYXkuaXNBcnJheShkYXRhLmQpKSByZXR1cm4gZGF0YS5kO2Vsc2UgcmV0dXJuIGRhdGE7XG59O1xuXG4vKipcbiovXG5Ob0NvZGluZy5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAoYXJyYXkpIHtcblx0cmV0dXJuIHtcblx0XHR0OiAnbm8nLCAvKiB0eXBlICovXG5cdFx0ZDogYXJyYXksIC8qIGRhdGEgKi9cblx0XHRzOiBhcnJheS5sZW5ndGhcblx0fTtcbn07XG5cbi8qKlxuICogTWFuYWdlbWVudCBvZiBiYXNlNjQgZW5jb2RpbmdcbiAqIEVmZmVjdGl2ZSBmb3Igc3RyaW5nIGJhc2VkIGNoYW5uZWxzIChsaWtlIEpTT04gYmFzZWQgV1MpXG4gKiAqL1xuZnVuY3Rpb24gQmFzZTY0Q29kaW5nKCkge1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vICAgIFV0aWxpdHkgZnVuY3Rpb25zICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLypcXFxuIHwqfFxuIHwqfCAgdXRpbGl0YWlyZXMgZGUgbWFuaXB1bGF0aW9ucyBkZSBjaGHDrm5lcyBiYXNlIDY0IC8gYmluYWlyZXMgLyBVVEYtOFxuIHwqfFxuIHwqfCAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZnIvZG9jcy9Ew6ljb2Rlcl9lbmNvZGVyX2VuX2Jhc2U2NFxuIHwqfFxuIFxcKi9cbi8qKiBEZWNvZGVyIHVuIHRhYmxlYXUgZCdvY3RldHMgZGVwdWlzIHVuZSBjaGHDrm5lIGVuIGJhc2U2NCAqL1xudmFyIGI2NFRvVWludDYgPSBmdW5jdGlvbiBiNjRUb1VpbnQ2KG5DaHIpIHtcblx0cmV0dXJuIG5DaHIgPiA2NCAmJiBuQ2hyIDwgOTEgPyBuQ2hyIC0gNjUgOiBuQ2hyID4gOTYgJiYgbkNociA8IDEyMyA/IG5DaHIgLSA3MSA6IG5DaHIgPiA0NyAmJiBuQ2hyIDwgNTggPyBuQ2hyICsgNCA6IG5DaHIgPT09IDQzID8gNjIgOiBuQ2hyID09PSA0NyA/IDYzIDogMDtcbn07XG5cbi8qKlxuICogRGVjb2RlIGJhc2U2NCBzdHJpbmcgdG8gVUludDhBcnJheVxuICogQHBhcmFtICB7U3RyaW5nfSBzQmFzZTY0XHRcdGJhc2U2NCBjb2RlZCBzdHJpbmdcbiAqIEBwYXJhbSAge2ludH0gbkJsb2Nrc1NpemUgc2l6ZSBvZiBibG9ja3Mgb2YgYnl0ZXMgdG8gYmUgcmVhZC4gT3V0cHV0IGJ5dGVBcnJheSBsZW5ndGggd2lsbCBiZSBhIG11bHRpcGxlIG9mIHRoaXMgdmFsdWUuXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVx0XHRcdFx0dGFiIG9mIGRlY29kZWQgYnl0ZXNcbiAqL1xudmFyIGJhc2U2NERlY1RvQXJyID0gZnVuY3Rpb24gYmFzZTY0RGVjVG9BcnIoc0Jhc2U2NCwgbkJsb2Nrc1NpemUpIHtcblx0dmFyIHNCNjRFbmMgPSBzQmFzZTY0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCBcIlwiKSxcblx0ICAgIG5JbkxlbiA9IHNCNjRFbmMubGVuZ3RoLFxuXHQgICAgbk91dExlbiA9IG5CbG9ja3NTaXplID8gTWF0aC5jZWlsKChuSW5MZW4gKiAzICsgMSA+PiAyKSAvIG5CbG9ja3NTaXplKSAqIG5CbG9ja3NTaXplIDogbkluTGVuICogMyArIDEgPj4gMixcblx0ICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihuT3V0TGVuKSxcblx0ICAgIHRhQnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuXG5cdGZvciAodmFyIG5Nb2QzLCBuTW9kNCwgblVpbnQyNCA9IDAsIG5PdXRJZHggPSAwLCBuSW5JZHggPSAwOyBuSW5JZHggPCBuSW5MZW47IG5JbklkeCsrKSB7XG5cdFx0bk1vZDQgPSBuSW5JZHggJiAzOyAvKiBuIG1vZCA0ICovXG5cdFx0blVpbnQyNCB8PSBiNjRUb1VpbnQ2KHNCNjRFbmMuY2hhckNvZGVBdChuSW5JZHgpKSA8PCAxOCAtIDYgKiBuTW9kNDtcblx0XHRpZiAobk1vZDQgPT09IDMgfHwgbkluTGVuIC0gbkluSWR4ID09PSAxKSB7XG5cdFx0XHRmb3IgKG5Nb2QzID0gMDsgbk1vZDMgPCAzICYmIG5PdXRJZHggPCBuT3V0TGVuOyBuTW9kMysrLCBuT3V0SWR4KyspIHtcblx0XHRcdFx0dGFCeXRlc1tuT3V0SWR4XSA9IG5VaW50MjQgPj4+ICgxNiA+Pj4gbk1vZDMgJiAyNCkgJiAyNTU7XG5cdFx0XHR9XG5cdFx0XHRuVWludDI0ID0gMDtcblx0XHR9XG5cdH1cblx0Ly8gY29uc29sZS5sb2coXCJ1OGludCA6IFwiK0pTT04uc3RyaW5naWZ5KHRhQnl0ZXMpKTtcblx0cmV0dXJuIGJ1ZmZlcjtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vICAgSW50ZXJmYWNlIGZ1bmN0aW9ucyAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiogQ29udmVydCBidWZmZXIgY29kZWQgaW4gYmFzZTY0IGFuZCBjb250YWluaW5nIG51bWJlcnMgY29kZWQgYnlcbiogYnl0ZUNvZGluZyBieXRlcyBpbnRvIGFycmF5XG4qIEBwYXJhbSBidWZmZXIgaW4gYmFzZTY0XG4qIEBwYXJhbSBieXRlQ29kaW5nIG51bWJlciBvZiBieXRlcyBmb3IgZWFjaCBudW1iZXIgKDQgb3IgOClcbiogQHJldHVybiBhcnJheSBvZiBmbG9hdCAoMzIgb3IgNjQpLiBudWxsIGlmIGNvdWxkIG5vdCBjb252ZXJ0LlxuKi9cbkJhc2U2NENvZGluZy5wcm90b3R5cGUuZnJvbSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cdHZhciBieXRlQ29kaW5nID0gZGF0YS5iO1xuXG5cdC8qIGNoZWNrIGJ5dGUgY29kaW5nICovXG5cdGlmIChieXRlQ29kaW5nICE9PSA0ICYmIGJ5dGVDb2RpbmcgIT09IDgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8qIGRlY29kZSBkYXRhIHRvIGFycmF5IG9mIGJ5dGUgKi9cblx0dmFyIGJ1ZiA9IGJhc2U2NERlY1RvQXJyKGRhdGEuZCwgZGF0YS5iKTtcblx0LyogcGFyc2UgZGF0YSB0byBmbG9hdCBhcnJheSAqL1xuXHR2YXIgZkFycmF5ID0gbnVsbDtcblx0c3dpdGNoIChkYXRhLmIpIHtcblx0XHRjYXNlIDQ6XG5cdFx0XHRmQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGJ1Zik7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDg6XG5cdFx0XHRmQXJyYXkgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1Zik7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS5sb2coXCJVbmV4cGVjdGVkIGJ5dGVDb2RpbmchIFNob3VsZCBub3QgaGFwcGVuISFcIik7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHQvKiBwYXJzZSBmQXJyYXkgaW50byBub3JtYWwgYXJyYXkgKi9cblx0dmFyIHRhYiA9IFtdLnNsaWNlLmNhbGwoZkFycmF5KTtcblxuXHRpZiAoZGF0YS5zICE9PSB0YWIubGVuZ3RoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJTaXplIG1pc21hdGNoIHdoZW4gZGVjb2RpbmcgIVwiKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRyZXR1cm4gdGFiO1xufTtcblxuLyoqXG4qIENvbnZlcnQgYXJyYXkgY29udGFpbmluZyBudW1iZXJzIGNvZGVkIGJ5IGJ5dGVDb2RpbmcgYnl0ZXMgaW50byBidWZmZXIgY29kZWQgaW4gYmFzZTY0XG4qIEBwYXJhbSBcdHtBcnJheTxGbG9hdD59IFx0YXJyYXkgb2YgZmxvYXQgKDMyIG9yIDY0IGJpdHMpXG4qIEBwYXJhbSBcdHtpbnRlZ2VyfSBcdGJ5dGVDb2RpbmcgbnVtYmVyIG9mIGJ5dGVzIGZvciBlYWNoIGZsb2F0ICg0IG9yIDgpXG4qIEByZXR1cm4gIFx0e1N0cmluZ30gXHRidWZmZXIgaW4gYmFzZTY0LiBudWxsIGlmIGNvdWxkIG5vdCBjb252ZXJ0LlxuKi9cbkJhc2U2NENvZGluZy5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAoYXJyYXksIGJ5dGVDb2RpbmcpIHtcblx0LyogY2hlY2sgYnl0ZSBjb2RpbmcgKi9cblx0aWYgKGJ5dGVDb2RpbmcgIT09IDQgJiYgYnl0ZUNvZGluZyAhPT0gOCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqKiBjYXNlIEFycmF5QnVmZmVyICoqKi9cblx0dmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihhcnJheS5sZW5ndGggKiBieXRlQ29kaW5nKTtcblx0c3dpdGNoIChieXRlQ29kaW5nKSB7XG5cdFx0Y2FzZSA0OlxuXHRcdFx0dmFyIGJ1ZjMyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuXHRcdFx0YnVmMzIuc2V0KGFycmF5KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgODpcblx0XHRcdHZhciBidWY2NCA9IG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKTtcblx0XHRcdGJ1ZjY0LnNldChhcnJheSk7XG5cdFx0XHRicmVhaztcblx0fVxuXHR2YXIgYnVmZkNoYXIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuXHR2YXIgYnVmZkNoYXJDb2RlZCA9IG5ldyBBcnJheShidWZmQ2hhci5sZW5ndGgpO1xuXHRmb3IgKHZhciBuID0gMDsgbiA8IGJ1ZmZDaGFyLmxlbmd0aDsgbisrKSB7XG5cdFx0YnVmZkNoYXJDb2RlZFtuXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmZkNoYXJbbl0pO1xuXHR9XG5cdHZhciBzdHIgPSBuZXcgU3RyaW5nKGJ1ZmZDaGFyQ29kZWQuam9pbignJykpO1xuXHR2YXIgYjY0QnVmZiA9IGJhc2U2NC5lbmNvZGUoc3RyKTtcblx0cmV0dXJuIHtcblx0XHR0OiAnYjY0JywgLyogdHlwZSAqL1xuXHRcdGI6IGJ5dGVDb2RpbmcsIC8qIGJ5dGVDb2RpbmcgKi9cblx0XHRkOiBiNjRCdWZmLCAvKiBkYXRhICovXG5cdFx0czogYXJyYXkubGVuZ3RoIC8qIHNpemUgKi9cblx0fTtcbn07XG5cbi8qKlxuICogTWFuYWdlbWVudCBvZiBjb21tIGVuY29kaW5nXG4gKiAqL1xuZnVuY3Rpb24gQ29kaW5nSGFuZGxlcigpIHtcblx0dGhpcy5iNjQgPSBuZXcgQmFzZTY0Q29kaW5nKCk7XG5cdHRoaXMubm9uZSA9IG5ldyBOb0NvZGluZygpO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxuQ29kaW5nSGFuZGxlci5wcm90b3R5cGUuZnJvbSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cdGlmICh0eXBlb2YgZGF0YSA9PSAndW5kZWZpbmVkJyB8fCBkYXRhID09IG51bGwpIHJldHVybiBudWxsO1xuXHRzd2l0Y2ggKGRhdGEudCkge1xuXHRcdGNhc2UgJ2I2NCc6XG5cdFx0XHRyZXR1cm4gdGhpcy5iNjQuZnJvbShkYXRhKTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHRoaXMubm9uZS5mcm9tKGRhdGEpO1xuXHR9XG59O1xuXG5Db2RpbmdIYW5kbGVyLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChhcnJheSwgdHlwZSwgYnl0ZUNvZGluZykge1xuXHRpZiAodHlwZW9mIGFycmF5ID09PSAnbnVtYmVyJykge1xuXHRcdGFycmF5ID0gW2FycmF5XTtcblx0fVxuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0Y29uc29sZS5sb2coXCJDb2RpbmdIYW5kbGVyLnRvIG9ubHkgYWNjZXB0cyBhcnJheSAhXCIpO1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Y2FzZSAnYjY0Jzpcblx0XHRcdHJldHVybiB0aGlzLmI2NC50byhhcnJheSwgYnl0ZUNvZGluZyk7XG5cdFx0Y2FzZSAnbm8nOlxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gdGhpcy5ub25lLnRvKGFycmF5KTtcblx0fVxufTtcblxuLyoqIEFkZCBiYXNlNjQgaGFuZGxlciB0byBEaXlhU2VsZWN0b3IgKiovXG5EaXlhU2VsZWN0b3IucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIG5ldyBDb2RpbmdIYW5kbGVyKCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WdVkyOWthVzVuTG1weklsMHNJbTVoYldWeklqcGJJa1JwZVdGVFpXeGxZM1J2Y2lJc0luSmxjWFZwY21VaUxDSmlZWE5sTmpRaUxDSk9iME52WkdsdVp5SXNJbkJ5YjNSdmRIbHdaU0lzSW1aeWIyMGlMQ0prWVhSaElpd2laQ0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW5Sdklpd2lZWEp5WVhraUxDSjBJaXdpY3lJc0lteGxibWQwYUNJc0lrSmhjMlUyTkVOdlpHbHVaeUlzSW1JMk5GUnZWV2x1ZERZaUxDSnVRMmh5SWl3aVltRnpaVFkwUkdWalZHOUJjbklpTENKelFtRnpaVFkwSWl3aWJrSnNiMk5yYzFOcGVtVWlMQ0p6UWpZMFJXNWpJaXdpY21Wd2JHRmpaU0lzSW01SmJreGxiaUlzSW01UGRYUk1aVzRpTENKTllYUm9JaXdpWTJWcGJDSXNJbUoxWm1abGNpSXNJa0Z5Y21GNVFuVm1abVZ5SWl3aWRHRkNlWFJsY3lJc0lsVnBiblE0UVhKeVlYa2lMQ0p1VFc5a015SXNJbTVOYjJRMElpd2libFZwYm5ReU5DSXNJbTVQZFhSSlpIZ2lMQ0p1U1c1SlpIZ2lMQ0pqYUdGeVEyOWtaVUYwSWl3aVlubDBaVU52WkdsdVp5SXNJbUlpTENKaWRXWWlMQ0ptUVhKeVlYa2lMQ0pHYkc5aGRETXlRWEp5WVhraUxDSkdiRzloZERZMFFYSnlZWGtpTENKamIyNXpiMnhsSWl3aWJHOW5JaXdpZEdGaUlpd2ljMnhwWTJVaUxDSmpZV3hzSWl3aVluVm1NeklpTENKelpYUWlMQ0ppZFdZMk5DSXNJbUoxWm1aRGFHRnlJaXdpWW5WbVprTm9ZWEpEYjJSbFpDSXNJbTRpTENKVGRISnBibWNpTENKbWNtOXRRMmhoY2tOdlpHVWlMQ0p6ZEhJaUxDSnFiMmx1SWl3aVlqWTBRblZtWmlJc0ltVnVZMjlrWlNJc0lrTnZaR2x1WjBoaGJtUnNaWElpTENKaU5qUWlMQ0p1YjI1bElpd2lkSGx3WlNKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenM3T3pzN096czdPenRCUVdGQk96czdPenM3T3pzN096dEJRVmxCTEVsQlFVbEJMR1ZCUVdWRExGRkJRVkVzYjBKQlFWSXNSVUZCT0VKRUxGbEJRV3BFTzBGQlEwRXNTVUZCU1VVc1UwRkJVMFFzVVVGQlVTeFRRVUZTTEVOQlFXSTdPMEZCUlVFN096dEJRVWRCTEZOQlFWTkZMRkZCUVZRc1IwRkJiVUk3UVVGRGJFSXNVVUZCVHl4SlFVRlFPMEZCUTBFN08wRkJSVVE3T3p0QlFVZEJRU3hUUVVGVFF5eFRRVUZVTEVOQlFXMUNReXhKUVVGdVFpeEhRVUV3UWl4VlFVRlRReXhKUVVGVUxFVkJRV1U3UVVGRGVFTXNTMEZCUjBFc1MwRkJTME1zUTBGQlRDeExRVUZYTEZGQlFWZ3NTVUZCZFVKRExFMUJRVTFETEU5QlFVNHNRMEZCWTBnc1MwRkJTME1zUTBGQmJrSXNRMEZCTVVJc1JVRkRReXhQUVVGUFJDeExRVUZMUXl4RFFVRmFMRU5CUkVRc1MwRkhReXhQUVVGUFJDeEpRVUZRTzBGQlEwUXNRMEZNUkRzN1FVRlBRVHM3UVVGRlFVZ3NVMEZCVTBNc1UwRkJWQ3hEUVVGdFFrMHNSVUZCYmtJc1IwRkJkMElzVlVGQlUwTXNTMEZCVkN4RlFVRm5RanRCUVVOMlF5eFJRVUZQTzBGQlEwNURMRXRCUVVjc1NVRkVSeXhGUVVOSE8wRkJRMVJNTEV0QlFVZEpMRXRCUmtjc1JVRkZTVHRCUVVOV1JTeExRVUZIUml4TlFVRk5SenRCUVVoSUxFVkJRVkE3UVVGTFFTeERRVTVFT3p0QlFWZEJPenM3TzBGQlNVRXNVMEZCVTBNc1dVRkJWQ3hIUVVGMVFqdEJRVU4wUWl4UlFVRlBMRWxCUVZBN1FVRkRRVHM3UVVGSlJEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN096czdPenM3UVVGUFFUdEJRVU5CTEVsQlFVbERMR0ZCUVdFc1UwRkJZa0VzVlVGQllTeERRVUZUUXl4SlFVRlVMRVZCUVdVN1FVRkRMMElzVVVGQlQwRXNUMEZCVHl4RlFVRlFMRWxCUVdGQkxFOUJRVThzUlVGQmNFSXNSMEZEVGtFc1QwRkJUeXhGUVVSRUxFZEJSVXBCTEU5QlFVOHNSVUZCVUN4SlFVRmhRU3hQUVVGUExFZEJRWEJDTEVkQlEwWkJMRTlCUVU4c1JVRkVUQ3hIUVVWQlFTeFBRVUZQTEVWQlFWQXNTVUZCWVVFc1QwRkJUeXhGUVVGd1FpeEhRVU5HUVN4UFFVRlBMRU5CUkV3c1IwRkZRVUVzVTBGQlV5eEZRVUZVTEVkQlEwWXNSVUZFUlN4SFFVVkJRU3hUUVVGVExFVkJRVlFzUjBGRFJpeEZRVVJGTEVkQlJVRXNRMEZXU0R0QlFWZEJMRU5CV2tRN08wRkJZMEU3T3pzN096dEJRVTFCTEVsQlFVbERMR2xDUVVGcFFpeFRRVUZxUWtFc1kwRkJhVUlzUTBGQlUwTXNUMEZCVkN4RlFVRnJRa01zVjBGQmJFSXNSVUZCSzBJN1FVRkRia1FzUzBGRFFVTXNWVUZCVlVZc1VVRkJVVWNzVDBGQlVpeERRVUZuUWl4dFFrRkJhRUlzUlVGQmNVTXNSVUZCY2tNc1EwRkVWanRCUVVGQkxFdEJRMjlFUXl4VFFVRlRSaXhSUVVGUlVDeE5RVVJ5UlR0QlFVRkJMRXRCUlVGVkxGVkJRVlZLTEdOQlFXTkxMRXRCUVV0RExFbEJRVXdzUTBGQlZTeERRVUZEU0N4VFFVRlRMRU5CUVZRc1IwRkJZU3hEUVVGaUxFbEJRV3RDTEVOQlFXNUNMRWxCUVhkQ1NDeFhRVUZzUXl4SlFVRnBSRUVzVjBGQkwwUXNSMEZCTmtWSExGTkJRVk1zUTBGQlZDeEhRVUZoTEVOQlFXSXNTVUZCYTBJc1EwRkdla2M3UVVGQlFTeExRVWRCU1N4VFFVRlRMRWxCUVVsRExGZEJRVW9zUTBGQlowSktMRTlCUVdoQ0xFTkJTRlE3UVVGQlFTeExRVWR0UTBzc1ZVRkJWU3hKUVVGSlF5eFZRVUZLTEVOQlFXVklMRTFCUVdZc1EwRklOME03TzBGQlMwRXNUVUZCU3l4SlFVRkpTU3hMUVVGS0xFVkJRVmRETEV0QlFWZ3NSVUZCYTBKRExGVkJRVlVzUTBGQk5VSXNSVUZCSzBKRExGVkJRVlVzUTBGQmVrTXNSVUZCTkVORExGTkJRVk1zUTBGQk1VUXNSVUZCTmtSQkxGTkJRVk5hTEUxQlFYUkZMRVZCUVRoRldTeFJRVUU1UlN4RlFVRjNSanRCUVVOMlJrZ3NWVUZCVVVjc1UwRkJVeXhEUVVGcVFpeERRVVIxUml4RFFVTnVSVHRCUVVOd1FrWXNZVUZCVjJwQ0xGZEJRVmRMTEZGQlFWRmxMRlZCUVZJc1EwRkJiVUpFTEUxQlFXNUNMRU5CUVZnc1MwRkJNRU1zUzBGQlN5eEpRVUZKU0N4TFFVRTVSRHRCUVVOQkxFMUJRVWxCTEZWQlFWVXNRMEZCVml4SlFVRmxWQ3hUUVVGVFdTeE5RVUZVTEV0QlFXOUNMRU5CUVhaRExFVkJRVEJETzBGQlEzcERMRkZCUVV0S0xGRkJRVkVzUTBGQllpeEZRVUZuUWtFc1VVRkJVU3hEUVVGU0xFbEJRV0ZITEZWQlFWVldMRTlCUVhaRExFVkJRV2RFVHl4VFFVRlRSeXhUUVVGNlJDeEZRVUZ2UlR0QlFVTnVSVXdzV1VGQlVVc3NUMEZCVWl4SlFVRnRRa1FzWVVGQllTeFBRVUZQUml4TFFVRlFMRWRCUVdVc1JVRkJOVUlzU1VGQmEwTXNSMEZCY2tRN1FVRkRRVHRCUVVORVJTeGhRVUZWTEVOQlFWWTdRVUZEUVR0QlFVTkVPMEZCUTBRN1FVRkRRU3hSUVVGUFRpeE5RVUZRTzBGQlEwRXNRMEZzUWtRN08wRkJiMEpCTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3T3pzN096czdRVUZQUVZvc1lVRkJZVmdzVTBGQllpeERRVUYxUWtNc1NVRkJka0lzUjBGQk9FSXNWVUZCVTBNc1NVRkJWQ3hGUVVGbE8wRkJRelZETEV0QlFVa3JRaXhoUVVGaEwwSXNTMEZCUzJkRExFTkJRWFJDT3p0QlFVVkJPMEZCUTBFc1MwRkJSMFFzWlVGQlpTeERRVUZtTEVsQlFXOUNRU3hsUVVGbExFTkJRWFJETEVWQlFYbERPMEZCUTNoRExGTkJRVThzU1VGQlVEdEJRVU5CT3p0QlFVVkVPMEZCUTBFc1MwRkJTVVVzVFVGQlRYSkNMR1ZCUVdWYUxFdEJRVXRETEVOQlFYQkNMRVZCUVhWQ1JDeExRVUZMWjBNc1EwRkJOVUlzUTBGQlZqdEJRVU5CTzBGQlEwRXNTMEZCU1VVc1UwRkJUeXhKUVVGWU8wRkJRMEVzVTBGQlQyeERMRXRCUVV0blF5eERRVUZhTzBGQlEwRXNUMEZCU3l4RFFVRk1PMEZCUTBORkxGbEJRVk1zU1VGQlNVTXNXVUZCU2l4RFFVRnBRa1lzUjBGQmFrSXNRMEZCVkR0QlFVTkJPMEZCUTBRc1QwRkJTeXhEUVVGTU8wRkJRME5ETEZsQlFWTXNTVUZCU1VVc1dVRkJTaXhEUVVGcFFrZ3NSMEZCYWtJc1EwRkJWRHRCUVVOQk8wRkJRMFE3UVVGRFEwa3NWMEZCVVVNc1IwRkJVaXhEUVVGWkxEUkRRVUZhTzBGQlEwRXNWVUZCVHl4SlFVRlFPMEZCVkVRN1FVRlhRVHRCUVVOQkxFdEJRVWxETEUxQlFVMHNSMEZCUjBNc1MwRkJTQ3hEUVVGVFF5eEpRVUZVTEVOQlFXTlFMRTFCUVdRc1EwRkJWanM3UVVGRlFTeExRVUZIYkVNc1MwRkJTMDhzUTBGQlRDeExRVUZYWjBNc1NVRkJTUzlDTEUxQlFXeENMRVZCUVRCQ08wRkJRM3BDTmtJc1ZVRkJVVU1zUjBGQlVpeERRVUZaTEN0Q1FVRmFPMEZCUTBFc1UwRkJUeXhKUVVGUU8wRkJRMEU3UVVGRFJDeFJRVUZQUXl4SFFVRlFPMEZCUTBFc1EwRXZRa1E3TzBGQmFVTkJPenM3T3pzN1FVRk5RVGxDTEdGQlFXRllMRk5CUVdJc1EwRkJkVUpOTEVWQlFYWkNMRWRCUVRSQ0xGVkJRVk5ETEV0QlFWUXNSVUZCWjBJd1FpeFZRVUZvUWl4RlFVRTBRanRCUVVOMlJEdEJRVU5CTEV0QlFVZEJMR1ZCUVdVc1EwRkJaaXhKUVVGdlFrRXNaVUZCWlN4RFFVRjBReXhGUVVGNVF6dEJRVU40UXl4VFFVRlBMRWxCUVZBN1FVRkRRVHM3UVVGRlJEdEJRVU5CTEV0QlFVbFdMRk5CUVZNc1NVRkJTVU1zVjBGQlNpeERRVUZuUW1wQ0xFMUJRVTFITEUxQlFVNHNSMEZCWVhWQ0xGVkJRVGRDTEVOQlFXSTdRVUZEUVN4VFFVRlBRU3hWUVVGUU8wRkJRMEVzVDBGQlN5eERRVUZNTzBGQlEwTXNUMEZCU1Zjc1VVRkJVU3hKUVVGSlVDeFpRVUZLTEVOQlFXbENaQ3hOUVVGcVFpeERRVUZhTzBGQlEwRnhRaXhUUVVGTlF5eEhRVUZPTEVOQlFWVjBReXhMUVVGV08wRkJRMEU3UVVGRFJDeFBRVUZMTEVOQlFVdzdRVUZEUXl4UFFVRkpkVU1zVVVGQlVTeEpRVUZKVWl4WlFVRktMRU5CUVdsQ1ppeE5RVUZxUWl4RFFVRmFPMEZCUTBGMVFpeFRRVUZOUkN4SFFVRk9MRU5CUVZWMFF5eExRVUZXTzBGQlEwRTdRVUZTUkR0QlFWVkJMRXRCUVVsM1F5eFhRVUZYTEVsQlFVbHlRaXhWUVVGS0xFTkJRV1ZJTEUxQlFXWXNRMEZCWmp0QlFVTkJMRXRCUVVsNVFpeG5Ra0ZCWjBJc1NVRkJTVFZETEV0QlFVb3NRMEZCVlRKRExGTkJRVk55UXl4TlFVRnVRaXhEUVVGd1FqdEJRVU5CTEUxQlFVa3NTVUZCU1hWRExFbEJRVWNzUTBGQldDeEZRVUZqUVN4SlFVRkZSaXhUUVVGVGNrTXNUVUZCZWtJc1JVRkJhVU4xUXl4SFFVRnFReXhGUVVGelF6dEJRVU55UTBRc1owSkJRV05ETEVOQlFXUXNTVUZCYlVKRExFOUJRVTlETEZsQlFWQXNRMEZCYjBKS0xGTkJRVk5GTEVOQlFWUXNRMEZCY0VJc1EwRkJia0k3UVVGRFFUdEJRVU5FTEV0QlFVbEhMRTFCUVUwc1NVRkJTVVlzVFVGQlNpeERRVUZYUml4alFVRmpTeXhKUVVGa0xFTkJRVzFDTEVWQlFXNUNMRU5CUVZnc1EwRkJWanRCUVVOQkxFdEJRVWxETEZWQlFWVjRSQ3hQUVVGUGVVUXNUVUZCVUN4RFFVRmpTQ3hIUVVGa0xFTkJRV1E3UVVGRFFTeFJRVUZQTzBGQlEwNDFReXhMUVVGSExFdEJSRWNzUlVGRFNUdEJRVU5XTUVJc1MwRkJSMFFzVlVGR1J5eEZRVVZUTzBGQlEyWTVRaXhMUVVGSGJVUXNUMEZJUnl4RlFVZE5PMEZCUTFvM1F5eExRVUZIUml4TlFVRk5SeXhOUVVwSUxFTkJTVlU3UVVGS1ZpeEZRVUZRTzBGQlRVRXNRMEV2UWtRN08wRkJiME5CT3pzN1FVRkhRU3hUUVVGVE9FTXNZVUZCVkN4SFFVRjNRanRCUVVOMlFpeE5RVUZMUXl4SFFVRk1MRWRCUVZjc1NVRkJTVGxETEZsQlFVb3NSVUZCV0R0QlFVTkJMRTFCUVVzclF5eEpRVUZNTEVkQlFWa3NTVUZCU1RORUxGRkJRVW9zUlVGQldqczdRVUZGUVN4UlFVRlBMRWxCUVZBN1FVRkRRVHM3UVVGSFJIbEVMR05CUVdONFJDeFRRVUZrTEVOQlFYZENReXhKUVVGNFFpeEhRVUVyUWl4VlFVRlRReXhKUVVGVUxFVkJRV1U3UVVGRE4wTXNTMEZCUnl4UFFVRlBRU3hKUVVGUUxFbEJRV1VzVjBGQlppeEpRVUU0UWtFc1VVRkJUU3hKUVVGMlF5eEZRVU5ETEU5QlFVOHNTVUZCVUR0QlFVTkVMRk5CUVU5QkxFdEJRVXROTEVOQlFWbzdRVUZEUVN4UFFVRkxMRXRCUVV3N1FVRkRReXhWUVVGUExFdEJRVXRwUkN4SFFVRk1MRU5CUVZONFJDeEpRVUZVTEVOQlFXTkRMRWxCUVdRc1EwRkJVRHRCUVVORU8wRkJRME1zVlVGQlR5eExRVUZMZDBRc1NVRkJUQ3hEUVVGVmVrUXNTVUZCVml4RFFVRmxReXhKUVVGbUxFTkJRVkE3UVVGS1JEdEJRVTFCTEVOQlZFUTdPMEZCV1VGelJDeGpRVUZqZUVRc1UwRkJaQ3hEUVVGM1FrMHNSVUZCZUVJc1IwRkJOa0lzVlVGQlUwTXNTMEZCVkN4RlFVRm5RbTlFTEVsQlFXaENMRVZCUVhOQ01VSXNWVUZCZEVJc1JVRkJhME03UVVGRE9VUXNTMEZCUnl4UFFVRlBNVUlzUzBGQlVDeExRVUZwUWl4UlFVRndRaXhGUVVFNFFqdEJRVU0zUWtFc1ZVRkJUU3hEUVVGRFFTeExRVUZFTEVOQlFVNDdRVUZEUVR0QlFVTkVMRXRCUVVjc1EwRkJRMGdzVFVGQlRVTXNUMEZCVGl4RFFVRmpSU3hMUVVGa0xFTkJRVW9zUlVGQmVVSTdRVUZEZUVKblF5eFZRVUZSUXl4SFFVRlNMRU5CUVZrc2RVTkJRVm83UVVGRFFTeFRRVUZQTEVsQlFWQTdRVUZEUVRzN1FVRkZSQ3hUUVVGUGJVSXNTVUZCVUR0QlFVTkJMRTlCUVVzc1MwRkJURHRCUVVORExGVkJRVThzUzBGQlMwWXNSMEZCVEN4RFFVRlRia1FzUlVGQlZDeERRVUZaUXl4TFFVRmFMRVZCUVcxQ01FSXNWVUZCYmtJc1EwRkJVRHRCUVVORUxFOUJRVXNzU1VGQlREdEJRVU5CTzBGQlEwTXNWVUZCVHl4TFFVRkxlVUlzU1VGQlRDeERRVUZWY0VRc1JVRkJWaXhEUVVGaFF5eExRVUZpTEVOQlFWQTdRVUZNUkR0QlFVOUJMRU5CYUVKRU96dEJRVzFDUVR0QlFVTkJXQ3hoUVVGaFNTeFRRVUZpTEVOQlFYVkNkVVFzVFVGQmRrSXNSMEZCWjBNc1dVRkJWVHRCUVVONlF5eFJRVUZQTEVsQlFVbERMR0ZCUVVvc1JVRkJVRHRCUVVOQkxFTkJSa1FpTENKbWFXeGxJam9pWlc1amIyUnBibWN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUJ0WVhsaExXTnNhV1Z1ZEZ4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTBMQ0JRWVhKMGJtVnlhVzVuSUZKdlltOTBhV056TENCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ29nVkdocGN5QnNhV0p5WVhKNUlHbHpJR1p5WldVZ2MyOW1kSGRoY21VN0lIbHZkU0JqWVc0Z2NtVmthWE4wY21saWRYUmxJR2wwSUdGdVpDOXZjbHh1SUNvZ2JXOWthV1o1SUdsMElIVnVaR1Z5SUhSb1pTQjBaWEp0Y3lCdlppQjBhR1VnUjA1VklFeGxjM05sY2lCSFpXNWxjbUZzSUZCMVlteHBZMXh1SUNvZ1RHbGpaVzV6WlNCaGN5QndkV0pzYVhOb1pXUWdZbmtnZEdobElFWnlaV1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmpzZ2RtVnljMmx2Ymx4dUlDcGNkRE11TUNCdlppQjBhR1VnVEdsalpXNXpaUzRnVkdocGN5QnNhV0p5WVhKNUlHbHpJR1JwYzNSeWFXSjFkR1ZrSUdsdUlIUm9aU0JvYjNCbFhHNGdLaUIwYUdGMElHbDBJSGRwYkd3Z1ltVWdkWE5sWm5Wc0xDQmlkWFFnVjBsVVNFOVZWQ0JCVGxrZ1YwRlNVa0ZPVkZrN0lIZHBkR2h2ZFhRZ1pYWmxibHh1SUNvZ2RHaGxJR2x0Y0d4cFpXUWdkMkZ5Y21GdWRIa2diMllnVFVWU1EwaEJUbFJCUWtsTVNWUlpJRzl5SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVbHh1SUNvZ1VGVlNVRTlUUlM0Z1UyVmxJSFJvWlNCSFRsVWdUR1Z6YzJWeUlFZGxibVZ5WVd3Z1VIVmliR2xqSUV4cFkyVnVjMlVnWm05eUlHMXZjbVVnWkdWMFlXbHNjeTVjYmlBcUlGbHZkU0J6YUc5MWJHUWdhR0YyWlNCeVpXTmxhWFpsWkNCaElHTnZjSGtnYjJZZ2RHaGxJRWRPVlNCTVpYTnpaWElnUjJWdVpYSmhiQ0JRZFdKc2FXTmNiaUFxSUV4cFkyVnVjMlVnWVd4dmJtY2dkMmwwYUNCMGFHbHpJR3hwWW5KaGNua3VYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQk5ZVzVoWjJWdFpXNTBJRzltSUdOb1lXNXVaV3dnWlc1amIyUnBibWRjYmlBcUlDMGdZbUZ6WlRZMElHTnZaR2x1WjF4dUlDb2dMU0J1YjI1bFhHNGdLaUJFWVhSaElHWnZjbTFoZENBNlhHNGdLbHgwWEhSME9pQjdKMkkyTkNjc0oyNXZibVVuZlZ4dUlDcGNkRngwWWpvZ1BHbG1JR0kyTkQ0Z2V6UXNPSDFjYmlBcVhIUmNkR1E2SUdWdVkyOWtaV1FnWkdGMFlTQjdZblZtWm1WeUlHOXlJRUZ5Y21GNWZWeHVJQ3BjZEZ4MGN6b2djMmw2WlZ4dUlDb3ZYRzVjYmx4dWRtRnlJRVJwZVdGVFpXeGxZM1J2Y2lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDBScGVXRlRaV3hsWTNSdmNpY3BMa1JwZVdGVFpXeGxZM1J2Y2p0Y2JuWmhjaUJpWVhObE5qUWdQU0J5WlhGMWFYSmxLQ2RpWVhObExUWTBKeWs3WEc1Y2JpOHFLbHh1SUNvZ1JHVm1ZWFZzZENBNklHNXZJR1Z1WTI5a2FXNW5YRzRnS2lBcUwxeHVablZ1WTNScGIyNGdUbTlEYjJScGJtY29LWHRjYmx4MGNtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNHZLaXBjYmlwY2Jpb3ZYRzVPYjBOdlpHbHVaeTV3Y205MGIzUjVjR1V1Wm5KdmJTQTlJR1oxYm1OMGFXOXVLR1JoZEdFcElIdGNibHgwYVdZb1pHRjBZUzVrSUQwOVBTQW5iblZ0WW1WeUp5QjhmQ0JCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0V1WkNrcFhHNWNkRngwY21WMGRYSnVJR1JoZEdFdVpEdGNibHgwWld4elpWeHVYSFJjZEhKbGRIVnliaUJrWVhSaE8xeHVmVHRjYmx4dUx5b3FYRzRxTDF4dVRtOURiMlJwYm1jdWNISnZkRzkwZVhCbExuUnZJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3BJSHRjYmx4MGNtVjBkWEp1SUh0Y2JseDBYSFIwT2lBbmJtOG5MQ0F2S2lCMGVYQmxJQ292WEc1Y2RGeDBaRG9nWVhKeVlYa3NJQzhxSUdSaGRHRWdLaTljYmx4MFhIUnpPaUJoY25KaGVTNXNaVzVuZEdoY2JseDBmVHRjYm4wN1hHNWNibHh1WEc1Y2JpOHFLbHh1SUNvZ1RXRnVZV2RsYldWdWRDQnZaaUJpWVhObE5qUWdaVzVqYjJScGJtZGNiaUFxSUVWbVptVmpkR2wyWlNCbWIzSWdjM1J5YVc1bklHSmhjMlZrSUdOb1lXNXVaV3h6SUNoc2FXdGxJRXBUVDA0Z1ltRnpaV1FnVjFNcFhHNGdLaUFxTDF4dVpuVnVZM1JwYjI0Z1FtRnpaVFkwUTI5a2FXNW5LQ2w3WEc1Y2RISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dklDQWdJRlYwYVd4cGRIa2dablZ1WTNScGIyNXpJQ0FnSUM4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dUx5cGNYRnh1SUh3cWZGeHVJSHdxZkNBZ2RYUnBiR2wwWVdseVpYTWdaR1VnYldGdWFYQjFiR0YwYVc5dWN5QmtaU0JqYUdIRHJtNWxjeUJpWVhObElEWTBJQzhnWW1sdVlXbHlaWE1nTHlCVlZFWXRPRnh1SUh3cWZGeHVJSHdxZkNBZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3Zabkl2Wkc5amN5OUV3NmxqYjJSbGNsOWxibU52WkdWeVgyVnVYMkpoYzJVMk5GeHVJSHdxZkZ4dUlGeGNLaTljYmk4cUtpQkVaV052WkdWeUlIVnVJSFJoWW14bFlYVWdaQ2R2WTNSbGRITWdaR1Z3ZFdseklIVnVaU0JqYUdIRHJtNWxJR1Z1SUdKaGMyVTJOQ0FxTDF4dWRtRnlJR0kyTkZSdlZXbHVkRFlnUFNCbWRXNWpkR2x2YmlodVEyaHlLU0I3WEc1Y2RISmxkSFZ5YmlCdVEyaHlJRDRnTmpRZ0ppWWdia05vY2lBOElEa3hJRDljYmx4MFhIUnVRMmh5SUMwZ05qVmNibHgwWEhRNklHNURhSElnUGlBNU5pQW1KaUJ1UTJoeUlEd2dNVEl6SUQ5Y2JseDBYSFJ1UTJoeUlDMGdOekZjYmx4MFhIUTZJRzVEYUhJZ1BpQTBOeUFtSmlCdVEyaHlJRHdnTlRnZ1AxeHVYSFJjZEc1RGFISWdLeUEwWEc1Y2RGeDBPaUJ1UTJoeUlEMDlQU0EwTXlBL1hHNWNkRngwTmpKY2JseDBYSFE2SUc1RGFISWdQVDA5SURRM0lEOWNibHgwWEhRMk0xeHVYSFJjZERwY2REQTdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFUmxZMjlrWlNCaVlYTmxOalFnYzNSeWFXNW5JSFJ2SUZWSmJuUTRRWEp5WVhsY2JpQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdjMEpoYzJVMk5GeDBYSFJpWVhObE5qUWdZMjlrWldRZ2MzUnlhVzVuWEc0Z0tpQkFjR0Z5WVcwZ0lIdHBiblI5SUc1Q2JHOWphM05UYVhwbElITnBlbVVnYjJZZ1lteHZZMnR6SUc5bUlHSjVkR1Z6SUhSdklHSmxJSEpsWVdRdUlFOTFkSEIxZENCaWVYUmxRWEp5WVhrZ2JHVnVaM1JvSUhkcGJHd2dZbVVnWVNCdGRXeDBhWEJzWlNCdlppQjBhR2x6SUhaaGJIVmxMbHh1SUNvZ1FISmxkSFZ5YmlCN1ZXbHVkRGhCY25KaGVYMWNkRngwWEhSY2RIUmhZaUJ2WmlCa1pXTnZaR1ZrSUdKNWRHVnpYRzRnS2k5Y2JuWmhjaUJpWVhObE5qUkVaV05VYjBGeWNpQTlJR1oxYm1OMGFXOXVLSE5DWVhObE5qUXNJRzVDYkc5amEzTlRhWHBsS1NCN1hHNWNkSFpoY2x4dVhIUnpRalkwUlc1aklEMGdjMEpoYzJVMk5DNXlaWEJzWVdObEtDOWJYa0V0V21FdGVqQXRPVnhjSzF4Y0wxMHZaeXdnWENKY0lpa3NJRzVKYmt4bGJpQTlJSE5DTmpSRmJtTXViR1Z1WjNSb0xGeHVYSFJ1VDNWMFRHVnVJRDBnYmtKc2IyTnJjMU5wZW1VZ1B5Qk5ZWFJvTG1ObGFXd29LRzVKYmt4bGJpQXFJRE1nS3lBeElENCtJRElwSUM4Z2JrSnNiMk5yYzFOcGVtVXBJQ29nYmtKc2IyTnJjMU5wZW1VZ09pQnVTVzVNWlc0Z0tpQXpJQ3NnTVNBK1BpQXlMRnh1WEhSaWRXWm1aWElnUFNCdVpYY2dRWEp5WVhsQ2RXWm1aWElvYms5MWRFeGxiaWtzSUhSaFFubDBaWE1nUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdabVpYSXBPMXh1WEc1Y2RHWnZjaUFvZG1GeUlHNU5iMlF6TENCdVRXOWtOQ3dnYmxWcGJuUXlOQ0E5SURBc0lHNVBkWFJKWkhnZ1BTQXdMQ0J1U1c1SlpIZ2dQU0F3T3lCdVNXNUpaSGdnUENCdVNXNU1aVzQ3SUc1SmJrbGtlQ3NyS1NCN1hHNWNkRngwYmsxdlpEUWdQU0J1U1c1SlpIZ2dKaUF6T3lBdktpQnVJRzF2WkNBMElDb3ZYRzVjZEZ4MGJsVnBiblF5TkNCOFBTQmlOalJVYjFWcGJuUTJLSE5DTmpSRmJtTXVZMmhoY2tOdlpHVkJkQ2h1U1c1SlpIZ3BLU0E4UENBeE9DQXRJRFlnS2lCdVRXOWtORHRjYmx4MFhIUnBaaUFvYmsxdlpEUWdQVDA5SURNZ2ZId2dia2x1VEdWdUlDMGdia2x1U1dSNElEMDlQU0F4S1NCN1hHNWNkRngwWEhSbWIzSWdLRzVOYjJReklEMGdNRHNnYmsxdlpETWdQQ0F6SUNZbUlHNVBkWFJKWkhnZ1BDQnVUM1YwVEdWdU95QnVUVzlrTXlzckxDQnVUM1YwU1dSNEt5c3BJSHRjYmx4MFhIUmNkRngwZEdGQ2VYUmxjMXR1VDNWMFNXUjRYU0E5SUc1VmFXNTBNalFnUGo0K0lDZ3hOaUErUGo0Z2JrMXZaRE1nSmlBeU5Da2dKaUF5TlRVN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSdVZXbHVkREkwSUQwZ01EdGNibHgwWEhSOVhHNWNkSDFjYmx4MEx5OGdZMjl1YzI5c1pTNXNiMmNvWENKMU9HbHVkQ0E2SUZ3aUswcFRUMDR1YzNSeWFXNW5hV1o1S0hSaFFubDBaWE1wS1R0Y2JseDBjbVYwZFhKdUlHSjFabVpsY2p0Y2JuMDdYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dklDQWdTVzUwWlhKbVlXTmxJR1oxYm1OMGFXOXVjeUFnSUM4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dVhHNHZLaXBjYmlvZ1EyOXVkbVZ5ZENCaWRXWm1aWElnWTI5a1pXUWdhVzRnWW1GelpUWTBJR0Z1WkNCamIyNTBZV2x1YVc1bklHNTFiV0psY25NZ1kyOWtaV1FnWW5sY2Jpb2dZbmwwWlVOdlpHbHVaeUJpZVhSbGN5QnBiblJ2SUdGeWNtRjVYRzRxSUVCd1lYSmhiU0JpZFdabVpYSWdhVzRnWW1GelpUWTBYRzRxSUVCd1lYSmhiU0JpZVhSbFEyOWthVzVuSUc1MWJXSmxjaUJ2WmlCaWVYUmxjeUJtYjNJZ1pXRmphQ0J1ZFcxaVpYSWdLRFFnYjNJZ09DbGNiaW9nUUhKbGRIVnliaUJoY25KaGVTQnZaaUJtYkc5aGRDQW9NeklnYjNJZ05qUXBMaUJ1ZFd4c0lHbG1JR052ZFd4a0lHNXZkQ0JqYjI1MlpYSjBMbHh1S2k5Y2JrSmhjMlUyTkVOdlpHbHVaeTV3Y205MGIzUjVjR1V1Wm5KdmJTQTlJR1oxYm1OMGFXOXVLR1JoZEdFcElIdGNibHgwZG1GeUlHSjVkR1ZEYjJScGJtY2dQU0JrWVhSaExtSTdYRzVjYmx4MEx5b2dZMmhsWTJzZ1lubDBaU0JqYjJScGJtY2dLaTljYmx4MGFXWW9ZbmwwWlVOdlpHbHVaeUFoUFQwZ05DQW1KaUJpZVhSbFEyOWthVzVuSUNFOVBTQTRLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHNTFiR3c3WEc1Y2RIMWNibHh1WEhRdktpQmtaV052WkdVZ1pHRjBZU0IwYnlCaGNuSmhlU0J2WmlCaWVYUmxJQ292WEc1Y2RIWmhjaUJpZFdZZ1BTQmlZWE5sTmpSRVpXTlViMEZ5Y2loa1lYUmhMbVFzSUdSaGRHRXVZaWs3WEc1Y2RDOHFJSEJoY25ObElHUmhkR0VnZEc4Z1pteHZZWFFnWVhKeVlYa2dLaTljYmx4MGRtRnlJR1pCY25KaGVUMXVkV3hzTzF4dVhIUnpkMmwwWTJnb1pHRjBZUzVpS1NCN1hHNWNkR05oYzJVZ05EcGNibHgwWEhSbVFYSnlZWGtnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0dKMVppazdYRzVjZEZ4MFluSmxZV3M3WEc1Y2RHTmhjMlVnT0RwY2JseDBYSFJtUVhKeVlYa2dQU0J1WlhjZ1JteHZZWFEyTkVGeWNtRjVLR0oxWmlrN1hHNWNkRngwWW5KbFlXczdYRzVjZEdSbFptRjFiSFE2WEc1Y2RGeDBZMjl1YzI5c1pTNXNiMmNvWENKVmJtVjRjR1ZqZEdWa0lHSjVkR1ZEYjJScGJtY2hJRk5vYjNWc1pDQnViM1FnYUdGd2NHVnVJU0ZjSWlrN1hHNWNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkSDFjYmx4MEx5b2djR0Z5YzJVZ1prRnljbUY1SUdsdWRHOGdibTl5YldGc0lHRnljbUY1SUNvdlhHNWNkSFpoY2lCMFlXSWdQU0JiWFM1emJHbGpaUzVqWVd4c0tHWkJjbkpoZVNrN1hHNWNibHgwYVdZb1pHRjBZUzV6SUNFOVBTQjBZV0l1YkdWdVozUm9LU0I3WEc1Y2RGeDBZMjl1YzI5c1pTNXNiMmNvWENKVGFYcGxJRzFwYzIxaGRHTm9JSGRvWlc0Z1pHVmpiMlJwYm1jZ0lWd2lLVHRjYmx4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmx4MGZWeHVYSFJ5WlhSMWNtNGdkR0ZpTzF4dWZUdGNibHh1THlvcVhHNHFJRU52Ym5abGNuUWdZWEp5WVhrZ1kyOXVkR0ZwYm1sdVp5QnVkVzFpWlhKeklHTnZaR1ZrSUdKNUlHSjVkR1ZEYjJScGJtY2dZbmwwWlhNZ2FXNTBieUJpZFdabVpYSWdZMjlrWldRZ2FXNGdZbUZ6WlRZMFhHNHFJRUJ3WVhKaGJTQmNkSHRCY25KaGVUeEdiRzloZEQ1OUlGeDBZWEp5WVhrZ2IyWWdabXh2WVhRZ0tETXlJRzl5SURZMElHSnBkSE1wWEc0cUlFQndZWEpoYlNCY2RIdHBiblJsWjJWeWZTQmNkR0o1ZEdWRGIyUnBibWNnYm5WdFltVnlJRzltSUdKNWRHVnpJR1p2Y2lCbFlXTm9JR1pzYjJGMElDZzBJRzl5SURncFhHNHFJRUJ5WlhSMWNtNGdJRngwZTFOMGNtbHVaMzBnWEhSaWRXWm1aWElnYVc0Z1ltRnpaVFkwTGlCdWRXeHNJR2xtSUdOdmRXeGtJRzV2ZENCamIyNTJaWEowTGx4dUtpOWNia0poYzJVMk5FTnZaR2x1Wnk1d2NtOTBiM1I1Y0dVdWRHOGdQU0JtZFc1amRHbHZiaWhoY25KaGVTd2dZbmwwWlVOdlpHbHVaeWtnZTF4dVhIUXZLaUJqYUdWamF5QmllWFJsSUdOdlpHbHVaeUFxTDF4dVhIUnBaaWhpZVhSbFEyOWthVzVuSUNFOVBTQTBJQ1ltSUdKNWRHVkRiMlJwYm1jZ0lUMDlJRGdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBmVnh1WEc1Y2RDOHFLaW9nWTJGelpTQkJjbkpoZVVKMVptWmxjaUFxS2lvdlhHNWNkSFpoY2lCaWRXWm1aWElnUFNCdVpYY2dRWEp5WVhsQ2RXWm1aWElvWVhKeVlYa3ViR1Z1WjNSb0ttSjVkR1ZEYjJScGJtY3BPMXh1WEhSemQybDBZMmdvWW5sMFpVTnZaR2x1WnlrZ2UxeHVYSFJqWVhObElEUTZYRzVjZEZ4MGRtRnlJR0oxWmpNeUlEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaGlkV1ptWlhJcE8xeHVYSFJjZEdKMVpqTXlMbk5sZENoaGNuSmhlU2s3WEc1Y2RGeDBZbkpsWVdzN1hHNWNkR05oYzJVZ09EcGNibHgwWEhSMllYSWdZblZtTmpRZ1BTQnVaWGNnUm14dllYUTJORUZ5Y21GNUtHSjFabVpsY2lrN1hHNWNkRngwWW5WbU5qUXVjMlYwS0dGeWNtRjVLVHRjYmx4MFhIUmljbVZoYXp0Y2JseDBmVnh1WEhSMllYSWdZblZtWmtOb1lYSWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGlkV1ptWlhJcE8xeHVYSFIyWVhJZ1luVm1aa05vWVhKRGIyUmxaQ0E5SUc1bGR5QkJjbkpoZVNoaWRXWm1RMmhoY2k1c1pXNW5kR2dwTzF4dVhIUm1iM0lvZG1GeUlHNGdQVEE3SUc0OFluVm1aa05vWVhJdWJHVnVaM1JvT3lCdUt5c3BJSHRjYmx4MFhIUmlkV1ptUTJoaGNrTnZaR1ZrVzI1ZElEMGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hpZFdabVEyaGhjbHR1WFNrN1hHNWNkSDFjYmx4MGRtRnlJSE4wY2lBOUlHNWxkeUJUZEhKcGJtY29ZblZtWmtOb1lYSkRiMlJsWkM1cWIybHVLQ2NuS1NrN1hHNWNkSFpoY2lCaU5qUkNkV1ptSUQwZ1ltRnpaVFkwTG1WdVkyOWtaU2h6ZEhJcE8xeHVYSFJ5WlhSMWNtNGdlMXh1WEhSY2RIUTZJQ2RpTmpRbkxDQXZLaUIwZVhCbElDb3ZYRzVjZEZ4MFlqb2dZbmwwWlVOdlpHbHVaeXdnTHlvZ1lubDBaVU52WkdsdVp5QXFMMXh1WEhSY2RHUTZJR0kyTkVKMVptWXNJQzhxSUdSaGRHRWdLaTljYmx4MFhIUnpPaUJoY25KaGVTNXNaVzVuZEdnZ0x5b2djMmw2WlNBcUwxeHVYSFI5TzF4dWZUdGNibHh1WEc1Y2JseHVMeW9xWEc0Z0tpQk5ZVzVoWjJWdFpXNTBJRzltSUdOdmJXMGdaVzVqYjJScGJtZGNiaUFxSUNvdlhHNW1kVzVqZEdsdmJpQkRiMlJwYm1kSVlXNWtiR1Z5S0NsN1hHNWNkSFJvYVhNdVlqWTBJRDBnYm1WM0lFSmhjMlUyTkVOdlpHbHVaeWdwTzF4dVhIUjBhR2x6TG01dmJtVWdQU0J1WlhjZ1RtOURiMlJwYm1jb0tUdGNibHh1WEhSeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JseHVRMjlrYVc1blNHRnVaR3hsY2k1d2NtOTBiM1I1Y0dVdVpuSnZiU0E5SUdaMWJtTjBhVzl1S0dSaGRHRXBJSHRjYmx4MGFXWW9kSGx3Wlc5bUlHUmhkR0VnUFQwZ0ozVnVaR1ZtYVc1bFpDY2dmSHdnWkdGMFlUMDliblZzYkNsY2JseDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBjM2RwZEdOb0tHUmhkR0V1ZENrZ2UxeHVYSFJqWVhObElDZGlOalFuT2x4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1JMk5DNW1jbTl0S0dSaGRHRXBPMXh1WEhSa1pXWmhkV3gwT2x4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG01dmJtVXVabkp2YlNoa1lYUmhLVHRjYmx4MGZWeHVmVHRjYmx4dVhHNURiMlJwYm1kSVlXNWtiR1Z5TG5CeWIzUnZkSGx3WlM1MGJ5QTlJR1oxYm1OMGFXOXVLR0Z5Y21GNUxDQjBlWEJsTENCaWVYUmxRMjlrYVc1bktTQjdYRzVjZEdsbUtIUjVjR1Z2WmlCaGNuSmhlU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNibHgwWEhSaGNuSmhlVDFiWVhKeVlYbGRPMXh1WEhSOVhHNWNkR2xtS0NGQmNuSmhlUzVwYzBGeWNtRjVLR0Z5Y21GNUtTbDdYRzVjZEZ4MFkyOXVjMjlzWlM1c2IyY29YQ0pEYjJScGJtZElZVzVrYkdWeUxuUnZJRzl1YkhrZ1lXTmpaWEIwY3lCaGNuSmhlU0FoWENJcE8xeHVYSFJjZEhKbGRIVnliaUJ1ZFd4c08xeHVYSFI5WEc1Y2JseDBjM2RwZEdOb0tIUjVjR1VwSUh0Y2JseDBZMkZ6WlNBbllqWTBKenBjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVpTmpRdWRHOG9ZWEp5WVhrc0lHSjVkR1ZEYjJScGJtY3BPMXh1WEhSallYTmxJQ2R1YnljNlhHNWNkR1JsWm1GMWJIUTZYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVibTl1WlM1MGJ5aGhjbkpoZVNrN1hHNWNkSDFjYm4wN1hHNWNibHh1THlvcUlFRmtaQ0JpWVhObE5qUWdhR0Z1Wkd4bGNpQjBieUJFYVhsaFUyVnNaV04wYjNJZ0tpb3ZYRzVFYVhsaFUyVnNaV04wYjNJdWNISnZkRzkwZVhCbExtVnVZMjlrWlNBOUlHWjFibU4wYVc5dUtDbDdYRzVjZEhKbGRIVnliaUJ1WlhjZ1EyOWthVzVuU0dGdVpHeGxjaWdwTzF4dWZUdGNiaUpkZlE9PSJdfQ==
